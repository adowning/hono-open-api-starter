This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: ./frontend/src/**, ./frontend/*.ts, ./frontend/*.json, ./backend/src/**, ./backend/*.ts, ./backend/*.json, ./backend/scripts/**, ./shared/**, GEMINI.md, tsconfig.json, package.json, openapi.config.js
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
./
  backend/
    scripts/
      seeds/
        json/
          games2.json
          products.json
        games.ts
        gamespins.ts
        operator.ts
        products.ts
        reset.ts
        users.ts
        vip.ts
      bot.ts
      db-test.ts
      download-launchers.mjs
      generate-manifest.mjs
      key.txt
      manual-decrypt.ts
      message.txt
      ocr.ts
      parse-games.js
      parser.js
      seed.ts
    src/
      db/
        migrations/
          meta/
            _journal.json
            0000_snapshot.json
          0000_complete_thanos.sql
          0001_create_enums.sql
          20250804_fix_wallets.sql
        schema/
          blackjack.ts
          core.ts
          enums.ts
          index.ts
          relations.bak.ts
          relations.ts
          rtg.ts
          schema.bak.ts
          schema.ts
          types.ts
          zod.ts
        index.ts
        schema-transformer.ts
      lib/
        cache.ts
        configure-open-api.ts
        constants.ts
        create-app.ts
        disconnect.manager.ts
        gameplay.ts
        jackpot.ts
        session.manager.ts
        types.ts
        websocket.service.ts
      middlewares/
        auth.middleware.ts
        pino-logger.ts
        session.middleware.ts
      routes/
        auth/
          auth.controller.ts
          auth.index.ts
          auth.router.ts
          auth.service.ts
        blackjack/
          utils/
            blackjack.utils.ts
            fair.ts
            message.schema.ts
            setting.ts
            socket.ts
            user.ts
          blackjack.handler.ts
          blackjack.schema.ts
          blackjack.service.ts
          types.ts
        common/
          notifications.handler.ts
        games/
          games.controller.ts
          games.router.ts
          games.service.ts
        gamespins/
          gamespins.controller.ts
          gamespins.router.ts
        operator/
          operator.controller.ts
          operator.router.ts
          operator.service.ts
        recordings/
          recordings.controller.ts
          recordings.router.ts
          recordings.service.ts
        redtiger/
          data.ts
          redtiger.controller.ts
          redtiger.router.ts
          redtiger.service.ts
        tasks/
          tasks.handlers.ts
          tasks.index.ts
          tasks.routes.ts
        updates/
          updates.controller.ts
          updates.router.ts
          updates.service.ts
        user/
          user.controller.ts
          user.handler.ts
          user.router.ts
          user.service.ts
        vip/
          vip.config.ts
          vip.controller.ts
          vip.router.ts
          vip.service.ts
        wallet/
          wallet.controller.ts
          wallet.router.ts
          wallet.service.ts
        websocket/
          chat.handler.ts
          proxy.handler.ts
          proxy.router.ts
          proxy.service.ts
          websocket.handler.ts
          websocket.router.ts
        gameService.route.ts
        index.route.ts
      utils/
        crypto.js
        crypto.test.ts
        lzw.ts
        misc.utils.ts
        nanoid.ts
      app.ts
      env.ts
      index.ts
    drizzle.config.ts
    package.json
    tsconfig.json
    vitest.config.ts
  frontend/
    src/
      assets/
        anim/
          avatar_xp.json
          fireBlue.json
          leadernew.json
          logo_shine.json
          part0.json
          part1.json
          part2.json
          rewards.json
          small_logo.json
          vault.json
          wheel.json
        logo.svg
        main.css
      components/
        auth/
          AuthPanel.vue
          LoginForm.vue
          RegisterForm.vue
        chat/
          ChatMessage.vue
          ChatMessageList.vue
          ChatPanel.vue
          CPanel.vue
          MessageList.vue
          types.d.ts
          types.ts
        common/
          Notification.vue
        icons/
          IconCommunity.vue
          IconDocumentation.vue
          IconEcosystem.vue
          IconSupport.vue
          IconTooling.vue
        ui/
          animated-circular-progressbar/
            AnimatedCircularProgressBar.vue
            index.ts
          flickering-grid/
            FlickeringGrid.vue
            index.d.ts
            index.ts
          SettingsButton.vue
        AdCarousel.vue
        AnimationLayer.vue
        AuroraText.vue
        CloseButton.vue
        FilterBar.vue
        Footer.vue
        FormCheckRadio.vue
        FormCheckRadioGroup.vue
        GameCarousel.vue
        GameLoader.vue
        GlassButton.vue
        GlobalLoading.vue
        Header.vue
        HelloWorld.vue
        LiveWin.vue
        LiveWinItem.vue
        Loading.vue
        Logo.vue
        OverlayLayer.vue
        PlayerAvatar.vue
        RtgGameLauncher.vue
        RtgGameLoader.vue
        SettingsView.vue
        SparklesSprite.vue
        SpriteAnimator.vue
        StarBurst.vue
        Starfield.vue
      composables/
        EventManager.ts
        useAnimationLayer.ts
        useImagePreloader.ts
        useRealtimeUpdates.ts
        useScreen.ts
      lib/
        utils.d.ts
        utils.ts
      router/
        index.ts
        interface.ts
      sdk/
        generated/
          client/
            client.ts
            index.ts
            types.ts
            utils.ts
          core/
            auth.ts
            bodySerializer.ts
            params.ts
            pathSerializer.ts
            types.ts
          client.gen.ts
          index.ts
          operator.gen.ts
          sdk.gen.ts
          types.gen.ts
        types/
          api.ts
          backend.d.ts
        api.ts
        auth.ts
        runtime.client.ts
        types.ts
      services/
        GameLauncher.ts
        websocket.service.ts
        ws.notifications.ts
        ws.user.ts
      stores/
        app.store.ts
        auth.store.ts
        chat.store.ts
        deposit.store.ts
        exception.ts
        game.store.ts
        gamespin.store.ts
        index.ts
        notification.store.ts
        vip.store.ts
      types/
        events.ts
        websocket.d.ts
        websocket.ts
      views/
        AboutView.vue
        HomeView.vue
        LoginView.vue
        RtgGame.vue
      App.vue
      auto-imports.d.ts
      components.d.ts
      declarations.d.ts
      image-preload-list.ts
      main.ts
      shims-vue.d.ts
      vite-env.d.ts
    capacitor.config.ts
    components.json
    env.d.ts
    openapi-ts.config.ts
    package.json
    tsconfig.json
    vite.config.ts
  shared/
    ws/
      contracts.ts
      envelope.ts
      protocol.ts
GEMINI.md
package.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="./backend/scripts/seeds/json/games2.json">
[
  {
    "id": "13505",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "AncientDiscoRTG",
    "title": "Ancient Disco",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13512",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BassBossRTG",
    "title": "Bass Boss",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13514",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BlazingClustersRTG",
    "title": "Blazing Clusters",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13503",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "CashOrNothingRTG",
    "title": "Cash Or Nothing",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13518",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BugsysBarRTG",
    "title": "Bugsys Bar",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13517",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BountyRaid2RTG",
    "title": "Bounty Raid2",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13516",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BloodSuckersMegaWaysRTG",
    "title": "Blood Suckers",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13515",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BlobstersClusterbusterRTG",
    "title": "Blobsters Clusterbuster",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13523",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "CirqueDeLaFortuneRTG",
    "title": "Cirque De LaFortune",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13522",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ChristmasMultihopsRTG",
    "title": "Christmas Multihops",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13521",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ChristmasMorningRTG",
    "title": "Christmas Morning",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13520",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "CashOrNothingRTG",
    "title": "Cash Or Nothing",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13527",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DiceDiceDiceRTG",
    "title": "Dice Dice Dice",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13528",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DivineWaysRTG",
    "title": "Divine Ways",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13526",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DesertLegendsSpinsRTG",
    "title": "Desert Legends Spins",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13525",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "6",
    "name": "CloverCrazeRTG",
    "title": "Clover Craze",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13531",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DragonsMirrorRTG",
    "title": "Dragons Mirror",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13532",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DynamiteRichesRTG",
    "title": "Dynamite Riches",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13533",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "EasyGoldRTG",
    "title": "Easy Gold",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13534",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "EmeraldDiamondRTG",
    "title": "Emerald Diamond",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13539",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GemsInfernoMegaWaysRTG",
    "title": "Gems Inferno",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13536",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "FaFaBabiesRTG",
    "title": "FaFa Babies",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13535",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "EuropeanRouletteRTG",
    "title": "European Roulette",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13537",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "FlodderRTG",
    "title": "Flodder",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13542",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GodOfWealthRTG",
    "title": "God Of Wealth",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13544",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GonzitasQuestRTG",
    "title": "Gonzitas Quest",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13540",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GetTheGoldInfinireelsRTG",
    "title": "Get TheGold",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13543",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GodsOfTroyRTG",
    "title": "Gods Of Troy",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13547",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "LastChanceSaloonRTG",
    "title": "LastChance Saloon",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13545",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "HappyApplesRTG",
    "title": "Happy Apples",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13548",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "LeprechaunsMagicRTG",
    "title": "Leprechauns Magic",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13546",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "JingleBellsRTG",
    "title": "Jingle Bells",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13554",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "PeggySweetsRTG",
    "title": "Peggy Sweets",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13550",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "LuckyEasterRTG",
    "title": "Lucky Easter",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13551",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "MagicGateRTG",
    "title": "Magic Gate",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13552",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "MonstersUnchainedRTG",
    "title": "Monsters Unchained",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13557",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ReelKingMegaRTG",
    "title": "Reel King",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13555",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "PersianFortuneRTG",
    "title": "Persian Fortune",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13556",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "RedDiamondRTG",
    "title": "Red Diamond",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13558",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SantaSpinsRTG",
    "title": "SantaSpins",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13562",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SpookyCarnivalRTG",
    "title": "SpookyCarnival",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13560",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SirensRichesRTG",
    "title": "SirensRiches",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13561",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SnowWildAndThe7FeaturesRTG",
    "title": "SnowWildAndThe7Features",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13563",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "Stage888RTG",
    "title": "Stage888",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13567",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SugarliciousEveryWayRTG",
    "title": "SugarliciousEveryWay",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13568",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SumoSpinsRTG",
    "title": "SumoSpins",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13565",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SteamSquadRTG",
    "title": "SteamSquad",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13566",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SugarMonsterRTG",
    "title": "SugarMonster",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13574",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "YearRoundRichesClusterbusterRTG",
    "title": "YearRoundRichesClusterbuster",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13573",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "WantedWildzExtremeRTG",
    "title": "WantedWildzExtreme",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13571",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "VaultCrackerMegaWaysRTG",
    "title": "VaultCrackerMegaWays",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13570",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "TreasureMineRTG",
    "title": "TreasureMine",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "12147",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "SpaceCatKA",
    "title": "Space Cat",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1053",
    "bids": "299",
    "statIn": "59.8000",
    "statOut": "47.4000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2021-09-08 03:00:25",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "9",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13239",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "SpaceCatKA",
    "title": "Space Cat",
    "shopId": "3",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1053",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2022-08-29 16:03:55",
    "updated_at": "2022-08-29 16:03:55",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13238",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "GoldenDragonKA",
    "title": "Golden Dragon",
    "shopId": "3",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1052",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2022-08-29 16:03:55",
    "updated_at": "2022-08-29 16:03:55",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13226",
    "developer": "cqnine",
    "type": "1",
    "vipLevel": "5",
    "name": "ParadiseCQ9",
    "title": "Paradise",
    "shopId": "3",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1040",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2022-08-29 16:03:55",
    "updated_at": "2022-08-29 16:03:55",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "12134",
    "developer": "cqnine",
    "type": "1",
    "vipLevel": "5",
    "name": "ParadiseCQ9",
    "title": "Paradise",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1040",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2021-09-08 03:00:25",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "7",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "11040",
    "developer": "cqnine",
    "type": "1",
    "vipLevel": "5",
    "name": "ParadiseCQ9",
    "title": "Paradise",
    "shopId": "0",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1040",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:11",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13589",
    "developer": "nolimit", "provider":"nolimit",
    "type": "slots",
    "vipLevel": "0",
    "name": "FireInTheHole2NLC",
    "title": "Fire In The Hole 2",
    "shopId": "1",
    "jpgId": "",
    "label": "1",
    "device": "",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "",
    "category_temp": "1",
    "original_id": "",
    "bids": "",
    "statIn": "",
    "statOut": "",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "8",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13591",
    "developer": "nolimit", "provider":"nolimit",
    "type": "slots",
    "vipLevel": "0",
    "name": "TheCryptNLC",
    "title": "The Crypt",
    "shopId": "1",
    "jpgId": "",
    "label": "1",
    "device": "",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "",
    "category_temp": "1",
    "original_id": "",
    "bids": "",
    "statIn": "",
    "statOut": "",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "8",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13590",
    "developer": "nolimit", "provider":"nolimit",
    "type": "slots",
    "vipLevel": "0",
    "name": "LandOfTheFreeNLC",
    "title": "Land of the Free",
    "shopId": "1",
    "jpgId": "",
    "label": "1",
    "device": "",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "",
    "category_temp": "1",
    "original_id": "",
    "bids": "",
    "statIn": "",
    "statOut": "",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "7",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "11052",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "GoldenDragonKA",
    "title": "Golden Dragon",
    "shopId": "0",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1052",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:11",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13588",
    "developer": "nolimit", "provider":"nolimit",
    "type": "slots",
    "vipLevel": "0",
    "name": "SanQuentinNLC",
    "title": "San Quentin",
    "shopId": "1",
    "jpgId": "",
    "label": "1",
    "device": "",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "",
    "category_temp": "1",
    "original_id": "",
    "bids": "",
    "statIn": "",
    "statOut": "",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "6",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "11053",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "SpaceCatKA",
    "title": "Space Cat",
    "shopId": "0",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1053",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:11",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "12146",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "GoldenDragonKA",
    "title": "Golden Dragon",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1052",
    "bids": "1033",
    "statIn": "9213.0200",
    "statOut": "4410.4000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2021-09-08 03:00:25",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13564",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "StarsLuckRTG",
    "title": "StarsLuck",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13529",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DoggyRichesMegaWaysRTG",
    "title": "DoggyRichesMegaWays",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13572",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ViralSpiralRTG",
    "title": "ViralSpiral",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13569",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "TheWildHatterRTG",
    "title": "TheWildHatter",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13530",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DragonsFireMegaWaysRTG",
    "title": "DragonsFireMegaWays",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13559",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SeaBoatAdventureRTG",
    "title": "SeaBoatAdventure",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13553",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "NightmareFamilyMegaWaysRTG",
    "title": "NightmareFamilyMegaWays",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13549",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "LondonTubeRTG",
    "title": "LondonTube",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13541",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GigaBlastRTG",
    "title": "GigaBlast",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13511",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "AtlantisRTG",
    "title": "Atlantis",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13538",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "FortuneFestRTG",
    "title": "FortuneFest",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13524",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ClashOfTheBeastsRTG",
    "title": "ClashOfTheBeasts",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13519",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "CaseClosedRTG",
    "title": "CaseClosed",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "1070",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "HitInVegasNG",
    "title": "Hit In Vegas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1070",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1071",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "FortuneCashNG",
    "title": "Fortune Cash",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1071",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1072",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CleosHeartNG",
    "title": "Cleos Heart",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1072",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1073",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Jungle2NG",
    "title": "Jungle 2",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1073",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1074",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BananasNG",
    "title": "Bananas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1074",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1075",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileNG",
    "title": "Book Of Nile",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1075",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1076",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "ZenZenCashNG",
    "title": "Zen Zen Cash",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1076",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1077",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "WildBuffaloNG",
    "title": "Wild Buffalo",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1077",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1078",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CrazyScientistNG",
    "title": "Crazy Scientist",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1078",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1079",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "FrostyFruitsNG",
    "title": "Frosty Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1080",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CloverStonesNG",
    "title": "Clover Stones",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1081",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "MMALegendsNG",
    "title": "MMA Legends",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1082",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "JackpotSevensNG",
    "title": "Jackpot Sevens",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1083",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "WolfReelsNG",
    "title": "Wolf Reels",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1084",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "MagicTreeNG",
    "title": "Magic Tree",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1085",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "SpaceRocksNG",
    "title": "Space Rocks",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1086",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Royal40FruitsNG",
    "title": "Royal 40 Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1087",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "DiscoFruitsNG",
    "title": "Disco Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1088",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "AfricanKingNG",
    "title": "African King",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1089",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "QuickCashFruitsNG",
    "title": "Quick Cash Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1090",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileRevengeNG",
    "title": "Book Of Nile Revenge",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1091",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileLostChapterNG",
    "title": "Book Of NileLost Chapter",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1092",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Royal20FruitsNG",
    "title": "Royal 20 Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1093",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "RedHotChilli7sNG",
    "title": "Red Hot Chilli 7s",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1094",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "GoldenFruitsNG",
    "title": "Golden Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2162",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "HitInVegasNG",
    "title": "Hit In Vegas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1648125946;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1648126007;s:7:\\\"payload\\\";i:188;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1070",
    "bids": "82",
    "statIn": "697.2000",
    "statOut": "41.1800",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-23 13:47:40",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2163",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "FortuneCashNG",
    "title": "Fortune Cash",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1071",
    "bids": "84",
    "statIn": "375.4000",
    "statOut": "82.3700",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-23 13:47:14",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2164",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CleosHeartNG",
    "title": "Cleos Heart",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1072",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-01-28 05:19:19",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2165",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Jungle2NG",
    "title": "Jungle 2",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1073",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2021-10-24 21:53:02",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2166",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BananasNG",
    "title": "Bananas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1074",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-01-16 15:33:17",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2167",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileNG",
    "title": "Book Of Nile",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1647675708;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1647675949;s:7:\\\"payload\\\";i:198;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1075",
    "bids": "88",
    "statIn": "366.8000",
    "statOut": "143.1000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-18 08:45:49",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2168",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "ZenZenCashNG",
    "title": "Zen Zen Cash",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645875786;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645875803;s:7:\\\"payload\\\";i:198;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1076",
    "bids": "28",
    "statIn": "9.6000",
    "statOut": "2.2400",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-02-25 12:43:24",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2169",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "WildBuffaloNG",
    "title": "Wild Buffalo",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1077",
    "bids": "166",
    "statIn": "602.0000",
    "statOut": "142.8000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-01 09:12:09",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2170",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CrazyScientistNG",
    "title": "Crazy Scientist",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1648126090;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1648126157;s:7:\\\"payload\\\";i:185;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1078",
    "bids": "28",
    "statIn": "2000.6000",
    "statOut": "64.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-23 13:49:17",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2171",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "FrostyFruitsNG",
    "title": "Frosty Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-03 11:08:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2172",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CloverStonesNG",
    "title": "Clover Stones",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1080",
    "bids": "2",
    "statIn": "2.0000",
    "statOut": "1.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-23 13:47:08",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2173",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "MMALegendsNG",
    "title": "MMA Legends",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1081",
    "bids": "4",
    "statIn": "1.9000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-03 11:14:01",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2174",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "JackpotSevensNG",
    "title": "Jackpot Sevens",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1082",
    "bids": "148",
    "statIn": "937.4000",
    "statOut": "133.6000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-14 14:56:07",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2175",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "WolfReelsNG",
    "title": "Wolf Reels",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1083",
    "bids": "9",
    "statIn": "3.6000",
    "statOut": "1.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-24 23:29:07",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2176",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "MagicTreeNG",
    "title": "Magic Tree",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1648222596;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1648222634;s:7:\\\"payload\\\";i:191;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1084",
    "bids": "11",
    "statIn": "3.3000",
    "statOut": "0.1400",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-24 16:37:15",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2177",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "SpaceRocksNG",
    "title": "Space Rocks",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1085",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2021-10-24 21:08:55",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2178",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Royal40FruitsNG",
    "title": "Royal 40 Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1086",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-01-11 10:15:03",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2179",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "DiscoFruitsNG",
    "title": "Disco Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1087",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2021-10-24 21:12:02",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2180",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "AfricanKingNG",
    "title": "African King",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1648247474;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1648247481;s:7:\\\"payload\\\";i:197;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1088",
    "bids": "3",
    "statIn": "0.9000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-24 23:31:24",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2181",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "QuickCashFruitsNG",
    "title": "Quick Cash Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645779336;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645779412;s:7:\\\"payload\\\";i:173;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1089",
    "bids": "344",
    "statIn": "936.2000",
    "statOut": "556.4800",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-02-24 09:56:52",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2182",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileRevengeNG",
    "title": "Book Of Nile Revenge",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1090",
    "bids": "1",
    "statIn": "2.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-04 17:19:07",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2183",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileLostChapterNG",
    "title": "Book Of NileLost Chapter",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1091",
    "bids": "50",
    "statIn": "141.2000",
    "statOut": "54.4000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-23 13:47:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2184",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Royal20FruitsNG",
    "title": "Royal 20 Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1092",
    "bids": "22",
    "statIn": "9.2000",
    "statOut": "2.6000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-02-14 22:41:50",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2185",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "RedHotChilli7sNG",
    "title": "Red Hot Chilli 7s",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1093",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2021-09-08 03:00:26",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2186",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "GoldenFruitsNG",
    "title": "Golden Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1094",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-05 03:25:05",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "647",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "SpaceWarsNET",
    "title": "Space Wars",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "647",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "648",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "WildWaterNET",
    "title": "Wild Water",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "648",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-26 17:03:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "649",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "StarBurstNET",
    "title": "Star Burst",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "649",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "650",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FlowersNET",
    "title": "Flowers",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "650",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "651",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FlowersChristmasNET",
    "title": "Flowers Christmas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20, 1.00, 5.00, 10.00, 20.00",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "12,35",
    "original_id": "651",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2022-03-03 11:38:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "652",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "DazzleMeNET",
    "title": "Dazzle Me",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "652",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "653",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FruitShopChristmasNET",
    "title": "Fruit Shop Christmas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "653",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "654",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FruitShopNET",
    "title": "Fruit Shop",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "654",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "655",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GoBananasNET",
    "title": "Go Bananas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "655",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "656",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "LightsNET",
    "title": "Lights",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "656",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "876",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FortuneRangersNET",
    "title": "Fortune Rangers",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "876",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "877",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "CreatureFromTheBlackLagoonNET",
    "title": "Creature From The Black Lagoon",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "877",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "878",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "WingsOfRichesNET",
    "title": "Wings Of Riches",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "878",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-26 17:03:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "879",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "ReelRush2NET",
    "title": "Reel Rush 2",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "879",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "880",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "TheWolfsBaneNET",
    "title": "The Wolfs Bane",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "880",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "881",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GrandSpinnSuperpotNET",
    "title": "Grand Spinn Superpot",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "881",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "882",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "TurnYourFortuneNET",
    "title": "Turn Your Fortune",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "882",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "883",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "JumanjiNET",
    "title": "Jumanji",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "883",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "884",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "NarcosNET",
    "title": "Narcos",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "884",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "885",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "VikingsNET",
    "title": "Vikings",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "885",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1006",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "SantaVSRudolphNET",
    "title": "Santa vs Rudolph",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1006",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1007",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GoldenGrimoireNET",
    "title": "Golden Grimoire",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1007",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1008",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "HalloweenJackNET",
    "title": "Halloween Jack",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1008",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1741",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "SpaceWarsNET",
    "title": "Space Wars",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "647",
    "bids": "3",
    "statIn": "1.2000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-02-16 21:02:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1742",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "WildWaterNET",
    "title": "Wild Water",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "648",
    "bids": "12",
    "statIn": "2.4000",
    "statOut": "1.0300",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-02-16 19:31:36",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1743",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "StarBurstNET",
    "title": "Star Burst",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "649",
    "bids": "1",
    "statIn": "0.1000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-02-16 21:00:37",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1744",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FlowersNET",
    "title": "Flowers",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "650",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-10-24 21:57:05",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1745",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FlowersChristmasNET",
    "title": "Flowers Christmas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20, 1.00, 5.00, 10.00, 20.00",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "12,35",
    "original_id": "651",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-03-03 11:38:48",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1746",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "DazzleMeNET",
    "title": "Dazzle Me",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1644962507;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1644962507;s:7:\\\"payload\\\";i:199;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "652",
    "bids": "1",
    "statIn": "0.2000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-02-14 23:01:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1747",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FruitShopChristmasNET",
    "title": "Fruit Shop Christmas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "653",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-09-08 03:00:23",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1748",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FruitShopNET",
    "title": "Fruit Shop",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "654",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-09-08 03:00:23",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1749",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GoBananasNET",
    "title": "Go Bananas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "655",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-10-24 21:57:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1750",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "LightsNET",
    "title": "Lights",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "656",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-09-08 03:00:23",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1970",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FortuneRangersNET",
    "title": "Fortune Rangers",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "876",
    "bids": "1",
    "statIn": "0.2000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-18 16:53:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1971",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "CreatureFromTheBlackLagoonNET",
    "title": "Creature From The Black Lagoon",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1644962297;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1644962297;s:7:\\\"payload\\\";i:199;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "877",
    "bids": "5",
    "statIn": "30.4000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-14 22:58:17",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1972",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "WingsOfRichesNET",
    "title": "Wings Of Riches",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "878",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 18:09:53",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1973",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "ReelRush2NET",
    "title": "Reel Rush 2",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "879",
    "bids": "2",
    "statIn": "0.4000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 19:38:14",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1974",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "TheWolfsBaneNET",
    "title": "The Wolfs Bane",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1647475294;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1647476107;s:7:\\\"payload\\\";i:0;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "880",
    "bids": "225",
    "statIn": "27617.5000",
    "statOut": "8.8000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-03-16 01:15:34",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1975",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GrandSpinnSuperpotNET",
    "title": "Grand Spinn Superpot",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645170136;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645170180;s:7:\\\"payload\\\";i:178;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "881",
    "bids": "22",
    "statIn": "0.4400",
    "statOut": "0.0600",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-17 08:43:00",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1976",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "TurnYourFortuneNET",
    "title": "Turn Your Fortune",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "882",
    "bids": "7",
    "statIn": "1.4000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 21:00:29",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1977",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "JumanjiNET",
    "title": "Jumanji",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "883",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 18:22:46",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1978",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "NarcosNET",
    "title": "Narcos",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "884",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-14 22:59:52",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1979",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "VikingsNET",
    "title": "Vikings",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645072659;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645072697;s:7:\\\"payload\\\";i:194;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "885",
    "bids": "19",
    "statIn": "4.2000",
    "statOut": "0.1600",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 05:38:17",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2100",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "SantaVSRudolphNET",
    "title": "Santa vs Rudolph",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1006",
    "bids": "2",
    "statIn": "2.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-30 15:30:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2101",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GoldenGrimoireNET",
    "title": "Golden Grimoire",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645030529;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645030547;s:7:\\\"payload\\\";i:197;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1007",
    "bids": "3",
    "statIn": "3.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-02-15 17:55:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2102",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "HalloweenJackNET",
    "title": "Halloween Jack",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1008",
    "bids": "14",
    "statIn": "6.0000",
    "statOut": "0.1000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-16 00:00:39",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  }
]
</file>

<file path="./backend/scripts/seeds/json/products.json">
[
  {
    "title": "Package One",
    "productType": "DEPOSIT_PACKAGE",
    "amountToReceiveInCents": 500,
    "totalDiscountInCents": 300,
    "bonusSpins": 1,
    "isPromo": false,
    "description": "blah blah ",
    "url": "https://nnzmufhldbsvvztlrrau.supabase.co/storage/v1/object/public/products/gems1.png",
    "priceInCents": 200
  },
  {
    "title": "Package Two",
    "productType": "DEPOSIT_PACKAGE",
    "amountToReceiveInCents": 1000,
    "totalDiscountInCents": 500,
    "bonusSpins": 2,
    "isPromo": false,
    "description": "blah blah ",
    "url": "https://nnzmufhldbsvvztlrrau.supabase.co/storage/v1/object/public/products/gems1.png",
    "priceInCents": 500
  },
  {
    "title": "Package Three",
    "productType": "DEPOSIT_PACKAGE",
    "amountToReceiveInCents": 1500,
    "totalDiscountInCents": 500,
    "bonusSpins": 3,
    "isPromo": false,
    "description": "blah blah ",
    "url": "https://nnzmufhldbsvvztlrrau.supabase.co/storage/v1/object/public/products/gems1.png",
    "priceInCents": 1000
  },
  {
    "title": "Package Four",
    "productType": "DEPOSIT_PACKAGE",
    "amountToReceiveInCents": 2000,
    "totalDiscountInCents": 500,
    "bonusSpins": 5,
    "isPromo": false,
    "description": "blah blah ",
    "url": "https://nnzmufhldbsvvztlrrau.supabase.co/storage/v1/object/public/products/gems1.png",
    "priceInCents": 1500
  }
]
</file>

<file path="./backend/scripts/seeds/games.ts">
/* eslint-disable ts/ban-ts-comment */
/**
 * HOW TO USE THIS SCRIPT:
 * --------------------------
 * 1.  **Save the file**: Save this code as `seed.ts` in a `scripts` directory at the root of your Drizzle project.
 *
 * 2.  **Place JSON data**: Make sure the `games2.json` file is also in the `scripts` directory.
 *
 * 3.  **Check Dependencies**: Ensure you have `drizzle-orm`, `postgres`, and `dotenv` installed. If not, run:
 * npm install drizzle-orm postgres dotenv
 * npm install -D @types/node ts-node
 *
 * 4.  **Environment Variables**: The script uses `dotenv` to load database credentials from a `.env` file in your project root.
 * Your `.env` file should look something like this:
 *
 * DATABASE_URL="postgres://YOUR_USER:YOUR_PASSWORD@YOUR_HOST:YOUR_PORT/YOUR_DB"
 *
 * 5.  **Adjust Paths**: The script assumes your Drizzle schema file is located at `../src/db/schema.ts` relative to the `scripts` directory.
 * If your schema file is located elsewhere, you'll need to update the import path for `gamesTable`.
 *
 * 6.  **Run the script**: Execute the script from your project's root directory using ts-node:
 * npx ts-node scripts/seed.ts
 *
 * --------------------------
 */

import type { NodePgDatabase } from "drizzle-orm/node-postgres";

import * as fs from "node:fs";
import * as path from "node:path";
import "dotenv/config";

import type * as schema from "../../src/db/schema";

import { Game as gamesTable } from "../../src/db/schema"; // Adjust this path to your actual schema file
// Type definition for the raw game data from the JSON file.
interface RawGame {
  id: string;
  developer: string;
  provider?: string;
  type: string;
  name: string;
  title: string;
  gamebank: string;
  statIn?: string;
  statOut?: string;
  [key: string]: any; // Allows for other properties
}

// Main function to run the seeding process
export async function seedGames(db: NodePgDatabase<typeof schema>) { // Check for the DATABASE_URL environment variable.
  // Create a database connection using postgres.js

  console.log("🌱 Seeding database...");

  // Construct the path to the JSON file
  const jsonPath = path.join(__dirname, "/json/games2.json");

  // Read and parse the JSON file
  const gamesData: RawGame[] = JSON.parse(fs.readFileSync(jsonPath, "utf-8"));

  // Transform the raw JSON data to match the Drizzle schema.
  const transformedGames = gamesData.map((game) => {
    // Determine the category. 'fish' seems to be indicated by gamebank.
    // Default to 'slots' if type is 'slots', otherwise 'other'.
    const category = game.gamebank;

    // Use provider if available, otherwise fallback to developer.
    const developer = game.provider || game.developer;

    return {
      ...game,
      name: game.name,
      title: game.title,
      // Store the original, unaltered JSON object for reference.
      goldsvetData: game,
      // Map the category based on the logic above.
      category,
      // The schema requires tags, so we provide an empty array as a default.
      tags: [game.type],
      // Use the provider name from the data.
      developer: developer.toLowerCase(),
      // The `id` from the JSON seems to be the provider's unique ID for the game.
      providerId: game.id,
      // Parse statIn and statOut as numbers, defaulting to 0 if invalid or missing.
      totalWagered: Math.floor(Number.parseFloat(game.statIn || "0")),
      totalWon: Math.floor(Number.parseFloat(game.statOut || "0")),
    };
  });

  console.log(`✅ Transformed ${transformedGames.length} games for seeding.`);

  try {
    // Insert the transformed data into the 'games' table.
    // Drizzle ORM's insert method can handle an array of objects directly.
    // @ts-ignore
    await db.insert(gamesTable).values(transformedGames).onConflictDoNothing();

    console.log("✅ Database seeded successfully!");
  }
  catch (error) {
    console.error("❌ Error seeding database:", error);
  }
}

// Execute the main function and handle any top-level errors.

// /* eslint-disable ts/ban-ts-comment */
// import type { NodePgDatabase } from "drizzle-orm/node-postgres";

// import type * as schema from "../../src/db";

// import { games } from "../../src/db";
// import * as rawgames from "./json/games2.json";

// const GAMES: any[] = [];
// // @ts-ignore
// for (const game of rawgames.default) {
//   game.category = game.gamebank || game.type;
//   game.tags = game.gamebank || game.type;
//   GAMES.push(game);
// }
// // rawgames.forEach((game) => {
// // })
// export async function seedGames(db: NodePgDatabase<typeof schema>) {
//   console.log("🎮 Seeding games and categories...");

//   // const createdCategories = await db
//   //   .insert(gameCategories)
//   //   .values(CATEGORIES)
//   //   .returning();

//   const gamesToInsert = GAMES.map(game => ({
//     ...game,
//     // categoryId: rand(createdCategories).id,
//   }));
//   console.log(gamesToInsert);
//   // await db.insert(games).values(GAMES).onConflictDoNothing();

//   console.log("✅ Games and categories seeded.");
// }
</file>

<file path="./backend/scripts/seeds/gamespins.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";

import { rand, randFloat, randNumber, randPastDate } from "@ngneat/falso";

import type * as schema from "../../src/db/schema";
// import type { GameSession } from "../../src/db";

import { AuthSession, Game, GameSession, GameSpin } from "../../src/db/schema";

export async function seedGameSpins(db: NodePgDatabase<typeof schema>) {
  console.log("🔄 Seeding game sessions and spins...");

  const allAuthSessions = await db.query.AuthSession.findMany();
  const allGames = await db.query.Game.findMany({
    columns: { id: true, name: true },
  });

  if (allAuthSessions.length === 0 || allGames.length === 0) {
    console.log("⚠️ Cannot seed game sessions without auth sessions and games. Skipping.");
    return;
  }

  const sessionsToInsert: (typeof GameSession.$inferInsert)[] = [];
  for (const authSession of allAuthSessions) {
    const sessionCount = randNumber({ min: 1, max: 5 });
    for (let i = 0; i < sessionCount; i++) {
      const createdAt = randPastDate({ years: 1 });

      const sessionData: typeof GameSession.$inferInsert = {
        userId: authSession.userId,
        authSessionId: authSession.id,
        gameId: rand(allGames).id,
        status: "COMPLETED",
        createdAt,
        endedAt: new Date(createdAt.getTime() + randNumber({ min: 60000, max: 3600000 })),
      };
      sessionsToInsert.push(sessionData);
    }
  }

  if (sessionsToInsert.length === 0) {
    console.log("ℹ️ No new game sessions to seed.");
    return;
  }

  console.log(`🌱 Creating ${sessionsToInsert.length} game sessions...`);
  const createdSessions = await db
    .insert(GameSession)
    .values(sessionsToInsert)
    .returning();

  const spinsToInsert: (typeof GameSpin.$inferInsert)[] = [];
  for (const session of createdSessions) {
    const spinCount = randNumber({ min: 5, max: 50 });
    const user = await db.query.User.findFirst({ where: (User, { eq }) => eq(User.id, session.userId) });
    const game = allGames.find(g => g.id === session.gameId);

    if (!user || !game)
      continue;

    for (let i = 0; i < spinCount; i++) {
      const wagerAmount = randFloat({ min: 0.1, max: 5, fraction: 2 });
      const grossWinAmount = rand([
        0,
        0,
        0,
        randFloat({ min: 0.01, max: wagerAmount * 100, fraction: 2 }),
      ]);

      spinsToInsert.push({
        playerName: user.username,
        gameName: game.name,
        spinData: { lines: 10, multiplier: grossWinAmount > 0 ? grossWinAmount / wagerAmount : 0 },
        grossWinAmount,
        wagerAmount,
        spinNumber: i + 1,
        playerAvatar: user.avatar,
        sessionId: session.id,
        userId: user.id,
        occurredAt: randPastDate({ years: 1 }),
      });
    }
  }

  if (spinsToInsert.length > 0) {
    await db.insert(GameSpin).values(spinsToInsert);
    console.log(`✅ Seeded ${spinsToInsert.length} game spins.`);
  }
  else {
    console.log("ℹ️  No new game spins to seed.");
  }
}
</file>

<file path="./backend/scripts/seeds/operator.ts">
/* eslint-disable ts/ban-ts-comment */
import type { NodePgDatabase } from "drizzle-orm/node-postgres";

import * as schema from "../../src/db/schema";

// This is the single, hardcoded operator for the entire system.
// Using a deterministic ID makes it easy to reference in other seeds.
const defaultOperator = {
  id: "clxjv0w2z0000356s1szacrqs",
  name: "Default Operator",
  operatorSecret: crypto.randomUUID(),
  balance: 10000,
  netRevenue: 0,
  operatorAccess: crypto.randomUUID(),
  callbackUrl: "https://example.com/callback",
  allowedIps: ["0.0.0.0/0"], // Allows all IPs for dev purposes
  acceptedPayments: ["INSTORE_CASH", "INSTORE_CARD"],
};

export async function seedOperator(db: NodePgDatabase<typeof schema>) {
  console.log("🏢 Seeding default operator...");

  // onConflictDoNothing prevents errors if the operator already exists.
  await db.insert(schema.Operator)
  // @ts-ignore
    .values(defaultOperator)
    .onConflictDoNothing();

  console.log("✅ Default operator seeded.");
  // Return the operator object so its ID can be used in other seeds.
  return defaultOperator;
}
</file>

<file path="./backend/scripts/seeds/products.ts">
import { NodePgDatabase } from 'drizzle-orm/node-postgres'
import * as schema from '../../src/db/schema'
import productsData from './json/products.json'

export async function seedProducts(
  db: NodePgDatabase<typeof schema>,
  operatorId: string
) {
  console.log('🛍️ Seeding products...')

  if (!operatorId) {
    throw new Error('An Operator ID is required to seed products.')
  }

  const productsToInsert = productsData.map((product) => ({
    ...product,
    id: `prod_${crypto.randomUUID()}`, // Ensure a unique ID for each product
    operatorId: operatorId, // Link each product to the default operator
    bonusTotalInCents: 0,
    bestValue: 0,
    discountInCents: 0,
    description: undefined,
    url: undefined,
  }))

  await db
    .insert(schema.Product)
    .values(productsToInsert)
    .onConflictDoNothing()

  console.log(`✅ ${productsData.length} products seeded.`)
}
</file>

<file path="./backend/scripts/seeds/reset.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";

import { sql } from "drizzle-orm";

import type * as schema from "../../src/db";

const tableNames = [
  "wallets",
  "products",
  // "user_achievements",
  // "invite_commission_history",
  // "invite_stats",
  // "user_rewards",
  // 'vip_times_history',
  // "vip_level_reward_history",
  // "vip_rebate_history",
  // "vip_tasks",
  // "invite_history",
  // "game_big_wins",
  // "game_history",
  // "chat_messages",
  // "statistics",
  // "live_wins",
  // "explain_items",
  // "achievement_items",
  // "promos",
  // "invites",
  // "achievements",
  // "withdrawals",
  // "deposits",
  // "transactions",
  // "messages",
  // "vips",
  // "promo_groups",
  "game_sessions",
  "auth_sessions",
  "games",
  // "game_categories",
  // "balances",
  // "bonuses",
  // "rewards",
  // "vip_signin_awards",
  // "vip_level_awards",
  // "countries",
  // "languages",
  // "currencies",
  // "announcements",
  // "banners",
  // "vip_levels",
  "users",
  "operators",
  "vip_info",
];

export async function resetDatabase(db: NodePgDatabase<typeof schema>) {
  console.log("🗑️  Resetting database...");

  const truncateQuery = `TRUNCATE TABLE ${tableNames.map(name => `"${name}"`).join(", ")} RESTART IDENTITY CASCADE;`;

  try {
    await db.execute(sql.raw(truncateQuery));
    console.log("✅ Database reset successfully.");
  }
  catch (error) {
    console.error("❌ Error resetting database:", error);
    throw error;
  }
}
</file>

<file path="./backend/scripts/seeds/users.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";

import {
  randNumber,
  randPassword,
  randPastDate,
  randUserName,
} from "@ngneat/falso";
import { eq } from "drizzle-orm";

import * as schema from "../../src/db/schema";

export async function seedUsers(
  db: NodePgDatabase<typeof schema>,
  count: number,
  operatorId: string,
) {
  console.log(`🌱 Seeding ${count} random users, each with a wallet and VIP info...`);

  const allVipLevels = await db.select().from(schema.VipLevel);
  if (allVipLevels.length === 0) {
    throw new Error("VIP levels must be seeded before users.");
  }

  for (let i = 0; i < count; i++) {
    const username = randUserName();
    const password = randPassword();
    const hashedPassword = await Bun.password.hash(password);
    const createdAt = randPastDate({ years: 1 });
    const avatarN = randNumber({ min: 1, max: 9 });
    const playerAvatar = `avatar-0${avatarN}.webp`;

    await db.transaction(async (tx) => {
      // 1. Create User
      const [newUser] = await tx
        .insert(schema.User)
        .values({
          username,
          passwordHash: hashedPassword,
          totalXpGained: 0,
          createdAt,
          avatar: playerAvatar,
        })
        .returning();

      // 2. Create Wallet
      const initialBalance = randNumber({ min: 1000, max: 20000 });
      const [newWallet] = await tx.insert(schema.Wallet).values({
        userId: newUser.id,
        balance: initialBalance,
        operatorId,
        isDefault: true,
      }).returning();

      // 3. Create VipInfo
      const [newVipInfo] = await tx.insert(schema.VipInfo).values({
        userId: newUser.id,
        level: 1,
        xp: 0,
        totalXp: 0,
      }).returning();

      // 4. Update User with activeWalletId and vipInfoId
      await tx.update(schema.User).set({
        activeWalletId: newWallet.id,
        vipInfoId: newVipInfo.id,
      }).where(eq(schema.User.id, newUser.id));

      // 5. Create AuthSession
      await tx.insert(schema.AuthSession).values({
        userId: newUser.id,
        status: "ACTIVE",
      });

      console.log(
        `👤 Created user '${username}' (Password: ${password}) with wallet, VIP info, and auth session.`,
      );
    });
  }
}

export async function seedHardcodedUser(
  db: NodePgDatabase<typeof schema>,
  operatorId: string,
) {
  console.log("🔒 Seeding hardcoded user 'asdf' with a wallet and VIP info...");
  const username = "asdf";
  const password = "asdfasdf";

  const existingUser = await db.query.User.findFirst({
    where: eq(schema.User.username, username),
  });

  if (existingUser) {
    console.log("✅ Hardcoded user 'asdf' already exists.");
    return;
  }

  const hashedPassword = await Bun.password.hash(password);
  await db.transaction(async (tx) => {
    // 1. Create User
    const [newUser] = await tx
      .insert(schema.User)
      .values({
        username,
        avatar: "avatar-01.webp",
        totalXpGained: 0,
        passwordHash: hashedPassword,
      })
      .returning();

    // 2. Create Wallet
    const [newWallet] = await tx.insert(schema.Wallet).values({
      userId: newUser.id,
      operatorId,
      balance: 50000,
      isDefault: true,
    }).returning();

    // 3. Create VipInfo
    const [newVipInfo] = await tx.insert(schema.VipInfo).values({
      userId: newUser.id,
      level: 1,
      xp: 0,
      totalXp: 0,
    }).returning();

    // 4. Update User with activeWalletId and vipInfoId
    await tx.update(schema.User).set({
      activeWalletId: newWallet.id,
      vipInfoId: newVipInfo.id,
    }).where(eq(schema.User.id, newUser.id));

    // 5. Create AuthSession
    await tx.insert(schema.AuthSession).values({
      userId: newUser.id,
      status: "ACTIVE",
    });
  });

  console.log(`✅ Hardcoded user 'asdf' created. Password is '${password}'`);
}
</file>

<file path="./backend/scripts/seeds/vip.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";

import type * as schema from "../../src/db/schema";

import { VipLevel } from "../../src/db/schema";

const levels = [
  {
    level: 1,
    name: "Bronze",
    xpForNext: 1000,
  },
  {
    level: 2,
    name: "Silver",
    xpForNext: 5000,
  },
  {
    level: 3,
    name: "Gold",
    xpForNext: 20000,
  },
  {
    level: 4,
    name: "Platinum",
    xpForNext: 100000,
  },
  {
    level: 5,
    name: "Diamond",
    xpForNext: 500000,
  },
];

export async function seedVipLevels(db: NodePgDatabase<typeof schema>) {
  console.log("💎 Seeding VIP levels...");
  await db.insert(VipLevel).values(levels).onConflictDoNothing();
  console.log("✅ VIP levels seeded.");
  return levels;
}
</file>

<file path="./backend/scripts/bot.ts">
import { randomUUID } from 'crypto'
import { WebSocket } from 'ws'

// --- CONFIGURATION ---
// Set the desired starting balance for the user in cents (e.g., 50000 = $500.00)
const INITIAL_WALLET_BALANCE_CENTS = 50000
// --- END CONFIGURATION ---

interface UserStats {
    wallet: {
        initialBalance: number
        finalBalance: number
        difference: number
    }
    vipInfo: {
        initialLevel: number
        finalLevel: number
        initialXp: number
        finalXp: number
        xpEarned: number
        bonusXpEarned: number
    }
    spins: {
        total: number
        totalWagered: number
        totalWon: number
        netResult: number
    }
}

interface SpinResult {
    success: boolean
    winAmount: number
    balance: number
    xpEarned: number
    error?: string
    sessionExpired?: boolean
}

interface GameSession {
    token: string
    sessionId: string
    fingerprint: string
    userId: string // Changed to string to match the API response
    gameId: string
    startTime: Date
    spins: Array<{
        spinId: string
        wager: number
        winAmount: number
        xpEarned: number
        timestamp: Date
    }>
}

// Function to perform a fetch request with a timeout
async function fetchWithTimeout(
    url: string,
    options: RequestInit,
    timeout = 5000
) {
    const controller = new AbortController()
    const id = setTimeout(() => controller.abort(), timeout)

    try {
        const response = await fetch(url, {
            ...options,
            signal: controller.signal,
        })
        return response
    } catch (error) {
        if (error instanceof Error && error.name === 'AbortError') {
            throw new Error('Request timed out')
        }
        throw error
    } finally {
        clearTimeout(id)
    }
}

async function createNewGameSession(): Promise<GameSession> {
    try {
        // First, ensure we have a valid access token
        const loginResponse = await fetchWithTimeout(
            'http://localhost:9999/auth/login',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username:'asdf', //process.env.TEST_USERNAME || 'asdf',
                    password: 'asdfasdf'//process.env.TEST_PASSWORD || 'asdfasdf',
                }),
            },
            5000
        )

        if (!loginResponse.ok) {
            const errorText = await loginResponse.text()
            throw new Error(
                `Login failed: ${loginResponse.status} - ${errorText}`
            )
        }

        const loginData = await loginResponse.json()
        const accessToken = loginData.accessToken
        const user = loginData.user

        if (!user?.id) {
            throw new Error('Invalid user data in login response')
        }


        const sessionFingerprint = randomUUID()
        const payload = {
            token: null,
            sessionId: '0',
            playMode: 'demo',
            gameId: 'Atlantis',
            userId: user.id,
            currency: 'USD',
            language: 'en',
            mode: 'demo',
            userData: {
                userId: user.id,
                affiliate: '',
                lang: 'en',
                channel: 'I',
                userType: 'U',
                fingerprint: sessionFingerprint,
            },
            custom: {
                siteId: '',
                extras: '',
            },
        }

        console.log(
            'Sending game settings request with payload:',
            JSON.stringify(payload, null, 2)
        )

        const settingsResponse = await fetchWithTimeout(
            'http://localhost:9999/redtiger/game/settings',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${accessToken}`,
                },
                body: JSON.stringify(payload),
            },
            10000
        )

        console.log('Game settings response status:', settingsResponse.ok)
        console.log('Game settings response status:', settingsResponse.status)

        if (!settingsResponse.ok) {
            const errorText = await settingsResponse.text()
            console.error('Game settings error response:', errorText)
            throw new Error(
                `Failed to create game session: ${settingsResponse.status} - ${errorText}`
            )
        }

        const response = await settingsResponse.json()
        console.log('Game settings response received ', response.success)

        // Check if the response has the expected format
        if (!response || !response.success || !response.result?.user) {
            throw new Error(
                'Invalid or unsuccessful response from game settings'
            )
        }

        const { token, sessionId, fingerprint } = response.result.user

        if (!token) {
            throw new Error('No session token received from game settings')
        }

        console.log(
            `New game session created successfully with token: ${token} and sessionId: ${sessionId}`
        )

        // Create and return the game session object
        return {
            token: token,
            sessionId: sessionId,
            fingerprint: fingerprint,
            userId: payload.userId,
            gameId: payload.gameId,
            startTime: new Date(),
            spins: [],
        }
    } catch (error) {
        console.error('Failed to create game session:', error)
        throw error
    }
}

// Global variables
let currentSession: GameSession | null = null
let spinData: Array<{
    wager: number
    win: number
    xp: number
    timestamp: Date
}> = []

// Main bot execution
async function runBot() {
    // Initialize game session
    try {
        currentSession = await createNewGameSession()
    } catch (error) {
        console.error('Failed to initialize game session:', error)
        process.exit(1)
    }

    const baseUrl = 'http://localhost:9999'
    let accessToken = ''
    let user: any = null
    let gameUserId: any = null
    let gameFingerprint: any = null

    // Track user stats
    const stats: UserStats = {
        wallet: {
            initialBalance: 0,
            finalBalance: 0,
            difference: 0,
        },
        vipInfo: {
            initialLevel: 0,
            finalLevel: 0,
            initialXp: 0,
            finalXp: 0,
            xpEarned: 0,
            bonusXpEarned: 0,
        },
        spins: {
            total: 5,
            totalWagered: 0,
            totalWon: 0,
            netResult: 0,
        },
    }

    let spinData: Array<{
        wager: number
        win: number
        xp: number
        timestamp: Date
    }> = []

    try {
        // 1. Login to get the initial access token
        console.log('Attempting to log in...')
        const loginResponse = await fetchWithTimeout(`${baseUrl}/auth/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: 'asdf', password: 'asdfasdf' }),
        })

        if (!loginResponse.ok) {
            console.error(`Login failed: ${loginResponse.status}`)
            return
        }

        const loginData = await loginResponse.json()
        accessToken = loginData.accessToken
        user = loginData.user
        console.log('Login successful.')

        // 2. Set the initial wallet balance
        console.log(
            `\nSetting initial wallet balance to $${(INITIAL_WALLET_BALANCE_CENTS / 100).toFixed(2)}...`
        )
        await fetchWithTimeout(`${baseUrl}/wallet/balance`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${accessToken}`,
                'X-Game-Token': currentSession.token,
            },
            body: JSON.stringify({
                amount: INITIAL_WALLET_BALANCE_CENTS,
                type: 'credit',
                description: 'Bot Initial Balance',
            }),
        })

        // 3. Establish WebSocket connections
        console.log('\nConnecting to WebSockets...')
        const userWs = new WebSocket(
            `${baseUrl.replace('http', 'ws')}/ws/user?token=${accessToken}`
        )
        const notificationsWs = new WebSocket(
            `${baseUrl.replace('http', 'ws')}/ws/notifications?token=${accessToken}`
        )

        userWs.onopen = () => console.log(' User WebSocket connected.')
        notificationsWs.onopen = () =>
            console.log(' Notifications WebSocket connected.')
        userWs.onmessage = (event) => {
            try {
                const message = event.data.toString()
                console.log(message)
                const data = JSON.parse(message)
                if (data.wallet) {
                    if (stats.wallet.initialBalance === 0) {
                        stats.wallet.initialBalance = data.wallet.balance
                    } else {
                        stats.wallet.finalBalance = data.wallet.balance
                    }
                }
                if (data.vipInfo) {
                    if (stats.vipInfo.initialLevel === 0) {
                        stats.vipInfo.initialLevel = data.vipInfo.level || 1
                        stats.vipInfo.initialXp = data.vipInfo.xp || 0
                    } else {
                        stats.vipInfo.finalLevel = data.vipInfo.level || 1
                        stats.vipInfo.finalXp = data.vipInfo.xp || 0
                    }
                }
                console.log(' [USER UPDATE]:', message)
            } catch (error) {
                console.error('Error processing WebSocket message:', error)
            }
            console.log(' [USER UPDATE]:', event.data)
        }
        notificationsWs.onmessage = (event) => {
            try {
                const message = event.data.toString()
                console.log(' [NOTIFICATION]:', message)
            } catch (error) {
                console.error('Error processing notification:', error)
            }
        }
        userWs.onerror = (err) => console.error(' User WebSocket error:', err)
        notificationsWs.onerror = (err) =>
            console.error(' Notifications WebSocket error:', err)

        await new Promise((resolve) => setTimeout(resolve, 1000))

        // 4. Perform spins using the data from the settings response
        for (let i = 1; i <= 5; i++) {
            console.log(`\n--- Performing Spin #${i} ---`)

            // Construct the detailed spin payload
            const spinPayload = {
                token: currentSession.token,
                sessionId: currentSession.sessionId, // Use the session token as sessionId
                playMode: 'demo',
                gameId: 'Atlantis',
                // Required root level fields
                userId: currentSession.userId,
                currency: 'USD',
                language: 'en',
                mode: 'demo',
                // Spin specific data
                stake: 1.0,
                lines: 20,
                lineBet: 0.05, // 1.0 / 20 lines
                // User data as an object
                userData: {
                    userId: currentSession.userId,
                    affiliate: '',
                    lang: 'en',
                    channel: 'I',
                    userType: 'U',
                    fingerprint: currentSession.fingerprint,
                },
                custom: {
                    siteId: '',
                    extras: '',
                },
                bonusId: null,
                extras: null,
                gameMode: 0,
            }

            const spinResponse = await fetchWithTimeout(
                `${baseUrl}/redtiger/game/spin`,
                {
                    method: 'POST',
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(spinPayload),
                }
            )
            if (!spinResponse.ok) {
                console.error(
                    `Spin #${i} failed with status: ${spinResponse.status}.`
                )
                process.exit(1)
            }
            const spinDataResponse = await spinResponse.json()

            if (!spinResponse.ok || !spinDataResponse?.success) {
                console.error(
                    `Spin #${i} failed with status: ${spinResponse.status}.`
                )
                console.error('Response:', spinDataResponse)
                process.exit(1)
            }

            const winAmount = parseFloat(
                spinDataResponse.result?.game?.win?.total || '0'
            )
            console.log(
                `Spin ${spinDataResponse.result?.game?.spinId || 'N/A'}: ${winAmount > 0 ? 'WIN' : 'LOSE'} ${winAmount.toFixed(2)}`
            )

            // Track bonus XP
            if (spinDataResponse.result?.game?.xpBreakdown?.bonusXp > 0) {
                stats.vipInfo.bonusXpEarned += spinDataResponse.result.game.xpBreakdown.bonusXp;
            }

            // Store spin data for batch saving
            spinData.push({
                wager: 1.0,
                win: winAmount,
                xp: 0, // Will be updated when we get the user update
                timestamp: new Date(),
            })

            // Save spin data if we've reached the batch size
            if (spinData.length >= 10) {
                await saveSpinData()
            }

            // Update tracking
            stats.spins.totalWagered += 100 // Assuming 1.00 stake per spin
            stats.spins.totalWon += winAmount

            if (i < 5) {
                await new Promise((resolve) => setTimeout(resolve, 1500))
            }
        }
    } catch (err) {
        console.error('An error occurred during the bot execution:', err)
        process.exit(1)
    } finally {
        // Calculate final stats
        stats.wallet.difference =
            stats.wallet.finalBalance - stats.wallet.initialBalance
        stats.vipInfo.xpEarned = stats.vipInfo.finalXp - stats.vipInfo.initialXp
        stats.spins.netResult = stats.spins.totalWon - stats.spins.totalWagered

        // Print summary
        console.log('\n=== SPIN SESSION SUMMARY ===')
        console.log('\n WALLET:')
        console.log(
            `  Starting balance: $${(stats.wallet.initialBalance / 100).toFixed(2)}`
        )
        console.log(
            `  Final balance:    $${(stats.wallet.finalBalance / 100).toFixed(2)}`
        )
        console.log(
            `  Net change:       $${(stats.wallet.difference / 100).toFixed(2)} ${stats.wallet.difference >= 0 ? '' : ''}`
        )

        console.log('\n VIP STATUS:')
        console.log(
            `  Level: ${stats.vipInfo.initialLevel} → ${stats.vipInfo.finalLevel}`
        )
        console.log(
            `  XP:    ${stats.vipInfo.initialXp} → ${stats.vipInfo.finalXp} (${stats.vipInfo.xpEarned >= 0 ? '+' : ''}${stats.vipInfo.xpEarned})`
        )
        console.log(
            `  Bonus XP: ${stats.vipInfo.bonusXpEarned}`
        )

        console.log('\n SPIN STATISTICS:')
        console.log(`  Total spins:      ${stats.spins.total}`)
        console.log(
            `  Total wagered:    $${(stats.spins.totalWagered / 100).toFixed(2)}`
        )
        console.log(
            `  Total won:        $${(stats.spins.totalWon / 100).toFixed(2)}`
        )
        console.log(
            `  Net result:       $${(stats.spins.netResult / 100).toFixed(2)} ${stats.spins.netResult >= 0 ? ' Profit' : ' Loss'}`
        )
        console.log(
            `  RTP (Return to Player): ${((stats.spins.totalWon / stats.spins.totalWagered) * 100).toFixed(2)}%`
        )

        // Save any remaining spin data
        if (spinData.length > 0) {
            await saveSpinData()
        }

        console.log('\n Bot has finished its tasks.')
        // process.exit(0)
    }
}

runBot()

async function saveSpinData() {
    if (spinData.length === 0) return

    try {
        const payload = {
            spins: spinData,
            sessionId: currentSession?.token || 'no-session',
            timestamp: new Date().toISOString(),
        }

        console.log(`Saving batch of ${spinData.length} spins...`)

        // In a real implementation, you would send this to your batch endpoint
        // For now, we'll just log it
        console.log('Batch data:', JSON.stringify(payload, null, 2))

        // Simulate API call
        await new Promise((resolve) => setTimeout(resolve, 500))

        console.log('Spin data saved successfully')
        spinData = []
    } catch (error) {
        console.error('Failed to save spin data:', error)
        // In a real implementation, you might want to implement retry logic here
    }
}

// Function to ensure we have a valid session
async function ensureValidSession(): Promise<GameSession> {
    if (!currentSession) {
        currentSession = await createNewGameSession()
    }
    if (!currentSession) {
        throw new Error('Failed to create a valid game session')
    }
    return currentSession
}
</file>

<file path="./backend/scripts/db-test.ts">
import { eq } from "drizzle-orm";
import db from "../src/db";
import { users } from "../src/db/schema";

async function testDbConnection() {
  try {
    console.log("Querying user 'asdf' directly from the database...");
    const result = await db
      .select()
      .from(users)
      .where(eq(users.username, "asdf"))
      .limit(1);
    const userRecord = result[0];
    console.log("Query result:", userRecord);
  } catch (error) {
    console.error("Error querying user:", error);
  }
}

testDbConnection();
</file>

<file path="./backend/scripts/download-launchers.mjs">
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

// Helper to get __dirname in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Creates a delay for a specified number of milliseconds.
 * @param {number} ms The number of milliseconds to wait.
 */
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// Path to games.json, assuming the script is in a `scripts` folder at the project root
const projectRoot = path.resolve(__dirname, '..');
const gamesJsonPath = path.join(projectRoot,  'data', 'games.json');
const outputDir = path.join(projectRoot,  'data', 'launchers');

/**
 * Sanitizes a string to be used as a filename.
 * @param {string} name The string to sanitize.
 * @returns {string} The sanitized filename.
 */
const sanitizeFilename = (name) => {
  return name
    .replace(/™|®|&/g, '') // Remove special characters that are common in game titles
    .replace(/[^a-z0-9\s-]/gi, '') // Remove remaining non-alphanumeric characters except spaces and hyphens
    .trim() // Trim whitespace from ends
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .toLowerCase(); // Convert to lowercase
};

/**
 * Downloads the launcher HTML for a single game.
 * @param {object} game The game object from games.json.
 */
async function downloadLauncher(game) {
  if (!game.launcher_link) {
    console.log(`No launcher_link for: ${game.name}. Skipping.`);
    return;
  }

  try {
    const response = await fetch(game.launcher_link);

    if (!response.ok) {
      console.error(`Failed to download from ${game.launcher_link}. Status: ${response.status} ${response.statusText}`);
      return;
    }

    const rawHtml = await response.text();
    const filename = `${sanitizeFilename(game.name)}.html`;
    const outputPath = path.join(outputDir, filename);

    // Extract only the content within the <body> tag to avoid style conflicts when injected.
    const bodyContentMatch = rawHtml.match(/<body[^>]*>([\s\S]*)<\/body>/i);
    const contentToSave = bodyContentMatch ? bodyContentMatch[1].trim() : rawHtml;

    await fs.writeFile(outputPath, contentToSave);
    console.log(`   -> Saved: ${filename}`);
  } catch (error) {
    console.error(`   -> Error for ${game.name}:`, error.message);
  }
}

/**
 * Main function to read games.json and trigger downloads.
 */
async function main() {
  try {
    await fs.mkdir(outputDir, { recursive: true });
    console.log(`Launchers will be saved in: ${outputDir}`);

    const gamesData = await fs.readFile(gamesJsonPath, 'utf-8');
    const games = JSON.parse(gamesData);

    const gamesWithLaunchers = games.filter((game) => game.launcher_link);
    console.log(`Found ${gamesWithLaunchers.length} games with launcher links out of ${games.length} total games. Starting downloads...`);

    // Process downloads sequentially with a delay to avoid being rate-limited.
    let count = 0;
    for (const game of gamesWithLaunchers) {
      count++;
      console.log(`(${count}/${gamesWithLaunchers.length}) Downloading: ${game.name}`);
      await downloadLauncher(game);
      await delay(250); // 250ms delay between each download
    }

    console.log('All launcher downloads have been processed.');
  } catch (error) {
    console.error('An error occurred during the script execution:', error);
    if (error.code === 'ENOENT') {
      console.error(`Could not find games.json at ${gamesJsonPath}. Make sure the path is correct.`);
    }
  }
}

main();
</file>

<file path="./backend/scripts/generate-manifest.mjs">
import fs from 'fs/promises';
import path from 'path';

const launchersDir = path.resolve(process.cwd(), 'backend/data/launchers');
const gamesJsonPath = path.resolve(process.cwd(), 'backend/data/games.json');
const manifestPath = path.resolve(process.cwd(), 'frontend/public/games/redtiger/games-manifest.json');

async function generateManifest() {
  try {
    const gamesData = JSON.parse(await fs.readFile(gamesJsonPath, 'utf-8'));
    const launcherFiles = await fs.readdir(launchersDir);

    const games = [];

    for (const file of launcherFiles) {
      if (path.extname(file) === '.html') {
        const id = path.basename(file, '.html');
        const filePath = path.join(launchersDir, file);
        const content = await fs.readFile(filePath, 'utf-8');

        const gameIdMatch = content.match(/gameId:\s*'([^']+)'/);
        const gameAppIdMatch = content.match(/gameAppId:\s*'([^']+)'/);
        const hasGambleMatch = content.match(/hasGamble:\s*(true|false)/);

        if (gameIdMatch && gameAppIdMatch && hasGambleMatch) {
          const gameId = gameIdMatch[1];
          const gameAppId = gameAppIdMatch[1];
          const hasGamble = hasGambleMatch[1] === 'true';

          const gameInfo = gamesData.find(g => g.launcher_link?.endsWith(gameAppId) || g.launcher_link?.endsWith(gameId));

          games.push({
            id: id,
            name: gameInfo ? gameInfo.name : id.replace(/-/g, ' '),
            provider: 'redtiger',
            config: {
              gameId,
              gameAppId,
              hasGamble,
            },
          });
        }
      }
    }

    const manifest = { games };
    await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2));
    console.log(`Manifest generated at ${manifestPath}`);
  } catch (error) {
    console.error('Error generating manifest:', error);
  }
}

generateManifest();
</file>

<file path="./backend/scripts/key.txt">
38a5236d026377c0951d73c7299457447a1ce14ae306c237031ac1722967b32f915ac8e3730ab2e4fbe13aca22ac7894d5105766a33da37e9f349ba71c5ff4a25cfb9b0b125491b120d61d306856eed2b68def448f31abc8f4ee1cc7492e31b57b8ca3fd4ad3a6289565410aca3c51981379557cdea5e6262c8e7535ed958cd61664ab6de598b487fe8798036fa365dd9aaa172aa591db14c6989a40f6876bbc1f026bd849b6feb1bc55687a5dd8e10ae5b5190811a666c20656f8a6c14c19100b95800db4952be19e51b928b2bc59c9ac9a3ac79299adbab131901d845e927f8d3a8417cfae0614532741c8afcd8a0a97bf319abef751b1f4a0b53dd1a35f38da17bd240ce159e48fe6871b3eb764abe76f3d34a86c79b73eda0aad03e73cc1a87422d0429ed187885f122d6e9083cd2784f60c758a9bce270660a874b3f6c2dd3fb21d35ae1850061358b4288809d2f60b52e50446971e2cebf23a21e22f61bce64da3f60baa32f2dd115a32f917ceb001e6388b
</file>

<file path="./backend/scripts/manual-decrypt.ts">
import { rc4Api } from '../src/lzw';
// import { lzwDecode } from '../src/lzw';
import fs from 'fs';
import path from 'path';

const lzwDecode =  (t) => {
    const e = {}
                            let i = (t = t.substr(4)).substr(0, 1),
                                n = i,
                                s = 256;
                            const o = [i];
                            for (let r = 1; r < t.length; r++) {
                                const a = t.charCodeAt(r);
                                let l;
                                l = a < 256 ? t.substr(r, 1) : e[a] ? e[a] : n + i, o.push(l), i = l.substr(0, 1), e[s] = n + i, s++, n = l
                            }
                            // if (JSON.parse(o.join("")).game) {
                            //     if (JSON.parse(o.join("")).game.totalSpinWinnings) {
                            //         if (JSON.parse(o.join("")).game.totalSpinWinnings > 0) {
                            //             const coins = JSON.parse(o.join("")).game.totalSpinWinnings * 100
                            //             // window.parent.supabase.rpc('nolimit_increment_coins', { row_id: window.parent.userId, val: coins }).then((data, error) => {
                            //             //     console.log(error)
                            //             //     console.log(data)
                            //             //     window.top.postMessage('nolimit_increment_coins', '*')
                            //             // })
                            //         }
                            //     }
                            // }
                            console.log(o)

                            return o.join("")

                        }
try {
    // 1. Read the key and message from files.
    const key = fs.readFileSync(path.join(__dirname, 'key.txt'), 'utf-8');
    const rawMessageFromServer = fs.readFileSync(path.join(__dirname, 'message.txt'), 'utf-8');
    console.log(lzwDecode(rawMessageFromServer))
    // 2. Decrypt the raw message from the server.
    const decryptedData = rc4Api.decryptRaw(key, rawMessageFromServer);
    console.log('--- Decrypted Data (before LZW decompression) ---');
    console.log(decryptedData);

    // 3. Decompress the decrypted data using LZW.
    const decompressedData = lzwDecode(decryptedData);
    console.log('\n--- Final Decompressed and Decrypted Data ---');
    console.log(decompressedData);

    // 4. As a final verification, let's parse the JSON.
    if (decompressedData.startsWith('lzw:')) {
        throw new Error("Decompression failed, 'lzw:' prefix is still present.");
    }
    const jsonData = JSON.parse(lzwDecode(rawMessageFromServer));
    console.log('\n--- Parsed JSON Object ---');
    console.log(jsonData);

} catch (error) {
    console.error('\n--- An error occurred during the process ---');
    console.error(error);
}
</file>

<file path="./backend/scripts/message.txt">
lzw:{"messagă":[],"replayBaseUrlĉ"https://ďđē.nolimitcįy.com/"čgaĂCĬentConfiguratińĉĀĻmbleGļeRoundľoėIŁervalHŚrsĉ24čshowNetPşįōnĉfŦėčopţŋorĜHOMEPAGE_PUBLICĹ"ĪĬĮtWinnţsEnaœedĉtruečŽstSpƞƣƥŔƨ:ƪƬĺŗřśŝlşeštţťě:90čautoPĒySŵŌngū:ĀǍǏħyAlǁwƧƩƫƭ"ǜƁǒƾŜǙ[1ǋ25,5ǋǰǱǵ,Ƿ0ČǨǎǪēRequiďsSǝLşsLĭįżžǧtŉnOffAǿǞOnBńuǙŽlė}ůűwSĭuĒǅdMaxȫmPēŚtǥƻ"őŘŚŜŞŠŢŤŦTyƂĜDAYSƗhidŘĠȑȤǧőƦǄoȟnȡǠǢǤƹǦȧŲRĠWŋţmarkɓſ"crɆǏCŉďncyRȬĈɠȺboşȮBŵȋckƧȂeȤɭǧŰŲŖĂVơźšGȅʖɏeȹǧɿʁƧʃtɝŲɟƺʍȨȰxƝnProbƥiĬtyɦǅrɩɫʌčbʊŲȉaʇʪȂưricŌŎ:ȣɮjŉisdˆˈnNŗɈEFAULTƗexƪaƲƞʢǣƸʥƀƂŊǏrGʭupĜNOƔMITC˷YƗɖŔFifʳ˿́ǟǡʣ˧ɡāƞȳˣnTĭʚ:ǋāȱšaˇivĲšMƞǎɼ̓feŋŉeBuyƵƦ̈ɾʀưʟŵEˠŊřwǙ˨ɯǁʆǔğƞǘŏ"ʎwʛǌ̆ȩǕ̾ʺ"ȡeǔĄź̏Ă͎͊͂s͐̐UŜţʌȦǨ̘ń̍ʛ͝ȼšfòˑsǞ˕͒:"˿ď š The ŨŔ 2ƗɩxMȬŌđi͛:6ǵ0̓;΀l΂Ŀrʬʮʰʲyĉ17ΉἸvīŋʱĲĜǰ.0 (̲ƪeĂ)"͝cɵŀɸ̀ĵɐĜUSDƗsyŒīĜ$ Ɨʼͦď͢črɒǚ́̾Ŕĉ0.9607Ʈ̣Ȕȇ̀BOOSTED_BE˝ω͖Ǘό̒Ϗϑ9͝FREESPIN_LEVEL_1̀ϥgϧώϐǰϬϮϰϲϴ϶ϸϺͼϤϋ̑Ё634ЄϯϱϳϵϷϹ_3ϽЎύϩ33͝GUARANϝϞ_DWЦFНϦЏϩ42͝LUCKYЬЧWбϿгЂж}ͣƽȾd̲ƳɱšDēǙǊφ̣ΔCͶʆ̀wƞn̾Ǚ0̢̤͝ďʠ͊ʼtLevʊǙĀѥΡΣ0ρʄѨѪĉ["ώ2Ѱčώ4Ѻѷ.ϑƗώ8Ѿ1ѯƗ҆ѹ҈ҀѾ2҇čҎѽƗҎ҄Ɨ3.Ҋčҗҁč4ҏ"5ҟ6ҟ8ҟ΢Ή҈ҞҨč1ҥҫ"ŭҟ3ҎүѽҢώү҄ҦΉ҇ǽaťʱƶ̦ѲѩʋĊѿҙѿҒѻҌ҂.ҕҬҦҘ҅ӍҐҟґҍӏѾҗӉқѾҪѾҡүңҹһҦӠ҈ҮҍӨҚҴӟҸѾϑҤӰ҈ҼҨǽśҿaӁƦʠѧӅǮ]џϕ̥ӾѳӆĀϭЕЇИЊϻѵӈѾѼԒӕѿӐ"҆ү҉ӔҜҰӗ.ӋԞԗӜӛԕӬҠҢҤӦԚԧҭӗԧҳҟҶӣӴčҺԚӶѰǽԊІЗЉКЌѶѸԔԡώԝ҃ӔԚӓҋԝӮғԠәԣՋҚԦҟӢӱԪԸӧҦӪғ԰ՎҝԵ"ӲҹբǷҽčԼЖЈЙϺМӇՃӎՅԕՈҋՊӉ҆ՍԟԡҔԥӝՕү՗ƗӤѾ՝ҬզԭֆҰ՟ԲբդօզԹ"ǽФЦШЪϟЭЯԐձӌճՇӚնӔոԕՠԞռ֡ՔտԝԧւčքƗ֊ҧ҅։ԯҲ֦ԳӱբԷ҅֒ǽикмDо֜ՓӊԔ֠ԗԙ֣ԜәүӘՏՒ֫ӟՖԩӥ՚Ԭ՜ֶүԱҵ֎ֻ֑ӴǽϙϛϝϟϡϣՂ׆ԓӎ׉Չ׌Ռ׎ә֨גԥ֬וӣՙֽ՛Ԛ֊ұלָןӳһע͝ŦɞdFԄďɅƂǮ"ϙNζϠU˻čפϜЫרƗEXTЧ_իƗGAMƓƏFIFTмةثؖ"ؤئ϶_ϳTOϠOؒɌč˳˵˷_WϳNERɌҾ͆Ƨʐe؊ѡɼѶؘצϠϢƗؚّϢ_X_ROWؼ"؝؟AءЇƗժԌԿϺϼؗغؓBؕ٦ЅիԍՀٱԋԾխЛأإا_خجپتجٻسƏضظؑζأХЧЩϯ֙ЮRаč׀лнAпؽ˴I˶Tفكمهͅ؈ٍϖӃt؏ٖקٔթٲ٨ٹ٫ͯڮٸԎͼڭٷլԎМč֕ڍ֘Ьڑړ"ڕׂׄو؈ًMoɐԁƼͭĀκμlVŦƬѫ"Mϼωկ1ǳ"4ĉѽč5ĉ҄֯Ζǵ͝MЌĀۜ̓۠:۝ۣۡ̓6ĉ75зۭۚĉ6ҝۥ۳۱۾գĉ3ўčMկۼǉۿ۱2܁܆ۧ:۩ڔ۬"կ۞۰ϓҠΖŮ܄:ǲ۪۰܋8܍11܁ǲܒѽз܊ܗۡ܍܃ۤ܎ܒ2ж܈ܳ܋ܛ۰ǰܩ۵܅۹ڔܣܯ:ܞ۰ܲΖ܏ܟ21зܹ݄݆۽܁1݊۶ܠўԃَ̧y͑ăʠ۔lƬѵĀƤͭڲڸٴ٪Ɨʳɇͮ٧ϳƗadˑ˓ɄɆُǽp˅c̑ΘȦݤ˖ݮڳڹٵčݬ̑ݧԽNݱݳŹńݶ؎ѵݹݻ̑ѹ܇ހݦݯބծݫݷĜޚތݴźސݸčݺˆ̑ϑޗƘށرڌ֗ڏۀ֛ކޞނڸޡގƤl؍ޥ"ާݼ܅ުݿެݦۄڗڙ"އޟރ޸ݵ޻ݷۍ޾ޔΖ۸߃ݥވڪٓ˝޴ݭؐϚؙګߛǨލߎ޼ߑ޿ޕ.۹ǽˏ˃ˬ͍tɧ͊ďѴĊѶۙƗLڶۃۤؗAٕ߿čθČ߷߽ۘ۠ࠂ߈θࠂƗࠃ,ѶLڱٟLڻؐࠁ"DXࠍ֓ࠏۘࠕMࠆߺࠀࠣࠌࠄۃڱ۫Ɨ߸߾ࠛࠥࠝࠔࠪڱࠑٟ࠭࠘ࠃҾcήmȬɧdǬdʪύčmۋވ˳RMALƗƠˠۊδͮࡇࡉࡋčwĖڥԅ̨Ѥ̮ʂŵ͊fߴͪƞȍéࡂ߉o߱l̍sǑēɟ̓ۑɿ࡫izُǯǺࡹܨࡻࠄࡻࡺࡺࡽࡿࡾ1ࢁࢃࢀࠏࢆࢃࢅࢂǺ]ǽďࡄѩdSλࡳǮ[ɛǡ,࢙l࢛Ȭ࢚࢝࢜࢞࢜ࠄࢡࢦ࢟ࢢࢠࢨࢤࠏࢧࢣࢫࢰࢯǡࢥࢱࢪࢲࢶࢸࢴࢷࢩࢼࢮlࢺࢸࢽࢵࢩࢎࡃ΁i΃΅ܨɯoƞݠۖѵ[ǋ࣓,ࣔǼࠏ࣒ࣖࣕࣚࣗࣛࣞࣜࣙࣖࠄࣣ࣡ࣛࣟࣥӸpgŊɐŃݡmŻĊˋƭࣳ,ࣵࣳ࠸࠺࠼ȮFS࠿ࡁ̒ࡕяWńTࡩŦ࠿ࡧςƅٌࡡƳnsAďa࣑ࢾࣂࢻࢬ࢘ࣃखࢾࣀगࣁझࢭछणࢷञजतࢿढघनࣄǽscŋʶŃśȸँ"ࡠeăए࡭ǒࡰݙڦѫ͝࢐ӻћǗFߴ࡬ऊŦaɷɼĀطTࡊϠࡊШCEΡΚ҇͝ʯĒ्क़Ιҟ̋व"oɬčɏĜaz0tĪxzoq-Ѿ˟ŶऽrKeΕͮa4f77Žc3f3d193949141С2b35c9c5dŭ4bѹf0ݲdरআbcѽbচfdȘ2c8ࡥ3bѰ}
</file>

<file path="./backend/scripts/ocr.ts">
import { ImageAnnotatorClient } from '@google-cloud/vision';
import fs from 'fs/promises';
import path from 'path';

// --- Configuration ---
const imageDirectory = path.join(__dirname, '../public/images/default');

// --- Helper Function ---
function sanitizeFilename(text: string): string {
  return text
    .toLowerCase()
    .replace(/\s+/g, '_') // Replace spaces with underscores
    .replace(/'/g, '')     // Remove apostrophes
    .replace(/[^a-z0-9_.-]/g, ''); // Remove any other invalid characters except dots and hyphens for extensions
}


// --- Main Script ---
async function processAndRenameImages() {
  try {
    const client = new ImageAnnotatorClient();
    const files = await fs.readdir(imageDirectory);

    console.log(`Found ${files.length} images to process...`);

    for (const file of files) {
      const oldFilePath = path.join(imageDirectory, file);
      const fileExtension = path.extname(file);

      try {
        const [result] = await client.textDetection(oldFilePath);
        const detections = result.textAnnotations;

        if (detections && detections.length > 0 && detections[0].description) {
          const fullText = detections[0].description.replace(/\n/g, ' ').trim();
          const newFileNameBase = sanitizeFilename(fullText);
          
          if (newFileNameBase) {
            const newFileName = `${newFileNameBase}${fileExtension}`;
            const newFilePath = path.join(imageDirectory, newFileName);

            // Check if new file name already exists to avoid overwriting
            try {
                await fs.access(newFilePath);
                console.log(`Skipping rename for "${file}": "${newFileName}" already exists.`);
            } catch (e) {
                 // File does not exist, proceed with rename
                await fs.rename(oldFilePath, newFilePath);
                console.log(`Renamed "${file}" to "${newFileName}"`);
            }
          } else {
            console.log(`Skipping rename for "${file}": No valid text found.`);
          }
        } else {
          console.log(`Skipping rename for "${file}": No text detected.`);
        }
      } catch (err) {
        console.error(`Error processing ${file}:`, err);
      }
    }
  } catch (err) {
    console.error('Failed to initialize Google Cloud Vision client or read directory:', err);
    console.error('Please ensure you are authenticated and the image directory is correct.');
  }
}

processAndRenameImages();
</file>

<file path="./backend/scripts/parse-games.js">
const fs = require('fs');
const path = require('path');
const cheerio = require('cheerio');

/**
 * This script parses an HTML file to extract game information.
 * It reads the specified HTML file, finds all game cards, and extracts
 * the game name, image URL, and a demo launcher link for each game.
 * The extracted data is then saved to a specified JSON file.
 *
 * @param {string} inputPath - The absolute path to the HTML file to parse.
 * @param {string} outputPath - The absolute path to save the output JSON file.
 */
function parseGamesFromHtml(inputPath, outputPath) {
  try {
    // 1. Read the HTML file
    const html = fs.readFileSync(inputPath, 'utf-8');

    // 2. Load the HTML into cheerio for easy traversal
    const $ = cheerio.load(html);

    const games = [];

    // 3. Find each game card element
    $('.game-card').each((index, element) => {
      const gameCard = $(element);

      // 4. Extract the required information
      const name = gameCard.find('.game-card_title_text').text().trim();
      const image = gameCard.find('.game-card__image').attr('src');
      const launcher_link = gameCard.find('.play-demo_link a').attr('href');

      const gameData = { name, image };

      if (launcher_link) {
        gameData.launcher_link = launcher_link;
      }

      games.push(gameData);
    });

    // 5. Save the data as a nicely formatted JSON string to a file
    const jsonData = JSON.stringify(games, null, 2);
    fs.writeFileSync(outputPath, jsonData, 'utf-8');
    console.log(`✅ Successfully parsed ${games.length} games and saved to ${outputPath}`);
  } catch (error) {
    console.error(`Error processing file at ${inputPath}:`, error);
  }
}

// --- Configuration ---
const inputFilePath = '/home/ash/Documents/hono-open-api-starter/x.html';

// Define the output directory and ensure it exists
const outputDir = path.join(__dirname, '..', 'data');
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}
const outputFilePath = path.join(outputDir, 'games.json');

// --- Execution ---
parseGamesFromHtml(inputFilePath, outputFilePath);
</file>

<file path="./backend/scripts/parser.js">
const fs = require('fs');
const path = require('path');
const cheerio = require('cheerio');

/**
 * This script parses an HTML file to extract game information.
 * It reads the specified HTML file, finds all game cards, and extracts
 * the game name, image URL, and a demo launcher link for each game.
 * The extracted data is then saved to a specified JSON file.
 *
 * @param {string} inputPath - The absolute path to the HTML file to parse.
 * @param {string} outputPath - The absolute path to save the output JSON file.
 */
function parseGamesFromHtml(inputPath, outputPath) {
  try {
    // 1. Read the HTML file
    const html = fs.readFileSync(inputPath, 'utf-8');

    // 2. Load the HTML into cheerio for easy traversal
    const $ = cheerio.load(html);
      games.push(gameData);
    });

    // 5. Save the data as a nicely formatted JSON string to a file
    const jsonData = JSON.stringify(games, null, 2);
    fs.writeFileSync(outputPath, jsonData, 'utf-8');
    console.log(`✅ Successfully parsed ${games.length} games and saved to ${outputPath}`);
  } catch (error) {
    console.error(`Error processing file at ${inputPath}:`, error);
  }
}

// --- Configuration ---
const inputFilePath = '/home/ash/Documents/hono-open-api-starter/x.html';

// Define the output directory and ensure it exists
const outputDir = path.join(__dirname, '..', 'data');
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}
const outputFilePath = path.join(outputDir, 'games.json');

// --- Execution ---
parseGamesFromHtml(inputFilePath, outputFilePath);
</file>

<file path="./backend/scripts/seed.ts">
import chalk from "chalk";
import dotenv from 'dotenv';
dotenv.config();

import db from "../src/db";
import { seedGames } from "./seeds/games";
import { seedGameSpins } from "./seeds/gamespins"; // 1. Import the new seeder
import { seedOperator } from "./seeds/operator";
import { seedProducts } from "./seeds/products";
import { resetDatabase } from "./seeds/reset";
import { seedHardcodedUser, seedUsers } from "./seeds/users";
import { seedVipLevels } from "./seeds/vip";

// --- Script Configuration ---
const RESET_DATABASE = true;
const USER_COUNT = 10;
// --- End Configuration ---

async function main() {
  console.log(chalk.blue("🚀 Starting database seeding process..."));
  const startTime = Date.now();

  try {
    if (RESET_DATABASE) {
      await resetDatabase(db as any);
    }

    // 1. Seed foundational data that has no dependencies
    const operator = await seedOperator(db as any);
    await seedVipLevels(db as any);
    await seedGames(db as any);

    // 2. Seed data that depends on the operator
    await seedProducts(db as any, operator.id);

    // 3. Seed users, which now depend on the operator for their wallets
    await seedUsers(db as any, USER_COUNT, operator.id);
    await seedHardcodedUser(db as any, operator.id);
    // 4. Ensure all users have VIP info (run this after users are created)
    await seedVipLevels(db as any);

    // 4. Seed transactional data that depends on users and games
    await seedGameSpins(db as any); // 2. Call the new seeder function
  }
  catch (error) {
    console.error("❌ An error occurred during the seeding process:");
    console.error(error);
    process.exit(1);
  }
  // finally {
  //   // Ensure the database connection is closed to prevent hanging processes
  //   // await connection.
  //   console.log(chalk.blue('seeding complete'))
  // }

  const endTime = Date.now();
  const duration = (endTime - startTime) / 1000;
  console.log(`\n✅ Seeding complete in ${duration.toFixed(2)} seconds.`);
  process.exit(0);
}

main();
</file>

<file path="./backend/src/db/migrations/meta/_journal.json">
{
  "version": "6",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "6",
      "when": 1721853530586,
      "tag": "0001_create_enums",
      "breakpoints": true
    }
  ]
}
</file>

<file path="./backend/src/db/migrations/meta/0000_snapshot.json">
{
  "id": "06761f9c-aa31-4710-8594-58a7c37de456",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.auth_sessions": {
      "name": "auth_sessions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "session_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'ACTIVE'"
        },
        "ip_address": {
          "name": "ip_address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_agent": {
          "name": "user_agent",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "device_id": {
          "name": "device_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "last_seen": {
          "name": "last_seen",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "auth_session_user_idx": {
          "name": "auth_session_user_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "auth_session_status_idx": {
          "name": "auth_session_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "auth_sessions_user_id_users_id_fk": {
          "name": "auth_sessions_user_id_users_id_fk",
          "tableFrom": "auth_sessions",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.favorite_games": {
      "name": "favorite_games",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "favorite_games_user_id_users_id_fk": {
          "name": "favorite_games_user_id_users_id_fk",
          "tableFrom": "favorite_games",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "favorite_games_game_id_games_id_fk": {
          "name": "favorite_games_game_id_games_id_fk",
          "tableFrom": "favorite_games",
          "tableTo": "games",
          "columnsFrom": [
            "game_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.games": {
      "name": "games",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "goldsvet_data": {
          "name": "goldsvet_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "category": {
          "name": "category",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "tags": {
          "name": "tags",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "thumbnail_url": {
          "name": "thumbnail_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "banner_url": {
          "name": "banner_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "provider_name": {
          "name": "provider_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "provider_id": {
          "name": "provider_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "total_wagered": {
          "name": "total_wagered",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "total_won": {
          "name": "total_won",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "target_rtp": {
          "name": "target_rtp",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "is_featured": {
          "name": "is_featured",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "tournament_directives": {
          "name": "tournament_directives",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "games_operator_fkey": {
          "name": "games_operator_fkey",
          "tableFrom": "games",
          "tableTo": "operators",
          "columnsFrom": [
            "operator_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.game_history": {
      "name": "game_history",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "game_history_user_id_users_id_fk": {
          "name": "game_history_user_id_users_id_fk",
          "tableFrom": "game_history",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "game_history_game_id_games_id_fk": {
          "name": "game_history_game_id_games_id_fk",
          "tableFrom": "game_history",
          "tableTo": "games",
          "columnsFrom": [
            "game_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.game_sessions": {
      "name": "game_sessions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "auth_session_id": {
          "name": "auth_session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "session_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'ACTIVE'"
        },
        "total_wagered": {
          "name": "total_wagered",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "total_won": {
          "name": "total_won",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "total_xp_gained": {
          "name": "total_xp_gained",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "rtp": {
          "name": "rtp",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "duration": {
          "name": "duration",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "end_at": {
          "name": "end_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "game_session_auth_session_idx": {
          "name": "game_session_auth_session_idx",
          "columns": [
            {
              "expression": "auth_session_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "game_session_user_idx": {
          "name": "game_session_user_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "game_sessions_auth_session_id_auth_sessions_id_fk": {
          "name": "game_sessions_auth_session_id_auth_sessions_id_fk",
          "tableFrom": "game_sessions",
          "tableTo": "auth_sessions",
          "columnsFrom": [
            "auth_session_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "game_sessions_user_id_users_id_fk": {
          "name": "game_sessions_user_id_users_id_fk",
          "tableFrom": "game_sessions",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.game_spins": {
      "name": "game_spins",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "player_name": {
          "name": "player_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "game_name": {
          "name": "game_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "spin_data": {
          "name": "spin_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "gross_win_amount": {
          "name": "gross_win_amount",
          "type": "double precision",
          "primaryKey": false,
          "notNull": true
        },
        "wager_amount": {
          "name": "wager_amount",
          "type": "double precision",
          "primaryKey": false,
          "notNull": true
        },
        "spin_number": {
          "name": "spin_number",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "player_avatar": {
          "name": "player_avatar",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "currency_id": {
          "name": "currency_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "occurred_at": {
          "name": "occurred_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true
        },
        "sessionDataId": {
          "name": "sessionDataId",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.in_active_wallets": {
      "name": "in_active_wallets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "balance": {
          "name": "balance",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "payment_method": {
          "name": "payment_method",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'INSTORE_CASH'"
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "cashtag": {
          "name": "cashtag",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_used_at": {
          "name": "last_used_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "in_active_wallets_address_unique": {
          "name": "in_active_wallets_address_unique",
          "nullsNotDistinct": false,
          "columns": [
            "address"
          ]
        },
        "in_active_wallets_cashtag_unique": {
          "name": "in_active_wallets_cashtag_unique",
          "nullsNotDistinct": false,
          "columns": [
            "cashtag"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jackpots": {
      "name": "jackpots",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "current_amount_coins": {
          "name": "current_amount_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "seed_amount_coins": {
          "name": "seed_amount_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "minimum_bet_coins": {
          "name": "minimum_bet_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 1
        },
        "contribution_rate_basis_points": {
          "name": "contribution_rate_basis_points",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "probability_per_million": {
          "name": "probability_per_million",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "minimum_time_between_wins_minutes": {
          "name": "minimum_time_between_wins_minutes",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "last_won_at": {
          "name": "last_won_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "last_won_by": {
          "name": "last_won_by",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "jackpots_lastWinner_fkey": {
          "name": "jackpots_lastWinner_fkey",
          "tableFrom": "jackpots",
          "tableTo": "users",
          "columnsFrom": [
            "last_won_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jackpot_contributions": {
      "name": "jackpot_contributions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "jackpot_id": {
          "name": "jackpot_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "game_spin_id": {
          "name": "game_spin_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "contribution_amount_coins": {
          "name": "contribution_amount_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "JackpotContribution_jackpotId_gameSpinId_key": {
          "name": "JackpotContribution_jackpotId_gameSpinId_key",
          "columns": [
            {
              "expression": "jackpot_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "game_spin_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "jackpot_contributions_gameSpin_fkey": {
          "name": "jackpot_contributions_gameSpin_fkey",
          "tableFrom": "jackpot_contributions",
          "tableTo": "game_spins",
          "columnsFrom": [
            "game_spin_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "jackpot_contributions_jackpot_fkey": {
          "name": "jackpot_contributions_jackpot_fkey",
          "tableFrom": "jackpot_contributions",
          "tableTo": "jackpots",
          "columnsFrom": [
            "jackpot_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jackpot_wins": {
      "name": "jackpot_wins",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "jackpot_id": {
          "name": "jackpot_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "winner_id": {
          "name": "winner_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "win_amount_coins": {
          "name": "win_amount_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "game_spin_id": {
          "name": "game_spin_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "transaction_id": {
          "name": "transaction_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "session_data_id": {
          "name": "session_data_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "jackpot_wins_gameSpin_fkey": {
          "name": "jackpot_wins_gameSpin_fkey",
          "tableFrom": "jackpot_wins",
          "tableTo": "game_spins",
          "columnsFrom": [
            "game_spin_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "jackpot_wins_jackpot_fkey": {
          "name": "jackpot_wins_jackpot_fkey",
          "tableFrom": "jackpot_wins",
          "tableTo": "jackpots",
          "columnsFrom": [
            "jackpot_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "jackpot_wins_winner_fkey": {
          "name": "jackpot_wins_winner_fkey",
          "tableFrom": "jackpot_wins",
          "tableTo": "users",
          "columnsFrom": [
            "winner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "jackpot_wins_game_spin_id_unique": {
          "name": "jackpot_wins_game_spin_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "game_spin_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.operators": {
      "name": "operators",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "operator_secret": {
          "name": "operator_secret",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "operator_access": {
          "name": "operator_access",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "callback_url": {
          "name": "callback_url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "allowed_ips": {
          "name": "allowed_ips",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "balance": {
          "name": "balance",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "net-revenue": {
          "name": "net-revenue",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "accepted_payments": {
          "name": "accepted_payments",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "owner_id": {
          "name": "owner_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "last_used_at": {
          "name": "last_used_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "operators_name_unique": {
          "name": "operators_name_unique",
          "nullsNotDistinct": false,
          "columns": [
            "name"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.products": {
      "name": "products",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'default'"
        },
        "product_type": {
          "name": "product_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'bundle'"
        },
        "bonus_total_in_credits": {
          "name": "bonus_total_in_credits",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "price_in_cents": {
          "name": "price_in_cents",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "amount_to_receive_in_credits": {
          "name": "amount_to_receive_in_credits",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "best_value": {
          "name": "best_value",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "discount_in_cents": {
          "name": "discount_in_cents",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_spins": {
          "name": "bonus_spins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "is_promo": {
          "name": "is_promo",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "total_discount_in_cents": {
          "name": "total_discount_in_cents",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "products_operator_fkey": {
          "name": "products_operator_fkey",
          "tableFrom": "products",
          "tableTo": "operators",
          "columnsFrom": [
            "operator_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tournament_participants": {
      "name": "tournament_participants",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "tournament_id": {
          "name": "tournament_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "score": {
          "name": "score",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "rank": {
          "name": "rank",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "joined_at": {
          "name": "joined_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "tournament_participants_user_id_users_id_fk": {
          "name": "tournament_participants_user_id_users_id_fk",
          "tableFrom": "tournament_participants",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.transactions": {
      "name": "transactions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "processed_at": {
          "name": "processed_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "wallet_id": {
          "name": "wallet_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'PENDING'"
        },
        "amount": {
          "name": "amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "net_amount": {
          "name": "net_amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "fee_amount": {
          "name": "fee_amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "product_id": {
          "name": "product_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "payment_method": {
          "name": "payment_method",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "balance_before": {
          "name": "balance_before",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "balance_after": {
          "name": "balance_after",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "bonus_balance_before": {
          "name": "bonus_balance_before",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "bonus_balance_after": {
          "name": "bonus_balance_after",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "bonus_amount": {
          "name": "bonus_amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "wagering_requirement": {
          "name": "wagering_requirement",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "wagering_progress": {
          "name": "wagering_progress",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "provider": {
          "name": "provider",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "provider_tx_id": {
          "name": "provider_tx_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "related_game_id": {
          "name": "related_game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "related_round_id": {
          "name": "related_round_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "transactions_product_fkey": {
          "name": "transactions_product_fkey",
          "tableFrom": "transactions",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "cascade"
        },
        "transactions_wallet_fkey": {
          "name": "transactions_wallet_fkey",
          "tableFrom": "transactions",
          "tableTo": "wallets",
          "columnsFrom": [
            "wallet_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "username": {
          "name": "username",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "password_hash": {
          "name": "password_hash",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "access_token": {
          "name": "access_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "refresh_token": {
          "name": "refresh_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "access_token_expires_at": {
          "name": "access_token_expires_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "refresh_token_expires_at": {
          "name": "refresh_token_expires_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "current_game_session_data_id": {
          "name": "current_game_session_data_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "current_auth_session_data_id": {
          "name": "current_auth_session_data_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "'avatar-01'"
        },
        "role": {
          "name": "role",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USER'"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "last_login_at": {
          "name": "last_login_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "total_xp_gained": {
          "name": "total_xp_gained",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "active_wallet_id": {
          "name": "active_wallet_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "vip_info_id": {
          "name": "vip_info_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "users_username_unique": {
          "name": "users_username_unique",
          "nullsNotDistinct": false,
          "columns": [
            "username"
          ]
        },
        "users_email_unique": {
          "name": "users_email_unique",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        },
        "users_current_game_session_data_id_unique": {
          "name": "users_current_game_session_data_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "current_game_session_data_id"
          ]
        },
        "users_current_auth_session_data_id_unique": {
          "name": "users_current_auth_session_data_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "current_auth_session_data_id"
          ]
        },
        "users_active_wallet_id_unique": {
          "name": "users_active_wallet_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "active_wallet_id"
          ]
        },
        "users_vip_info_id_unique": {
          "name": "users_vip_info_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "vip_info_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.vip_info": {
      "name": "vip_info",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "level": {
          "name": "level",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 1
        },
        "xp": {
          "name": "xp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "totalXp": {
          "name": "totalXp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "currentRankid": {
          "name": "currentRankid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "vip_info_user_fkey": {
          "name": "vip_info_user_fkey",
          "tableFrom": "vip_info",
          "tableTo": "users",
          "columnsFrom": [
            "userId"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "vip_info_currentRank_fkey": {
          "name": "vip_info_currentRank_fkey",
          "tableFrom": "vip_info",
          "tableTo": "VipRank",
          "columnsFrom": [
            "currentRankid"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "vip_info_userId_unique": {
          "name": "vip_info_userId_unique",
          "nullsNotDistinct": false,
          "columns": [
            "userId"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.VipLevel": {
      "name": "VipLevel",
      "schema": "",
      "columns": {
        "level": {
          "name": "level",
          "type": "integer",
          "primaryKey": true,
          "notNull": true
        },
        "xpForNext": {
          "name": "xpForNext",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.vip_level_up_history": {
      "name": "vip_level_up_history",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "previous_level": {
          "name": "previous_level",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "new_level": {
          "name": "new_level",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "timestamp": {
          "name": "timestamp",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "vip_info_id": {
          "name": "vip_info_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "vip_level_up_history_vipInfo_fkey": {
          "name": "vip_level_up_history_vipInfo_fkey",
          "tableFrom": "vip_level_up_history",
          "tableTo": "vip_info",
          "columnsFrom": [
            "vip_info_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.VipRank": {
      "name": "VipRank",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "minXp": {
          "name": "minXp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "dailyBonusCoinPct": {
          "name": "dailyBonusCoinPct",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "hourlyBonusCoinPct": {
          "name": "hourlyBonusCoinPct",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "purchaseBonusCoinPct": {
          "name": "purchaseBonusCoinPct",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "levelUpBonusCoinPct": {
          "name": "levelUpBonusCoinPct",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "hasConcierge": {
          "name": "hasConcierge",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "hasVipLoungeAccess": {
          "name": "hasVipLoungeAccess",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "isInvitationOnly": {
          "name": "isInvitationOnly",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "VipRank_name_unique": {
          "name": "VipRank_name_unique",
          "nullsNotDistinct": false,
          "columns": [
            "name"
          ]
        },
        "VipRank_minXp_unique": {
          "name": "VipRank_minXp_unique",
          "nullsNotDistinct": false,
          "columns": [
            "minXp"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.wallets": {
      "name": "wallets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "balance": {
          "name": "balance",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "payment_method": {
          "name": "payment_method",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'INSTORE_CASH'"
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "cashtag": {
          "name": "cashtag",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_used_at": {
          "name": "last_used_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "wallets_user_id_users_id_fk": {
          "name": "wallets_user_id_users_id_fk",
          "tableFrom": "wallets",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "wallets_address_unique": {
          "name": "wallets_address_unique",
          "nullsNotDistinct": false,
          "columns": [
            "address"
          ]
        },
        "wallets_cashtag_unique": {
          "name": "wallets_cashtag_unique",
          "nullsNotDistinct": false,
          "columns": [
            "cashtag"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.app_versions": {
      "name": "app_versions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "app_id": {
          "name": "app_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "version": {
          "name": "version",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "platform": {
          "name": "platform",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "update_type": {
          "name": "update_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "download_url": {
          "name": "download_url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "changelog": {
          "name": "changelog",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "mandatory": {
          "name": "mandatory",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "release_date": {
          "name": "release_date",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "file_size": {
          "name": "file_size",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "checksum": {
          "name": "checksum",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "version_unique_idx": {
          "name": "version_unique_idx",
          "nullsNotDistinct": false,
          "columns": [
            "app_id",
            "platform",
            "version"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_request_custom_data": {
      "name": "rtg_settings_request_custom_data",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "site_id": {
          "name": "site_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "extras": {
          "name": "extras",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_request_custom_data_request_id_rtg_settings_requests_id_fk": {
          "name": "rtg_settings_request_custom_data_request_id_rtg_settings_requests_id_fk",
          "tableFrom": "rtg_settings_request_custom_data",
          "tableTo": "rtg_settings_requests",
          "columnsFrom": [
            "request_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_request_user_data": {
      "name": "rtg_settings_request_user_data",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "hash": {
          "name": "hash",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "affiliate": {
          "name": "affiliate",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "lang": {
          "name": "lang",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "channel": {
          "name": "channel",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_type": {
          "name": "user_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "fingerprint": {
          "name": "fingerprint",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_request_user_data_request_id_rtg_settings_requests_id_fk": {
          "name": "rtg_settings_request_user_data_request_id_rtg_settings_requests_id_fk",
          "tableFrom": "rtg_settings_request_user_data",
          "tableTo": "rtg_settings_requests",
          "columnsFrom": [
            "request_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_requests": {
      "name": "rtg_settings_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "play_mode": {
          "name": "play_mode",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_result_game": {
      "name": "rtg_settings_result_game",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "settings_result_id": {
          "name": "settings_result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "cols": {
          "name": "cols",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "rows": {
          "name": "rows",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "version": {
          "name": "version",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "rtp_default": {
          "name": "rtp_default",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "volatility_index": {
          "name": "volatility_index",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "max_multiplier": {
          "name": "max_multiplier",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "game_type": {
          "name": "game_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "has_state": {
          "name": "has_state",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_result_game_settings_result_id_rtg_settings_results_id_fk": {
          "name": "rtg_settings_result_game_settings_result_id_rtg_settings_results_id_fk",
          "tableFrom": "rtg_settings_result_game",
          "tableTo": "rtg_settings_results",
          "columnsFrom": [
            "settings_result_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_result_user": {
      "name": "rtg_settings_result_user",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "settings_result_id": {
          "name": "settings_result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "casino": {
          "name": "casino",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "can_gamble": {
          "name": "can_gamble",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "last_win": {
          "name": "last_win",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "server_time": {
          "name": "server_time",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_result_user_settings_result_id_rtg_settings_results_id_fk": {
          "name": "rtg_settings_result_user_settings_result_id_rtg_settings_results_id_fk",
          "tableFrom": "rtg_settings_result_user",
          "tableTo": "rtg_settings_results",
          "columnsFrom": [
            "settings_result_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_result_user_balance": {
      "name": "rtg_settings_result_user_balance",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "settings_result_user_id": {
          "name": "settings_result_user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "cash": {
          "name": "cash",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "free_bets": {
          "name": "free_bets",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "session_cash": {
          "name": "session_cash",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "session_free_bets": {
          "name": "session_free_bets",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "bonus": {
          "name": "bonus",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_result_user_balance_settings_result_user_id_rtg_settings_result_user_id_fk": {
          "name": "rtg_settings_result_user_balance_settings_result_user_id_rtg_settings_result_user_id_fk",
          "tableFrom": "rtg_settings_result_user_balance",
          "tableTo": "rtg_settings_result_user",
          "columnsFrom": [
            "settings_result_user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_results": {
      "name": "rtg_settings_results",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "success": {
          "name": "success",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_request_custom_data": {
      "name": "rtg_spin_request_custom_data",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "site_id": {
          "name": "site_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "extras": {
          "name": "extras",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_request_custom_data_request_id_rtg_spin_requests_id_fk": {
          "name": "rtg_spin_request_custom_data_request_id_rtg_spin_requests_id_fk",
          "tableFrom": "rtg_spin_request_custom_data",
          "tableTo": "rtg_spin_requests",
          "columnsFrom": [
            "request_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_request_user_data": {
      "name": "rtg_spin_request_user_data",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "affiliate": {
          "name": "affiliate",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "lang": {
          "name": "lang",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "channel": {
          "name": "channel",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_type": {
          "name": "user_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "fingerprint": {
          "name": "fingerprint",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_request_user_data_request_id_rtg_spin_requests_id_fk": {
          "name": "rtg_spin_request_user_data_request_id_rtg_spin_requests_id_fk",
          "tableFrom": "rtg_spin_request_user_data",
          "tableTo": "rtg_spin_requests",
          "columnsFrom": [
            "request_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_requests": {
      "name": "rtg_spin_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "play_mode": {
          "name": "play_mode",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "stake": {
          "name": "stake",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_id": {
          "name": "bonus_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "extras": {
          "name": "extras",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "game_mode": {
          "name": "game_mode",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_result_game": {
      "name": "rtg_spin_result_game",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "spin_result_id": {
          "name": "spin_result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "stake": {
          "name": "stake",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "multiplier": {
          "name": "multiplier",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "has_state": {
          "name": "has_state",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_result_game_spin_result_id_rtg_spin_results_id_fk": {
          "name": "rtg_spin_result_game_spin_result_id_rtg_spin_results_id_fk",
          "tableFrom": "rtg_spin_result_game",
          "tableTo": "rtg_spin_results",
          "columnsFrom": [
            "spin_result_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_result_game_win": {
      "name": "rtg_spin_result_game_win",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "spin_result_game_id": {
          "name": "spin_result_game_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "lines": {
          "name": "lines",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "total": {
          "name": "total",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_result_game_win_spin_result_game_id_rtg_spin_result_game_id_fk": {
          "name": "rtg_spin_result_game_win_spin_result_game_id_rtg_spin_result_game_id_fk",
          "tableFrom": "rtg_spin_result_game_win",
          "tableTo": "rtg_spin_result_game",
          "columnsFrom": [
            "spin_result_game_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_result_user": {
      "name": "rtg_spin_result_user",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "spin_result_id": {
          "name": "spin_result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "can_gamble": {
          "name": "can_gamble",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "session_net_position": {
          "name": "session_net_position",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "server_time": {
          "name": "server_time",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_result_user_spin_result_id_rtg_spin_results_id_fk": {
          "name": "rtg_spin_result_user_spin_result_id_rtg_spin_results_id_fk",
          "tableFrom": "rtg_spin_result_user",
          "tableTo": "rtg_spin_results",
          "columnsFrom": [
            "spin_result_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_result_user_balance": {
      "name": "rtg_spin_result_user_balance",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "spin_result_user_id": {
          "name": "spin_result_user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "cash_at_start": {
          "name": "cash_at_start",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "cash_after_bet": {
          "name": "cash_after_bet",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "cash_at_end": {
          "name": "cash_at_end",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "free_bets_at_start": {
          "name": "free_bets_at_start",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "free_bets_after_bet": {
          "name": "free_bets_after_bet",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "free_bets_at_end": {
          "name": "free_bets_at_end",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_at_start": {
          "name": "bonus_at_start",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_after_bet": {
          "name": "bonus_after_bet",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_at_end": {
          "name": "bonus_at_end",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_result_user_balance_spin_result_user_id_rtg_spin_result_user_id_fk": {
          "name": "rtg_spin_result_user_balance_spin_result_user_id_rtg_spin_result_user_id_fk",
          "tableFrom": "rtg_spin_result_user_balance",
          "tableTo": "rtg_spin_result_user",
          "columnsFrom": [
            "spin_result_user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_results": {
      "name": "rtg_spin_results",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "success": {
          "name": "success",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "error_code": {
          "name": "error_code",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tasks": {
      "name": "tasks",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "done": {
          "name": "done",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.game_categories": {
      "name": "game_categories",
      "schema": "public",
      "values": [
        "slots",
        "fish",
        "table",
        "live",
        "poker",
        "lottery",
        "virtual",
        "other"
      ]
    },
    "public.GameProviderName": {
      "name": "GameProviderName",
      "schema": "public",
      "values": [
        "pragmaticplay",
        "evoplay",
        "netent",
        "playngo",
        "relaxgaming",
        "hacksaw",
        "bgaming",
        "spribe",
        "internal",
        "redtiger",
        "netgame",
        "bigfishgames",
        "cqnine",
        "nolimit",
        "kickass"
      ]
    },
    "public.PaymentMethod": {
      "name": "PaymentMethod",
      "schema": "public",
      "values": [
        "INSTORE_CASH",
        "INSTORE_CARD",
        "CASH_APP"
      ]
    },
    "public.Permission": {
      "name": "Permission",
      "schema": "public",
      "values": [
        "read",
        "write",
        "upload",
        "manage_users",
        "manage_settings",
        "launch_game"
      ]
    },
    "public.Role": {
      "name": "Role",
      "schema": "public",
      "values": [
        "USER",
        "ADMIN",
        "VIP",
        "MODERATOR",
        "SYSTEM",
        "OWNER",
        "MEMBER",
        "OPERATOR",
        "SUPPORT_AGENT"
      ]
    },
    "public.SessionStatus": {
      "name": "SessionStatus",
      "schema": "public",
      "values": [
        "ACTIVE",
        "COMPLETED",
        "ABANDONED",
        "TIMEOUT"
      ]
    },
    "public.TournamentStatus": {
      "name": "TournamentStatus",
      "schema": "public",
      "values": [
        "PENDING",
        "ACTIVE",
        "COMPLETED",
        "CANCELLED"
      ]
    },
    "public.TransactionStatus": {
      "name": "TransactionStatus",
      "schema": "public",
      "values": [
        "PENDING",
        "PROCESSING",
        "COMPLETED",
        "FAILED",
        "CANCELLED",
        "REFUNDED",
        "EXPIRED",
        "REJECTED",
        "REQUIRES_ACTION",
        "ON_HOLD"
      ]
    },
    "public.TypeOfJackpot": {
      "name": "TypeOfJackpot",
      "schema": "public",
      "values": [
        "MINOR",
        "MAJOR",
        "GRAND"
      ]
    },
    "public.TypeOfTransaction": {
      "name": "TypeOfTransaction",
      "schema": "public",
      "values": [
        "DEPOSIT",
        "WITHDRAWAL",
        "BET",
        "WIN",
        "TRANSFER_SENT",
        "TRANSFER_RECEIVED",
        "SYSTEM_ADJUSTMENT_CREDIT",
        "SYSTEM_ADJUSTMENT_DEBIT",
        "TOURNAMENT_BUYIN",
        "TOURNAMENT_PRIZE",
        "AFFILIATE_COMMISSION",
        "REFUND",
        "FEE",
        "BONUS_AWARD",
        "BET_PLACE",
        "BET_WIN",
        "BET_LOSE",
        "BET_REFUND",
        "BONUS_WAGER",
        "BONUS_CONVERT",
        "BONUS_EXPIRED",
        "XP_AWARD",
        "ADJUSTMENT_ADD",
        "ADJUSTMENT_SUB",
        "INTERNAL_TRANSFER",
        "PRODUCT_PURCHASE",
        "REBATE_PAYOUT",
        "JACKPOT_WIN",
        "JACKPOT_CONTRIBUTION"
      ]
    },
    "public.UpdateType": {
      "name": "UpdateType",
      "schema": "public",
      "values": [
        "BINARY",
        "OTA"
      ]
    },
    "public.UserRole": {
      "name": "UserRole",
      "schema": "public",
      "values": [
        "USER",
        "ADMIN",
        "MODERATOR",
        "SUPPORT",
        "BOT",
        "SYSTEM"
      ]
    },
    "public.session_status": {
      "name": "session_status",
      "schema": "public",
      "values": [
        "ACTIVE",
        "COMPLETED",
        "EXPIRED"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}
</file>

<file path="./backend/src/db/migrations/0000_complete_thanos.sql">
CREATE TYPE "public"."game_categories" AS ENUM('slots', 'fish', 'table', 'live', 'poker', 'lottery', 'virtual', 'other');--> statement-breakpoint
CREATE TYPE "public"."GameProviderName" AS ENUM('pragmaticplay', 'evoplay', 'netent', 'playngo', 'relaxgaming', 'hacksaw', 'bgaming', 'spribe', 'internal', 'redtiger', 'netgame', 'bigfishgames', 'cqnine', 'nolimit', 'kickass');--> statement-breakpoint
CREATE TYPE "public"."PaymentMethod" AS ENUM('INSTORE_CASH', 'INSTORE_CARD', 'CASH_APP');--> statement-breakpoint
CREATE TYPE "public"."Permission" AS ENUM('read', 'write', 'upload', 'manage_users', 'manage_settings', 'launch_game');--> statement-breakpoint
CREATE TYPE "public"."Role" AS ENUM('USER', 'ADMIN', 'VIP', 'MODERATOR', 'SYSTEM', 'OWNER', 'MEMBER', 'OPERATOR', 'SUPPORT_AGENT');--> statement-breakpoint
CREATE TYPE "public"."SessionStatus" AS ENUM('ACTIVE', 'COMPLETED', 'ABANDONED', 'TIMEOUT');--> statement-breakpoint
CREATE TYPE "public"."TournamentStatus" AS ENUM('PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED');--> statement-breakpoint
CREATE TYPE "public"."TransactionStatus" AS ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'EXPIRED', 'REJECTED', 'REQUIRES_ACTION', 'ON_HOLD');--> statement-breakpoint
CREATE TYPE "public"."TypeOfJackpot" AS ENUM('MINOR', 'MAJOR', 'GRAND');--> statement-breakpoint
CREATE TYPE "public"."TypeOfTransaction" AS ENUM('DEPOSIT', 'WITHDRAWAL', 'BET', 'WIN', 'TRANSFER_SENT', 'TRANSFER_RECEIVED', 'SYSTEM_ADJUSTMENT_CREDIT', 'SYSTEM_ADJUSTMENT_DEBIT', 'TOURNAMENT_BUYIN', 'TOURNAMENT_PRIZE', 'AFFILIATE_COMMISSION', 'REFUND', 'FEE', 'BONUS_AWARD', 'BET_PLACE', 'BET_WIN', 'BET_LOSE', 'BET_REFUND', 'BONUS_WAGER', 'BONUS_CONVERT', 'BONUS_EXPIRED', 'XP_AWARD', 'ADJUSTMENT_ADD', 'ADJUSTMENT_SUB', 'INTERNAL_TRANSFER', 'PRODUCT_PURCHASE', 'REBATE_PAYOUT', 'JACKPOT_WIN', 'JACKPOT_CONTRIBUTION');--> statement-breakpoint
CREATE TYPE "public"."UpdateType" AS ENUM('BINARY', 'OTA');--> statement-breakpoint
CREATE TYPE "public"."UserRole" AS ENUM('USER', 'ADMIN', 'MODERATOR', 'SUPPORT', 'BOT', 'SYSTEM');--> statement-breakpoint
CREATE TYPE "public"."session_status" AS ENUM('ACTIVE', 'COMPLETED', 'EXPIRED');--> statement-breakpoint
CREATE TABLE "auth_sessions" (
	"id" varchar PRIMARY KEY NOT NULL,
	"user_id" text NOT NULL,
	"status" "session_status" DEFAULT 'ACTIVE' NOT NULL,
	"ip_address" text,
	"user_agent" text,
	"device_id" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"expires_at" timestamp with time zone,
	"last_seen" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "favorite_games" (
	"id" varchar PRIMARY KEY NOT NULL,
	"user_id" text NOT NULL,
	"game_id" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE "games" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"title" text NOT NULL,
	"goldsvet_data" jsonb,
	"description" text,
	"category" text NOT NULL,
	"tags" text[] NOT NULL,
	"thumbnail_url" text,
	"banner_url" text,
	"provider_name" text NOT NULL,
	"provider_id" text,
	"total_wagered" integer NOT NULL,
	"total_won" integer NOT NULL,
	"target_rtp" integer,
	"is_featured" boolean NOT NULL,
	"is_active" boolean DEFAULT true NOT NULL,
	"operator_id" text,
	"tournament_directives" jsonb,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "game_history" (
	"id" varchar PRIMARY KEY NOT NULL,
	"user_id" text NOT NULL,
	"game_id" text NOT NULL,
	"created_at" timestamp (3) DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "game_sessions" (
	"id" varchar PRIMARY KEY NOT NULL,
	"auth_session_id" text NOT NULL,
	"user_id" text NOT NULL,
	"game_id" text,
	"status" "session_status" DEFAULT 'ACTIVE' NOT NULL,
	"total_wagered" integer DEFAULT 0 NOT NULL,
	"total_won" integer DEFAULT 0 NOT NULL,
	"total_xp_gained" integer DEFAULT 0 NOT NULL,
	"rtp" numeric(5, 2),
	"duration" integer DEFAULT 0 NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"end_at" timestamp with time zone
);
--> statement-breakpoint
CREATE TABLE "game_spins" (
	"id" varchar PRIMARY KEY NOT NULL,
	"player_name" text,
	"game_name" text,
	"game_id" text,
	"spin_data" jsonb,
	"gross_win_amount" double precision NOT NULL,
	"wager_amount" double precision NOT NULL,
	"spin_number" integer NOT NULL,
	"player_avatar" text,
	"currency_id" text,
	"session_id" text NOT NULL,
	"user_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	"occurred_at" timestamp (3) NOT NULL,
	"sessionDataId" text
);
--> statement-breakpoint
CREATE TABLE "in_active_wallets" (
	"id" varchar PRIMARY KEY NOT NULL,
	"balance" integer NOT NULL,
	"payment_method" text DEFAULT 'INSTORE_CASH' NOT NULL,
	"currency" text DEFAULT 'USD' NOT NULL,
	"is_active" boolean NOT NULL,
	"is_default" boolean NOT NULL,
	"address" text,
	"cashtag" text,
	"user_id" text,
	"operator_id" text NOT NULL,
	"last_used_at" timestamp (3),
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	CONSTRAINT "in_active_wallets_address_unique" UNIQUE("address"),
	CONSTRAINT "in_active_wallets_cashtag_unique" UNIQUE("cashtag")
);
--> statement-breakpoint
CREATE TABLE "jackpots" (
	"id" varchar PRIMARY KEY NOT NULL,
	"type" text NOT NULL,
	"current_amount_coins" integer NOT NULL,
	"seed_amount_coins" integer NOT NULL,
	"minimum_bet_coins" integer DEFAULT 1 NOT NULL,
	"contribution_rate_basis_points" integer NOT NULL,
	"probability_per_million" integer NOT NULL,
	"minimum_time_between_wins_minutes" integer NOT NULL,
	"last_won_at" timestamp (3),
	"last_won_by" text,
	"is_active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "jackpot_contributions" (
	"id" varchar PRIMARY KEY NOT NULL,
	"jackpot_id" text NOT NULL,
	"user_id" text,
	"game_spin_id" text NOT NULL,
	"contribution_amount_coins" integer NOT NULL,
	"created_at" timestamp (3) DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "jackpot_wins" (
	"id" varchar PRIMARY KEY NOT NULL,
	"jackpot_id" text NOT NULL,
	"winner_id" text NOT NULL,
	"win_amount_coins" integer NOT NULL,
	"game_spin_id" text NOT NULL,
	"transaction_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"session_data_id" text,
	CONSTRAINT "jackpot_wins_game_spin_id_unique" UNIQUE("game_spin_id")
);
--> statement-breakpoint
CREATE TABLE "operators" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"operator_secret" text NOT NULL,
	"operator_access" text NOT NULL,
	"callback_url" text NOT NULL,
	"is_active" boolean DEFAULT true NOT NULL,
	"allowed_ips" text[] NOT NULL,
	"description" text,
	"balance" integer NOT NULL,
	"net-revenue" integer NOT NULL,
	"accepted_payments" text[] NOT NULL,
	"owner_id" text,
	"last_used_at" timestamp (3),
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	CONSTRAINT "operators_name_unique" UNIQUE("name")
);
--> statement-breakpoint
CREATE TABLE "products" (
	"id" varchar PRIMARY KEY NOT NULL,
	"title" text DEFAULT 'default' NOT NULL,
	"product_type" text DEFAULT 'bundle' NOT NULL,
	"bonus_total_in_credits" integer NOT NULL,
	"is_active" boolean,
	"price_in_cents" integer NOT NULL,
	"amount_to_receive_in_credits" integer NOT NULL,
	"best_value" integer NOT NULL,
	"discount_in_cents" integer NOT NULL,
	"bonus_spins" integer NOT NULL,
	"is_promo" boolean,
	"total_discount_in_cents" integer NOT NULL,
	"operator_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "tournament_participants" (
	"id" varchar PRIMARY KEY NOT NULL,
	"tournament_id" text NOT NULL,
	"user_id" text NOT NULL,
	"score" integer NOT NULL,
	"rank" integer,
	"joined_at" timestamp (3) DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "transactions" (
	"id" varchar PRIMARY KEY NOT NULL,
	"processed_at" timestamp (3),
	"wallet_id" text,
	"type" text NOT NULL,
	"status" text DEFAULT 'PENDING' NOT NULL,
	"amount" integer NOT NULL,
	"net_amount" integer,
	"fee_amount" integer,
	"product_id" text,
	"payment_method" text,
	"balance_before" integer,
	"balance_after" integer,
	"bonus_balance_before" integer,
	"bonus_balance_after" integer,
	"bonus_amount" integer,
	"wagering_requirement" integer,
	"wagering_progress" integer,
	"description" text,
	"provider" text,
	"provider_tx_id" text,
	"related_game_id" text,
	"related_round_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	"operator_id" text,
	"user_id" text
);
--> statement-breakpoint
CREATE TABLE "users" (
	"id" varchar PRIMARY KEY NOT NULL,
	"username" text NOT NULL,
	"email" text,
	"password_hash" text,
	"access_token" text,
	"refresh_token" text,
	"access_token_expires_at" timestamp (3),
	"refresh_token_expires_at" timestamp (3),
	"current_game_session_data_id" text,
	"current_auth_session_data_id" text,
	"avatar_url" text DEFAULT 'avatar-01',
	"role" text DEFAULT 'USER' NOT NULL,
	"is_active" boolean DEFAULT true NOT NULL,
	"last_login_at" timestamp (3),
	"total_xp_gained" integer NOT NULL,
	"active_wallet_id" text,
	"vip_info_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	"deleted_at" timestamp (3),
	CONSTRAINT "users_username_unique" UNIQUE("username"),
	CONSTRAINT "users_email_unique" UNIQUE("email"),
	CONSTRAINT "users_current_game_session_data_id_unique" UNIQUE("current_game_session_data_id"),
	CONSTRAINT "users_current_auth_session_data_id_unique" UNIQUE("current_auth_session_data_id"),
	CONSTRAINT "users_active_wallet_id_unique" UNIQUE("active_wallet_id"),
	CONSTRAINT "users_vip_info_id_unique" UNIQUE("vip_info_id")
);
--> statement-breakpoint
CREATE TABLE "vip_info" (
	"id" varchar PRIMARY KEY NOT NULL,
	"level" integer DEFAULT 1 NOT NULL,
	"xp" integer NOT NULL,
	"totalXp" integer NOT NULL,
	"userId" text NOT NULL,
	"currentRankid" integer,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	CONSTRAINT "vip_info_userId_unique" UNIQUE("userId")
);
--> statement-breakpoint
CREATE TABLE "VipLevel" (
	"level" integer PRIMARY KEY NOT NULL,
	"xpForNext" integer NOT NULL
);
--> statement-breakpoint
CREATE TABLE "vip_level_up_history" (
	"id" varchar PRIMARY KEY NOT NULL,
	"previous_level" integer NOT NULL,
	"new_level" integer NOT NULL,
	"timestamp" timestamp (3) DEFAULT now() NOT NULL,
	"vip_info_id" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE "VipRank" (
	"id" integer PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"minXp" integer NOT NULL,
	"dailyBonusCoinPct" integer NOT NULL,
	"hourlyBonusCoinPct" integer NOT NULL,
	"purchaseBonusCoinPct" integer NOT NULL,
	"levelUpBonusCoinPct" integer NOT NULL,
	"hasConcierge" boolean NOT NULL,
	"hasVipLoungeAccess" boolean NOT NULL,
	"isInvitationOnly" boolean NOT NULL,
	CONSTRAINT "VipRank_name_unique" UNIQUE("name"),
	CONSTRAINT "VipRank_minXp_unique" UNIQUE("minXp")
);
--> statement-breakpoint
CREATE TABLE "wallets" (
	"id" varchar PRIMARY KEY NOT NULL,
	"balance" integer NOT NULL,
	"payment_method" text DEFAULT 'INSTORE_CASH' NOT NULL,
	"currency" text DEFAULT 'USD' NOT NULL,
	"is_active" boolean DEFAULT true NOT NULL,
	"is_default" boolean NOT NULL,
	"address" text,
	"cashtag" text,
	"user_id" text NOT NULL,
	"operator_id" text NOT NULL,
	"last_used_at" timestamp (3),
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	CONSTRAINT "wallets_address_unique" UNIQUE("address"),
	CONSTRAINT "wallets_cashtag_unique" UNIQUE("cashtag")
);
--> statement-breakpoint
CREATE TABLE "app_versions" (
	"id" serial PRIMARY KEY NOT NULL,
	"app_id" text NOT NULL,
	"version" text NOT NULL,
	"platform" text NOT NULL,
	"update_type" text NOT NULL,
	"download_url" text NOT NULL,
	"changelog" text[] NOT NULL,
	"mandatory" boolean DEFAULT false NOT NULL,
	"release_date" timestamp with time zone NOT NULL,
	"file_size" integer NOT NULL,
	"checksum" text NOT NULL,
	CONSTRAINT "version_unique_idx" UNIQUE("app_id","platform","version")
);
--> statement-breakpoint
CREATE TABLE "rtg_settings_request_custom_data" (
	"id" varchar PRIMARY KEY NOT NULL,
	"request_id" text NOT NULL,
	"site_id" text NOT NULL,
	"extras" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_settings_request_user_data" (
	"id" varchar PRIMARY KEY NOT NULL,
	"request_id" text NOT NULL,
	"user_id" text NOT NULL,
	"hash" text NOT NULL,
	"affiliate" text NOT NULL,
	"lang" text NOT NULL,
	"channel" text NOT NULL,
	"user_type" text NOT NULL,
	"fingerprint" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_settings_requests" (
	"id" varchar PRIMARY KEY NOT NULL,
	"token" text,
	"session_id" text NOT NULL,
	"play_mode" text NOT NULL,
	"game_id" text NOT NULL,
	"created_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE "rtg_settings_result_game" (
	"id" varchar PRIMARY KEY NOT NULL,
	"settings_result_id" text NOT NULL,
	"cols" integer NOT NULL,
	"rows" integer NOT NULL,
	"version" text NOT NULL,
	"rtp_default" numeric NOT NULL,
	"volatility_index" numeric NOT NULL,
	"max_multiplier" numeric NOT NULL,
	"game_type" text NOT NULL,
	"has_state" boolean NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_settings_result_user" (
	"id" varchar PRIMARY KEY NOT NULL,
	"settings_result_id" text NOT NULL,
	"user_id" integer NOT NULL,
	"country" text NOT NULL,
	"casino" text NOT NULL,
	"token" text NOT NULL,
	"session_id" text NOT NULL,
	"can_gamble" boolean NOT NULL,
	"last_win" numeric NOT NULL,
	"server_time" timestamp NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_settings_result_user_balance" (
	"id" varchar PRIMARY KEY NOT NULL,
	"settings_result_user_id" varchar NOT NULL,
	"cash" numeric NOT NULL,
	"free_bets" numeric NOT NULL,
	"session_cash" numeric NOT NULL,
	"session_free_bets" numeric NOT NULL,
	"bonus" numeric NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_settings_results" (
	"id" varchar PRIMARY KEY NOT NULL,
	"success" boolean NOT NULL,
	"created_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE "rtg_spin_request_custom_data" (
	"id" varchar PRIMARY KEY NOT NULL,
	"request_id" text NOT NULL,
	"site_id" text NOT NULL,
	"extras" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_spin_request_user_data" (
	"id" varchar PRIMARY KEY NOT NULL,
	"request_id" text NOT NULL,
	"user_id" integer NOT NULL,
	"affiliate" text NOT NULL,
	"lang" text NOT NULL,
	"channel" text NOT NULL,
	"user_type" text NOT NULL,
	"fingerprint" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_spin_requests" (
	"id" varchar PRIMARY KEY NOT NULL,
	"token" text NOT NULL,
	"session_id" text NOT NULL,
	"play_mode" text NOT NULL,
	"game_id" text NOT NULL,
	"stake" integer NOT NULL,
	"bonus_id" text,
	"extras" text,
	"game_mode" integer NOT NULL,
	"created_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE "rtg_spin_result_game" (
	"id" varchar PRIMARY KEY NOT NULL,
	"spin_result_id" text NOT NULL,
	"stake" numeric NOT NULL,
	"multiplier" integer NOT NULL,
	"has_state" boolean NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_spin_result_game_win" (
	"id" varchar PRIMARY KEY NOT NULL,
	"spin_result_game_id" varchar NOT NULL,
	"lines" numeric NOT NULL,
	"total" numeric NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_spin_result_user" (
	"id" varchar PRIMARY KEY NOT NULL,
	"spin_result_id" text NOT NULL,
	"can_gamble" boolean NOT NULL,
	"user_id" integer NOT NULL,
	"session_id" text NOT NULL,
	"session_net_position" numeric NOT NULL,
	"token" text NOT NULL,
	"server_time" timestamp NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_spin_result_user_balance" (
	"id" varchar PRIMARY KEY NOT NULL,
	"spin_result_user_id" varchar NOT NULL,
	"cash_at_start" numeric NOT NULL,
	"cash_after_bet" numeric NOT NULL,
	"cash_at_end" numeric NOT NULL,
	"free_bets_at_start" numeric NOT NULL,
	"free_bets_after_bet" numeric NOT NULL,
	"free_bets_at_end" numeric NOT NULL,
	"bonus_at_start" numeric NOT NULL,
	"bonus_after_bet" numeric NOT NULL,
	"bonus_at_end" numeric NOT NULL
);
--> statement-breakpoint
CREATE TABLE "rtg_spin_results" (
	"id" varchar PRIMARY KEY NOT NULL,
	"success" boolean NOT NULL,
	"error_code" integer,
	"created_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE "tasks" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"done" boolean DEFAULT false NOT NULL,
	"created_at" timestamp,
	"updated_at" timestamp
);
--> statement-breakpoint
ALTER TABLE "auth_sessions" ADD CONSTRAINT "auth_sessions_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "favorite_games" ADD CONSTRAINT "favorite_games_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "favorite_games" ADD CONSTRAINT "favorite_games_game_id_games_id_fk" FOREIGN KEY ("game_id") REFERENCES "public"."games"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "games" ADD CONSTRAINT "games_operator_fkey" FOREIGN KEY ("operator_id") REFERENCES "public"."operators"("id") ON DELETE set null ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "game_history" ADD CONSTRAINT "game_history_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "game_history" ADD CONSTRAINT "game_history_game_id_games_id_fk" FOREIGN KEY ("game_id") REFERENCES "public"."games"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "game_sessions" ADD CONSTRAINT "game_sessions_auth_session_id_auth_sessions_id_fk" FOREIGN KEY ("auth_session_id") REFERENCES "public"."auth_sessions"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "game_sessions" ADD CONSTRAINT "game_sessions_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "jackpots" ADD CONSTRAINT "jackpots_lastWinner_fkey" FOREIGN KEY ("last_won_by") REFERENCES "public"."users"("id") ON DELETE set null ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "jackpot_contributions" ADD CONSTRAINT "jackpot_contributions_gameSpin_fkey" FOREIGN KEY ("game_spin_id") REFERENCES "public"."game_spins"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "jackpot_contributions" ADD CONSTRAINT "jackpot_contributions_jackpot_fkey" FOREIGN KEY ("jackpot_id") REFERENCES "public"."jackpots"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "jackpot_wins" ADD CONSTRAINT "jackpot_wins_gameSpin_fkey" FOREIGN KEY ("game_spin_id") REFERENCES "public"."game_spins"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "jackpot_wins" ADD CONSTRAINT "jackpot_wins_jackpot_fkey" FOREIGN KEY ("jackpot_id") REFERENCES "public"."jackpots"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "jackpot_wins" ADD CONSTRAINT "jackpot_wins_winner_fkey" FOREIGN KEY ("winner_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "products" ADD CONSTRAINT "products_operator_fkey" FOREIGN KEY ("operator_id") REFERENCES "public"."operators"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "tournament_participants" ADD CONSTRAINT "tournament_participants_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "transactions" ADD CONSTRAINT "transactions_product_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE set null ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "transactions" ADD CONSTRAINT "transactions_wallet_fkey" FOREIGN KEY ("wallet_id") REFERENCES "public"."wallets"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "vip_info" ADD CONSTRAINT "vip_info_user_fkey" FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "vip_info" ADD CONSTRAINT "vip_info_currentRank_fkey" FOREIGN KEY ("currentRankid") REFERENCES "public"."VipRank"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "vip_level_up_history" ADD CONSTRAINT "vip_level_up_history_vipInfo_fkey" FOREIGN KEY ("vip_info_id") REFERENCES "public"."vip_info"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "wallets" ADD CONSTRAINT "wallets_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_settings_request_custom_data" ADD CONSTRAINT "rtg_settings_request_custom_data_request_id_rtg_settings_requests_id_fk" FOREIGN KEY ("request_id") REFERENCES "public"."rtg_settings_requests"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_settings_request_user_data" ADD CONSTRAINT "rtg_settings_request_user_data_request_id_rtg_settings_requests_id_fk" FOREIGN KEY ("request_id") REFERENCES "public"."rtg_settings_requests"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_settings_result_game" ADD CONSTRAINT "rtg_settings_result_game_settings_result_id_rtg_settings_results_id_fk" FOREIGN KEY ("settings_result_id") REFERENCES "public"."rtg_settings_results"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_settings_result_user" ADD CONSTRAINT "rtg_settings_result_user_settings_result_id_rtg_settings_results_id_fk" FOREIGN KEY ("settings_result_id") REFERENCES "public"."rtg_settings_results"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_settings_result_user_balance" ADD CONSTRAINT "rtg_settings_result_user_balance_settings_result_user_id_rtg_settings_result_user_id_fk" FOREIGN KEY ("settings_result_user_id") REFERENCES "public"."rtg_settings_result_user"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_spin_request_custom_data" ADD CONSTRAINT "rtg_spin_request_custom_data_request_id_rtg_spin_requests_id_fk" FOREIGN KEY ("request_id") REFERENCES "public"."rtg_spin_requests"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_spin_request_user_data" ADD CONSTRAINT "rtg_spin_request_user_data_request_id_rtg_spin_requests_id_fk" FOREIGN KEY ("request_id") REFERENCES "public"."rtg_spin_requests"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_spin_result_game" ADD CONSTRAINT "rtg_spin_result_game_spin_result_id_rtg_spin_results_id_fk" FOREIGN KEY ("spin_result_id") REFERENCES "public"."rtg_spin_results"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_spin_result_game_win" ADD CONSTRAINT "rtg_spin_result_game_win_spin_result_game_id_rtg_spin_result_game_id_fk" FOREIGN KEY ("spin_result_game_id") REFERENCES "public"."rtg_spin_result_game"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_spin_result_user" ADD CONSTRAINT "rtg_spin_result_user_spin_result_id_rtg_spin_results_id_fk" FOREIGN KEY ("spin_result_id") REFERENCES "public"."rtg_spin_results"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "rtg_spin_result_user_balance" ADD CONSTRAINT "rtg_spin_result_user_balance_spin_result_user_id_rtg_spin_result_user_id_fk" FOREIGN KEY ("spin_result_user_id") REFERENCES "public"."rtg_spin_result_user"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "auth_session_user_idx" ON "auth_sessions" USING btree ("user_id","created_at");--> statement-breakpoint
CREATE INDEX "auth_session_status_idx" ON "auth_sessions" USING btree ("status");--> statement-breakpoint
CREATE INDEX "game_session_auth_session_idx" ON "game_sessions" USING btree ("auth_session_id");--> statement-breakpoint
CREATE INDEX "game_session_user_idx" ON "game_sessions" USING btree ("user_id");--> statement-breakpoint
CREATE UNIQUE INDEX "JackpotContribution_jackpotId_gameSpinId_key" ON "jackpot_contributions" USING btree ("jackpot_id","game_spin_id");
</file>

<file path="./backend/src/db/migrations/0001_create_enums.sql">
CREATE TYPE "game_categories" AS ENUM ('slots', 'fish', 'table', 'live', 'poker', 'lottery', 'virtual', 'other');
CREATE TYPE "TournamentStatus" AS ENUM ('PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED');
CREATE TYPE "UserRole" AS ENUM ('USER', 'ADMIN', 'MODERATOR', 'SUPPORT', 'BOT', 'SYSTEM');
CREATE TYPE "SessionStatus" AS ENUM ('ACTIVE', 'COMPLETED', 'ABANDONED', 'TIMEOUT');
CREATE TYPE "TypeOfJackpot" AS ENUM ('MINOR', 'MAJOR', 'GRAND');
CREATE TYPE "PaymentMethod" AS ENUM ('INSTORE_CASH', 'INSTORE_CARD', 'CASH_APP');
CREATE TYPE "TypeOfTransaction" AS ENUM ('DEPOSIT', 'WITHDRAWAL', 'BET', 'WIN', 'TRANSFER_SENT', 'TRANSFER_RECEIVED', 'SYSTEM_ADJUSTMENT_CREDIT', 'SYSTEM_ADJUSTMENT_DEBIT', 'TOURNAMENT_BUYIN', 'TOURNAMENT_PRIZE', 'AFFILIATE_COMMISSION', 'REFUND', 'FEE', 'BONUS_AWARD', 'BET_PLACE', 'BET_WIN', 'BET_LOSE', 'BET_REFUND', 'BONUS_WAGER', 'BONUS_CONVERT', 'BONUS_EXPIRED', 'XP_AWARD', 'ADJUSTMENT_ADD', 'ADJUSTMENT_SUB', 'INTERNAL_TRANSFER', 'PRODUCT_PURCHASE', 'REBATE_PAYOUT', 'JACKPOT_WIN', 'JACKPOT_CONTRIBUTION');
CREATE TYPE "TransactionStatus" AS ENUM ('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'EXPIRED', 'REJECTED', 'REQUIRES_ACTION', 'ON_HOLD');
CREATE TYPE "Role" AS ENUM ('USER', 'ADMIN', 'VIP', 'MODERATOR', 'SYSTEM', 'OWNER', 'MEMBER', 'OPERATOR', 'SUPPORT_AGENT');
CREATE TYPE "GameProviderName" AS ENUM ('PRAGMATICPLAY', 'EVOPLAY', 'NETENT', 'PLAYNGO', 'RELAXGAMING', 'HACKSAW', 'BGAMING', 'SPRIBE', 'INTERNAL', 'REDTIGER', 'NETGAME', 'BIGFISHGAMES', 'CQNINE', 'NOLIMIT', 'KICKASS');
CREATE TYPE "Permission" AS ENUM ('read', 'write', 'upload', 'manage_users', 'manage_settings', 'launch_game');
CREATE TYPE "UpdateType" AS ENUM ('BINARY', 'OTA');
</file>

<file path="./backend/src/db/migrations/20250804_fix_wallets.sql">
-- 20250804_fix_wallets.sql
-- Purpose:
-- 1) Correct wallet FK direction: wallets.user_id -> users.id
-- 2) Consolidate in_active_wallets into wallets with is_active = false
-- 3) Enforce uniqueness:
--    - UNIQUE (user_id, operator_id) AS wallets_user_operator_unique
--    - PARTIAL UNIQUE (user_id) WHERE is_active = true AS wallets_user_active_unique
-- 4) Add FK users.active_wallet_id -> wallets.id
-- 5) Clean up legacy schema: drop in_active_wallets
-- Notes:
-- - This migration assumes Postgres.
-- - It attempts to be idempotent where possible using IF EXISTS/NOT EXISTS patterns.
-- - Data backfill chooses the most recent updated_at/last_used_at when merging duplicates.
-- - You may need to adjust names/types if your actual DB differs.

BEGIN;

-- 0) Lock tables to avoid races during migration (optional, conservative)
-- You may comment these if causing lock contention in dev.
LOCK TABLE wallets IN SHARE ROW EXCLUSIVE MODE;
LOCK TABLE users IN SHARE ROW EXCLUSIVE MODE;

-- 1) Ensure wallets.user_id references users.id (fix inverted FK) -----------------------

-- Drop wrong FK if it exists (wallets.user_id -> users.active_wallet_id)
DO $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_constraint c
    JOIN pg_class t ON t.oid = c.conrelid
    WHERE t.relname = 'wallets'
      AND c.conname = 'wallets_user_id_users_id_fk'
  ) THEN
    ALTER TABLE wallets DROP CONSTRAINT wallets_user_id_users_id_fk;
  END IF;
EXCEPTION WHEN undefined_table THEN
  -- ignore if wallets not present
  NULL;
END$$;

-- Add correct FK wallets.user_id -> users.id if not present
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_constraint c
    JOIN pg_class t ON t.oid = c.conrelid
    WHERE t.relname = 'wallets'
      AND c.conname = 'wallets_user_id_users_fk'
  ) THEN
    ALTER TABLE wallets
      ADD CONSTRAINT wallets_user_id_users_fk
      FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE;
  END IF;
END$$;

-- 2) Backfill wallets.user_id if any rows incorrectly store users.active_wallet_id -------
-- Heuristic: if there exists a user where active_wallet_id = wallets.id, set wallets.user_id = users.id
-- Only update when wallets.user_id is NULL or does not match users.id
UPDATE wallets w
SET user_id = u.id
FROM users u
WHERE u.active_wallet_id = w.id
  AND (w.user_id IS NULL OR w.user_id <> u.id);

-- 3) Consolidate in_active_wallets into wallets as is_active = false ---------------------

-- Create temporary staging to merge by (user_id, operator_id)
-- Note: Some in_active_wallets may have NULL user_id; skip those or handle via custom rule.
WITH src AS (
  SELECT
    id,
    balance,
    COALESCE(payment_method, 'INSTORE_CASH') AS payment_method,
    COALESCE(currency, 'USD') AS currency,
    false AS is_active,
    COALESCE(is_default, false) AS is_default,
    address,
    cashtag,
    user_id,
    operator_id,
    last_used_at,
    created_at,
    updated_at
  FROM in_active_wallets
)
-- Upsert: prefer existing wallets row if (user_id, operator_id) already exists.
-- Otherwise insert a new row using the legacy id if not colliding; if id collides, generate a new one.
INSERT INTO wallets (id, balance, payment_method, currency, is_active, is_default, address, cashtag, user_id, operator_id, last_used_at, created_at, updated_at)
SELECT
  s.id,
  s.balance,
  s.payment_method,
  s.currency,
  s.is_active,
  s.is_default,
  s.address,
  s.cashtag,
  s.user_id,
  s.operator_id,
  s.last_used_at,
  COALESCE(s.created_at, NOW()),
  COALESCE(s.updated_at, NOW())
FROM src s
WHERE s.user_id IS NOT NULL
ON CONFLICT (id) DO NOTHING;

-- For conflicts by (user_id, operator_id) where an active (or any) wallet already exists, prefer preserving the most recently updated wallet.
-- We perform a merge by updating existing row when src has a more recent updated_at.
UPDATE wallets w
SET
  balance     = COALESCE(w.balance, s.balance),
  payment_method = COALESCE(w.payment_method, s.payment_method),
  currency    = COALESCE(w.currency, s.currency),
  is_active   = COALESCE(w.is_active, false) AND w.is_active, -- do not auto-activate from inactive source
  is_default  = COALESCE(w.is_default, s.is_default),
  address     = COALESCE(w.address, s.address),
  cashtag     = COALESCE(w.cashtag, s.cashtag),
  last_used_at= GREATEST(COALESCE(w.last_used_at, 'epoch'::timestamp), COALESCE(s.last_used_at, 'epoch'::timestamp)),
  updated_at  = GREATEST(COALESCE(w.updated_at, 'epoch'::timestamp), COALESCE(s.updated_at, NOW()))
FROM in_active_wallets s
WHERE w.user_id = s.user_id
  AND w.operator_id = s.operator_id;

-- 4) Add unique (user_id, operator_id) and partial unique (user_id) where is_active=true --

-- Drop existing composite unique if named differently, then add canonical name
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM pg_constraint c
    JOIN pg_class t ON t.oid = c.conrelid
    WHERE t.relname = 'wallets' AND c.conname = 'wallets_user_operator_unique'
  ) THEN
    ALTER TABLE wallets DROP CONSTRAINT wallets_user_operator_unique;
  END IF;
EXCEPTION WHEN undefined_table THEN NULL;
END$$;

ALTER TABLE wallets
  ADD CONSTRAINT wallets_user_operator_unique UNIQUE (user_id, operator_id);

-- Create partial unique index for one active wallet per user
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes
    WHERE schemaname = ANY (current_schemas(true))
      AND tablename = 'wallets'
      AND indexname = 'wallets_user_active_unique'
  ) THEN
    CREATE UNIQUE INDEX wallets_user_active_unique
      ON wallets(user_id)
      WHERE is_active = true;
  END IF;
END$$;

-- 5) Add FK users.active_wallet_id -> wallets.id (nullable, unique) ---------------------

-- Ensure column exists and has unique index already (code defines unique). Add FK constraint if missing.
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_constraint c
    JOIN pg_class t ON t.oid = c.conrelid
    WHERE t.relname = 'users'
      AND c.conname = 'users_active_wallet_id_wallets_id_fk'
  ) THEN
    ALTER TABLE users
      ADD CONSTRAINT users_active_wallet_id_wallets_id_fk
      FOREIGN KEY (active_wallet_id) REFERENCES wallets(id)
      ON UPDATE CASCADE
      ON DELETE SET NULL;
  END IF;
END$$;

-- Optional safety: ensure that when users.active_wallet_id is set, the referenced wallet is_active = true
-- This is implemented as a trigger to keep it DB-enforced.
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'users_active_wallet_must_be_active_trg'
  ) THEN
    CREATE OR REPLACE FUNCTION users_active_wallet_must_be_active_fn()
    RETURNS trigger
    LANGUAGE plpgsql AS $BODY$
    BEGIN
      IF NEW.active_wallet_id IS NOT NULL THEN
        PERFORM 1 FROM wallets w WHERE w.id = NEW.active_wallet_id AND w.is_active = true;
        IF NOT FOUND THEN
          RAISE EXCEPTION 'active_wallet_id % must reference an active wallet', NEW.active_wallet_id;
        END IF;
      END IF;
      RETURN NEW;
    END;
    $BODY$;

    CREATE TRIGGER users_active_wallet_must_be_active_trg
    BEFORE INSERT OR UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION users_active_wallet_must_be_active_fn();
  END IF;
END$$;

-- 6) Drop in_active_wallets after consolidation -----------------------------------------

DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'in_active_wallets') THEN
    DROP TABLE in_active_wallets;
  END IF;
END$$;

COMMIT;
</file>

<file path="./backend/src/db/schema/blackjack.ts">
import {
    integer,
    jsonb,
    pgTable,
    text,
    timestamp,
    varchar,
} from 'drizzle-orm/pg-core'

import { nanoid } from '../../utils/nanoid'
import { users } from './schema'

export const BlackjackGame = pgTable('blackjack_games', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    table: integer('table').notNull(),
    type: text('type').notNull(),
    state: text('state').notNull(),
    deck: jsonb('deck'),
    dealerCards: jsonb('dealer_cards'),
    fair: jsonb('fair'),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { precision: 3 }).notNull().defaultNow(),
})

export const BlackjackBet = pgTable('blackjack_bets', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    userId: varchar('user_id')
        .notNull()
        .references(() => users.id),
    gameId: varchar('game_id')
        .notNull()
        .references(() => BlackjackGame.id),
    seat: integer('seat').notNull(),
    amount: jsonb('amount').notNull(),
    cards: jsonb('cards'),
    cardsLeft: jsonb('cards_left'),
    cardsRight: jsonb('cards_right'),
    actions: jsonb('actions'),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
})

export const BlackjackMessage = pgTable('blackjack_message', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    event: text('event'),
    requestId: text('request_id'),
    payload: jsonb('payload'),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
})
</file>

<file path="./backend/src/db/schema/core.ts">
import {
    boolean,
    decimal,
    doublePrecision,
    foreignKey,
    index,
    integer,
    jsonb,
    pgTable,
    serial,
    text,
    timestamp,
    unique,
    uniqueIndex,
    varchar,
} from 'drizzle-orm/pg-core'

import { nanoid } from '../../utils/nanoid'
import { sessionStatusEnum } from './enums'

export const Operator = pgTable('operators', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    name: text('name').notNull().unique(),
    operatorSecret: text('operator_secret').notNull(),
    operatorAccess: text('operator_access').notNull(),
    callbackUrl: text('callback_url').notNull(),
    isActive: boolean('is_active').notNull().default(true),
    allowedIps: text('allowed_ips').array().notNull(),
    description: text('description'),
    balance: integer('balance').notNull(),
    netRevenue: integer('net-revenue').notNull(),
    acceptedPayments: text('accepted_payments').array().notNull(),
    ownerId: text('owner_id'),
    lastUsedAt: timestamp('last_used_at', { precision: 3 }),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { precision: 3 }).notNull().defaultNow(),
})

export const User = pgTable('users', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    username: text('username').notNull().unique(),
    email: text('email').unique(),
    passwordHash: text('password_hash'),
    accessToken: text('access_token'),
    refreshToken: text('refresh_token'),
    accessTokenExpiresAt: timestamp('access_token_expires_at', {
        precision: 3,
    }),
    refreshTokenExpiresAt: timestamp('refresh_token_expires_at', {
        precision: 3,
    }),
    currentGameSessionDataId: text('current_game_session_data_id').unique(),
    currentAuthSessionDataId: text('current_auth_session_data_id').unique(),
    avatar: text('avatar_url').default('avatar-01'),
    role: text('role').notNull().default('USER'),
    isActive: boolean('is_active').notNull().default(true),
    lastLoginAt: timestamp('last_login_at', { precision: 3 }),
    lastSeen: timestamp('last_login_at', { precision: 3 }),
    totalXpGained: integer('total_xp_gained').notNull(),
    activeWalletId: text('active_wallet_id').unique(),
    vipInfoId: text('vip_info_id').unique(),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { precision: 3 }).notNull().defaultNow(),
    deletedAt: timestamp('deleted_at', { precision: 3 }),
})

export const Wallet = pgTable('wallets', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    balance: integer('balance').notNull(),
    paymentMethod: text('payment_method').notNull().default('INSTORE_CASH'),
    currency: text('currency').notNull().default('USD'),
    isActive: boolean('is_active').notNull().default(true),
    isDefault: boolean('is_default').notNull(),
    address: text('address').unique(),
    cashtag: text('cashtag').unique(),
    userId: text('user_id')
        .notNull()
        .references(() => User.id, { onDelete: 'cascade' }),
    operatorId: text('operator_id').notNull(),
    lastUsedAt: timestamp('last_used_at', { precision: 3 }),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { precision: 3 }).notNull().defaultNow(),
})

export const AuthSession = pgTable(
    'auth_sessions',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        userId: text('user_id')
            .notNull()
            .references(() => User.id, { onDelete: 'cascade' }),
        status: sessionStatusEnum('status').default('ACTIVE').notNull(),
        ipAddress: text('ip_address'),
        userAgent: text('user_agent'),
        deviceId: text('device_id'),
        createdAt: timestamp('created_at', { withTimezone: true })
            .defaultNow()
            .notNull(),
        expiresAt: timestamp('expires_at', { withTimezone: true }),
        lastSeen: timestamp('last_seen', { withTimezone: true })
            .defaultNow()
            .notNull(),
    },
    (table) => {
        return {
            userIdx: index('auth_session_user_idx').on(
                table.userId,
                table.createdAt
            ),
            statusIdx: index('auth_session_status_idx').on(table.status),
        }
    }
)

export const GameSession = pgTable(
    'game_sessions',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        authSessionId: text('auth_session_id')
            .notNull()
            .references(() => AuthSession.id, { onDelete: 'cascade' }),
        userId: text('user_id')
            .notNull()
            .references(() => User.id, { onDelete: 'cascade' }),
        gameId: text('game_id'),
        status: sessionStatusEnum('status').default('ACTIVE').notNull(),
        totalWagered: integer('total_wagered').default(0).notNull(),
        totalWon: integer('total_won').default(0).notNull(),
        totalXpGained: integer('total_xp_gained').default(0).notNull(),
        rtp: decimal('rtp', { precision: 5, scale: 2 }),
        duration: integer('duration').default(0).notNull(),
        createdAt: timestamp('created_at', { withTimezone: true })
            .defaultNow()
            .notNull(),
        endedAt: timestamp('end_at', { withTimezone: true }),
    },
    (table) => {
        return {
            authSessionIdx: index('game_session_auth_session_idx').on(
                table.authSessionId
            ),
            userIdx: index('game_session_user_idx').on(table.userId),
        }
    }
)

export const VipRank = pgTable('VipRank', {
    id: integer('id').notNull().primaryKey(),
    name: text('name').notNull().unique(),
    minXp: integer('minXp').notNull().unique(),
    dailyBonusCoinPct: integer('dailyBonusCoinPct').notNull(),
    hourlyBonusCoinPct: integer('hourlyBonusCoinPct').notNull(),
    purchaseBonusCoinPct: integer('purchaseBonusCoinPct').notNull(),
    levelUpBonusCoinPct: integer('levelUpBonusCoinPct').notNull(),
    hasConcierge: boolean('hasConcierge').notNull(),
    hasVipLoungeAccess: boolean('hasVipLoungeAccess').notNull(),
    isInvitationOnly: boolean('isInvitationOnly').notNull(),
})

export const VipInfo = pgTable(
    'vip_info',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        level: integer('level').notNull().default(1),
        xp: integer('xp').notNull(),
        totalXp: integer('totalXp').notNull(),
        userId: text('userId').notNull().unique(),
        currentRankid: integer('currentRankid'),
        createdAt: timestamp('created_at', { precision: 3 })
            .notNull()
            .defaultNow(),
        updatedAt: timestamp('updated_at', { precision: 3 })
            .notNull()
            .defaultNow(),
    },
    (VipInfo) => ({
        vip_info_user_fkey: foreignKey({
            name: 'vip_info_user_fkey',
            columns: [VipInfo.userId],
            foreignColumns: [User.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
        vip_info_currentRank_fkey: foreignKey({
            name: 'vip_info_currentRank_fkey',
            columns: [VipInfo.currentRankid],
            foreignColumns: [VipRank.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
    })
)

export const TournamentParticipant = pgTable('tournament_participants', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    tournamentId: text('tournament_id').notNull(),
    userId: text('user_id')
        .notNull()
        .references(() => User.id, { onDelete: 'cascade' }),
    score: integer('score').notNull(),
    rank: integer('rank'),
    joinedAt: timestamp('joined_at', { precision: 3 }).notNull().defaultNow(),
})

export const Game = pgTable(
    'games',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        name: text('name').notNull(),
        title: text('title').notNull(),
        goldsvetData: jsonb('goldsvet_data'),
        description: text('description'),
        category: text('category').notNull(),
        tags: text('tags').array().notNull(),
        thumbnailUrl: text('thumbnail_url'),
        bannerUrl: text('banner_url'),
        developer: text('provider_name').notNull(),
        providerId: text('provider_id'),
        totalWagered: integer('total_wagered').notNull(),
        totalWon: integer('total_won').notNull(),
        targetRtp: integer('target_rtp'),
        isFeatured: boolean('is_featured').notNull(),
        isActive: boolean('is_active').notNull().default(true),
        operatorId: text('operator_id'),
        tournamentDirectives: jsonb('tournament_directives'),
        createdAt: timestamp('created_at', { precision: 3 })
            .notNull()
            .defaultNow(),
        updatedAt: timestamp('updated_at', { precision: 3 })
            .notNull()
            .defaultNow(),
    },
    (Game) => ({
        games_operator_fkey: foreignKey({
            name: 'games_operator_fkey',
            columns: [Game.operatorId],
            foreignColumns: [Operator.id],
        })
            .onDelete('set null')
            .onUpdate('cascade'),
    })
)

export const FavoriteGame = pgTable('favorite_games', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    userId: text('user_id')
        .notNull()
        .references(() => User.id, { onDelete: 'cascade' }),
    gameId: text('game_id')
        .notNull()
        .references(() => Game.id, { onDelete: 'cascade' }),
})

export const GameSpin = pgTable('game_spins', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    playerName: text('player_name'),
    gameName: text('game_name'),
    gameId: text('game_id'),
    spinData: jsonb('spin_data'),
    grossWinAmount: doublePrecision('gross_win_amount').notNull(),
    wagerAmount: doublePrecision('wager_amount').notNull(),
    spinNumber: integer('spin_number').notNull(),
    playerAvatar: text('player_avatar'),
    currencyId: text('currency_id'),
    sessionId: text('session_id').notNull(),
    userId: text('user_id'),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { precision: 3 }).notNull().defaultNow(),
    occurredAt: timestamp('occurred_at', { precision: 3 }).notNull(),
    sessionDataId: text('sessionDataId'),
})

export const GameHistory = pgTable('game_history', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    userId: text('user_id')
        .notNull()
        .references(() => User.id, { onDelete: 'cascade' }),
    gameId: text('game_id')
        .notNull()
        .references(() => Game.id, { onDelete: 'cascade' }),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
})

export const InActiveWallet = pgTable('in_active_wallets', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    balance: integer('balance').notNull(),
    paymentMethod: text('payment_method').notNull().default('INSTORE_CASH'),
    currency: text('currency').notNull().default('USD'),
    isActive: boolean('is_active').notNull(),
    isDefault: boolean('is_default').notNull(),
    address: text('address').unique(),
    cashtag: text('cashtag').unique(),
    userId: text('user_id'),
    operatorId: text('operator_id').notNull(),
    lastUsedAt: timestamp('last_used_at', { precision: 3 }),
    createdAt: timestamp('created_at', { precision: 3 }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { precision: 3 }).notNull().defaultNow(),
})

export const Jackpot = pgTable(
    'jackpots',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        type: text('type').notNull(),
        currentAmountCoins: integer('current_amount_coins').notNull(),
        seedAmountCoins: integer('seed_amount_coins').notNull(),
        minimumBetCoins: integer('minimum_bet_coins').notNull().default(1),
        contributionRateBasisPoints: integer(
            'contribution_rate_basis_points'
        ).notNull(),
        probabilityPerMillion: integer('probability_per_million').notNull(),
        minimumTimeBetweenWinsMinutes: integer(
            'minimum_time_between_wins_minutes'
        ).notNull(),
        lastWonAt: timestamp('last_won_at', { precision: 3 }),
        lastWonBy: text('last_won_by'),
        isActive: boolean('is_active').notNull().default(true),
        createdAt: timestamp('created_at', { precision: 3 })
            .notNull()
            .defaultNow(),
        updatedAt: timestamp('updated_at', { precision: 3 })
            .notNull()
            .defaultNow(),
    },
    (Jackpot) => ({
        jackpots_lastWinner_fkey: foreignKey({
            name: 'jackpots_lastWinner_fkey',
            columns: [Jackpot.lastWonBy],
            foreignColumns: [User.id],
        })
            .onDelete('set null')
            .onUpdate('cascade'),
    })
)

export const JackpotWin = pgTable(
    'jackpot_wins',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        jackpotId: text('jackpot_id').notNull(),
        winnerId: text('winner_id').notNull(),
        winAmountCoins: integer('win_amount_coins').notNull(),
        gameSpinId: text('game_spin_id').notNull().unique(),
        transactionId: text('transaction_id'),
        createdAt: timestamp('created_at', { precision: 3 })
            .notNull()
            .defaultNow(),
        sessionDataId: text('session_data_id'),
    },
    (JackpotWin) => ({
        jackpot_wins_gameSpin_fkey: foreignKey({
            name: 'jackpot_wins_gameSpin_fkey',
            columns: [JackpotWin.gameSpinId],
            foreignColumns: [GameSpin.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
        jackpot_wins_jackpot_fkey: foreignKey({
            name: 'jackpot_wins_jackpot_fkey',
            columns: [JackpotWin.jackpotId],
            foreignColumns: [Jackpot.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
        jackpot_wins_winner_fkey: foreignKey({
            name: 'jackpot_wins_winner_fkey',
            columns: [JackpotWin.winnerId],
            foreignColumns: [User.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
    })
)

export const VipLevel = pgTable('VipLevel', {
    level: integer('level').notNull().primaryKey(),
    xpForNext: integer('xpForNext').notNull(),
})

export const VipLevelUpHistory = pgTable(
    'vip_level_up_history',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        previousLevel: integer('previous_level').notNull(),
        newLevel: integer('new_level').notNull(),
        timestamp: timestamp('timestamp', { precision: 3 })
            .notNull()
            .defaultNow(),
        vipInfoId: text('vip_info_id').notNull(),
    },
    (VipLevelUpHistory) => ({
        vip_level_up_history_vipInfo_fkey: foreignKey({
            name: 'vip_level_up_history_vipInfo_fkey',
            columns: [VipLevelUpHistory.vipInfoId],
            foreignColumns: [VipInfo.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
    })
)

export const Product = pgTable(
    'products',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        title: text('title').notNull().default('default'),
        productType: text('product_type').notNull().default('bundle'),
        bonusTotalInCents: integer('bonus_total_in_credits').notNull(),
        isActive: boolean('is_active'),
        priceInCents: integer('price_in_cents').notNull(),
        amountToReceiveInCents: integer(
            'amount_to_receive_in_credits'
        ).notNull(),
        bestValue: integer('best_value').notNull(),
        discountInCents: integer('discount_in_cents').notNull(),
        bonusSpins: integer('bonus_spins').notNull(),
        isPromo: boolean('is_promo'),
        totalDiscountInCents: integer('total_discount_in_cents').notNull(),
        operatorId: text('operator_id'),
        createdAt: timestamp('created_at', { precision: 3 })
            .notNull()
            .defaultNow(),
        updatedAt: timestamp('updated_at', { precision: 3 })
            .notNull()
            .defaultNow(),
    },
    (Product) => ({
        products_operator_fkey: foreignKey({
            name: 'products_operator_fkey',
            columns: [Product.operatorId],
            foreignColumns: [Operator.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
    })
)

export const Transaction = pgTable(
    'transactions',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        processedAt: timestamp('processed_at', { precision: 3 }),
        walletId: text('wallet_id'),
        type: text('type').notNull(),
        status: text('status').notNull().default('PENDING'),
        amount: integer('amount').notNull(),
        netAmount: integer('net_amount'),
        feeAmount: integer('fee_amount'),
        productId: text('product_id'),
        paymentMethod: text('payment_method'),
        balanceBefore: integer('balance_before'),
        balanceAfter: integer('balance_after'),
        bonusBalanceBefore: integer('bonus_balance_before'),
        bonusBalanceAfter: integer('bonus_balance_after'),
        bonusAmount: integer('bonus_amount'),
        wageringRequirement: integer('wagering_requirement'),
        wageringProgress: integer('wagering_progress'),
        description: text('description'),
        provider: text('provider'),
        providerTxId: text('provider_tx_id'),
        relatedGameId: text('related_game_id'),
        relatedRoundId: text('related_round_id'),
        createdAt: timestamp('created_at', { precision: 3 })
            .notNull()
            .defaultNow(),
        updatedAt: timestamp('updated_at', { precision: 3 })
            .notNull()
            .defaultNow(),
        operatorId: text('operator_id'),
        userId: text('user_id'),
    },
    (Transaction) => ({
        transactions_product_fkey: foreignKey({
            name: 'transactions_product_fkey',
            columns: [Transaction.productId],
            foreignColumns: [Product.id],
        })
            .onDelete('set null')
            .onUpdate('cascade'),
        transactions_wallet_fkey: foreignKey({
            name: 'transactions_wallet_fkey',
            columns: [Transaction.walletId],
            foreignColumns: [Wallet.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
    })
)

export const JackpotContribution = pgTable(
    'jackpot_contributions',
    {
        id: varchar('id').primaryKey().$defaultFn(nanoid),
        jackpotId: text('jackpot_id').notNull(),
        userId: text('user_id'),
        gameSpinId: text('game_spin_id').notNull(),
        contributionAmountCoins: integer('contribution_amount_coins').notNull(),
        createdAt: timestamp('created_at', { precision: 3 })
            .notNull()
            .defaultNow(),
    },
    (JackpotContribution) => ({
        jackpot_contributions_gameSpin_fkey: foreignKey({
            name: 'jackpot_contributions_gameSpin_fkey',
            columns: [JackpotContribution.gameSpinId],
            foreignColumns: [GameSpin.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
        jackpot_contributions_jackpot_fkey: foreignKey({
            name: 'jackpot_contributions_jackpot_fkey',
            columns: [JackpotContribution.jackpotId],
            foreignColumns: [Jackpot.id],
        })
            .onDelete('cascade')
            .onUpdate('cascade'),
        JackpotContribution_jackpotId_gameSpinId_unique_idx: uniqueIndex(
            'JackpotContribution_jackpotId_gameSpinId_key'
        ).on(JackpotContribution.jackpotId, JackpotContribution.gameSpinId),
    })
)

export const tasks = pgTable('tasks', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    name: text('name').notNull(),
    done: boolean('done').notNull().default(false),
    createdAt: timestamp('created_at').$defaultFn(() => new Date()),
    updatedAt: timestamp('updated_at')
        .$defaultFn(() => new Date())
        .$onUpdate(() => new Date()),
})

export const appVersions = pgTable(
    'app_versions',
    {
        id: serial('id').primaryKey(),
        appId: text('app_id').notNull(),
        version: text('version').notNull(),
        platform: text('platform').notNull(),
        updateType: text('update_type').notNull(),
        downloadUrl: text('download_url').notNull(),
        changelog: text('changelog').array().notNull(),
        mandatory: boolean('mandatory').default(false).notNull(),
        releaseDate: timestamp('release_date', {
            withTimezone: true,
        }).notNull(),
        fileSize: integer('file_size').notNull(),
        checksum: text('checksum').notNull(),
    },
    (table) => {
        return {
            versionUnique: unique('version_unique_idx').on(
                table.appId,
                table.platform,
                table.version
            ),
        }
    }
)
</file>

<file path="./backend/src/db/schema/enums.ts">
import { pgEnum } from 'drizzle-orm/pg-core'

export const GameCategory = pgEnum('game_categories', ['slots', 'fish', 'table', 'live', 'poker', 'lottery', 'virtual', 'other'])
export const TournamentStatus = pgEnum('TournamentStatus', ['PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED'])
export const UserRole = pgEnum('UserRole', ['USER', 'ADMIN', 'MODERATOR', 'SUPPORT', 'BOT', 'SYSTEM'])
export const SessionStatus = pgEnum('SessionStatus', ['ACTIVE', 'COMPLETED', 'ABANDONED', 'TIMEOUT'])
export const TypeOfJackpot = pgEnum('TypeOfJackpot', ['MINOR', 'MAJOR', 'GRAND'])
export const PaymentMethod = pgEnum('PaymentMethod', ['INSTORE_CASH', 'INSTORE_CARD', 'CASH_APP'])
export const TypeOfTransaction = pgEnum('TypeOfTransaction', ['DEPOSIT', 'WITHDRAWAL', 'BET', 'WIN', 'TRANSFER_SENT', 'TRANSFER_RECEIVED', 'SYSTEM_ADJUSTMENT_CREDIT', 'SYSTEM_ADJUSTMENT_DEBIT', 'TOURNAMENT_BUYIN', 'TOURNAMENT_PRIZE', 'AFFILIATE_COMMISSION', 'REFUND', 'FEE', 'BONUS_AWARD', 'BET_PLACE', 'BET_WIN', 'BET_LOSE', 'BET_REFUND', 'BONUS_WAGER', 'BONUS_CONVERT', 'BONUS_EXPIRED', 'XP_AWARD', 'ADJUSTMENT_ADD', 'ADJUSTMENT_SUB', 'INTERNAL_TRANSFER', 'PRODUCT_PURCHASE', 'REBATE_PAYOUT', 'JACKPOT_WIN', 'JACKPOT_CONTRIBUTION'])
export const TransactionStatus = pgEnum('TransactionStatus', ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'EXPIRED', 'REJECTED', 'REQUIRES_ACTION', 'ON_HOLD'])
export const Role = pgEnum('Role', ['USER', 'ADMIN', 'VIP', 'MODERATOR', 'SYSTEM', 'OWNER', 'MEMBER', 'OPERATOR', 'SUPPORT_AGENT'])
export const GameProviderName = pgEnum('GameProviderName', ['pragmaticplay', 'evoplay', 'netent', 'playngo', 'relaxgaming', 'hacksaw', 'bgaming', 'spribe', 'internal', 'redtiger', 'netgame', 'bigfishgames', 'cqnine', 'nolimit', 'kickass'])
export const Permission = pgEnum('Permission', ['read', 'write', 'upload', 'manage_users', 'manage_settings', 'launch_game'])
export const UpdateType = pgEnum('UpdateType', ['BINARY', 'OTA'])
export const sessionStatusEnum = pgEnum('session_status', [
    'ACTIVE',
    'COMPLETED',
    'EXPIRED',
])
export const updateTypeEnum = pgEnum('update_type', ['BINARY', 'OTA'])
</file>

<file path="./backend/src/db/schema/index.ts">
export * from './blackjack'
// export * from './core'
export * from './enums'
export * from './relations'
// export * from './rtg'
export * from './schema'
export * from './types'
export * from './zod'
</file>

<file path="./backend/src/db/schema/relations.bak.ts">
import { relations } from 'drizzle-orm'
import { AuthSession, Game, GameSession, GameSpin, Jackpot, JackpotContribution, JackpotWin, Operator, Product, Transaction, User, VipInfo, VipLevelUpHistory, VipRank, Wallet } from './core'

export const UserRelations = relations(User, ({ one, many }) => ({
    activeWallet: one(Wallet, {
        relationName: 'ActiveWallet',
        fields: [User.activeWalletId],
        references: [Wallet.id],
    }),
    vipInfo: one(VipInfo, {
        relationName: 'UserVipInfo',
        fields: [User.vipInfoId],
        references: [VipInfo.id],
    }),
    //   tournamentParticipations: many(TournamentParticipant, {
    //     relationName: "TournamentParticipantToUser",
    //   }),
    //   sessions: many(SessionData, {
    //     relationName: "SessionDataToUser",
    //   }),
    jackpotWins: many(JackpotWin, {
        relationName: 'JackpotWinToUser',
    }),
    lastJackpotWon: many(Jackpot, {
        relationName: 'JackpotLastWinner',
    }),
    //   BlackjackBet: many(BlackjackBet, {
    //     relationName: "BlackjackBetToUser",
    //   }),
}))

export const GameRelations = relations(Game, ({ one }) => ({
    operator: one(Operator, {
        relationName: 'GameToOperator',
        fields: [Game.operatorId],
        references: [Operator.id],
    }),
    //   sessions: many(SessionData, {
    //     relationName: "GameToSessionData",
    //   }),
    //   Tournament: many(GameToTournament, {
    //     relationName: "GameToGameToTournament",
    //   }),
}))

export const GameSpinRelations = relations(GameSpin, ({ one, many }) => ({
    user: one(User, {
        fields: [GameSpin.userId],
        references: [User.id],
        relationName: 'GameSpinToUser',
    }),
    game: one(Game, {
        fields: [GameSpin.gameId],
        references: [Game.id],
        relationName: 'GameSpinToGame',
    }),
    jackpotContributions: many(JackpotContribution, {
        relationName: 'GameSpinToJackpotContribution',
    }),
    jackpotWins: many(JackpotWin, {
        relationName: 'GameSpinToJackpotWin',
    }),
}))

export const OperatorRelations = relations(Operator, ({ many }) => ({
    games: many(Game, {
        relationName: 'GameToOperator',
    }),
    products: many(Product, {
        relationName: 'OperatorToProduct',
    }),
    wallets: many(Wallet, {
        relationName: 'OperatorToWallet',
    }),
}))

export const WalletRelations = relations(Wallet, ({ one, many }) => ({
    operator: one(Operator, {
        relationName: 'OperatorToWallet',
        fields: [Wallet.operatorId],
        references: [Operator.id],
    }),
    transactions: many(Transaction, {
        relationName: 'TransactionToWallet',
    }),
    user: many(User, {
        relationName: 'ActiveWallet',
    }),
}))

export const VipRankRelations = relations(VipRank, ({ many }) => ({
    VipInfo: many(VipInfo, {
        relationName: 'VipInfoToVipRank',
    }),
}))

export const VipInfoRelations = relations(VipInfo, ({ one, many }) => ({
    user: one(User, {
        relationName: 'UserVipInfo',
        fields: [VipInfo.userId],
        references: [User.id],
    }),
    history: many(VipLevelUpHistory, {
        relationName: 'VipInfoToVipLevelUpHistory',
    }),
    currentRank: one(VipRank, {
        relationName: 'VipInfoToVipRank',
        fields: [VipInfo.currentRankid],
        references: [VipRank.id],
    }),
}))

export const VipLevelUpHistoryRelations = relations(
    VipLevelUpHistory,
    ({ one }) => ({
        vipInfo: one(VipInfo, {
            relationName: 'VipInfoToVipLevelUpHistory',
            fields: [VipLevelUpHistory.vipInfoId],
            references: [VipInfo.id],
        }),
    })
)

export const JackpotRelations = relations(Jackpot, ({ many, one }) => ({
    contributions: many(JackpotContribution, {
        relationName: 'JackpotToJackpotContribution',
    }),
    wins: many(JackpotWin, {
        relationName: 'JackpotToJackpotWin',
    }),
    lastWinner: one(User, {
        relationName: 'JackpotLastWinner',
        fields: [Jackpot.lastWonBy],
        references: [User.id],
    }),
}))

export const JackpotContributionRelations = relations(
    JackpotContribution,
    ({ one }) => ({
        gameSpin: one(GameSpin, {
            relationName: 'GameSpinToJackpotContribution',
            fields: [JackpotContribution.gameSpinId],
            references: [GameSpin.id],
        }),
        jackpot: one(Jackpot, {
            relationName: 'JackpotToJackpotContribution',
            fields: [JackpotContribution.jackpotId],
            references: [Jackpot.id],
        }),
    })
)

export const JackpotWinRelations = relations(JackpotWin, ({ one }) => ({
    gameSpin: one(GameSpin, {
        relationName: 'GameSpinToJackpotWin',
        fields: [JackpotWin.gameSpinId],
        references: [GameSpin.id],
    }),
    jackpot: one(Jackpot, {
        relationName: 'JackpotToJackpotWin',
        fields: [JackpotWin.jackpotId],
        references: [Jackpot.id],
    }),
    transaction: one(Transaction, {
        relationName: 'JackpotWinToTransaction',
        fields: [JackpotWin.transactionId],
        references: [Transaction.id],
    }),
    winner: one(User, {
        relationName: 'JackpotWinToUser',
        fields: [JackpotWin.winnerId],
        references: [User.id],
    }),
}))

export const authSessionsRelations = relations(
    AuthSession,
    ({ one, many }) => ({
        user: one(User, {
            fields: [AuthSession.userId],
            references: [User.id],
        }),
        gameSessions: many(GameSession),
    })
)

export const gameSessionsRelations = relations(GameSession, ({ one }) => ({
    authSession: one(AuthSession, {
        fields: [GameSession.authSessionId],
        references: [AuthSession.id],
    }),
    user: one(User, {
        fields: [GameSession.userId],
        references: [User.id],
    }),
    game: one(Game, {
        fields: [GameSession.gameId],
        references: [Game.id],
    }),
}))
</file>

<file path="./backend/src/db/schema/relations.ts">
import { relations } from 'drizzle-orm/relations'
import { authSessions, blackjackBets, blackjackGames, favoriteGames, gameHistory, games, gameSessions, gameSpins, inActiveWallets, jackpotContributions, jackpots, jackpotWins, operators, products, rtgSettingsRequestCustomData, rtgSettingsRequests, rtgSettingsRequestUserData, rtgSettingsResponses, rtgSpinRequestCustomData, rtgSpinRequests, rtgSpinRequestUserData, rtgSpinResults, tournamentParticipants, transactions, users, vipInfo, vipLevelUpHistory, vipRank, wallets } from './schema'

export const gameSessionsRelations = relations(gameSessions, ({ one }) => ({
    authSession: one(authSessions, {
        fields: [gameSessions.authSessionId],
        references: [authSessions.id]
    }),
    user: one(users, {
        fields: [gameSessions.userId],
        references: [users.id]
    }),
}))

export const authSessionsRelations = relations(authSessions, ({ one, many }) => ({
    gameSessions: many(gameSessions),
    user: one(users, {
        fields: [authSessions.userId],
        references: [users.id]
    }),
}))

export const usersRelations = relations(users, ({ many, one }) => ({
    gameSessions: many(gameSessions),
    blackjackBets: many(blackjackBets),
    favoriteGames: many(favoriteGames),
    gameHistories: many(gameHistory),
    jackpots: many(jackpots),
    jackpotWins: many(jackpotWins),
    tournamentParticipants: many(tournamentParticipants),
    wallets: many(inActiveWallets),
    activeWallet: one(wallets, {
        fields: [users.activeWalletId],
        references: [wallets.id]
    }),
    authSessions: many(authSessions),
    vipInfo: many(vipInfo),
}))

export const blackjackBetsRelations = relations(blackjackBets, ({ one }) => ({
    user: one(users, {
        fields: [blackjackBets.userId],
        references: [users.id]
    }),
    blackjackGame: one(blackjackGames, {
        fields: [blackjackBets.gameId],
        references: [blackjackGames.id]
    }),
}))

export const blackjackGamesRelations = relations(blackjackGames, ({ many }) => ({
    blackjackBets: many(blackjackBets),
}))

export const favoriteGamesRelations = relations(favoriteGames, ({ one }) => ({
    user: one(users, {
        fields: [favoriteGames.userId],
        references: [users.id]
    }),
    game: one(games, {
        fields: [favoriteGames.gameId],
        references: [games.id]
    }),
}))

export const gamesRelations = relations(games, ({ one, many }) => ({
    favoriteGames: many(favoriteGames),
    gameHistories: many(gameHistory),
    rtgSettingsResponses: many(rtgSettingsResponses),
    operator: one(operators, {
        fields: [games.operatorId],
        references: [operators.id]
    }),
    rtgSpinResults: many(rtgSpinResults),
}))

export const gameHistoryRelations = relations(gameHistory, ({ one }) => ({
    user: one(users, {
        fields: [gameHistory.userId],
        references: [users.id]
    }),
    game: one(games, {
        fields: [gameHistory.gameId],
        references: [games.id]
    }),
}))

export const jackpotsRelations = relations(jackpots, ({ one, many }) => ({
    user: one(users, {
        fields: [jackpots.lastWonBy],
        references: [users.id]
    }),
    jackpotWins: many(jackpotWins),
    jackpotContributions: many(jackpotContributions),
}))

export const productsRelations = relations(products, ({ one, many }) => ({
    operator: one(operators, {
        fields: [products.operatorId],
        references: [operators.id]
    }),
    transactions: many(transactions),
}))

export const operatorsRelations = relations(operators, ({ many }) => ({
    products: many(products),
    games: many(games),
}))

export const jackpotWinsRelations = relations(jackpotWins, ({ one }) => ({
    gameSpin: one(gameSpins, {
        fields: [jackpotWins.gameSpinId],
        references: [gameSpins.id]
    }),
    jackpot: one(jackpots, {
        fields: [jackpotWins.jackpotId],
        references: [jackpots.id]
    }),
    user: one(users, {
        fields: [jackpotWins.winnerId],
        references: [users.id]
    }),
}))

export const gameSpinsRelations = relations(gameSpins, ({ many }) => ({
    jackpotWins: many(jackpotWins),
    jackpotContributions: many(jackpotContributions),
}))

export const tournamentParticipantsRelations = relations(tournamentParticipants, ({ one }) => ({
    user: one(users, {
        fields: [tournamentParticipants.userId],
        references: [users.id]
    }),
}))

export const walletsRelations = relations(wallets, ({ one, many }) => ({
    user: one(users, {
        fields: [wallets.userId],
        references: [users.id]
    }),
    operator: one(operators, {
        fields: [wallets.operatorId],
        references: [operators.id]

    }),
    transactions: many(transactions),
}))

export const rtgSettingsRequestUserDataRelations = relations(rtgSettingsRequestUserData, ({ one }) => ({
    rtgSettingsRequest: one(rtgSettingsRequests, {
        fields: [rtgSettingsRequestUserData.requestId],
        references: [rtgSettingsRequests.id]
    }),
}))

export const rtgSettingsRequestsRelations = relations(rtgSettingsRequests, ({ many }) => ({
    rtgSettingsRequestUserData: many(rtgSettingsRequestUserData),
    rtgSettingsRequestCustomData: many(rtgSettingsRequestCustomData),
}))

export const rtgSettingsRequestCustomDataRelations = relations(rtgSettingsRequestCustomData, ({ one }) => ({
    rtgSettingsRequest: one(rtgSettingsRequests, {
        fields: [rtgSettingsRequestCustomData.requestId],
        references: [rtgSettingsRequests.id]
    }),
}))

export const rtgSettingsResponsesRelations = relations(rtgSettingsResponses, ({ one }) => ({
    game: one(games, {
        fields: [rtgSettingsResponses.gameId],
        references: [games.id]
    }),
}))

export const rtgSpinRequestUserDataRelations = relations(rtgSpinRequestUserData, ({ one }) => ({
    rtgSpinRequest: one(rtgSpinRequests, {
        fields: [rtgSpinRequestUserData.requestId],
        references: [rtgSpinRequests.id]
    }),
}))

export const rtgSpinRequestsRelations = relations(rtgSpinRequests, ({ many }) => ({
    rtgSpinRequestUserData: many(rtgSpinRequestUserData),
    rtgSpinRequestCustomData: many(rtgSpinRequestCustomData),
}))

export const rtgSpinRequestCustomDataRelations = relations(rtgSpinRequestCustomData, ({ one }) => ({
    rtgSpinRequest: one(rtgSpinRequests, {
        fields: [rtgSpinRequestCustomData.requestId],
        references: [rtgSpinRequests.id]
    }),
}))

export const vipInfoRelations = relations(vipInfo, ({ one, many }) => ({
    user: one(users, {
        fields: [vipInfo.userId],
        references: [users.id]
    }),
    vipRank: one(vipRank, {
        fields: [vipInfo.currentRankid],
        references: [vipRank.id]
    }),
    vipLevelUpHistories: many(vipLevelUpHistory),
}))

export const vipRankRelations = relations(vipRank, ({ many }) => ({
    vipInfos: many(vipInfo),
}))

export const transactionsRelations = relations(transactions, ({ one }) => ({
    product: one(products, {
        fields: [transactions.productId],
        references: [products.id]
    }),
    wallet: one(wallets, {
        fields: [transactions.walletId],
        references: [wallets.id]
    }),
}))

export const vipLevelUpHistoryRelations = relations(vipLevelUpHistory, ({ one }) => ({
    vipInfo: one(vipInfo, {
        fields: [vipLevelUpHistory.vipInfoId],
        references: [vipInfo.id]
    }),
}))

export const rtgSpinResultsRelations = relations(rtgSpinResults, ({ one }) => ({
    game: one(games, {
        fields: [rtgSpinResults.gameId],
        references: [games.id]
    }),
}))

export const jackpotContributionsRelations = relations(jackpotContributions, ({ one }) => ({
    gameSpin: one(gameSpins, {
        fields: [jackpotContributions.gameSpinId],
        references: [gameSpins.id]
    }),
    jackpot: one(jackpots, {
        fields: [jackpotContributions.jackpotId],
        references: [jackpots.id]
    }),
}))
</file>

<file path="./backend/src/db/schema/rtg.ts">
import { boolean, decimal, integer, pgTable, text, timestamp, varchar } from 'drizzle-orm/pg-core'

import { nanoid } from '../../utils/nanoid'

export const rtgSettingsRequests = pgTable('rtg_settings_requests', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    token: text('token'),
    sessionId: text('session_id').notNull(),
    playMode: text('play_mode').notNull(),
    gameId: text('game_id').notNull(),
    createdAt: timestamp('created_at').defaultNow(),
})

export const rtgSettingsRequestUserData = pgTable('rtg_settings_request_user_data', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    requestId: text('request_id').notNull().references(() => rtgSettingsRequests.id),
    userId: text('user_id').notNull(),
    hash: text('hash').notNull(),
    affiliate: text('affiliate').notNull(),
    lang: text('lang').notNull(),
    channel: text('channel').notNull(),
    userType: text('user_type').notNull(),
    fingerprint: text('fingerprint').notNull(),
})

export const rtgSettingsRequestCustomData = pgTable('rtg_settings_request_custom_data', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    requestId: text('request_id').notNull().references(() => rtgSettingsRequests.id),
    siteId: text('site_id').notNull(),
    extras: text('extras').notNull(),
})

export const rtgSpinRequests = pgTable('rtg_spin_requests', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    token: text('token').notNull(),
    sessionId: text('session_id').notNull(),
    playMode: text('play_mode').notNull(),
    gameId: text('game_id').notNull(),
    stake: integer('stake').notNull(),
    bonusId: text('bonus_id'),
    extras: text('extras'),
    gameMode: integer('game_mode').notNull(),
    createdAt: timestamp('created_at').defaultNow(),
})

export const rtgSpinRequestUserData = pgTable('rtg_spin_request_user_data', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    requestId: text('request_id').notNull().references(() => rtgSpinRequests.id),
    userId: integer('user_id').notNull(),
    affiliate: text('affiliate').notNull(),
    lang: text('lang').notNull(),
    channel: text('channel').notNull(),
    userType: text('user_type').notNull(),
    fingerprint: text('fingerprint').notNull(),
})

export const rtgSpinRequestCustomData = pgTable('rtg_spin_request_custom_data', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    requestId: text('request_id').notNull().references(() => rtgSpinRequests.id),
    siteId: text('site_id').notNull(),
    extras: text('extras').notNull(),
})

export const rtgSettingsResults = pgTable('rtg_settings_results', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    success: boolean('success').notNull(),
    createdAt: timestamp('created_at').defaultNow(),
})

export const rtgSettingsResultUser = pgTable('rtg_settings_result_user', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    settingsResultId: text('settings_result_id').notNull().references(() => rtgSettingsResults.id),
    userId: integer('user_id').notNull(),
    country: text('country').notNull(),
    casino: text('casino').notNull(),
    token: text('token').notNull(),
    sessionId: text('session_id').notNull(),
    canGamble: boolean('can_gamble').notNull(),
    lastWin: decimal('last_win').notNull(),
    serverTime: timestamp('server_time').notNull(),
})

export const rtgSettingsResultUserBalance = pgTable('rtg_settings_result_user_balance', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    settingsResultUserId: varchar('settings_result_user_id').notNull().references(() => rtgSettingsResultUser.id),
    cash: decimal('cash').notNull(),
    freeBets: decimal('free_bets').notNull(),
    sessionCash: decimal('session_cash').notNull(),
    sessionFreeBets: decimal('session_free_bets').notNull(),
    bonus: decimal('bonus').notNull(),
})

export const rtgSettingsResultGame = pgTable('rtg_settings_result_game', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    settingsResultId: text('settings_result_id').notNull().references(() => rtgSettingsResults.id),
    cols: integer('cols').notNull(),
    rows: integer('rows').notNull(),
    version: text('version').notNull(),
    rtpDefault: decimal('rtp_default').notNull(),
    volatilityIndex: decimal('volatility_index').notNull(),
    maxMultiplier: decimal('max_multiplier').notNull(),
    gameType: text('game_type').notNull(),
    hasState: boolean('has_state').notNull(),
})

export const rtgSpinResults = pgTable('rtg_spin_results', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    success: boolean('success').notNull(),
    errorCode: integer('error_code'),
    createdAt: timestamp('created_at').defaultNow(),
})

export const rtgSpinResultUser = pgTable('rtg_spin_result_user', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    spinResultId: text('spin_result_id').notNull().references(() => rtgSpinResults.id),
    canGamble: boolean('can_gamble').notNull(),
    userId: integer('user_id').notNull(),
    sessionId: text('session_id').notNull(),
    sessionNetPosition: decimal('session_net_position').notNull(),
    token: text('token').notNull(),
    serverTime: timestamp('server_time').notNull(),
})

export const rtgSpinResultUserBalance = pgTable('rtg_spin_result_user_balance', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    spinResultUserId: varchar('spin_result_user_id').notNull().references(() => rtgSpinResultUser.id),
    cashAtStart: decimal('cash_at_start').notNull(),
    cashAfterBet: decimal('cash_after_bet').notNull(),
    cashAtEnd: decimal('cash_at_end').notNull(),
    freeBetsAtStart: decimal('free_bets_at_start').notNull(),
    freeBetsAfterBet: decimal('free_bets_after_bet').notNull(),
    freeBetsAtEnd: decimal('free_bets_at_end').notNull(),
    bonusAtStart: decimal('bonus_at_start').notNull(),
    bonusAfterBet: decimal('bonus_after_bet').notNull(),
    bonusAtEnd: decimal('bonus_at_end').notNull(),
})

export const rtgSpinResultGame = pgTable('rtg_spin_result_game', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    spinResultId: text('spin_result_id').notNull().references(() => rtgSpinResults.id),
    stake: decimal('stake').notNull(),
    multiplier: integer('multiplier').notNull(),
    hasState: boolean('has_state').notNull(),
})

export const rtgSpinResultGameWin = pgTable('rtg_spin_result_game_win', {
    id: varchar('id').primaryKey().$defaultFn(nanoid),
    spinResultGameId: varchar('spin_result_game_id').notNull().references(() => rtgSpinResultGame.id),
    lines: decimal('lines').notNull(),
    total: decimal('total').notNull(),
})
</file>

<file path="./backend/src/db/schema/schema.bak.ts">
/* eslint-disable ts/no-use-before-define */
import {
    pgTable,
    index,
    foreignKey,
    varchar,
    text,
    integer,
    numeric,
    timestamp,
    jsonb,
    doublePrecision,
    unique,
    boolean,
    serial,
    json,
    uniqueIndex,
    pgEnum,
} from 'drizzle-orm/pg-core'

export const gameProviderName = pgEnum('GameProviderName', [
    'pragmaticplay',
    'evoplay',
    'netent',
    'playngo',
    'relaxgaming',
    'hacksaw',
    'bgaming',
    'spribe',
    'internal',
    'redtiger',
    'netgame',
    'bigfishgames',
    'cqnine',
    'nolimit',
    'kickass',
])
export const paymentMethod = pgEnum('PaymentMethod', [
    'INSTORE_CASH',
    'INSTORE_CARD',
    'CASH_APP',
])
export const permission = pgEnum('Permission', [
    'read',
    'write',
    'upload',
    'manage_users',
    'manage_settings',
    'launch_game',
])
export const role = pgEnum('Role', [
    'USER',
    'ADMIN',
    'VIP',
    'MODERATOR',
    'SYSTEM',
    'OWNER',
    'MEMBER',
    'OPERATOR',
    'SUPPORT_AGENT',
])
export const tournamentStatus = pgEnum('TournamentStatus', [
    'PENDING',
    'ACTIVE',
    'COMPLETED',
    'CANCELLED',
])
export const transactionStatus = pgEnum('TransactionStatus', [
    'PENDING',
    'PROCESSING',
    'COMPLETED',
    'FAILED',
    'CANCELLED',
    'REFUNDED',
    'EXPIRED',
    'REJECTED',
    'REQUIRES_ACTION',
    'ON_HOLD',
])
export const typeOfJackpot = pgEnum('TypeOfJackpot', [
    'MINOR',
    'MAJOR',
    'GRAND',
])
export const typeOfTransaction = pgEnum('TypeOfTransaction', [
    'DEPOSIT',
    'WITHDRAWAL',
    'BET',
    'WIN',
    'TRANSFER_SENT',
    'TRANSFER_RECEIVED',
    'SYSTEM_ADJUSTMENT_CREDIT',
    'SYSTEM_ADJUSTMENT_DEBIT',
    'TOURNAMENT_BUYIN',
    'TOURNAMENT_PRIZE',
    'AFFILIATE_COMMISSION',
    'REFUND',
    'FEE',
    'BONUS_AWARD',
    'BET_PLACE',
    'BET_WIN',
    'BET_LOSE',
    'BET_REFUND',
    'BONUS_WAGER',
    'BONUS_CONVERT',
    'BONUS_EXPIRED',
    'XP_AWARD',
    'ADJUSTMENT_ADD',
    'ADJUSTMENT_SUB',
    'INTERNAL_TRANSFER',
    'PRODUCT_PURCHASE',
    'REBATE_PAYOUT',
    'JACKPOT_WIN',
    'JACKPOT_CONTRIBUTION',
])
export const userRole = pgEnum('UserRole', [
    'USER',
    'ADMIN',
    'MODERATOR',
    'SUPPORT',
    'BOT',
    'SYSTEM',
])
export const gameCategories = pgEnum('game_categories', [
    'slots',
    'fish',
    'table',
    'live',
    'poker',
    'lottery',
    'virtual',
    'other',
])
export const messageType = pgEnum('message_type', [
    'update:wallet',
    'update:vip',
    'update:balance',
    'update:gameSession',
])
export const sessionStatus = pgEnum('session_status', [
    'ACTIVE',
    'COMPLETED',
    'EXPIRED',
    'ABANDONED',
    'TIMEOUT',
])
export const updateType = pgEnum('update_type', ['BINARY', 'OTA'])

export const gameSessions = pgTable(
    'game_sessions',
    {
        id: varchar().primaryKey().notNull(),
        authSessionId: text('auth_session_id').notNull(),
        userId: text('user_id').notNull(),
        gameId: text('game_id'),
        status: sessionStatus().default('ACTIVE').notNull(),
        totalWagered: integer('total_wagered').default(0).notNull(),
        totalWon: integer('total_won').default(0).notNull(),
        totalXpGained: integer('total_xp_gained').default(0).notNull(),
        rtp: numeric({ precision: 5, scale: 2 }),
        duration: integer().default(0).notNull(),
        createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' })
            .defaultNow()
            .notNull(),
        endAt: timestamp('end_at', { withTimezone: true, mode: 'string' }),
    },
    (table) => [
        index('game_session_auth_session_idx').using(
            'btree',
            table.authSessionId.asc().nullsLast().op('text_ops')
        ),
        index('game_session_user_idx').using(
            'btree',
            table.userId.asc().nullsLast().op('text_ops')
        ),
        foreignKey({
            columns: [table.authSessionId],
            foreignColumns: [authSessions.id],
            name: 'game_sessions_auth_session_id_auth_sessions_id_fk',
        }).onDelete('cascade'),
        foreignKey({
            columns: [table.userId],
            foreignColumns: [users.id],
            name: 'game_sessions_user_id_users_id_fk',
        }).onDelete('cascade'),
    ]
)

export const blackjackGames = pgTable('blackjack_games', {
    id: varchar().primaryKey().notNull(),
    table: integer().notNull(),
    type: text().notNull(),
    state: text().notNull(),
    deck: jsonb(),
    dealerCards: jsonb('dealer_cards'),
    fair: jsonb(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
        .defaultNow()
        .notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
        .defaultNow()
        .notNull(),
})

export const blackjackMessage = pgTable('blackjack_message', {
    id: varchar().primaryKey().notNull(),
    event: text(),
    requestId: text('request_id'),
    payload: jsonb(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
        .defaultNow()
        .notNull(),
})

export const gameSpins = pgTable('game_spins', {
    id: varchar().primaryKey().notNull(),
    playerName: text('player_name'),
    gameName: text('game_name'),
    gameId: text('game_id'),
    spinData: jsonb('spin_data'),
    grossWinAmount: doublePrecision('gross_win_amount').notNull(),
    wagerAmount: doublePrecision('wager_amount').notNull(),
    spinNumber: integer('spin_number').notNull(),
    playerAvatar: text('player_avatar'),
    currencyId: text('currency_id'),
    sessionId: text('session_id').notNull(),
    userId: text('user_id'),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
        .defaultNow()
        .notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
        .defaultNow()
        .notNull(),
    occurredAt: timestamp('occurred_at', {
        precision: 3,
        mode: 'string',
    }).notNull(),
    sessionDataId: text(),
})

export const inActiveWallets = pgTable(
    'in_active_wallets',
    {
        id: varchar().primaryKey().notNull(),
        balance: integer().notNull(),
        paymentMethod: text('payment_method').default('INSTORE_CASH').notNull(),
        currency: text().default('USD').notNull(),
        isActive: boolean('is_active').notNull(),
        isDefault: boolean('is_default').notNull(),
        address: text(),
        cashtag: text(),
        userId: text('user_id'),
        operatorId: text('operator_id').notNull(),
        lastUsedAt: timestamp('last_used_at', { precision: 3, mode: 'string' }),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        unique('in_active_wallets_address_unique').on(table.address),
        unique('in_active_wallets_cashtag_unique').on(table.cashtag),
    ]
)

export const blackjackBets = pgTable(
    'blackjack_bets',
    {
        id: varchar().primaryKey().notNull(),
        userId: varchar('user_id').notNull(),
        gameId: varchar('game_id').notNull(),
        seat: integer().notNull(),
        amount: jsonb().notNull(),
        cards: jsonb(),
        cardsLeft: jsonb('cards_left'),
        cardsRight: jsonb('cards_right'),
        actions: jsonb(),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.userId],
            foreignColumns: [users.id],
            name: 'blackjack_bets_user_id_users_id_fk',
        }),
        foreignKey({
            columns: [table.gameId],
            foreignColumns: [blackjackGames.id],
            name: 'blackjack_bets_game_id_blackjack_games_id_fk',
        }),
    ]
)

export const favoriteGames = pgTable(
    'favorite_games',
    {
        id: varchar().primaryKey().notNull(),
        userId: text('user_id').notNull(),
        gameId: text('game_id').notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.userId],
            foreignColumns: [users.id],
            name: 'favorite_games_user_id_users_id_fk',
        }).onDelete('cascade'),
        foreignKey({
            columns: [table.gameId],
            foreignColumns: [games.id],
            name: 'favorite_games_game_id_games_id_fk',
        }).onDelete('cascade'),
    ]
)

export const gameHistory = pgTable(
    'game_history',
    {
        id: varchar().primaryKey().notNull(),
        userId: text('user_id').notNull(),
        gameId: text('game_id').notNull(),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.userId],
            foreignColumns: [users.id],
            name: 'game_history_user_id_users_id_fk',
        }).onDelete('cascade'),
        foreignKey({
            columns: [table.gameId],
            foreignColumns: [games.id],
            name: 'game_history_game_id_games_id_fk',
        }).onDelete('cascade'),
    ]
)

export const jackpots = pgTable(
    'jackpots',
    {
        id: varchar().primaryKey().notNull(),
        type: text().notNull(),
        currentAmountCoins: integer('current_amount_coins').notNull(),
        seedAmountCoins: integer('seed_amount_coins').notNull(),
        minimumBetCoins: integer('minimum_bet_coins').default(1).notNull(),
        contributionRateBasisPoints: integer(
            'contribution_rate_basis_points'
        ).notNull(),
        probabilityPerMillion: integer('probability_per_million').notNull(),
        minimumTimeBetweenWinsMinutes: integer(
            'minimum_time_between_wins_minutes'
        ).notNull(),
        lastWonAt: timestamp('last_won_at', { precision: 3, mode: 'string' }),
        lastWonBy: text('last_won_by'),
        isActive: boolean('is_active').default(true).notNull(),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.lastWonBy],
            foreignColumns: [users.id],
            name: 'jackpots_lastWinner_fkey',
        })
            .onUpdate('cascade')
            .onDelete('set null'),
    ]
)

export const products = pgTable(
    'products',
    {
        id: varchar().primaryKey().notNull(),
        title: text().default('default').notNull(),
        productType: text('product_type').default('bundle').notNull(),
        bonusTotalInCredits: integer('bonus_total_in_credits').notNull(),
        isActive: boolean('is_active'),
        priceInCents: integer('price_in_cents').notNull(),
        amountToReceiveInCredits: integer('amount_to_receive_in_credits').notNull(),
        bestValue: integer('best_value').notNull(),
        discountInCents: integer('discount_in_cents').notNull(),
        bonusSpins: integer('bonus_spins').notNull(),
        isPromo: boolean('is_promo'),
        totalDiscountInCents: integer('total_discount_in_cents').notNull(),
        operatorId: text('operator_id'),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.operatorId],
            foreignColumns: [operators.id],
            name: 'products_operator_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
    ]
)

export const settings = pgTable('settings', {
    id: varchar().primaryKey().notNull(),
    generalMaintenanceEnabled: boolean('general_maintenance_enabled')
        .default(false)
        .notNull(),
    generalRainEnabled: boolean('general_rain_enabled').default(false),
    generalTipEnabled: boolean('general_tip_enabled').default(false),
    gameBlackjackEnabled: boolean('game_blackjack_enabled').default(true),
    blackjackMinBetStandard: integer('blackjack_min_bet_standard')
        .default(100)
        .notNull(),
    blackjackMaxBetStandard: integer('blackjack_max_bet_standard')
        .default(50000)
        .notNull(),
    blackjackMinBetWhale: integer('blackjack_min_bet_whale')
        .default(1000)
        .notNull(),
    blackjackMaxBetWhale: integer('blackjack_max_bet_whale')
        .default(250000)
        .notNull(),
    blackjackDeckCount: integer('blackjack_deck_count').default(6).notNull(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
        .defaultNow()
        .notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
        .defaultNow()
        .notNull(),
})

export const jackpotWins = pgTable(
    'jackpot_wins',
    {
        id: varchar().primaryKey().notNull(),
        jackpotId: text('jackpot_id').notNull(),
        winnerId: text('winner_id').notNull(),
        winAmountCoins: integer('win_amount_coins').notNull(),
        gameSpinId: text('game_spin_id').notNull(),
        transactionId: text('transaction_id'),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        sessionDataId: text('session_data_id'),
    },
    (table) => [
        foreignKey({
            columns: [table.gameSpinId],
            foreignColumns: [gameSpins.id],
            name: 'jackpot_wins_gameSpin_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
        foreignKey({
            columns: [table.jackpotId],
            foreignColumns: [jackpots.id],
            name: 'jackpot_wins_jackpot_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
        foreignKey({
            columns: [table.winnerId],
            foreignColumns: [users.id],
            name: 'jackpot_wins_winner_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
        unique('jackpot_wins_game_spin_id_unique').on(table.gameSpinId),
    ]
)

export const tournamentParticipants = pgTable(
    'tournament_participants',
    {
        id: varchar().primaryKey().notNull(),
        tournamentId: text('tournament_id').notNull(),
        userId: text('user_id').notNull(),
        score: integer().notNull(),
        rank: integer(),
        joinedAt: timestamp('joined_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.userId],
            foreignColumns: [users.id],
            name: 'tournament_participants_user_id_users_id_fk',
        }).onDelete('cascade'),
    ]
)

export const vipLevel = pgTable('VipLevel', {
    level: integer().primaryKey().notNull(),
    xpForNext: integer().notNull(),
})

export const wallets = pgTable(
    'wallets',
    {
        id: varchar().primaryKey().notNull(),
        balance: integer().notNull(),
        paymentMethod: text('payment_method').default('INSTORE_CASH').notNull(),
        currency: text().default('USD').notNull(),
        isActive: boolean('is_active').default(true).notNull(),
        isDefault: boolean('is_default').notNull(),
        address: text(),
        cashtag: text(),
        userId: text('user_id').notNull(),
        operatorId: text('operator_id').notNull(),
        lastUsedAt: timestamp('last_used_at', { precision: 3, mode: 'string' }),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.userId],
            foreignColumns: [users.id],
            name: 'wallets_user_id_users_id_fk',
        }).onDelete('cascade'),
        unique('wallets_address_unique').on(table.address),
        unique('wallets_cashtag_unique').on(table.cashtag),
    ]
)

export const vipRank = pgTable(
    'VipRank',
    {
        id: integer().primaryKey().notNull(),
        name: text().notNull(),
        minXp: integer().notNull(),
        dailyBonusCoinPct: integer().notNull(),
        hourlyBonusCoinPct: integer().notNull(),
        purchaseBonusCoinPct: integer().notNull(),
        levelUpBonusCoinPct: integer().notNull(),
        hasConcierge: boolean().notNull(),
        hasVipLoungeAccess: boolean().notNull(),
        isInvitationOnly: boolean().notNull(),
    },
    (table) => [
        unique('VipRank_name_unique').on(table.name),
        unique('VipRank_minXp_unique').on(table.minXp),
    ]
)

export const appVersions = pgTable(
    'app_versions',
    {
        id: serial().primaryKey().notNull(),
        appId: text('app_id').notNull(),
        version: text().notNull(),
        platform: text().notNull(),
        updateType: text('update_type').notNull(),
        downloadUrl: text('download_url').notNull(),
        changelog: text().array().notNull(),
        mandatory: boolean().default(false).notNull(),
        releaseDate: timestamp('release_date', {
            withTimezone: true,
            mode: 'string',
        }).notNull(),
        fileSize: integer('file_size').notNull(),
        checksum: text().notNull(),
    },
    (table) => [
        unique('version_unique_idx').on(table.appId, table.version, table.platform),
    ]
)

export const rtgSettingsRequestUserData = pgTable(
    'rtg_settings_request_user_data',
    {
        id: varchar().primaryKey().notNull(),
        requestId: text('request_id').notNull(),
        userId: text('user_id').notNull(),
        hash: text().notNull(),
        affiliate: text().notNull(),
        lang: text().notNull(),
        channel: text().notNull(),
        userType: text('user_type').notNull(),
        fingerprint: text().notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.requestId],
            foreignColumns: [rtgSettingsRequests.id],
            name: 'rtg_settings_request_user_data_request_id_rtg_settings_requests',
        }),
    ]
)

export const rtgSettingsRequestCustomData = pgTable(
    'rtg_settings_request_custom_data',
    {
        id: varchar().primaryKey().notNull(),
        requestId: text('request_id').notNull(),
        siteId: text('site_id').notNull(),
        extras: text().notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.requestId],
            foreignColumns: [rtgSettingsRequests.id],
            name: 'rtg_settings_request_custom_data_request_id_rtg_settings_reques',
        }),
    ]
)

export const rtgSettingsResponses = pgTable(
    'rtg_settings_responses',
    {
        id: serial().primaryKey().notNull(),
        gameId: varchar('game_id'),
        gameName: text('game_name').notNull(),
        success: boolean().notNull(),
        userId: integer('user_id'),
        userToken: text('user_token'),
        userSessionId: text('user_session_id'),
        userCanGamble: boolean('user_can_gamble'),
        userCountry: text('user_country'),
        userCasino: text('user_casino'),
        userCurrencyCode: text('user_currency_code'),
        userCurrencySymbol: text('user_currency_symbol'),
        userServerTime: timestamp('user_server_time', { mode: 'string' }),
        userBalanceCash: numeric('user_balance_cash'),
        userBalanceFreeBets: numeric('user_balance_free_bets'),
        userBalanceBonus: numeric('user_balance_bonus'),
        userStakesDefaultIndex: integer('user_stakes_default_index'),
        userStakesLastIndex: integer('user_stakes_last_index'),
        gameCols: integer('game_cols'),
        gameRows: integer('game_rows'),
        gamePaysType: text('game_pays_type'),
        gameVersion: text('game_version'),
        gameVolatilityIndex: text('game_volatility_index'),
        gameRtpDefault: numeric('game_rtp_default'),
        gameHasGamble: boolean('game_has_gamble'),
        gameHasFeatureBuy: boolean('game_has_feature_buy'),
        launcherVersion: text('launcher_version'),
        userBonuses: json('user_bonuses'),
        userAutoplay: json('user_autoplay'),
        gameLines: json('game_lines'),
        gameTiles: json('game_tiles'),
        gameFeatures: json('game_features'),
        gameMultiplierSequence: json('game_multiplier_sequence'),
        createdAt: timestamp('created_at', { mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.gameId],
            foreignColumns: [games.id],
            name: 'rtg_settings_responses_game_id_games_id_fk',
        }),
        unique('rtg_settings_responses_game_name_unique').on(table.gameName),
    ]
)

export const rtgSpinRequestUserData = pgTable(
    'rtg_spin_request_user_data',
    {
        id: varchar().primaryKey().notNull(),
        requestId: text('request_id').notNull(),
        userId: integer('user_id').notNull(),
        affiliate: text().notNull(),
        lang: text().notNull(),
        channel: text().notNull(),
        userType: text('user_type').notNull(),
        fingerprint: text().notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.requestId],
            foreignColumns: [rtgSpinRequests.id],
            name: 'rtg_spin_request_user_data_request_id_rtg_spin_requests_id_fk',
        }),
    ]
)

export const rtgSpinRequestCustomData = pgTable(
    'rtg_spin_request_custom_data',
    {
        id: varchar().primaryKey().notNull(),
        requestId: text('request_id').notNull(),
        siteId: text('site_id').notNull(),
        extras: text().notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.requestId],
            foreignColumns: [rtgSpinRequests.id],
            name: 'rtg_spin_request_custom_data_request_id_rtg_spin_requests_id_fk',
        }),
    ]
)

export const tasks = pgTable('tasks', {
    id: varchar().primaryKey().notNull(),
    name: text().notNull(),
    done: boolean().default(false).notNull(),
    createdAt: timestamp('created_at', { mode: 'string' }),
    updatedAt: timestamp('updated_at', { mode: 'string' }),
})

export const rtgSettingsRequests = pgTable('rtg_settings_requests', {
    id: varchar().primaryKey().notNull(),
    token: text(),
    sessionId: text('session_id').notNull(),
    playMode: text('play_mode').notNull(),
    gameId: text('game_id').notNull(),
    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow(),
})

export const rtgSpinRequests = pgTable('rtg_spin_requests', {
    id: varchar().primaryKey().notNull(),
    token: text().notNull(),
    sessionId: text('session_id').notNull(),
    playMode: text('play_mode').notNull(),
    gameId: text('game_id').notNull(),
    stake: integer().notNull(),
    bonusId: text('bonus_id'),
    extras: text(),
    gameMode: integer('game_mode').notNull(),
    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow(),
})

export const authSessions = pgTable(
    'auth_sessions',
    {
        id: varchar().primaryKey().notNull(),
        userId: text('user_id').notNull(),
        status: sessionStatus().default('ACTIVE').notNull(),
        ipAddress: text('ip_address'),
        userAgent: text('user_agent'),
        deviceId: text('device_id'),
        createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' })
            .defaultNow()
            .notNull(),
        expiresAt: timestamp('expires_at', { withTimezone: true, mode: 'string' }),
        lastSeen: timestamp('last_seen', { withTimezone: true, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        index('auth_session_status_idx').using(
            'btree',
            table.status.asc().nullsLast().op('enum_ops')
        ),
        index('auth_session_user_idx').using(
            'btree',
            table.userId.asc().nullsLast().op('text_ops'),
            table.createdAt.asc().nullsLast().op('text_ops')
        ),
        foreignKey({
            columns: [table.userId],
            foreignColumns: [users.id],
            name: 'auth_sessions_user_id_users_id_fk',
        }).onDelete('cascade'),
    ]
)

export const games = pgTable(
    'games',
    {
        id: varchar().primaryKey().notNull(),
        name: text().notNull(),
        title: text().notNull(),
        configuration: jsonb(),
        description: text(),
        category: text().notNull(),
        tags: text().array().notNull(),
        thumbnailUrl: text('thumbnail_url'),
        bannerUrl: text('banner_url'),
        developer: text().notNull(),
        providerId: text('provider_id'),
        totalWagered: integer('total_wagered').notNull(),
        totalWon: integer('total_won').notNull(),
        targetRtp: integer('target_rtp'),
        isFeatured: boolean('is_featured').notNull(),
        isActive: boolean('is_active').default(true).notNull(),
        operatorId: text('operator_id'),
        tournamentDirectives: jsonb('tournament_directives'),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        gameLogic: jsonb('game_logic'),
    },
    (table) => [
        foreignKey({
            columns: [table.operatorId],
            foreignColumns: [operators.id],
            name: 'games_operator_fkey',
        })
            .onUpdate('cascade')
            .onDelete('set null'),
        unique('games_name_key').on(table.name),
    ]
)

export const users = pgTable(
    'users',
    {
        id: varchar().primaryKey().notNull(),
        username: text().notNull(),
        email: text(),
        passwordHash: text('password_hash'),
        accessToken: text('access_token'),
        refreshToken: text('refresh_token'),
        accessTokenExpiresAt: timestamp('access_token_expires_at', {
            precision: 3,
            mode: 'string',
        }),
        refreshTokenExpiresAt: timestamp('refresh_token_expires_at', {
            precision: 3,
            mode: 'string',
        }),
        currentGameSessionDataId: text('current_game_session_data_id'),
        currentAuthSessionDataId: text('current_auth_session_data_id'),
        avatarUrl: text('avatar_url').default('avatar-01'),
        role: text().default('USER').notNull(),
        isActive: boolean('is_active').default(true).notNull(),
        lastLoginAt: timestamp('last_login_at', { precision: 3, mode: 'string' }),
        totalXpGained: integer('total_xp_gained').notNull(),
        activeWalletId: text('active_wallet_id'),
        vipInfoId: text('vip_info_id'),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        deletedAt: timestamp('deleted_at', { precision: 3, mode: 'string' }),
        lastSeen: timestamp('last_seen', { precision: 3, mode: 'string' }),
    },
    (table) => [
        unique('users_username_unique').on(table.username),
        unique('users_email_unique').on(table.email),
        unique('users_current_game_session_data_id_unique').on(
            table.currentGameSessionDataId
        ),
        unique('users_current_auth_session_data_id_unique').on(
            table.currentAuthSessionDataId
        ),
        unique('users_active_wallet_id_unique').on(table.activeWalletId),
        unique('users_vip_info_id_unique').on(table.vipInfoId),
    ]
)

export const operators = pgTable(
    'operators',
    {
        id: varchar().primaryKey().notNull(),
        name: text().notNull(),
        operatorSecret: text('operator_secret').notNull(),
        operatorAccess: text('operator_access').notNull(),
        callbackUrl: text('callback_url').notNull(),
        isActive: boolean('is_active').default(true).notNull(),
        allowedIps: text('allowed_ips').array().notNull(),
        description: text(),
        productIds: text('product_ids'),
        balance: integer().notNull(),
        netRevenue: integer('net-revenue').notNull(),
        acceptedPayments: text('accepted_payments').array().notNull(),
        ownerId: text('owner_id'),
        lastUsedAt: timestamp('last_used_at', { precision: 3, mode: 'string' }),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [unique('operators_name_unique').on(table.name)]
)

export const vipInfo = pgTable(
    'vip_info',
    {
        id: varchar().primaryKey().notNull(),
        level: integer().default(1).notNull(),
        xp: integer().notNull(),
        totalXp: integer().notNull(),
        userId: text().notNull(),
        currentRankid: integer(),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.userId],
            foreignColumns: [users.id],
            name: 'vip_info_user_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
        foreignKey({
            columns: [table.currentRankid],
            foreignColumns: [vipRank.id],
            name: 'vip_info_currentRank_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
        unique('vip_info_userId_unique').on(table.userId),
    ]
)

export const transactions = pgTable(
    'transactions',
    {
        id: varchar().primaryKey().notNull(),
        processedAt: timestamp('processed_at', { precision: 3, mode: 'string' }),
        walletId: text('wallet_id'),
        type: text().notNull(),
        status: text().default('PENDING').notNull(),
        amount: integer().notNull(),
        netAmount: integer('net_amount'),
        feeAmount: integer('fee_amount'),
        productId: text('product_id'),
        paymentMethod: text('payment_method'),
        balanceBefore: integer('balance_before'),
        balanceAfter: integer('balance_after'),
        bonusBalanceBefore: integer('bonus_balance_before'),
        bonusBalanceAfter: integer('bonus_balance_after'),
        bonusAmount: integer('bonus_amount'),
        wageringRequirement: integer('wagering_requirement'),
        wageringProgress: integer('wagering_progress'),
        description: text(),
        provider: text(),
        providerTxId: text('provider_tx_id'),
        relatedGameId: text('related_game_id'),
        relatedRoundId: text('related_round_id'),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        operatorId: text('operator_id'),
        userId: text('user_id'),
    },
    (table) => [
        foreignKey({
            columns: [table.productId],
            foreignColumns: [products.id],
            name: 'transactions_product_fkey',
        })
            .onUpdate('cascade')
            .onDelete('set null'),
        foreignKey({
            columns: [table.walletId],
            foreignColumns: [wallets.id],
            name: 'transactions_wallet_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
    ]
)

export const vipLevelUpHistory = pgTable(
    'vip_level_up_history',
    {
        id: varchar().primaryKey().notNull(),
        previousLevel: integer('previous_level').notNull(),
        newLevel: integer('new_level').notNull(),
        timestamp: timestamp({ precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
        vipInfoId: text('vip_info_id').notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.vipInfoId],
            foreignColumns: [vipInfo.id],
            name: 'vip_level_up_history_vipInfo_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
    ]
)

export const rtgSpinResults = pgTable(
    'rtg_spin_results',
    {
        id: serial().primaryKey().notNull(),
        gameId: varchar('game_id'),
        gameName: text('game_name').notNull(),
        success: boolean().notNull(),
        userId: integer('user_id').notNull(),
        sessionId: text('session_id'),
        canGamble: boolean('can_gamble'),
        token: text(),
        sessionNetPosition: numeric('session_net_position'),
        serverTime: timestamp('server_time', { mode: 'string' }),
        balanceCashAtStart: numeric('balance_cash_at_start'),
        balanceCashAfterBet: numeric('balance_cash_after_bet'),
        balanceCashAtEnd: numeric('balance_cash_at_end'),
        balanceFreeBetsAtStart: numeric('balance_free_bets_at_start'),
        balanceFreeBetsAfterBet: numeric('balance_free_bets_after_bet'),
        balanceFreeBetsAtEnd: numeric('balance_free_bets_at_end'),
        balanceBonusAtStart: numeric('balance_bonus_at_start'),
        balanceBonusAfterBet: numeric('balance_bonus_after_bet'),
        balanceBonusAtEnd: numeric('balance_bonus_at_end'),
        limitsBetThresholdTime: integer('limits_bet_threshold_time'),
        bonuses: json(),
        tournaments: json(),
        vouchers: json(),
        messages: json(),
        stake: numeric(),
        multiplier: numeric(),
        winTotal: numeric('win_total'),
        winsMultipliersTotal: numeric('wins_multipliers_total'),
        winsMultipliersLines: numeric('wins_multipliers_lines'),
        spinMode: text('spin_mode'),
        hasState: boolean('has_state'),
        winLines: json('win_lines'),
        fatTiles: json('fat_tiles'),
        scatters: json(),
        features: json(),
        reelsBuffer: json('reels_buffer'),
        createdAt: timestamp('created_at', { mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        foreignKey({
            columns: [table.gameId],
            foreignColumns: [games.id],
            name: 'rtg_spin_results_game_id_games_id_fk',
        }),
    ]
)

export const jackpotContributions = pgTable(
    'jackpot_contributions',
    {
        id: varchar().primaryKey().notNull(),
        jackpotId: text('jackpot_id').notNull(),
        userId: text('user_id'),
        gameSpinId: text('game_spin_id').notNull(),
        contributionAmountCoins: integer('contribution_amount_coins').notNull(),
        createdAt: timestamp('created_at', { precision: 3, mode: 'string' })
            .defaultNow()
            .notNull(),
    },
    (table) => [
        uniqueIndex('JackpotContribution_jackpotId_gameSpinId_key').using(
            'btree',
            table.jackpotId.asc().nullsLast().op('text_ops'),
            table.gameSpinId.asc().nullsLast().op('text_ops')
        ),
        foreignKey({
            columns: [table.gameSpinId],
            foreignColumns: [gameSpins.id],
            name: 'jackpot_contributions_gameSpin_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
        foreignKey({
            columns: [table.jackpotId],
            foreignColumns: [jackpots.id],
            name: 'jackpot_contributions_jackpot_fkey',
        })
            .onUpdate('cascade')
            .onDelete('cascade'),
    ]
)
</file>

<file path="./backend/src/db/schema/schema.ts">
/* eslint-disable ts/no-use-before-define */

import { boolean, doublePrecision, foreignKey, index, integer, json, jsonb, numeric, pgEnum, pgTable, serial, text, timestamp, unique, uniqueIndex, varchar } from 'drizzle-orm/pg-core'

export const gameProviderName = pgEnum('GameProviderName', ['pragmaticplay', 'evoplay', 'netent', 'playngo', 'relaxgaming', 'hacksaw', 'bgaming', 'spribe', 'internal', 'redtiger', 'netgame', 'bigfishgames', 'cqnine', 'nolimit', 'kickass'])
export const paymentMethod = pgEnum('PaymentMethod', ['INSTORE_CASH', 'INSTORE_CARD', 'CASH_APP'])
export const permission = pgEnum('Permission', ['read', 'write', 'upload', 'manage_users', 'manage_settings', 'launch_game'])
export const role = pgEnum('Role', ['USER', 'ADMIN', 'VIP', 'MODERATOR', 'SYSTEM', 'OWNER', 'MEMBER', 'OPERATOR', 'SUPPORT_AGENT'])
export const tournamentStatus = pgEnum('TournamentStatus', ['PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED'])
export const transactionStatus = pgEnum('TransactionStatus', ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'EXPIRED', 'REJECTED', 'REQUIRES_ACTION', 'ON_HOLD'])
export const typeOfJackpot = pgEnum('TypeOfJackpot', ['MINOR', 'MAJOR', 'GRAND'])
export const typeOfTransaction = pgEnum('TypeOfTransaction', ['DEPOSIT', 'WITHDRAWAL', 'BET', 'WIN', 'TRANSFER_SENT', 'TRANSFER_RECEIVED', 'SYSTEM_ADJUSTMENT_CREDIT', 'SYSTEM_ADJUSTMENT_DEBIT', 'TOURNAMENT_BUYIN', 'TOURNAMENT_PRIZE', 'AFFILIATE_COMMISSION', 'REFUND', 'FEE', 'BONUS_AWARD', 'BET_PLACE', 'BET_WIN', 'BET_LOSE', 'BET_REFUND', 'BONUS_WAGER', 'BONUS_CONVERT', 'BONUS_EXPIRED', 'XP_AWARD', 'ADJUSTMENT_ADD', 'ADJUSTMENT_SUB', 'INTERNAL_TRANSFER', 'PRODUCT_PURCHASE', 'REBATE_PAYOUT', 'JACKPOT_WIN', 'JACKPOT_CONTRIBUTION'])
export const userRole = pgEnum('UserRole', ['USER', 'ADMIN', 'MODERATOR', 'SUPPORT', 'BOT', 'SYSTEM'])
export const gameCategories = pgEnum('game_categories', ['slots', 'fish', 'table', 'live', 'poker', 'lottery', 'virtual', 'other'])
export const messageType = pgEnum('message_type', ['update:wallet', 'update:vip', 'update:balance', 'update:gameSession'])
export const sessionStatus = pgEnum('session_status', ['ACTIVE', 'COMPLETED', 'EXPIRED', 'ABANDONED', 'TIMEOUT'])
export const updateType = pgEnum('update_type', ['BINARY', 'OTA'])

export const gameSessions = pgTable('game_sessions', {
    id: varchar().primaryKey().notNull(),
    authSessionId: text('auth_session_id').notNull(),
    userId: text('user_id').notNull(),
    gameId: text('game_id'),
    status: sessionStatus().default('ACTIVE').notNull(),
    totalWagered: integer('total_wagered').default(0).notNull(),
    totalWon: integer('total_won').default(0).notNull(),
    totalXpGained: integer('total_xp_gained').default(0).notNull(),
    rtp: numeric({ precision: 5, scale: 2 }),
    duration: integer().default(0).notNull(),
    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }).defaultNow().notNull(),
    endAt: timestamp('end_at', { withTimezone: true, mode: 'string' }),
}, (table) => [
    index('game_session_auth_session_idx').using('btree', table.authSessionId.asc().nullsLast().op('text_ops')),
    index('game_session_user_idx').using('btree', table.userId.asc().nullsLast().op('text_ops')),
    foreignKey({
        columns: [table.authSessionId],
        foreignColumns: [authSessions.id],
        name: 'game_sessions_auth_session_id_auth_sessions_id_fk'
    }).onDelete('cascade'),
    foreignKey({
        columns: [table.userId],
        foreignColumns: [users.id],
        name: 'game_sessions_user_id_users_id_fk'
    }).onDelete('cascade'),
])

export const blackjackGames = pgTable('blackjack_games', {
    id: varchar().primaryKey().notNull(),
    table: integer().notNull(),
    type: text().notNull(),
    state: text().notNull(),
    deck: jsonb(),
    dealerCards: jsonb('dealer_cards'),
    fair: jsonb(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
})

export const blackjackMessage = pgTable('blackjack_message', {
    id: varchar().primaryKey().notNull(),
    event: text(),
    requestId: text('request_id'),
    payload: jsonb(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
})

export const gameSpins = pgTable('game_spins', {
    id: varchar().primaryKey().notNull(),
    playerName: text('player_name'),
    gameName: text('game_name'),
    gameId: text('game_id'),
    spinData: jsonb('spin_data'),
    grossWinAmount: doublePrecision('gross_win_amount').notNull(),
    wagerAmount: doublePrecision('wager_amount').notNull(),
    spinNumber: integer('spin_number').notNull(),
    playerAvatar: text('player_avatar'),
    currencyId: text('currency_id'),
    sessionId: text('session_id').notNull(),
    userId: text('user_id'),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    occurredAt: timestamp('occurred_at', { precision: 3, mode: 'string' }).notNull(),
    sessionDataId: text(),
})

export const inActiveWallets = pgTable('in_active_wallets', {
    id: varchar().primaryKey().notNull(),
    balance: integer().notNull(),
    paymentMethod: text('payment_method').default('INSTORE_CASH').notNull(),
    currency: text().default('USD').notNull(),
    isActive: boolean('is_active').notNull(),
    isDefault: boolean('is_default').notNull(),
    address: text(),
    cashtag: text(),
    userId: text('user_id'),
    operatorId: text('operator_id').notNull(),
    lastUsedAt: timestamp('last_used_at', { precision: 3, mode: 'string' }),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    unique('in_active_wallets_address_unique').on(table.address),
    unique('in_active_wallets_cashtag_unique').on(table.cashtag),
])

export const blackjackBets = pgTable('blackjack_bets', {
    id: varchar().primaryKey().notNull(),
    userId: varchar('user_id').notNull(),
    gameId: varchar('game_id').notNull(),
    seat: integer().notNull(),
    amount: jsonb().notNull(),
    cards: jsonb(),
    cardsLeft: jsonb('cards_left'),
    cardsRight: jsonb('cards_right'),
    actions: jsonb(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.userId],
        foreignColumns: [users.id],
        name: 'blackjack_bets_user_id_users_id_fk'
    }),
    foreignKey({
        columns: [table.gameId],
        foreignColumns: [blackjackGames.id],
        name: 'blackjack_bets_game_id_blackjack_games_id_fk'
    }),
])

export const favoriteGames = pgTable('favorite_games', {
    id: varchar().primaryKey().notNull(),
    userId: text('user_id').notNull(),
    gameId: text('game_id').notNull(),
}, (table) => [
    foreignKey({
        columns: [table.userId],
        foreignColumns: [users.id],
        name: 'favorite_games_user_id_users_id_fk'
    }).onDelete('cascade'),
    foreignKey({
        columns: [table.gameId],
        foreignColumns: [games.id],
        name: 'favorite_games_game_id_games_id_fk'
    }).onDelete('cascade'),
])

export const gameHistory = pgTable('game_history', {
    id: varchar().primaryKey().notNull(),
    userId: text('user_id').notNull(),
    gameId: text('game_id').notNull(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.userId],
        foreignColumns: [users.id],
        name: 'game_history_user_id_users_id_fk'
    }).onDelete('cascade'),
    foreignKey({
        columns: [table.gameId],
        foreignColumns: [games.id],
        name: 'game_history_game_id_games_id_fk'
    }).onDelete('cascade'),
])

export const jackpots = pgTable('jackpots', {
    id: varchar().primaryKey().notNull(),
    type: text().notNull(),
    currentAmountCoins: integer('current_amount_coins').notNull(),
    seedAmountCoins: integer('seed_amount_coins').notNull(),
    minimumBetCoins: integer('minimum_bet_coins').default(1).notNull(),
    contributionRateBasisPoints: integer('contribution_rate_basis_points').notNull(),
    probabilityPerMillion: integer('probability_per_million').notNull(),
    minimumTimeBetweenWinsMinutes: integer('minimum_time_between_wins_minutes').notNull(),
    lastWonAt: timestamp('last_won_at', { precision: 3, mode: 'string' }),
    lastWonBy: text('last_won_by'),
    isActive: boolean('is_active').default(true).notNull(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.lastWonBy],
        foreignColumns: [users.id],
        name: 'jackpots_lastWinner_fkey'
    }).onUpdate('cascade').onDelete('set null'),
])

export const products = pgTable('products', {
    id: varchar().primaryKey().notNull(),
    title: text().default('default').notNull(),
    productType: text('product_type').default('bundle').notNull(),
    bonusTotalInCredits: integer('bonus_total_in_credits').notNull(),
    isActive: boolean('is_active'),
    priceInCents: integer('price_in_cents').notNull(),
    amountToReceiveInCredits: integer('amount_to_receive_in_credits').notNull(),
    bestValue: integer('best_value').notNull(),
    discountInCents: integer('discount_in_cents').notNull(),
    bonusSpins: integer('bonus_spins').notNull(),
    isPromo: boolean('is_promo'),
    totalDiscountInCents: integer('total_discount_in_cents').notNull(),
    operatorId: text('operator_id'),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.operatorId],
        foreignColumns: [operators.id],
        name: 'products_operator_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
])

export const settings = pgTable('settings', {
    id: varchar().primaryKey().notNull(),
    generalMaintenanceEnabled: boolean('general_maintenance_enabled').default(false).notNull(),
    generalRainEnabled: boolean('general_rain_enabled').default(false),
    generalTipEnabled: boolean('general_tip_enabled').default(false),
    gameBlackjackEnabled: boolean('game_blackjack_enabled').default(true),
    blackjackMinBetStandard: integer('blackjack_min_bet_standard').default(100).notNull(),
    blackjackMaxBetStandard: integer('blackjack_max_bet_standard').default(50000).notNull(),
    blackjackMinBetWhale: integer('blackjack_min_bet_whale').default(1000).notNull(),
    blackjackMaxBetWhale: integer('blackjack_max_bet_whale').default(250000).notNull(),
    blackjackDeckCount: integer('blackjack_deck_count').default(6).notNull(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
})

export const jackpotWins = pgTable('jackpot_wins', {
    id: varchar().primaryKey().notNull(),
    jackpotId: text('jackpot_id').notNull(),
    winnerId: text('winner_id').notNull(),
    winAmountCoins: integer('win_amount_coins').notNull(),
    gameSpinId: text('game_spin_id').notNull(),
    transactionId: text('transaction_id'),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    sessionDataId: text('session_data_id'),
}, (table) => [
    foreignKey({
        columns: [table.gameSpinId],
        foreignColumns: [gameSpins.id],
        name: 'jackpot_wins_gameSpin_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
    foreignKey({
        columns: [table.jackpotId],
        foreignColumns: [jackpots.id],
        name: 'jackpot_wins_jackpot_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
    foreignKey({
        columns: [table.winnerId],
        foreignColumns: [users.id],
        name: 'jackpot_wins_winner_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
    unique('jackpot_wins_game_spin_id_unique').on(table.gameSpinId),
])

export const tournamentParticipants = pgTable('tournament_participants', {
    id: varchar().primaryKey().notNull(),
    tournamentId: text('tournament_id').notNull(),
    userId: text('user_id').notNull(),
    score: integer().notNull(),
    rank: integer(),
    joinedAt: timestamp('joined_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.userId],
        foreignColumns: [users.id],
        name: 'tournament_participants_user_id_users_id_fk'
    }).onDelete('cascade'),
])

export const vipLevel = pgTable('VipLevel', {
    level: integer().primaryKey().notNull(),
    xpForNext: integer().notNull(),
})

export const wallets = pgTable('wallets', {
    id: varchar().primaryKey().notNull(),
    balance: integer().notNull(),
    paymentMethod: text('payment_method').default('INSTORE_CASH').notNull(),
    currency: text().default('USD').notNull(),
    isActive: boolean('is_active').default(true).notNull(),
    isDefault: boolean('is_default').notNull(),
    address: text(),
    cashtag: text(),
    userId: text('user_id').notNull(),
    operatorId: text('operator_id').notNull(),
    lastUsedAt: timestamp('last_used_at', { precision: 3, mode: 'string' }),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    // Correct FK direction: wallets.userId -> users.id
    foreignKey({
        columns: [table.userId],
        foreignColumns: [users.id],
        name: 'wallets_user_id_users_id_fk'
    }).onDelete('cascade'),
    // One wallet per (user, operator)
    unique('wallets_user_operator_unique').on(table.userId, table.operatorId),
    unique('wallets_address_unique').on(table.address),
    unique('wallets_cashtag_unique').on(table.cashtag),
])

export const vipRank = pgTable('VipRank', {
    id: integer().primaryKey().notNull(),
    name: text().notNull(),
    minXp: integer().notNull(),
    dailyBonusCoinPct: integer().notNull(),
    hourlyBonusCoinPct: integer().notNull(),
    purchaseBonusCoinPct: integer().notNull(),
    levelUpBonusCoinPct: integer().notNull(),
    hasConcierge: boolean().notNull(),
    hasVipLoungeAccess: boolean().notNull(),
    isInvitationOnly: boolean().notNull(),
}, (table) => [
    unique('VipRank_name_unique').on(table.name),
    unique('VipRank_minXp_unique').on(table.minXp),
])

export const appVersions = pgTable('app_versions', {
    id: serial().primaryKey().notNull(),
    appId: text('app_id').notNull(),
    version: text().notNull(),
    platform: text().notNull(),
    updateType: text('update_type').notNull(),
    downloadUrl: text('download_url').notNull(),
    changelog: text().array().notNull(),
    mandatory: boolean().default(false).notNull(),
    releaseDate: timestamp('release_date', { withTimezone: true, mode: 'string' }).notNull(),
    fileSize: integer('file_size').notNull(),
    checksum: text().notNull(),
}, (table) => [
    unique('version_unique_idx').on(table.appId, table.version, table.platform),
])

export const rtgSettingsRequestUserData = pgTable('rtg_settings_request_user_data', {
    id: varchar().primaryKey().notNull(),
    requestId: text('request_id').notNull(),
    userId: text('user_id').notNull(),
    hash: text().notNull(),
    affiliate: text().notNull(),
    lang: text().notNull(),
    channel: text().notNull(),
    userType: text('user_type').notNull(),
    fingerprint: text().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.requestId],
        foreignColumns: [rtgSettingsRequests.id],
        name: 'rtg_settings_request_user_data_request_id_rtg_settings_requests'
    }),
])

export const rtgSettingsRequestCustomData = pgTable('rtg_settings_request_custom_data', {
    id: varchar().primaryKey().notNull(),
    requestId: text('request_id').notNull(),
    siteId: text('site_id').notNull(),
    extras: text().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.requestId],
        foreignColumns: [rtgSettingsRequests.id],
        name: 'rtg_settings_request_custom_data_request_id_rtg_settings_reques'
    }),
])

export const rtgSettingsResponses = pgTable('rtg_settings_responses', {
    id: serial().primaryKey().notNull(),
    gameId: varchar('game_id'),
    gameName: text('game_name').notNull(),
    success: boolean().notNull(),
    userId: integer('user_id'),
    userToken: text('user_token'),
    userSessionId: text('user_session_id'),
    userCanGamble: boolean('user_can_gamble'),
    userCountry: text('user_country'),
    userCasino: text('user_casino'),
    userCurrencyCode: text('user_currency_code'),
    userCurrencySymbol: text('user_currency_symbol'),
    userServerTime: timestamp('user_server_time', { mode: 'string' }),
    userBalanceCash: numeric('user_balance_cash'),
    userBalanceFreeBets: numeric('user_balance_free_bets'),
    userBalanceBonus: numeric('user_balance_bonus'),
    userStakesDefaultIndex: integer('user_stakes_default_index'),
    userStakesLastIndex: integer('user_stakes_last_index'),
    gameCols: integer('game_cols'),
    gameRows: integer('game_rows'),
    gamePaysType: text('game_pays_type'),
    gameVersion: text('game_version'),
    gameVolatilityIndex: text('game_volatility_index'),
    gameRtpDefault: numeric('game_rtp_default'),
    gameHasGamble: boolean('game_has_gamble'),
    gameHasFeatureBuy: boolean('game_has_feature_buy'),
    launcherVersion: text('launcher_version'),
    userBonuses: json('user_bonuses'),
    userAutoplay: json('user_autoplay'),
    gameLines: json('game_lines'),
    gameTiles: json('game_tiles'),
    gameFeatures: json('game_features'),
    gameMultiplierSequence: json('game_multiplier_sequence'),
    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.gameId],
        foreignColumns: [games.id],
        name: 'rtg_settings_responses_game_id_games_id_fk'
    }),
    unique('rtg_settings_responses_game_name_unique').on(table.gameName),
])

export const rtgSpinRequestUserData = pgTable('rtg_spin_request_user_data', {
    id: varchar().primaryKey().notNull(),
    requestId: text('request_id').notNull(),
    userId: integer('user_id').notNull(),
    affiliate: text().notNull(),
    lang: text().notNull(),
    channel: text().notNull(),
    userType: text('user_type').notNull(),
    fingerprint: text().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.requestId],
        foreignColumns: [rtgSpinRequests.id],
        name: 'rtg_spin_request_user_data_request_id_rtg_spin_requests_id_fk'
    }),
])

export const rtgSpinRequestCustomData = pgTable('rtg_spin_request_custom_data', {
    id: varchar().primaryKey().notNull(),
    requestId: text('request_id').notNull(),
    siteId: text('site_id').notNull(),
    extras: text().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.requestId],
        foreignColumns: [rtgSpinRequests.id],
        name: 'rtg_spin_request_custom_data_request_id_rtg_spin_requests_id_fk'
    }),
])

export const tasks = pgTable('tasks', {
    id: varchar().primaryKey().notNull(),
    name: text().notNull(),
    done: boolean().default(false).notNull(),
    createdAt: timestamp('created_at', { mode: 'string' }),
    updatedAt: timestamp('updated_at', { mode: 'string' }),
})

export const rtgSettingsRequests = pgTable('rtg_settings_requests', {
    id: varchar().primaryKey().notNull(),
    token: text(),
    sessionId: text('session_id').notNull(),
    playMode: text('play_mode').notNull(),
    gameId: text('game_id').notNull(),
    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow(),
})

export const rtgSpinRequests = pgTable('rtg_spin_requests', {
    id: varchar().primaryKey().notNull(),
    token: text().notNull(),
    sessionId: text('session_id').notNull(),
    playMode: text('play_mode').notNull(),
    gameId: text('game_id').notNull(),
    stake: integer().notNull(),
    bonusId: text('bonus_id'),
    extras: text(),
    gameMode: integer('game_mode').notNull(),
    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow(),
})

export const authSessions = pgTable('auth_sessions', {
    id: varchar().primaryKey().notNull(),
    userId: text('user_id').notNull(),
    status: sessionStatus().default('ACTIVE').notNull(),
    ipAddress: text('ip_address'),
    userAgent: text('user_agent'),
    deviceId: text('device_id'),
    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }).defaultNow().notNull(),
    expiresAt: timestamp('expires_at', { withTimezone: true, mode: 'string' }),
    lastSeen: timestamp('last_seen', { withTimezone: true, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    index('auth_session_status_idx').using('btree', table.status.asc().nullsLast().op('enum_ops')),
    index('auth_session_user_idx').using('btree', table.userId.asc().nullsLast().op('text_ops'), table.createdAt.asc().nullsLast().op('text_ops')),
    foreignKey({
        columns: [table.userId],
        foreignColumns: [users.id],
        name: 'auth_sessions_user_id_users_id_fk'
    }).onDelete('cascade'),
])

export const games = pgTable('games', {
    id: varchar().primaryKey().notNull(),
    name: text().notNull(),
    title: text().notNull(),
    configuration: jsonb(),
    description: text(),
    category: text().notNull(),
    tags: text().array().notNull(),
    thumbnailUrl: text('thumbnail_url'),
    bannerUrl: text('banner_url'),
    developer: text().notNull(),
    providerId: text('provider_id'),
    totalWagered: integer('total_wagered').notNull(),
    totalWon: integer('total_won').notNull(),
    targetRtp: integer('target_rtp'),
    isFeatured: boolean('is_featured').notNull(),
    isActive: boolean('is_active').default(true).notNull(),
    operatorId: text('operator_id'),
    tournamentDirectives: jsonb('tournament_directives'),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    gameLogic: jsonb('game_logic'),
}, (table) => [
    foreignKey({
        columns: [table.operatorId],
        foreignColumns: [operators.id],
        name: 'games_operator_fkey'
    }).onUpdate('cascade').onDelete('set null'),
    unique('games_name_key').on(table.name),
])

export const users = pgTable('users', {
    id: varchar().primaryKey().notNull(),
    username: text().notNull(),
    email: text(),
    passwordHash: text('password_hash'),
    accessToken: text('access_token'),
    refreshToken: text('refresh_token'),
    accessTokenExpiresAt: timestamp('access_token_expires_at', { precision: 3, mode: 'string' }),
    refreshTokenExpiresAt: timestamp('refresh_token_expires_at', { precision: 3, mode: 'string' }),
    currentGameSessionDataId: text('current_game_session_data_id'),
    currentAuthSessionDataId: text('current_auth_session_data_id'),
    avatar_url: text('avatar_url').default('avatar-01'),
    role: text().default('USER').notNull(),
    isActive: boolean('is_active').default(true).notNull(),
    lastLoginAt: timestamp('last_login_at', { precision: 3, mode: 'string' }),
    totalXpGained: integer('total_xp_gained').notNull(),
    activeWalletId: text('active_wallet_id'),
    vipInfoId: text('vip_info_id'),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    deletedAt: timestamp('deleted_at', { precision: 3, mode: 'string' }),
    lastSeen: timestamp('last_seen', { precision: 3, mode: 'string' }),
}, (table) => [
    unique('users_username_unique').on(table.username),
    unique('users_email_unique').on(table.email),
    unique('users_current_game_session_data_id_unique').on(table.currentGameSessionDataId),
    unique('users_current_auth_session_data_id_unique').on(table.currentAuthSessionDataId),
    // activeWalletId is nullable but must be unique when set; add FK to wallets.id
    unique('users_active_wallet_id_unique').on(table.activeWalletId),
    unique('users_vip_info_id_unique').on(table.vipInfoId),
    foreignKey({
        columns: [table.activeWalletId],
        foreignColumns: [wallets.id],
        name: 'users_active_wallet_id_wallets_id_fk'
    }).onDelete('set null').onUpdate('cascade'),
])

export const operators = pgTable('operators', {
    id: varchar().primaryKey().notNull(),
    name: text().notNull(),
    operatorSecret: text('operator_secret').notNull(),
    operatorAccess: text('operator_access').notNull(),
    callbackUrl: text('callback_url').notNull(),
    isActive: boolean('is_active').default(true).notNull(),
    allowedIps: text('allowed_ips').array().notNull(),
    description: text(),
    productIds: text('product_ids'),
    balance: integer().notNull(),
    netRevenue: integer('net-revenue').notNull(),
    acceptedPayments: text('accepted_payments').array().notNull(),
    ownerId: text('owner_id'),
    lastUsedAt: timestamp('last_used_at', { precision: 3, mode: 'string' }),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    unique('operators_name_unique').on(table.name),
])

export const vipInfo = pgTable('vip_info', {
    id: varchar().primaryKey().notNull(),
    level: integer().default(1).notNull(),
    xp: integer().notNull(),
    totalXp: integer().notNull(),
    userId: text().notNull(),
    currentRankid: integer(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.userId],
        foreignColumns: [users.id],
        name: 'vip_info_user_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
    foreignKey({
        columns: [table.currentRankid],
        foreignColumns: [vipRank.id],
        name: 'vip_info_currentRank_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
    unique('vip_info_userId_unique').on(table.userId),
])

export const transactions = pgTable('transactions', {
    id: varchar().primaryKey().notNull(),
    processedAt: timestamp('processed_at', { precision: 3, mode: 'string' }),
    walletId: text('wallet_id'),
    type: text().notNull(),
    status: text().default('PENDING').notNull(),
    amount: integer().notNull(),
    netAmount: integer('net_amount'),
    feeAmount: integer('fee_amount'),
    productId: text('product_id'),
    paymentMethod: text('payment_method'),
    balanceBefore: integer('balance_before'),
    balanceAfter: integer('balance_after'),
    bonusBalanceBefore: integer('bonus_balance_before'),
    bonusBalanceAfter: integer('bonus_balance_after'),
    bonusAmount: integer('bonus_amount'),
    wageringRequirement: integer('wagering_requirement'),
    wageringProgress: integer('wagering_progress'),
    description: text(),
    provider: text(),
    providerTxId: text('provider_tx_id'),
    relatedGameId: text('related_game_id'),
    relatedRoundId: text('related_round_id'),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
    operatorId: text('operator_id'),
    userId: text('user_id'),
}, (table) => [
    foreignKey({
        columns: [table.productId],
        foreignColumns: [products.id],
        name: 'transactions_product_fkey'
    }).onUpdate('cascade').onDelete('set null'),
    foreignKey({
        columns: [table.walletId],
        foreignColumns: [wallets.id],
        name: 'transactions_wallet_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
])

export const vipLevelUpHistory = pgTable('vip_level_up_history', {
    id: varchar().primaryKey().notNull(),
    previousLevel: integer('previous_level').notNull(),
    newLevel: integer('new_level').notNull(),
    timestamp: timestamp({ precision: 3, mode: 'string' }).defaultNow().notNull(),
    vipInfoId: text('vip_info_id').notNull(),
}, (table) => [
    foreignKey({
        columns: [table.vipInfoId],
        foreignColumns: [vipInfo.id],
        name: 'vip_level_up_history_vipInfo_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
])

export const rtgSpinResults = pgTable('rtg_spin_results', {
    id: serial().primaryKey().notNull(),
    gameId: varchar('game_id'),
    gameName: text('game_name').notNull(),
    success: boolean().notNull(),
    userId: integer('user_id').notNull(),
    sessionId: text('session_id'),
    canGamble: boolean('can_gamble'),
    token: text(),
    sessionNetPosition: numeric('session_net_position'),
    serverTime: timestamp('server_time', { mode: 'string' }),
    balanceCashAtStart: numeric('balance_cash_at_start'),
    balanceCashAfterBet: numeric('balance_cash_after_bet'),
    balanceCashAtEnd: numeric('balance_cash_at_end'),
    balanceFreeBetsAtStart: numeric('balance_free_bets_at_start'),
    balanceFreeBetsAfterBet: numeric('balance_free_bets_after_bet'),
    balanceFreeBetsAtEnd: numeric('balance_free_bets_at_end'),
    balanceBonusAtStart: numeric('balance_bonus_at_start'),
    balanceBonusAfterBet: numeric('balance_bonus_after_bet'),
    balanceBonusAtEnd: numeric('balance_bonus_at_end'),
    limitsBetThresholdTime: integer('limits_bet_threshold_time'),
    bonuses: json(),
    tournaments: json(),
    vouchers: json(),
    messages: json(),
    stake: numeric(),
    multiplier: numeric(),
    winTotal: numeric('win_total'),
    winsMultipliersTotal: numeric('wins_multipliers_total'),
    winsMultipliersLines: numeric('wins_multipliers_lines'),
    spinMode: text('spin_mode'),
    hasState: boolean('has_state'),
    winLines: json('win_lines'),
    fatTiles: json('fat_tiles'),
    scatters: json(),
    features: json(),
    reelsBuffer: json('reels_buffer'),
    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    foreignKey({
        columns: [table.gameId],
        foreignColumns: [games.id],
        name: 'rtg_spin_results_game_id_games_id_fk'
    }),
])

export const jackpotContributions = pgTable('jackpot_contributions', {
    id: varchar().primaryKey().notNull(),
    jackpotId: text('jackpot_id').notNull(),
    userId: text('user_id'),
    gameSpinId: text('game_spin_id').notNull(),
    contributionAmountCoins: integer('contribution_amount_coins').notNull(),
    createdAt: timestamp('created_at', { precision: 3, mode: 'string' }).defaultNow().notNull(),
}, (table) => [
    uniqueIndex('JackpotContribution_jackpotId_gameSpinId_key').using('btree', table.jackpotId.asc().nullsLast().op('text_ops'), table.gameSpinId.asc().nullsLast().op('text_ops')),
    foreignKey({
        columns: [table.gameSpinId],
        foreignColumns: [gameSpins.id],
        name: 'jackpot_contributions_gameSpin_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
    foreignKey({
        columns: [table.jackpotId],
        foreignColumns: [jackpots.id],
        name: 'jackpot_contributions_jackpot_fkey'
    }).onUpdate('cascade').onDelete('cascade'),
])
</file>

<file path="./backend/src/db/schema/types.ts">
import type { InferInsertModel, InferSelectModel } from 'drizzle-orm'
import type {
    rtgSettingsRequestCustomData,
    rtgSettingsRequests,
    rtgSettingsRequestUserData,
    rtgSettingsResultGame,
    rtgSettingsResults,
    rtgSettingsResultUser,
    rtgSettingsResultUserBalance,
    rtgSpinRequestCustomData,
    rtgSpinRequests,
    rtgSpinRequestUserData,
    rtgSpinResultGame,
    rtgSpinResultGameWin,
    rtgSpinResults,
    rtgSpinResultUser,
    rtgSpinResultUserBalance,
} from './rtg'
import type {
    appVersions,
    authSessions,
    games,
    gameSessions,
    gameSpins,
    inActiveWallets,
    jackpotContributions,
    jackpots,
    jackpotWins,
    operators,
    products,
    transactions,
    users,
    vipInfo,
    vipLevel,
    vipLevelUpHistory,
    vipRank,
    wallets,
} from './schema'

// SELECT Types - Used for querying data from the database
export type OperatorType = InferSelectModel<typeof operators>
export type WalletType = InferSelectModel<typeof wallets>
export type UserType = InferSelectModel<typeof users>
export type GameType = InferSelectModel<typeof games>
export type GameSpinType = InferSelectModel<typeof gameSpins>
export type InActiveWalletType = InferSelectModel<typeof inActiveWallets>
export type ProductType = InferSelectModel<typeof products>
export type TransactionType = InferSelectModel<typeof transactions>
export type VipRankType = InferSelectModel<typeof vipRank>
export type VipLevelType = InferSelectModel<typeof vipLevel>
export type VipInfoType = InferSelectModel<typeof vipInfo>
export type VipLevelUpHistoryType = InferSelectModel<typeof vipLevelUpHistory>
export type JackpotType = InferSelectModel<typeof jackpots>
export type JackpotContributionType = InferSelectModel<
    typeof jackpotContributions
>
export type JackpotWinType = InferSelectModel<typeof jackpotWins>
export type AuthSessionType = InferSelectModel<typeof authSessions>
export type GameSessionType = InferSelectModel<typeof gameSessions>
export type SelectRtgSettingsRequest = InferSelectModel<
    typeof rtgSettingsRequests
>
export type SelectRtgSettingsRequestusersData = InferSelectModel<
    typeof rtgSettingsRequestUserData
>
export type SelectRtgSettingsRequestCustomData = InferSelectModel<
    typeof rtgSettingsRequestCustomData
>
export type SelectRtgSpinRequest = InferSelectModel<typeof rtgSpinRequests>
export type SelectRtgSpinRequestusersData = InferSelectModel<
    typeof rtgSpinRequestUserData
>
export type SelectRtgSpinRequestCustomData = InferSelectModel<
    typeof rtgSpinRequestCustomData
>
export type SelectRtgSettingsResult = InferSelectModel<
    typeof rtgSettingsResults
>
export type SelectRtgSettingsResultusers = InferSelectModel<
    typeof rtgSettingsResultUser
>
export type SelectRtgSettingsResultusersBalance = InferSelectModel<
    typeof rtgSettingsResultUserBalance
>
export type SelectRtgSettingsResultgames = InferSelectModel<
    typeof rtgSettingsResultGame
>
export type SelectRtgSpinResult = InferSelectModel<typeof rtgSpinResults>
export type SelectRtgSpinResultusers = InferSelectModel<typeof rtgSpinResultUser>
export type SelectRtgSpinResultusersBalance = InferSelectModel<
    typeof rtgSpinResultUserBalance
>
export type SelectRtgSpinResultgames = InferSelectModel<typeof rtgSpinResultGame>
export type SelectRtgSpinResultgamesWin = InferSelectModel<
    typeof rtgSpinResultGameWin
>
export type AppVersion = InferSelectModel<typeof appVersions>

// INSERT Types - Used for inserting new data into the database
export type Newoperators = InferInsertModel<typeof operators>
export type Newwallets = InferInsertModel<typeof wallets>
export type Newusers = InferInsertModel<typeof users>
export type Newgames = InferInsertModel<typeof games>
export type NewgameSpins = InferInsertModel<typeof gameSpins>
export type NewinActiveWallets = InferInsertModel<typeof inActiveWallets>
export type Newproducts = InferInsertModel<typeof products>
export type Newtransactions = InferInsertModel<typeof transactions>
export type NewvipRank = InferInsertModel<typeof vipRank>
export type NewvipLevel = InferInsertModel<typeof vipLevel>
export type NewvipInfo = InferInsertModel<typeof vipInfo>
export type NewvipLevelUpHistory = InferInsertModel<typeof vipLevelUpHistory>
export type Newjackpots = InferInsertModel<typeof jackpots>
export type NewjackpotContributions = InferInsertModel<
    typeof jackpotContributions
>
export type NewjackpotWins = InferInsertModel<typeof jackpotWins>
export type NewauthSessions = InferInsertModel<typeof authSessions>
export type NewgamesSession = InferInsertModel<typeof gameSessions>
export type InsertRtgSettingsRequest = InferInsertModel<
    typeof rtgSettingsRequests
>
export type InsertRtgSpinRequest = InferInsertModel<typeof rtgSpinRequests>
export type InsertRtgSettingsResult = InferInsertModel<
    typeof rtgSettingsResults
>
export type InsertRtgSettingsResultgames = InferInsertModel<
    typeof rtgSettingsResultGame
>
export type InsertRtgSpinResult = InferInsertModel<typeof rtgSpinResults>

export type UserWithRelations = UserType & {
    activeWallet?: WalletType | null
    vipInfo: VipInfoType | null
    jackpotWins: JackpotWinType[]
    lastjackpotsWon: JackpotType[]
}

export type gamesWithRelations = GameType & {
    operator?: OperatorType | null
}

export type gameSpinsWithRelations = GameSpinType & {
    jackpotContributions: JackpotContributionType[]
    jackpotWins: JackpotWinType[]
}

export type operatorsWithRelations = OperatorType & {
    games: GameType[]
    products: ProductType[]
    wallets: WalletType[]
}

export type walletsWithRelations = WalletType & {
    operator: OperatorType
    transactions: TransactionType[]
    user: UserType[]
}

export type transactionsWithRelations = TransactionType & {
    jackpotWins: JackpotWinType[]
    product?: ProductType | null
    wallet?: WalletType | null
}

export type productsWithRelations = ProductType & {
    operator?: OperatorType | null
    transactions: TransactionType[]
}

export type vipRankWithRelations = VipRankType & {
    vipInfo: VipInfoType[]
}

export type vipInfoWithRelations = VipInfoType & {
    user: UserType
    history: VipLevelUpHistoryType[]
    currentRank?: VipRankType | null
}

export type vipLevelUpHistoryWithRelations = VipLevelUpHistoryType & {
    vipInfo: VipInfoType
}

export type jackpotsWithRelations = JackpotType & {
    contributions: JackpotContributionType[]
    wins: JackpotWinType[]
    lastWinner?: UserType | null
}

export type jackpotContributionsWithRelations = JackpotContributionType & {
    gameSpin: GameSpinType
    jackpot: JackpotType
}

export type jackpotWinsWithRelations = JackpotWinType & {
    gameSpin: GameSpinType
    jackpot: JackpotType
    transaction?: TransactionType | null
    winner: UserType
}

export type RtgSettingsRequestWithRelations = SelectRtgSettingsRequest & {
    userData?: SelectRtgSettingsRequestusersData
    customData?: SelectRtgSettingsRequestCustomData
}

export type RtgSpinRequestWithRelations = SelectRtgSpinRequest & {
    userData?: SelectRtgSpinRequestusersData
    customData?: SelectRtgSpinRequestCustomData
}

export type RtgSettingsResultusersWithRelations = SelectRtgSettingsResultusers & {
    balance?: SelectRtgSettingsResultusersBalance
}

export type RtgSpinResultusersWithRelations = SelectRtgSpinResultusers & {
    balance?: SelectRtgSpinResultusersBalance
}

export type RtgSpinResultgamesWithRelations = SelectRtgSpinResultgames & {
    win?: SelectRtgSpinResultgamesWin
}
</file>

<file path="./backend/src/db/schema/zod.ts">
import { createInsertSchema, createSelectSchema } from 'drizzle-zod'
import z from 'zod'
import { authSessions, blackjackBets, blackjackGames, blackjackMessage, games, gameSessions, gameSpins, operators, products, tasks, updateType, users, vipInfo, vipLevel, vipRank, wallets } from './schema'

export const updateTypeSchema = z.enum(updateType.enumValues)

export const insertUserSchema = createInsertSchema(users)
export const selectUserSchema = createSelectSchema(users)
export const selectWalletSchema = createSelectSchema(wallets)
export const selectAuthSessionSchema = createSelectSchema(authSessions)
export const selectGameSession = createSelectSchema(gameSessions)
export const newgameSessions = createInsertSchema(gameSessions)
export const selectVipInfoSchema = createSelectSchema(vipInfo)
export const selectOperatorSchema = createSelectSchema(operators)
export const selectGameSchema = createSelectSchema(games)
export const selectGameSpinSchema = createSelectSchema(gameSpins)
export const selectTasksSchema = createSelectSchema(tasks)
export const selectVipLevelSchema = createSelectSchema(vipLevel)
export const selectVipRankSchema = createSelectSchema(vipRank)

export const insertTasksSchema = createInsertSchema(tasks, {
    name: (schema) => schema.name.min(1).max(500),
})
    .required({
        done: true,
    })
    .omit({
        id: true,
        createdAt: true,
        updatedAt: true,
    })

export const patchTasksSchema = insertTasksSchema.partial()

export const productResponseSchema = createSelectSchema(products)
export const userResponseSchema = selectUserSchema.omit({
    passwordHash: true,
    refreshToken: true,
    accessToken: true,
    accessTokenExpiresAt: true,
    refreshTokenExpiresAt: true,
})
export const operatorsResponseSchema = selectOperatorSchema.omit({
    operatorSecret: true,
    operatorAccess: true,
})
export const walletResponseSchema = selectWalletSchema
export const vipInfoResponseSchema = selectVipInfoSchema
export const gameResponseSchema = z.object({
    id: z.string(),
    name: z.string(),
    title: z.string(),
    developer: z.string(),
    description: z.string().optional(),
    category: z.string(),
    tags: z.array(z.string()),
    thumbnailUrl: z.string().optional(),
    bannerUrl: z.string().optional(),
    isActive: z.boolean().default(true),
})
export const gameCategorySchema = z.enum([
    'slots',
    'fish',
    'table',
    'live',
    'poker',
    'lottery',
    'virtual',
    'other',
])

export const userWithRelationsResponseSchema = userResponseSchema.extend({
    activewallet: walletResponseSchema.optional(),
    vipInfo: vipInfoResponseSchema.optional(),
})

export const gameSpinResponseSchema = z.object({
    id: z.string(),
    playerName: z.string().optional(),
    gamesName: z.string().optional(),
    spinData: z.record(z.any()).optional(),
    grossWinAmount: z.number(),
    wagerAmount: z.number(),
    spinNumber: z.number(),
    playerAvatar: z.string().optional(),
    currencyId: z.string().optional(),
    sessionId: z.string(),
    userId: z.string().optional(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    occurredAt: z.string().datetime(),
    sessionDataId: z.string().optional(),
})

export const insertauthSessionsSchema = createInsertSchema(authSessions)
export const insertgameSessions = createInsertSchema(gameSessions)
export const AppVersionSchema = z.object({
    version: z.string(),
    platform: z.string(),
    updateType: updateTypeSchema,
    downloadUrl: z.string().url(),
    changelog: z.array(z.string()),
    mandatory: z.boolean(),
    releaseDate: z.string().datetime(),
    fileSize: z.number(),
    checksum: z.string(),
})
export const UpdateMetadataSchema = z.record(
    z.string(), // appId
    z.record(
        z.string(), // platform
        z.array(AppVersionSchema)
    )
)
export const CheckUpdateRequestSchema = z.object({
    currentVersion: z.string(),
    platform: z.string(),
    appId: z.string(),
    updateType: updateTypeSchema,
})
export const CheckUpdateResponseSchema = z.object({
    hasUpdate: z.boolean(),
    version: z.string().optional(),
    platform: z.string().optional(),
    updateType: updateTypeSchema.optional(),
    downloadUrl: z.string().url().optional(),
    changelog: z.array(z.string()).optional(),
    mandatory: z.boolean().optional(),
    releaseDate: z.string().datetime().optional(),
    fileSize: z.number().optional(),
    checksum: z.string().optional(),
})
export const ListVersionsResponseSchema = z.object({
    appId: z.string(),
    platform: z.string(),
    versions: z.array(AppVersionSchema),
})
export const SuccessResponseSchema = z.object({
    success: z.boolean(),
    message: z.string(),
    version: AppVersionSchema.optional(),
})
export const ErrorSchema = z.object({
    error: z.string(),
})

export const providerSettingsResponseDataSchema = z.object({
    user: z.object({
        balance: z.object({
            cash: z.string(),
            freeBets: z.string().optional(),
            bonus: z.string().optional(),
        }),
        canGamble: z.boolean(),
        userId: z.union([z.number(), z.string()]),
        sessionId: z.string(),
        sessionNetPosition: z.string().optional(),
        token: z.string(),
        country: z.string().optional(),
        currency: z.object({
            code: z.string(),
            symbol: z.string(),
        }).optional(),
        stakes: z.any().optional(),
        limits: z.any().optional(),
        serverTime: z.string().datetime({ message: 'Invalid ISO date string' }),
    }),
    games: z.object({
        version: z.string().optional(),
        gamesType: z.string().optional(),
    }).optional(),
    launcher: z.object({
        version: z.string().optional(),
    }).optional(),
    jackpots: z.any().optional(),
})
export const rtgSettingsResponseDtoSchema = z.object({
    success: z.boolean(),
    result: providerSettingsResponseDataSchema.optional(),
    error: z.object({
        code: z.string(),
        message: z.string(),
        details: z.any().optional(),
    }).optional(),
}).refine(data => data.success ? data.result !== undefined : data.error !== undefined, {
    message: 'If success is true, result must be provided. If false, error must be provided.',
})
export const providerSpinResponseDataSchema = z.object({
    transactions: z.object({
        roundId: z.union([z.number(), z.string()]),
    }),
    user: z.object({
        balance: z.object({
            cash: z.object({
                atStart: z.string().optional(),
                afterBet: z.string().optional(),
                atEnd: z.string(),
            }),
            freeBets: z.object({
                atStart: z.string().optional(),
                afterBet: z.string().optional(),
                atEnd: z.string(),
            }).optional(),
            bonus: z.object({
                atStart: z.string().optional(),
                afterBet: z.string().optional(),
                atEnd: z.string(),
            }).optional(),
        }),
        userId: z.union([z.number(), z.string()]),
        sessionId: z.string(),
        sessionNetPosition: z.string().optional(),
        token: z.string(),
        serverTime: z.string().datetime({ message: 'Invalid ISO date string' }),
        canGamble: z.boolean().optional(),
    }),
    games: z.object({
        win: z.object({
            instantWin: z.string().optional(),
            lines: z.string().optional(),
            total: z.string(),
        }),
        stake: z.string(),
        multiplier: z.number().optional(),
        winLines: z.array(z.any()).optional(),
        reelsBuffer: z.array(z.array(z.array(z.number()))).optional(),
        xpBreakdown: z.object({
            baseXp: z.number(),
            bonusXp: z.number(),
            totalXp: z.number(),
        }).optional(),
    }),
    jackpots: z.any().nullable().optional(),
    bonusChance: z.any().nullable().optional(),
})
export const rtgSpinResultSchema = providerSpinResponseDataSchema
export const rtgSpinResponseDtoSchema = z.object({
    success: z.boolean(),
    result: rtgSpinResultSchema.optional(),
    error: z.object({
        code: z.string(),
        message: z.string(),
        details: z.any().optional(),
    }).optional(),
}).refine(data => data.success ? data.result !== undefined : data.error !== undefined, {
    message: 'If success is true, result must be provided. If false, error must be provided.',
})
export const launchgamesResponseDtoSchema = z.object({
    launch_url: z.string().url(),
    games_session_id: z.string().optional(),
    launch_strategy: z.enum(['IFRAME', 'REDIRECT', 'POPUP']).optional(),
    provider_parameters: z.union([z.record(z.any(), z.any()), z.array(z.string()), z.string()]).optional(),
})
const customObjectSchema = z.object({
    siteId: z.string().optional(),
    extras: z.string().optional(),
}).optional()
const userDataObjectSchema = z.object({
    userId: z.union([z.string(), z.number()]).optional(),
    hash: z.string().optional(),
    affiliate: z.union([z.string(), z.number()]).optional(),
    lang: z.union([z.string(), z.number()]).optional(),
    channel: z.union([z.string(), z.number()]).optional(),
    userType: z.string().optional(),
    fingerprint: z.union([z.string(), z.number()]).optional(),
}).optional()
export const rtgSettingsRequestDtoSchema = z.object({
    gamesId: z.string(),
    token: z.string().optional().nullable(),
    userId: z.string(),
    currency: z.string(),
    language: z.string(),
    mode: z.enum(['real', 'demo', 'test']),
    custom: customObjectSchema,
    userData: userDataObjectSchema,
})
export const rtgSpinRequestDtoSchema = z.object({
    token: z.string().optional(),
    userId: z.string().optional(),
    gamesId: z.string().optional(),
    stake: z.union([z.number(), z.string()]).optional(),
    currency: z.string().optional(),
    sessionId: z.string().optional(),
    playMode: z.enum(['real', 'demo', 'test']).optional(),
    actions: z.array(z.any()).optional(),
    custom: customObjectSchema,
    bonusId: z.any().optional(),
    extras: z.any().optional(),
    siteId: z.string().optional(),
    userType: z.string().optional(),
    lang: z.union([z.string(), z.number()]).optional(),
    fingerprint: z.union([z.string(), z.number()]).optional(),
    channel: z.union([z.string(), z.number()]).optional(),
    affiliate: z.union([z.string(), z.number()]).optional(),
    userData: userDataObjectSchema,
    roundId: z.union([z.string(), z.number()]).optional(),
    transactionId: z.union([z.string(), z.number()]).optional(),
})


export const selectblackjackGamesSchema = createSelectSchema(blackjackGames)
export const insertblackjackGamesSchema = createInsertSchema(blackjackGames)

export const selectblackjackBetsSchema = createSelectSchema(blackjackBets)
export const insertblackjackBetsSchema = createInsertSchema(blackjackBets)

export const blackjackMessageSchema = createSelectSchema(blackjackMessage)
</file>

<file path="./backend/src/db/index.ts">
import { SQL } from 'bun'
import { drizzle } from 'drizzle-orm/bun-sql'

import env from '../env'

import * as enums from './schema/enums'
import * as relations from './schema/relations'
import * as schema from './schema/schema'

const combinedSchema = { ...schema, ...relations, ...enums }
const client = new SQL(env.DATABASE_URL!)
const db = drizzle(client, { schema: combinedSchema, logger: false })
export default db

export * from './schema'
</file>

<file path="./backend/src/db/schema-transformer.ts">
import type { z } from 'zod'

const OPENAPI_METADATA = Symbol('openapi')

interface OpenAPIMetadata {
    description?: string;
    example?: unknown;
    format?: string;
}

export function withOpenAPIMetadata<T extends z.ZodTypeAny>(
    schema: T,
    metadata: OpenAPIMetadata,
): T {
    if (metadata.description) {
        schema = schema.describe(metadata.description)
    }
    const enhancedSchema = Object.defineProperty(schema, OPENAPI_METADATA, {
        value: metadata,
        enumerable: false,
    }) as T & { openapi?: OpenAPIMetadata }
    return enhancedSchema
}

export function getOpenAPIMetadata(
    schema: z.ZodTypeAny,
): OpenAPIMetadata | undefined {
    return (schema as any)[OPENAPI_METADATA]
}

export function transformSchemaForOpenAPI<T extends z.ZodTypeAny>(
    schema: T,
    config: OpenAPIMetadata = {},
): T & { openapi?: OpenAPIMetadata } {
    return withOpenAPIMetadata(schema, {
        description: config.description || schema.description,
        example: config.example,
        format: config.format,
    })
}
</file>

<file path="./backend/src/lib/cache.ts">
import { createStorage, prefixStorage } from 'unstorage'
import chalk from 'chalk'

import type { AuthSessionType, GameSessionType, GameSpinType } from '#/db/schema'

const storage = createStorage()

const authSessionCache = prefixStorage<AuthSessionType>(storage, 'sessions:auth')
const gameSessionCache = prefixStorage<GameSessionType>(storage, 'sessions:game')
const spinCache = prefixStorage<GameSpinType[]>(storage, 'spins')

// Replay cache for previous refresh token JTI values
interface ReplayEntry { usedAt: number; expiresAt: number }
const replayCache = prefixStorage<ReplayEntry>(storage, 'auth:refresh:replay')

export async function getAuthSessionFromCache(
    authSessionId: string
): Promise<AuthSessionType | null> {
    const item = await authSessionCache.getItem(authSessionId)
    return item ? JSON.parse(JSON.stringify(item)) : null
}

export async function saveAuthSessionToCache(
    session: AuthSessionType
): Promise<void> {
    console.log(chalk.blue(`Saving auth session ${session.id} to cache.`))
    await authSessionCache.setItem(session.id, session)
}

export async function deleteAuthSessionFromCache(
    authSessionId: string
): Promise<void> {
    console.log(chalk.blue(`Deleting auth session ${authSessionId} from cache.`))
    await authSessionCache.removeItem(authSessionId)
}

export async function getGameSessionFromCache(
    sessionId: string
): Promise<GameSessionType | null> {
    const item = await gameSessionCache.getItem(sessionId)
    return item ? JSON.parse(JSON.stringify(item)) : null
}

export async function saveGameSessionToCache(
    session: GameSessionType
): Promise<void> {
    console.log(chalk.blue(`Saving game session ${session.id} to cache.`))
    await gameSessionCache.setItem(session.id, session)
}

export async function deleteGameSessionFromCache(
    sessionId: string
): Promise<void> {
    console.log(chalk.blue(`Deleting game session ${sessionId} from cache.`))
    await gameSessionCache.removeItem(sessionId)
}

export async function getSpinsFromCache(
    sessionId: string
): Promise<GameSpinType[]> {
    return (await spinCache.getItem(sessionId)) || []
}

export async function addSpinToCache(
    sessionId: string,
    spin: GameSpinType
): Promise<void> {
    const spins = await getSpinsFromCache(sessionId)
    spins.push(spin)
    await spinCache.setItem(sessionId, spins)
}

export async function deleteSpinsFromCache(sessionId: string): Promise<void> {
    await spinCache.removeItem(sessionId)
}

/**
 * Mark a previous refresh token jti as used to prevent replay.
 * ttlSeconds is the remaining validity window for that previous token.
 */
export async function markPrevRefreshJtiUsed(
    jti: string,
    ttlSeconds: number
): Promise<void> {
    const now = Math.floor(Date.now() / 1000)
    const entry: ReplayEntry = {
        usedAt: now,
        expiresAt: now + Math.max(1, ttlSeconds),
    }
    await replayCache.setItem(jti, entry)
    // Optional: unstorage may not support TTL natively; rely on expiresAt checks in code.
}

/**
 * Check if a previous refresh token jti has been used already.
 */
export async function isPrevRefreshJtiUsed(jti: string): Promise<boolean> {
    const entry = await replayCache.getItem(jti)
    if (!entry) return false
    const now = Math.floor(Date.now() / 1000)
    if (entry.expiresAt <= now) {
        // Best-effort cleanup
        await replayCache.removeItem(jti)
        return false
    }
    return true
}
</file>

<file path="./backend/src/lib/configure-open-api.ts">
import { Scalar } from '@scalar/hono-api-reference'

import type { AppOpenAPI } from './types'

import packageJSON from '../../package.json'

export default function configureOpenAPI(app: AppOpenAPI) {
    app.doc('/doc', {
        openapi: '3.0.0',
        info: {
            version: packageJSON.version,
            title: 'Tasks API',
        },
    })

    app.get(
        '/reference',
        Scalar({
            url: '/doc',
            theme: 'kepler',
            authentication: {
                preferredSecurityScheme: 'httpBearer',
                securitySchemes: {
                    // apiKeyHeader: {
                    //     value: 'tokenValue'
                    // },
                    httpBearer: {
                        token: 'xyz token value'
                    },
                    // httpBasic: {
                    //     username: 'username',
                    //     password: 'password'
                    // },
                    // flows: {
                    //     authorizationCode: {
                    //         token: 'auth code token'
                    //     }
                    // }
                    // layout: "classic",
                    // defaultHttpClient: {
                    //     targetKey: 'js',
                    //     clientKey: 'fetch',
                    // },
                }
            }
        }
        )
    )
}
</file>

<file path="./backend/src/lib/constants.ts">
import * as HttpStatusPhrases from 'stoker/http-status-phrases'
import { createMessageObjectSchema } from 'stoker/openapi/schemas'

export const ZOD_ERROR_MESSAGES = {
    REQUIRED: 'Required',
    EXPECTED_NUMBER: 'Expected number, received nan',
    NO_UPDATES: 'No updates provided',
}

export const ZOD_ERROR_CODES = {
    INVALID_UPDATES: 'invalid_updates',
}

export const notFoundSchema = createMessageObjectSchema(HttpStatusPhrases.NOT_FOUND)
export const badRequestSchema = createMessageObjectSchema(HttpStatusPhrases.BAD_REQUEST)
</file>

<file path="./backend/src/lib/create-app.ts">
import { OpenAPIHono } from '@hono/zod-openapi'
import { HTTPException } from 'hono/http-exception'
import { notFound } from 'stoker/middlewares'
import { defaultHook } from 'stoker/openapi'
import { z } from 'zod'

import type { AppBindings, AppOpenAPI } from './types'

export function createRouter() {
    return new OpenAPIHono<AppBindings>({
        strict: false,
        defaultHook,
    })
}

export default function createApp() {
    const app = createRouter()

    app.notFound(notFound)

    // Centralized Error Handler
    app.onError((err, c) => {
        if (err instanceof HTTPException) {
            return err.getResponse()
        }

        if (err instanceof z.ZodError) {
            return c.json(
                {
                    success: false,
                    error: {
                        message: 'Validation failed',
                        issues: err.flatten().fieldErrors,
                    },
                },
                422
            )
        }

        // Generic fallback for all other errors
        console.error(`[InternalServerError] Path: ${c.req.path}`, err)
        return c.json(
            {
                success: false,
                error: {
                    message: 'Internal Server Error',
                },
            },
            500
        )
    })

    return app
}

export function createTestApp(router: AppOpenAPI) {
    return createApp().route('/', router)
}
</file>

<file path="./backend/src/lib/disconnect.manager.ts">
// src/lib/graceful-disconnect.manager.ts
import chalk from 'chalk'

import { SessionManager } from './session.manager'

// This will store active timers, mapping a userId to their timeout ID
const disconnectTimers = new Map<string, NodeJS.Timeout>()

// The duration of the grace period in milliseconds (e.g., 60 seconds)
const GRACE_PERIOD_MS = 60 * 1000

export class GracefulDisconnectManager {
    /**
     * Starts a timer to end the user's session after the grace period.
     * @param userId - The ID of the user who disconnected.
     */
    static start(userId: string): void {
    // If a timer already exists for this user, clear it before starting a new one.
        if (disconnectTimers.has(userId)) {
            this.cancel(userId)
        }

        console.log(chalk.yellow(`WebSocket disconnected for user ${userId}. Starting ${GRACE_PERIOD_MS / 1000}s grace period timer.`))

        const timer = setTimeout(() => {
            console.log(chalk.red(`Grace period expired for user ${userId}. Ending game session.`))
            SessionManager.endCurrentGameSession(userId)
            disconnectTimers.delete(userId)
        }, GRACE_PERIOD_MS)

        disconnectTimers.set(userId, timer)
    }

    /**
     * Cancels the disconnect timer for a user, typically because they have reconnected.
     * @param userId - The ID of the user who reconnected.
     */
    static cancel(userId: string): void {
        if (disconnectTimers.has(userId)) {
            console.log(chalk.green(`User ${userId} reconnected within the grace period. Cancelling session termination.`))
            clearTimeout(disconnectTimers.get(userId))
            disconnectTimers.delete(userId)
        }
    }
}
</file>

<file path="./backend/src/lib/gameplay.ts">
import type {
    GameSessionType,
    GameSpinType,
    NewgameSpins,
    UserWithRelations,
} from '#/db/schema'
import { addSpinToCache, saveGameSessionToCache } from '#/lib/cache'
import {
    addXpTousers,
    calculateXpForWagerAndWins,
} from '#/routes/vip/vip.service'
import chalk from 'chalk'
import type { Context } from 'hono'

export interface SpinParams {
    totalSpinWinnings: number
    wagerAmount: number
}
export interface SpinStats {
    totalSpinWinnings: number
    wagerAmount: number
}
export async function handleGameSpin(
    c: Context,
    spinInput: NewgameSpins,
    spinParams: SpinParams
): Promise<GameSpinType> {
    const user = c.get('user') as UserWithRelations
    const gameSession = c.get('gameSession') as GameSessionType

    if (!user || !gameSession) {
        throw new Error(
            'handleGameSpin requires an active game session and authenticated user in the context.'
        )
    }
    console.log(
        chalk.bgCyan(
            `Handling game spin for user: ${user.id} in session: ${gameSession.id}`
        )
    )

    const { totalSpinWinnings, wagerAmount } = spinParams

    if (user.vipInfo) {
        const xpGained = calculateXpForWagerAndWins(
            wagerAmount / 100, // Convert cents to dollars
            totalSpinWinnings / 100,
            user.vipInfo
        )

        if (xpGained.totalXp > 0) {
            await addXpTousers(user.id, xpGained.totalXp)
            console.log(
                chalk.yellow(`User ${user.id} earned ${xpGained.totalXp} XP.`)
            )
        }
    }

    gameSession.totalWagered = (gameSession.totalWagered || 0) + wagerAmount
    gameSession.totalWon = (gameSession.totalWon || 0) + totalSpinWinnings

    await saveGameSessionToCache(gameSession)

    const newSpin: GameSpinType = {
        id: new Date().getTime().toString(),
        wagerAmount,
        grossWinAmount: totalSpinWinnings,
        sessionId: gameSession.id,
        userId: user.id,
        playerName: user.username,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        occurredAt: new Date().toISOString(),
        spinNumber: 0, // This should be properly calculated based on session spin count
        playerAvatar: user.avatar_url,
        currencyId: 'USD',
        sessionDataId: gameSession.id,
        gameId: spinInput.gameId ?? null,
        gameName: spinInput.gameName ?? null,
        spinData: spinInput.spinData,
    }

    await addSpinToCache(gameSession.id, newSpin)

    return newSpin
}
export async function updateGameSessionStats(
    c: Context,
    spinStats: SpinStats
): Promise<void> {
    const gameSession = c.get('gameSession') as GameSessionType

    if (!gameSession) {
        console.warn(
            'Attempted to update game session stats, but no session was found in the context.'
        )
        return
    }

    const { totalSpinWinnings, wagerAmount } = spinStats

    gameSession.totalWagered = (gameSession.totalWagered || 0) + wagerAmount
    gameSession.totalWon = (gameSession.totalWon || 0) + totalSpinWinnings

    await saveGameSessionToCache(gameSession)

    console.log(
        chalk.gray(
            `Updated session ${gameSession.id}: Wagered=${wagerAmount}, Won=${totalSpinWinnings}`
        )
    )
}
</file>

<file path="./backend/src/lib/jackpot.ts">
import chalk from 'chalk'
import { and, desc, eq, inArray } from 'drizzle-orm'

import type {
    JackpotContributionType,
    JackpotType,
    JackpotWinType,
    Newjackpots,
} from '#/db/schema'

import db from '#/db'
import {
    gameSpins,
    jackpotContributions,
    jackpots,
    jackpotWins,
    transactions,
    wallets,
} from '#/db/schema'
import { coinsToDollars } from '#/utils/misc.utils'

import { nanoid } from '#/utils/nanoid'
import { publishUserUpdated } from './websocket.service'

export function dollarsToCoins(dollars: number): number {
    return Math.round(dollars * 100)
}

export function calculateContribution(
    wagerCoins: number,
    contributionRateBasisPoints: number
): number {
    return Math.floor((wagerCoins * contributionRateBasisPoints) / 10000)
}

export enum JackpotTypeEnum {
    MINOR = 'MINOR',
    MAJOR = 'MAJOR',
    GRAND = 'GRAND',
}

export const JACKPOT_CONFIG = {
    [JackpotTypeEnum.MINOR]: {
        type: JackpotTypeEnum.MINOR,
        seedAmountCoins: 1000,
        minimumBetCoins: 1,
        contributionRateBasisPoints: 100, // 1%
        probabilityPerMillion: 1000, // 0.1%
        minimumTimeBetweenWinsMinutes: 1,
    },
    [JackpotTypeEnum.MAJOR]: {
        type: JackpotTypeEnum.MAJOR,
        seedAmountCoins: 10000,
        minimumBetCoins: 10,
        contributionRateBasisPoints: 150, // 1.5%
        probabilityPerMillion: 100, // 0.01%
        minimumTimeBetweenWinsMinutes: 60,
    },
    [JackpotTypeEnum.GRAND]: {
        type: JackpotTypeEnum.GRAND,
        seedAmountCoins: 100000,
        minimumBetCoins: 20,
        contributionRateBasisPoints: 200, // 2%
        probabilityPerMillion: 10, // 0.001%
        minimumTimeBetweenWinsMinutes: 1440, // 24 hours
    },
}

export function getEligibleJackpots(wagerCoins: number): JackpotTypeEnum[] {
    const eligible: JackpotTypeEnum[] = []
    if (wagerCoins >= JACKPOT_CONFIG.MINOR.minimumBetCoins)
        eligible.push(JackpotTypeEnum.MINOR)
    if (wagerCoins >= JACKPOT_CONFIG.MAJOR.minimumBetCoins)
        eligible.push(JackpotTypeEnum.MAJOR)
    if (wagerCoins >= JACKPOT_CONFIG.GRAND.minimumBetCoins)
        eligible.push(JackpotTypeEnum.GRAND)
    return eligible
}

export function generateRandomSeedAmount(baseSeedCoins: number): number {
    const variation = Math.floor(baseSeedCoins * 0.1)
    const randomOffset =
        Math.floor(Math.random() * (variation * 2 + 1)) - variation
    return baseSeedCoins + randomOffset
}

export function canWinJackpot(
    lastWonAt: string | null,
    minimumTimeBetweenWinsMinutes: number
): boolean {
    if (!lastWonAt) return true
    const now = new Date()
    const timeDiffMinutes = (now.getTime() - new Date(lastWonAt).getTime()) / (1000 * 60)
    return timeDiffMinutes >= minimumTimeBetweenWinsMinutes
}

export function checkJackpotWin(probabilityPerMillion: number): boolean {
    const randomNumber = Math.floor(Math.random() * 1000000)
    return randomNumber < probabilityPerMillion
}

export async function findManyJackpot(): Promise<JackpotType[]> {
    try {
        return await db.select().from(jackpots)
    } catch (error) {
        console.error('Error fetching Jackpots:', error)
        throw new Error('Could not fetch Jackpots')
    }
}

export async function createJackpot(data: Newjackpots): Promise<JackpotType> {
    try {
        const [newJackpot] = await db.insert(jackpots).values(data).returning()
        return newJackpot
    } catch (error) {
        console.error('Error creating Jackpot:', error)
        throw new Error('Could not create Jackpot')
    }
}

export async function findJackpotById(
    id: string
): Promise<JackpotType | undefined> {
    try {
        const [jackpot] = await db
            .select()
            .from(jackpots)
            .where(eq(jackpots.id, id))
        return jackpot
    } catch (error) {
        console.error(`Error fetching Jackpot by ID ${id}:`, error)
        throw new Error('Could not fetch Jackpot by ID')
    }
}

export async function updateJackpot(
    id: string,
    data: Partial<Newjackpots>
): Promise<JackpotType> {
    try {
        const [updatedJackpot] = await db
            .update(jackpots)
            .set(data)
            .where(eq(jackpots.id, id))
            .returning()
        return updatedJackpot
    } catch (error) {
        console.error(`Error updating Jackpot ${id}:`, error)
        throw new Error('Could not update Jackpot')
    }
}

export async function deleteJackpot(id: string): Promise<JackpotType> {
    try {
        const [deletedJackpot] = await db
            .delete(jackpots)
            .where(eq(jackpots.id, id))
            .returning()
        return deletedJackpot
    } catch (error) {
        console.error(`Error deleting Jackpot ${id}:`, error)
        throw new Error('Could not delete Jackpot')
    }
}

export async function initializeJackpots(): Promise<void> {
    const result = await db.select({ count: jackpots.id }).from(jackpots).limit(1)
    const existingJackpotsCount =
        result.length > 0 ? Number(result[0].count) : 0

    if (existingJackpotsCount === 0) {
        console.log(chalk.yellow('Initializing jackpots...'))
        const jackpotData = Object.values(JACKPOT_CONFIG).map((config) => ({
            id: nanoid(),
            type: config.type,
            currentAmountCoins: config.seedAmountCoins,
            seedAmountCoins: config.seedAmountCoins,
            minimumBetCoins: config.minimumBetCoins,
            contributionRateBasisPoints: config.contributionRateBasisPoints,
            probabilityPerMillion: config.probabilityPerMillion,
            minimumTimeBetweenWinsMinutes: config.minimumTimeBetweenWinsMinutes,
            isActive: true,
        }))

        await db.insert(jackpots).values(jackpotData)
        console.log('Jackpots initialized successfully.')
    }
}

export interface AsyncJackpotProcessingRequest {
    gameSpinId: string
    userId: string
    wagerAmountCoins: number
    gameCategory: string
}

export async function processJackpots(
    request: AsyncJackpotProcessingRequest
) {
    const { gameSpinId, userId, wagerAmountCoins, gameCategory } = request
    console.log(chalk.yellow('Processing jackpots for spin:', gameSpinId))

    if (gameCategory !== 'SLOTS') {
        return { contributions: [] }
    }

    const eligibleJackpotTypes = getEligibleJackpots(wagerAmountCoins)
    if (eligibleJackpotTypes.length === 0) {
        return { contributions: [] }
    }

    const activeJackpots = await db
        .select()
        .from(jackpots)
        .where(
            and(
                inArray(jackpots.type, eligibleJackpotTypes),
                eq(jackpots.isActive, true)
            )
        )

    if (activeJackpots.length === 0) {
        return { contributions: [] }
    }

    return db.transaction(async (tx) => {
        const contributions: Partial<JackpotContributionType>[] = []
        let jackpotWin: JackpotWinType | null = null

        for (const jackpot of activeJackpots) {
            const config =
                JACKPOT_CONFIG[jackpot.type as keyof typeof JACKPOT_CONFIG]
            if (!config) continue

            const contributionAmount = calculateContribution(
                wagerAmountCoins,
                config.contributionRateBasisPoints
            )

            if (contributionAmount > 0) {
                await tx.insert(jackpotContributions).values({
                    id: nanoid(),
                    jackpotId: jackpot.id,
                    gameSpinId,
                    contributionAmountCoins: contributionAmount,
                })

                const [updatedJackpot] = await tx
                    .update(jackpots)
                    .set({
                        currentAmountCoins:
                            jackpot.currentAmountCoins + contributionAmount,
                    })
                    .where(eq(jackpots.id, jackpot.id))
                    .returning()

                contributions.push({
                    contributionAmountCoins: contributionAmount,
                    jackpotId: jackpot.id,
                    gameSpinId,
                })

                if (
                    !jackpotWin &&
                    canWinJackpot(
                        jackpot.lastWonAt,
                        config.minimumTimeBetweenWinsMinutes
                    ) &&
                    checkJackpotWin(config.probabilityPerMillion)
                ) {
                    const winAmount = updatedJackpot.currentAmountCoins
                    const newSeedAmount = generateRandomSeedAmount(
                        jackpot.seedAmountCoins
                    )

                    await tx
                        .update(jackpots)
                        .set({
                            currentAmountCoins: newSeedAmount,
                            lastWonAt: new Date().toISOString(),
                            lastWonBy: userId,
                        })
                        .where(eq(jackpots.id, jackpot.id))

                    const [win] = await tx
                        .insert(jackpotWins)
                        .values({
                            id: nanoid(),
                            jackpotId: jackpot.id,
                            winnerId: userId,
                            winAmountCoins: winAmount,
                            gameSpinId,
                        })
                        .returning()

                    jackpotWin = win
                }
            }
        }
        return { contributions, jackpotWin }
    })
}

export async function getJackpotStats() {
    console.log(chalk.yellow('Getting jackpot stats'))
    const allJackpots = await db.query.jackpots.findMany({
        where: eq(jackpots.isActive, true),
        with: {

            user: {
                columns: {
                    username: true,
                },
            },
        },
    })

    const totalPoolCoins = allJackpots.reduce(
        (sum, j) => sum + j.currentAmountCoins,
        0
    )

    return {
        totalPoolCoins,
        totalPoolDollars: coinsToDollars(totalPoolCoins),
        jackpots: allJackpots.map((j) => ({
            type: j.type,
            currentAmountCoins: j.currentAmountCoins,
            currentAmountDollars: coinsToDollars(j.currentAmountCoins),
            lastWonAt: j.lastWonAt,
            lastWinnerUsername: j.user?.username || null,
        })),
    }
}

// Correctly infer the return type of the function for RecentJackpotWin
export type RecentJackpotWin = Awaited<
    ReturnType<typeof getRecentJackpotWins>
>[number]

export async function getRecentJackpotWins(limit: number = 10) {
    console.log(chalk.yellow('Getting recent jackpot wins'))
    const _jackpotWins = await db.query.jackpotWins.findMany({
        limit,
        orderBy: [desc(jackpotWins.createdAt)],
        with: {
            user: {
                columns: {
                    username: true,
                    avatar_url: true,
                },
            },
        },
    })

    const result = await Promise.all(
        _jackpotWins.map(async (win) => {
            const jackpot = await db.query.jackpots.findFirst({
                where: eq(jackpots.id, win.jackpotId),
                columns: {
                    type: true,
                },
            })
            return {
                ...win,
                jackpot,
            }
        })
    )

    return result
}

export async function getUserJackpotContributions(
    userId: string,
    limit: number = 50
) {
    console.log(
        chalk.yellow('Getting user jackpot contributions for user:', userId)
    )
    return db
        .select({
            id: jackpotContributions.id,
            jackpotId: jackpotContributions.jackpotId,
            jackpotType: jackpots.type,
            gameSpinId: jackpotContributions.gameSpinId,
            contributionAmountCoins:
                jackpotContributions.contributionAmountCoins,
            createdAt: jackpotContributions.createdAt,
            userId: gameSpins.userId,
        })
        .from(jackpotContributions)
        .innerJoin(gameSpins, eq(jackpotContributions.gameSpinId, gameSpins.id))
        .innerJoin(jackpots, eq(jackpotContributions.jackpotId, jackpots.id))
        .where(eq(gameSpins.userId, userId))
        .orderBy(desc(jackpotContributions.createdAt))
        .limit(limit)
}

export async function getUserJackpotWins(
    userId: string
): Promise<JackpotWinType[]> {
    console.log(chalk.yellow('Getting user jackpot wins for user:', userId))
    return db
        .select()
        .from(jackpotWins)
        .where(eq(jackpotWins.winnerId, userId))
        .orderBy(desc(jackpotWins.createdAt))
}

export async function getJackpotById(id: string) {
    console.log(chalk.yellow('Getting jackpot by id:', id))
    return db.query.jackpots.findFirst({
        where: eq(jackpots.id, id),
        with: {
            user: {
                columns: {
                    username: true,
                    avatar_url: true,
                },
            },
        },
    })
}

interface JackpotWinParams {
    userId: string
    gameId: string
    amount: number
    jackpotType: string
    walletId: string
}

export async function handleJackpotWin({
    userId,
    gameId,
    amount,
    jackpotType,
    walletId,
}: JackpotWinParams) {
    if (!amount || amount <= 0) {
        throw new Error('Invalid jackpot amount')
    }

    return await db
        .transaction(async (tx) => {
            const [wallet] = await tx
                .select({ balance: wallets.balance })
                .from(wallets)
                .where(eq(wallets.id, walletId))

            if (!wallet) {
                throw new Error('Wallet not found')
            }

            const newBalance = wallet.balance + amount

            await tx.insert(transactions).values({
                id: nanoid(),
                type: 'JACKPOT_WIN',
                amount,
                userId,
                walletId,
                relatedGameId: gameId,
                description: `${jackpotType.toUpperCase()} Jackpot Win`,
                balanceBefore: wallet.balance,
                balanceAfter: newBalance,
            })

            await tx
                .update(wallets)
                .set({ balance: newBalance })
                .where(eq(wallets.id, walletId))

            console.log(`Jackpot win processed: ${amount} for user ${userId}`)

            return { success: true, newBalance }
        })
        .then((result) => {
            if (result.success) {
                // Notify client with a wallet patch after jackpot credit.
                publishUserUpdated(userId, {
                    wallet: {
                        // Optionally include balance after win if available to avoid extra fetch.
                    },
                })
            }
            return result
        })
}
</file>

<file path="./backend/src/lib/session.manager.ts">
/* eslint-disable style/indent-binary-ops */
// src/lib/session.manager.ts
import type { Context } from 'hono'

import chalk from 'chalk'
import { and, eq } from 'drizzle-orm'

import type { AuthSessionType, GameSessionType, UserType } from '#/db/schema'

import db from '#/db'
import { authSessions, games, gameSessions, gameSpins, users } from '#/db/schema'
import {
    deleteAuthSessionFromCache,
    deleteGameSessionFromCache,
    deleteSpinsFromCache,
    getAuthSessionFromCache,
    getGameSessionFromCache,
    getSpinsFromCache,
    saveAuthSessionToCache,
    saveGameSessionToCache,
} from '#/lib/cache'
import { publishUserSnapshot } from '#/lib/websocket.service'
import { nanoid } from '#/utils/nanoid'

const IDLE_TIMEOUT = 10 * 60 * 1000 // 10 minutes

export class SessionManager {
    static async startAuthSession(user: UserType): Promise<AuthSessionType> {
        const id = nanoid()
        console.log(chalk.cyan(`[SessionManager] Creating auth session id=${id} for user=${user.id}`))

        const inserted = await db
            .insert(authSessions)
            .values({
                id,
                userId: user.id,
                status: 'ACTIVE',
            })
            .returning()

        const authSession = inserted?.[0]
        if (!authSession) {
            console.error(chalk.red(`[SessionManager] Insert did not return row for id=${id}`))
            throw new Error('Failed to create auth session')
        }

        // Post-insert verification to ensure persistence and ACTIVE status
        const verified = await db.query.authSessions.findFirst({
            where: and(eq(authSessions.id, authSession.id), eq(authSessions.status, 'ACTIVE')),
        })

        if (!verified) {
            console.error(
                chalk.red(
                    `[SessionManager] Verification failed: session not found or not ACTIVE id=${authSession.id}`
                )
            )
            // Best-effort: mark as expired to avoid dangling
            try {
                await db.update(authSessions).set({ status: 'EXPIRED' }).where(eq(authSessions.id, authSession.id))
            } catch {}
            throw new Error('Auth session was not persisted as ACTIVE')
        }

        await saveAuthSessionToCache(verified)
        console.log(chalk.green(`[SessionManager] Auth session ACTIVE and cached id=${verified.id}`))
        return verified as AuthSessionType
    }

    static async endAuthSession(
        authSessionId: string,
        userId: string
    ): Promise<void> {
        await db
            .update(authSessions)
            .set({ status: 'EXPIRED' })
            .where(eq(authSessions.id, authSessionId))
        await deleteAuthSessionFromCache(authSessionId)
        await this.endCurrentGameSession(userId)
    }

    static async endAllUserSessions(userId: string): Promise<void> {
        console.log(
            chalk.yellow(`Ending all previous sessions for user ${userId}...`)
        )
        await this.endCurrentGameSession(userId)
        const activeSessions = await db
            .select({ id: authSessions.id })
            .from(authSessions)
            .where(
                and(
                    eq(authSessions.userId, userId),
                    eq(authSessions.status, 'ACTIVE')
                )
            )

        for (const session of activeSessions) {
            await db
                .update(authSessions)
                .set({ status: 'EXPIRED' })
                .where(eq(authSessions.id, session.id))
            await deleteAuthSessionFromCache(session.id)
        }
    }

    static async getAuthSession(
        sessionId: string
    ): Promise<AuthSessionType | null> {
        let session: any = await getAuthSessionFromCache(sessionId)
        if (session) {
            return session
        }

        session = await db.query.authSessions.findFirst({
            where: and(
                eq(authSessions.id, sessionId),
                eq(authSessions.status, 'ACTIVE')
            ),
        })

        if (session) {
            await saveAuthSessionToCache(session)
        }

        return session || null
    }

    static async startGameSession(
        c: Context,
        gameName: string
    ): Promise<GameSessionType> {
        const user = c.get('user') as UserType
        const authSession = c.get('authSession') as AuthSessionType

        if (!user || !authSession) {
            throw new Error('User not authenticated.')
        }

        await this.endCurrentGameSession(user.id)

        const game = await db.query.games.findFirst({
            where: eq(games.name, gameName),
        })
        if (!game) {
            throw new Error(`Game with name "${gameName}" not found.`)
        }

        const newSessionData: GameSessionType = {
            id: nanoid(),
            userId: user.id,
            authSessionId: authSession.id,
            gameId: game.id,
            status: 'ACTIVE',
            createdAt: new Date().toISOString(),
            endAt: null,
            duration: 0,
            totalWagered: 0,
            totalWon: 0,
            rtp: null,
            totalXpGained: 0,
        }

        await db.insert(gameSessions).values(newSessionData)
        await db
            .update(users)
            .set({ currentGameSessionDataId: newSessionData.id })
            .where(eq(users.id, user.id))

        await saveGameSessionToCache(newSessionData)
        c.set('user', { ...user, currentGameSessionDataId: newSessionData.id })
        // Push a lightweight snapshot so client updates user.currentGameSessionDataId
        publishUserSnapshot({
            userId: user.id,
            user: { currentGameSessionDataId: newSessionData.id },
        })

        return newSessionData
    }

    static async endCurrentGameSession(userId: string): Promise<void> {
        const activeSession = await db.query.gameSessions.findFirst({
            where: and(
                eq(gameSessions.userId, userId),
                eq(gameSessions.status, 'ACTIVE')
            ),
        })

        if (!activeSession) {
            return
        }

        const sessionSpins = await getSpinsFromCache(activeSession.id)
        const sessionFromCache =
            (await getGameSessionFromCache(activeSession.id)) || activeSession

        await db.transaction(async (tx) => {
            const now = new Date()
            const finalRtp =
                sessionFromCache.totalWagered > 0
                    ? (sessionFromCache.totalWon /
                          sessionFromCache.totalWagered) *
                      100
                    : 0
            const duration = Math.round(
                (now.getTime() -
                    new Date(sessionFromCache.createdAt).getTime()) /
                    1000
            )

            await tx
                .update(gameSessions)
                .set({
                    status: 'COMPLETED',
                    endAt: now.toISOString(),
                    duration,
                    totalWagered: sessionFromCache.totalWagered,
                    totalWon: sessionFromCache.totalWon,
                    totalXpGained: sessionFromCache.totalXpGained,
                    rtp: finalRtp.toFixed(2),
                })
                .where(eq(gameSessions.id, activeSession.id))

            if (sessionSpins.length > 0) {
                const spinsToCreate = sessionSpins.map((spin, i) => ({
                    ...spin,
                    // The spin.id from the cache (provider's roundId) must be preserved
                    // to maintain relations (e.g., to jackpot wins).
                    sessionId: activeSession.id,
                    spinNumber: i + 1,
                    grossWinAmount: spin.grossWinAmount ?? 0,
                    wagerAmount: spin.wagerAmount ?? 0,
                    occurredAt: spin.createdAt ?? new Date().toISOString(),
                }))
                await tx.insert(gameSpins).values(spinsToCreate)
            }

            await tx
                .update(users)
                .set({ currentGameSessionDataId: null })
                .where(eq(users.id, userId))
        })

        await deleteGameSessionFromCache(activeSession.id)
        await deleteSpinsFromCache(activeSession.id)
        // Notify client that current game session ended
        publishUserSnapshot({
            userId,
            user: { currentGameSessionDataId: null },
        })
    }

    static async getGameSession(
        sessionId: string
    ): Promise<GameSessionType | null> {
        let session: any = await getGameSessionFromCache(sessionId)
        if (session) {
            return session
        }

        session = await db.query.gameSessions.findFirst({
            where: eq(gameSessions.id, sessionId),
        })

        if (session) {
            await saveGameSessionToCache(session)
        }

        return session || null
    }

    static async handleIdleSession(c: Context): Promise<void> {
        const user = c.get('user') as UserType
        if (!user?.currentGameSessionDataId) {
            return
        }

        const gameSession = await this.getGameSession(
            user.currentGameSessionDataId
        )

        if (gameSession) {
            const now = new Date()
            const lastSeenValue = (gameSession as any).lastSeen
            const lastSeen = lastSeenValue ? new Date(lastSeenValue) : now
            const timeDiff = now.getTime() - lastSeen.getTime()

            if (timeDiff > IDLE_TIMEOUT) {
                await this.endCurrentGameSession(user.id)
                c.set('gameSession', null)
            } else {
                ;(gameSession as any).lastSeen = now
                await saveGameSessionToCache(gameSession)
            }
        }
    }
}
</file>

<file path="./backend/src/lib/types.ts">
import type { AuthSessionType, GameSessionType, OperatorType, UserType, VipInfoType, WalletType } from '#/db'
import type { OpenAPIHono, RouteConfig, RouteHandler } from '@hono/zod-openapi'
import type { Schema } from 'hono'
import type { PinoLogger } from 'hono-pino'

export interface AppBindings {
    Variables: {
        logger: PinoLogger;
        user: UserType,
        authSession: AuthSessionType
        gameSession: GameSessionType
        wallet: WalletType
        vipInfo: VipInfoType
        operator: OperatorType
    };
};

// eslint-disable-next-line ts/no-empty-object-type
export type AppOpenAPI<S extends Schema = {}> = OpenAPIHono<AppBindings, S>

export type AppRouteHandler<R extends RouteConfig> = RouteHandler<R, AppBindings>
</file>

<file path="./backend/src/lib/websocket.service.ts">
import { eq } from 'drizzle-orm'

import db from '#/db'
import { vipInfo, wallets } from '#/db/schema'
import { server } from '#/index'
import { eventEnvelope } from 'shared/ws/envelope'
import type { UserEvents } from 'shared/ws/contracts'

interface NotificationPayload {
    title: string;
    message: string;
    timestamp: string;
}

/**
 * Sends a real-time notification to a specific user.
 * @param userId - The ID of the user to notify.
 * @param payload - The notification content.
 */
export function sendNotificationToUser(userId: string, payload: Omit<NotificationPayload, 'timestamp'>) {
    if (!server) {
        console.error('WebSocket server is not available.')
        return
    }

    const topic = `notifications-${userId}`
    const message: NotificationPayload = {
        ...payload,
        timestamp: new Date().toISOString(),
    }

    // Bun's publish method returns the number of subscribers the message was sent to.
    const subscriberCount = server.publish(topic, JSON.stringify(message))
    console.log(`Sent notification to ${subscriberCount} client(s) on topic ${topic}`)
}

/**
 * Typed publisher: send 'user.updated' patch event to the user's private channel.
 */
export function publishUserUpdated(userId: string, patch: UserEvents['user.updated']['patch']): void {
    if (!server) {
        console.error('WebSocket server is not available.')
        return
    }
    const envelope = eventEnvelope('user', 'user.updated', {
        userId,
        patch,
        ts: Date.now(),
    } as UserEvents['user.updated'])
    const topic = `user-${userId}`
    const sent = server.publish(topic, JSON.stringify(envelope))
    if (sent > 0) {
        console.log(`Pushed user.updated to ${sent} client(s) on topic ${topic}`)
    }
}

/**
 * Typed publisher: send 'user.snapshot' full snapshot to the user's private channel.
 */
export function publishUserSnapshot(params: {
    userId: string
    user?: Record<string, unknown>
    wallet?: Record<string, unknown>
    vipInfo?: Record<string, unknown>
    ts?: number
}): void {
    if (!server) {
        console.error('WebSocket server is not available.')
        return
    }
    const envelope = eventEnvelope('user', 'user.snapshot', {
        userId: params.userId,
        user: params.user,
        wallet: params.wallet,
        vipInfo: params.vipInfo,
        ts: params.ts ?? Date.now(),
    } as UserEvents['user.snapshot'])
    const topic = `user-${params.userId}`
    const sent = server.publish(topic, JSON.stringify(envelope))
    if (sent > 0) {
        console.log(`Pushed user.snapshot to ${sent} client(s) on topic ${topic}`)
    }
}

/**
 * DEPRECATED: Previously pushed ad-hoc payloads. Now delegates to typed snapshot publisher.
 * Intentionally keeps the DB fetch to preserve behavior of sending fresh data.
 */
export async function triggerUserUpdate(userId: string) {
    if (!server) {
        console.error('WebSocket server is not available.')
        return
    }

    try {
        // Fetch the latest data from the database
        const walletRow = await db.query.wallets.findFirst({ where: eq(wallets.userId, userId) })
        const vipRow = await db.query.vipInfo.findFirst({ where: eq(vipInfo.userId, userId) })

        publishUserSnapshot({
            userId,
            wallet: walletRow ? { balance: walletRow.balance } : undefined,
            vipInfo: vipRow
                ? { level: vipRow.level, xp: vipRow.xp, totalXp: vipRow.totalXp }
                : undefined,
        })
    } catch (error) {
        console.error(`Failed to trigger user update for ${userId}:`, error)
    }
}
</file>

<file path="./backend/src/middlewares/auth.middleware.ts">
import chalk from 'chalk'
import { and, eq } from 'drizzle-orm'
import type { Context, Next } from 'hono'
import { getCookie } from 'hono/cookie'
import * as jose from 'jose'

import db from '#/db'
import { authSessions, users } from '#/db/schema'
import env from '#/env'

/**
 * Extract a bearer token from Authorization header or from cookie `access_token`.
 * Normalizes quotes and URL-encoding and ensures a compact JWS (three segments).
 */
function extractToken(c: Context): string | null {
    // Authorization header (case-insensitive)
    const rawAuth = c.req.header('authorization') ?? c.req.header('Authorization')
    if (rawAuth && typeof rawAuth === 'string') {
        const parts = rawAuth.trim().split(/\s+/)
        if (parts.length === 2 && /^Bearer$/i.test(parts[0])) {
            let t = parts[1].trim().replace(/^"(.+)"$/, '$1')
            try {
                // In case the token was URL-encoded in transit
                t = decodeURIComponent(t)
            } catch {
                // ignore decode errors and use raw token
            }
            if (isCompactJws(t)) return t
        }
    }

    // Cookie fallback
    const cookieToken = getCookie(c, 'access_token')
    if (cookieToken && typeof cookieToken === 'string') {
        let t = cookieToken.trim().replace(/^"(.+)"$/, '$1')
        try {
            t = decodeURIComponent(t)
        } catch {
            // ignore
        }
        if (isCompactJws(t)) return t
        // If cookie exists but malformed, still return raw so we can respond Unauthorized consistently
        return t
    }

    return null
}

/**
 * Checks that the token is a compact JWS (header.payload.signature).
 */
function isCompactJws(token: string | undefined | null): boolean {
    if (!token || typeof token !== 'string') return false
    const parts = token.split('.')
    return parts.length === 3 && parts.every(p => p.length > 0)
}

export async function authMiddleware(c: Context, next: Next) {
    console.log(chalk.green('--- Auth middleware begin ---'))

    if (c.req.url.includes('/updates/check')) {
        return next()
    }

    const token = extractToken(c)

    if (!isCompactJws(token)) {
        // Log minimal sanitized preview for debugging, avoid leaking full token
        const preview = token ? `${String(token).slice(0, 16)}...` : 'null'
        console.warn(chalk.yellow(`Invalid token format received: ${preview}`))
        return c.json({ error: 'Unauthorized' }, 401)
    }

    try {
        const secret = new TextEncoder().encode(env.ACCESS_TOKEN_SECRET)
        const { payload } = await jose.jwtVerify(token as string, secret, {
            algorithms: ['HS256'],
        })

        if (!payload || !payload.userId || !payload.sessionId) {
            return c.json({ error: 'Invalid token' }, 401)
        }
        console.log(payload.sessionId)
        const authSession = await db.query.authSessions.findFirst({
            where: and(
                eq(authSessions.id, payload.sessionId as string),
                eq(authSessions.status, 'ACTIVE')
            ),
        })
        console.log(authSession)

        if (!authSession) {
            return c.json({ error: 'Session not found or has expired' }, 401)
        }

        const userId = payload.userId as string
        const [user] = await db
            .update(users)
            .set({
                lastSeen: new Date().toISOString(),
                currentAuthSessionDataId: authSession.id,
            })
            .where(eq(users.id, userId))
            .returning({ id: users.id })

        if (!user) {
            return c.json({ error: 'User not found' }, 401)
        }

        const userWithRelations = await db.query.users.findFirst({
            where: eq(users.id, user.id),
            with: {
                vipInfo: true,
                activeWallet: {
                    with: {
                        operator: true,
                    },
                },
            },
        })

        if (
            !userWithRelations ||
            !userWithRelations.activeWalletId ||
            !userWithRelations.vipInfoId ||
            !userWithRelations.activeWallet?.operator
        ) {
            return c.json({ error: 'User account is not fully configured.' }, 401)
        }

        c.set('vipInfo', userWithRelations.vipInfo)
        c.set('wallet', userWithRelations)
        c.set('operator', userWithRelations.activeWallet.operator)
        c.set('token', token as string)
        c.set('authSession', authSession)
        c.set('user', userWithRelations)

        console.log(chalk.green('--- Auth middleware end ---'))
        return next()
    } catch (e) {
        // Avoid leaking jose error details to client
        const msg = e instanceof Error ? e.message : String(e)
        console.error(chalk.red(`JWT verify failed: ${msg}`))
        return c.json({ error: 'Invalid token' }, 401)
    }
}
</file>

<file path="./backend/src/middlewares/pino-logger.ts">
import { pinoLogger as logger } from 'hono-pino'
import pino from 'pino'
import pretty from 'pino-pretty'

import env from '#/env'

export function pinoLogger() {
    return logger({
        pino: pino(
            {
                level: env.LOG_LEVEL || 'info',
            },
            env.NODE_ENV === 'production' ? undefined : pretty()
        ),
    })
}
</file>

<file path="./backend/src/middlewares/session.middleware.ts">
// src/middlewares/session.middleware.ts
import type { Context, Next } from 'hono'
import chalk from 'chalk'

import { SessionManager } from '#/lib/session.manager'

export async function sessionMiddleware(c: Context, next: Next) {
    console.log(chalk.cyan('--- Session Middleware Start ---'))

    const user = c.get('user')
    if (!user) {
        console.log(chalk.red('Error: User not found in context.'))
        return c.json({ error: 'User not authenticated' }, 401)
    }

    if (c.req.url.includes('/game/spin')) {
        const sessionId = user.currentGameSessionDataId
        if (!sessionId) {
            console.log(
                chalk.red('Error: No current game session ID found on user object.')
            )
            return c.json({ message: 'No active game session found.' }, 404)
        }

        const gameSession = await SessionManager.getGameSession(sessionId)
        if (!gameSession) {
            console.log(
                chalk.red(`Error: Game session not found for ID: ${sessionId}`)
            )
            return c.json({ message: 'Game session has expired or is invalid.' }, 404)
        }
        c.set('gameSession', gameSession)
    }

    console.log(chalk.cyan('--- Session Middleware End ---'))
    return next()
}
</file>

<file path="./backend/src/routes/auth/auth.controller.ts">
import type { Context } from 'hono'
import { getCookie, setCookie } from 'hono/cookie'
import * as HttpStatusPhrases from 'stoker/http-status-phrases'

import db from '#/db'
import type { Newusers, UserType } from '#/db/schema'
import { userResponseSchema, authSessions } from '#/db/schema'
import { users } from '#/db/schema/schema'
import env from '#/env'
import { SessionManager } from '#/lib/session.manager'
import type { AppRouteHandler } from '#/lib/types'
import { and, eq } from 'drizzle-orm'
import * as jose from 'jose'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import type { LoginRoute, SessionRoute, SignUpRoute } from './auth.router'
import * as service from './auth.service'

const ACCESS_TOKEN_EXPIRES_IN = '15m'
const REFRESH_TOKEN_EXPIRES_IN_SECONDS = 60 * 60 * 24 * 7 // 7 days
const ROTATION_WINDOW_SECONDS = 60 * 60 * 6 // 6 hours

/**
 * Resolve cookie domain dynamically so environments like localhost do not
 * incorrectly set Domain=.cashflowcasino.com and production never sets localhost.
 * - For production hosts ending in .cashflowcasino.com -> return '.cashflowcasino.com'
 * - For other hosts (localhost, IPs) -> return undefined to omit Domain attribute
 */
function resolveCookieDomain(host: string | undefined): string | undefined {
    if (!host) return undefined
    // Strip port if any
    const bare = host.split(':')[0].toLowerCase()
    if (bare.endsWith('.cashflowcasino.com')) return '.cashflowcasino.com'
    if (bare === 'cashflowcasino.com') return '.cashflowcasino.com'
    return undefined
}

/**
 * Issuer should match the API hostname in production. For validation we only check
 * that the refresh token issuer equals this string. Keeping as constant for now.
 */
const ISSUER = 'api.cashflowcasino.com'
const AUDIENCE = 'web'

export const login: AppRouteHandler<LoginRoute> = async (c) => {
    const { username, password, uid } = c.req.valid('json')

    // Require password AND at least one identifier (username or uid)
    if (!password || (!username && !uid)) {
        return c.json(
            { message: HttpStatusPhrases.BAD_REQUEST },
            HttpStatusCodes.BAD_REQUEST
        )
    }

    let userRecord: UserType | undefined
    try {
        if (username) {
            userRecord = await db.query.users.findFirst({
                where: eq(users.username, username),
            })
        } else if (uid) {
            userRecord = await db.query.users.findFirst({
                where: eq(users.id, uid),
            })
        }
    } catch (error) {
        console.error('Error querying user:', error)
        return c.json(
            { message: HttpStatusPhrases.BAD_REQUEST },
            HttpStatusCodes.BAD_REQUEST
        )
    }

    if (!userRecord?.passwordHash) {
        return c.json(
            { message: HttpStatusPhrases.BAD_REQUEST },
            HttpStatusCodes.BAD_REQUEST
        )
    }

    const isPasswordValid = await Bun.password.verify(
        password,
        userRecord.passwordHash
    )
    if (!isPasswordValid) {
        return c.json(
            { message: HttpStatusPhrases.BAD_REQUEST },
            HttpStatusCodes.BAD_REQUEST
        )
    }

    const authSession = await SessionManager.startAuthSession(userRecord)

    const secret = new TextEncoder().encode(env.ACCESS_TOKEN_SECRET)

    // Issue 15-minute access token (header-only usage)
    const accessToken = await new jose.SignJWT({
        userId: userRecord.id,
        sessionId: authSession.id,
        aud: AUDIENCE,
        iss: ISSUER,
    })
        .setProtectedHeader({ alg: 'HS256' })
        .setIssuedAt()
        .setExpirationTime(ACCESS_TOKEN_EXPIRES_IN)
        .sign(secret)

    // Issue 7-day refresh token as JWT; reuse ACCESS_TOKEN_SECRET for now (as requested)
    // Include a unique jti for rotation tracking
    const refreshToken = await new jose.SignJWT({
        sub: userRecord.id,
        sid: authSession.id,
        aud: AUDIENCE,
        iss: ISSUER,
        typ: 'refresh',
        jti: crypto.randomUUID(),
        rti: Math.floor(Date.now() / 1000), // rotationIssuedAt (unix)
        rwn: ROTATION_WINDOW_SECONDS, // rotation window seconds (6h)
    })
        .setProtectedHeader({ alg: 'HS256' })
        .setIssuedAt()
        .setExpirationTime(`${REFRESH_TOKEN_EXPIRES_IN_SECONDS}s`)
        .sign(secret)

    // Set refresh_token cookie with a strict production domain override.
    // Some edge/proxies rewrite the Host header to localhost on origin.
    // Since you confirmed you are on app.cashflowcasino.com hitting api.cashflowcasino.com,
    // force Domain=.cashflowcasino.com unconditionally in production to avoid localhost scoping.
    setCookie(c, 'refresh_token', refreshToken, {
        domain: '.cashflowcasino.com',
        path: '/',
        httpOnly: true,
        secure: true,
        sameSite: 'None',
        maxAge: REFRESH_TOKEN_EXPIRES_IN_SECONDS,
    })

    // Return user plus BOTH tokens so clients without third‑party cookies can persist refresh via Authorization
    return c.json({ ...userRecord, accessToken, refreshToken } as any, HttpStatusCodes.OK)
}

export const signup: AppRouteHandler<SignUpRoute> = async (c) => {
    console.log('ere')
    const { username, password } = await c.req.json<{
        username?: string
        password?: string
    }>()
    console.log(username, password)
    if (!username || !password) {
        // return c.json({ error: 'Username and password are required.' }, 400)
        return c.json(
            {
                message: 'no username or password',
            },
            HttpStatusCodes.BAD_REQUEST
        )
    }

    // const result = await service.signup(username, password)
    const user: UserType | undefined | null = await db.transaction(async (tx) => {
        const passwordHash = await Bun.password.hash(password, 'bcrypt')

        const existingUser = await tx.query.users.findFirst({
            where: eq(users.username, username),
        })

        if (existingUser) {
            // return c.json(
            //     {
            //         message: HttpStatusPhrases.BAD_REQUEST,
            //     },
            //     HttpStatusCodes.BAD_REQUEST
            // )
            return null
        }

        const newUserValues: Newusers = {
            username,
            passwordHash,
            totalXpGained: 0,
            id: ''
        }

        const newUser = await tx
            .insert(users)
            .values(newUserValues)
            .returning()

        return await db.query.users.findFirst({ where: eq(users.id, newUser[0].id) })
    })
    if (!user) {
        return c.json(
            {
                message: HttpStatusPhrases.BAD_REQUEST,
            },
            HttpStatusCodes.BAD_REQUEST
        )
    }
    const authSession = await SessionManager.startAuthSession(user)

    const secret = new TextEncoder().encode(env.ACCESS_TOKEN_SECRET)

    // 15-minute access token (header-only)
    const accessToken = await new jose.SignJWT({
        userId: user.id,
        sessionId: authSession.id,
        aud: AUDIENCE,
        iss: ISSUER,
    })
        .setProtectedHeader({ alg: 'HS256' })
        .setIssuedAt()
        .setExpirationTime(ACCESS_TOKEN_EXPIRES_IN)
        .sign(secret)

    // 7-day refresh token JWT with rotation metadata
    const refreshToken = await new jose.SignJWT({
        sub: user.id,
        sid: authSession.id,
        aud: AUDIENCE,
        iss: ISSUER,
        typ: 'refresh',
        jti: crypto.randomUUID(),
        rti: Math.floor(Date.now() / 1000),
        rwn: ROTATION_WINDOW_SECONDS,
    })
        .setProtectedHeader({ alg: 'HS256' })
        .setIssuedAt()
        .setExpirationTime(`${REFRESH_TOKEN_EXPIRES_IN_SECONDS}s`)
        .sign(secret)

    // Set httpOnly cookie cross-subdomain (prod) or host-only (dev)
    const reqHost2 = c.req.header('Host') || c.req.url.split('/')[2] || ''
    const cookieDomain2 = resolveCookieDomain(reqHost2)
    setCookie(c, 'refresh_token', refreshToken, {
        domain: cookieDomain2,
        path: '/',
        httpOnly: true,
        secure: true,
        sameSite: 'None',
        maxAge: REFRESH_TOKEN_EXPIRES_IN_SECONDS,
    })

    // Return user plus BOTH tokens so clients without third‑party cookies can persist refresh via Authorization
    return c.json({ ...user, accessToken, refreshToken } as any, HttpStatusCodes.CREATED)
}

// export async function session(c: Context): Promise<any> {
export const session: AppRouteHandler<SessionRoute> = async (c) => {
    const user = c.get('user')
    const authSession = c.get('authSession')
    const gameSession = c.get('gameSession')
    const wallet = c.get('wallet')
    const vipInfo = c.get('vipInfo')
    const operator = c.get('operator')

    // Normalize Date objects to strings to satisfy zod schemas expecting strings
    const normalizeDate = (v: unknown) => {
        if (v instanceof Date) return v.toISOString()
        return v
    }

    const normalizedUser = user
        ? {
                ...user,
                createdAt: normalizeDate((user as any).createdAt),
                updatedAt: normalizeDate((user as any).updatedAt),
                lastSeen: normalizeDate((user as any).lastSeen),
            }
        : user

    const normalizedWallet =
        wallet && typeof wallet === 'object'
            ? {
                    ...wallet,
                    createdAt: normalizeDate((wallet as any).createdAt),
                    updatedAt: normalizeDate((wallet as any).updatedAt),
                }
            : wallet

    const normalizedVip =
        vipInfo && typeof vipInfo === 'object'
            ? {
                    ...vipInfo,
                    createdAt: normalizeDate((vipInfo as any).createdAt),
                    updatedAt: normalizeDate((vipInfo as any).updatedAt),
                }
            : vipInfo

    const payload = {
        user: userResponseSchema.parse(normalizedUser),
        authSession,
        gameSession,
        wallet: normalizedWallet,
        vipInfo: normalizedVip,
        operator,
    }

    return c.json(payload, HttpStatusCodes.OK)
}

export async function logout(c: Context): Promise<any> {
    const authSession = c.get('authSession')
    const user = c.get('user')
    await service.logout(authSession, user.id)

    // Clear refresh cookie for prod domain and host-only for safety
    setCookie(c, 'refresh_token', '', {
        domain: '.cashflowcasino.com',
        path: '/',
        httpOnly: true,
        secure: true,
        sameSite: 'None',
        expires: new Date(0),
    })
    setCookie(c, 'refresh_token', '', {
        path: '/',
        httpOnly: true,
        secure: true,
        sameSite: 'None',
        expires: new Date(0),
    })

    return c.json({ message: 'Successfully logged out' })
}

/**
 * POST /auth/refresh
 * Verify refresh_token cookie, optionally rotate if older than ROTATION_WINDOW_SECONDS,
 * and return a new 15m access token.
 */
export async function refresh(c: Context) {
    try {
        const secret = new TextEncoder().encode(env.ACCESS_TOKEN_SECRET)

        // Accept refresh token from either cookie or Authorization header fallback for early clients
        let cookie = getCookie(c, 'refresh_token')
        if (!cookie) {
            const rawAuth = c.req.header('authorization') ?? c.req.header('Authorization')
            if (rawAuth && typeof rawAuth === 'string') {
                const parts = rawAuth.trim().split(/\s+/)
                if (parts.length === 2 && /^Bearer$/i.test(parts[0])) {
                    cookie = parts[1]
                }
            }
        }
        if (!cookie) {
            return c.json({ error: 'Missing refresh token' }, HttpStatusCodes.UNAUTHORIZED)
        }

        let payload: jose.JWTPayload
        try {
            const verified = await jose.jwtVerify(cookie, secret, {
                algorithms: ['HS256'],
                issuer: ISSUER,
                audience: AUDIENCE,
            })
            payload = verified.payload
        } catch {
            return c.json({ error: 'Invalid refresh token' }, HttpStatusCodes.UNAUTHORIZED)
        }

        const sub = payload.sub as string | undefined
        const sid = (payload as any).sid as string | undefined
        const jti = (payload as any).jti as string | undefined
        const rti = Number((payload as any).rti) || 0

        if (!sub || !sid || !jti) {
            return c.json({ error: 'Malformed refresh token' }, HttpStatusCodes.UNAUTHORIZED)
        }

        // Session must be ACTIVE
        const session = await db.query.authSessions.findFirst({
            where: and(eq(authSessions.id, sid), eq(authSessions.status, 'ACTIVE')),
        })
        if (!session) {
            return c.json({ error: 'Session not active' }, HttpStatusCodes.UNAUTHORIZED)
        }

        const nowSec = Math.floor(Date.now() / 1000)
        const ageSec = nowSec - rti

        // Always mint a fresh access token (15m)
        const accessToken = await new jose.SignJWT({
            userId: sub,
            sessionId: sid,
            aud: AUDIENCE,
            iss: ISSUER,
        })
            .setProtectedHeader({ alg: 'HS256' })
            .setIssuedAt()
            .setExpirationTime(ACCESS_TOKEN_EXPIRES_IN)
            .sign(secret)

        // Rotate refresh token if older than rotation window
        if (ageSec >= ROTATION_WINDOW_SECONDS) {
            const newJti = crypto.randomUUID()
            const newRefreshToken = await new jose.SignJWT({
                sub,
                sid,
                aud: AUDIENCE,
                iss: ISSUER,
                typ: 'refresh',
                jti: newJti,
                rti: nowSec,
                rwn: ROTATION_WINDOW_SECONDS,
                prv: jti,
            })
                .setProtectedHeader({ alg: 'HS256' })
                .setIssuedAt()
                .setExpirationTime(`${REFRESH_TOKEN_EXPIRES_IN_SECONDS}s`)
                .sign(secret)

            // Force production domain for rotation as well
            setCookie(c, 'refresh_token', newRefreshToken, {
                domain: '.cashflowcasino.com',
                path: '/',
                httpOnly: true,
                secure: true,
                sameSite: 'None',
                maxAge: REFRESH_TOKEN_EXPIRES_IN_SECONDS,
            })
        }

        return c.json({ accessToken }, HttpStatusCodes.OK)
    } catch (e) {
        const msg = e instanceof Error ? e.message : String(e)
        return c.json({ error: msg }, HttpStatusCodes.UNAUTHORIZED)
    }
}
</file>

<file path="./backend/src/routes/auth/auth.index.ts">
import { createRouter } from '#/lib/create-app'

import * as handlers from './auth.controller'
import * as routes from './auth.router'

const router = createRouter()
    .openapi(routes.login, handlers.login)

export default router
</file>

<file path="./backend/src/routes/auth/auth.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'
import { createErrorSchema, createMessageObjectSchema, } from 'stoker/openapi/schemas'

import {
    selectAuthSessionSchema,
    selectGameSession,
    selectVipInfoSchema,
    selectWalletSchema,
    userResponseSchema,
} from '#/db/schema'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { sessionMiddleware } from '#/middlewares/session.middleware'

import { badRequestSchema } from '#/lib/constants'
import * as controller from './auth.controller'

const tags = ['Auth']

export const login = createRoute({
    path: '/auth/login',
    method: 'post',
    request: {
        body: jsonContentRequired(
            // Require password AND at least one identifier (username or uid)
            z.object({
                password: z.string(),
                username: z.string(),
            }),
            // }).and(
            //     z.union([
            //         z.object({ username: z.string(), uid: z.undefined().optional() }),
            //         z.object({ uid: z.string(), username: z.undefined().optional() }),
            //     ]).openapi('LoginRequest')
            // ),
            'User credentials for login: provide password and either username or uid'
        ),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            userResponseSchema.openapi('User'),
            'The user object and sets an access token cookie.'
        ),
        [HttpStatusCodes.BAD_REQUEST]: jsonContent(
            badRequestSchema,
            'Bad Request',
        ),
        // [HttpStatusCodes.UNAUTHORIZED]: jsonContent(
        //     createErrorSchema(userResponseSchema),
        //     'Invalid id error',
        // ),
    },
})

export const signup = createRoute({
    path: '/auth/signup',
    method: 'post',
    request: {
        body: jsonContentRequired(
            z.object({
                username: z.string(),
                password: z.string(),
            }),
            'User credentials for signup'
        ),
    },
    tags,
    responses: {
        [HttpStatusCodes.CREATED]: jsonContent(
            userResponseSchema.openapi('User'),
            'The created user object and sets an access token cookie.'
        ),
        [HttpStatusCodes.BAD_REQUEST]: jsonContent(
            badRequestSchema,
            'Bad Request',
        ),
        // [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
        //     createErrorSchema(insertUserSchema),
        //     'The validation error(s)',
        // ),
    },
})

export const sessionRoute = createRoute({
    method: 'get',
    path: '/auth/me',
    tags,
    summary: 'Get current user session',
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({
                user: userResponseSchema.openapi('User'),
                authSession: selectAuthSessionSchema.openapi('AuthSession'),
                gameSession: selectGameSession.optional().openapi('GameSession'),
                wallet: selectWalletSchema.openapi('Wallet'),
                vipInfo: selectVipInfoSchema.openapi('VipInfo'),
                operator: selectVipInfoSchema.openapi('Operator'),
            }),
            'The current user session'
        ),
        [HttpStatusCodes.UNAUTHORIZED]: jsonContent(
            createErrorSchema(userResponseSchema),
            'Invalid id error',
        ),
    },
})

const logoutRoute = createRoute({
    method: 'post',
    path: '/auth/logout',
    tags,
    summary: 'Logout current user',
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            createMessageObjectSchema('Successfully logged out'),
            'Logout successful'
        ),
        401: jsonContent(z.object({ error: z.string() }), 'Unauthorized'),
    },
})

// Issue new 15m access token from a valid refresh cookie; rotates refresh every ~6h
const refreshRoute = createRoute({
    method: 'post',
    path: '/auth/refresh',
    tags,
    summary: 'Mint a new access token using the refresh cookie',
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({ accessToken: z.string() }).openapi('AccessToken'),
            'New access token'
        ),
        [HttpStatusCodes.UNAUTHORIZED]: jsonContent(
            z.object({ error: z.string() }).openapi('refreshToken'),
            'Invalid or expired refresh token'
        ),
    },
})

const router = createRouter()

router.openapi(login, controller.login)
router.openapi(signup, controller.signup)

// Refresh uses only cookie, no authMiddleware
router.openapi(refreshRoute, controller.refresh)

router.use('/auth/logout', authMiddleware)
router.openapi(logoutRoute, controller.logout)

router.use('/auth/me', authMiddleware, sessionMiddleware)
router.openapi(sessionRoute, controller.session)

export default router

export type LoginRoute = typeof login
export type SignUpRoute = typeof signup
export type SessionRoute = typeof sessionRoute
export type RefreshRoute = typeof refreshRoute
</file>

<file path="./backend/src/routes/auth/auth.service.ts">
import { eq } from 'drizzle-orm'
import * as jose from 'jose'

import db from '#/db'
import type { AuthSessionType, Newusers, UserType } from '#/db/schema'
import { users } from '#/db/schema'
import env from '#/env'
import { SessionManager } from '#/lib/session.manager'
import { nanoid } from '#/utils/nanoid'

const ACCESS_TOKEN_EXPIRES_IN = '7 days'

type LoginResult = { accessToken: string; user: UserType } | { error: string }
type SignupResult = { accessToken: string; user: UserType } | { error: string }

export async function login(
    username?: string,
    password?: string,
    uid?: string
): Promise<LoginResult> {
    if (!password) {
        return { error: 'Password is required' }
    }
    if (!username && !uid) {
        return { error: 'Username or UID is required' }
    }

    let userRecord: UserType | undefined
    try {
        if (username) {
            userRecord = await db.query.users.findFirst({
                where: eq(users.username, username),
            })
        } else if (uid) {
            userRecord = await db.query.users.findFirst({ where: eq(users.id, uid) })
        }
    } catch (error) {
        console.error('Error querying user:', error)
        return { error: 'Database error while fetching user.' }
    }

    if (!userRecord?.passwordHash) {
        return { error: 'Invalid username or password.' }
    }

    const isPasswordValid = await Bun.password.verify(
        password,
        userRecord.passwordHash
    )
    if (!isPasswordValid) {
        return { error: 'Invalid username or password.' }
    }

    const authSession = await SessionManager.startAuthSession(userRecord)

    const secret = new TextEncoder().encode(env.ACCESS_TOKEN_SECRET)
    const accessToken = await new jose.SignJWT({
        userId: userRecord.id,
        sessionId: authSession.id,
    })
        .setProtectedHeader({ alg: 'HS256' })
        .setIssuedAt()
        .setExpirationTime(ACCESS_TOKEN_EXPIRES_IN)
        .sign(secret)

    const user = { ...userRecord, passwordHash: null }

    return { accessToken, user }
}

export async function logout(
    authSession: AuthSessionType,
    userId: string
): Promise<void> {
    await SessionManager.endAuthSession(authSession.id, userId)
}

export async function signup(
    username: string,
    password: string
): Promise<SignupResult> {
    const passwordHash = await Bun.password.hash(password, 'bcrypt')

    try {
        const user = await db.transaction(async (tx) => {
            const existingUser = await tx.query.users.findFirst({
                where: eq(users.username, username),
            })

            if (existingUser) {
                throw new Error('User with this username already exists')
            }

            const newUserValues: Newusers = {
                id: nanoid(),
                username,
                passwordHash,
                totalXpGained: 0,
            }

            const [newUser] = await tx
                .insert(users)
                .values(newUserValues)
                .returning()
            return newUser
        })

        const authSession = await SessionManager.startAuthSession(user)

        const secret = new TextEncoder().encode(env.ACCESS_TOKEN_SECRET)
        const accessToken = await new jose.SignJWT({
            userId: user.id,
            sessionId: authSession.id,
        })
            .setProtectedHeader({ alg: 'HS256' })
            .setIssuedAt()
            .setExpirationTime(ACCESS_TOKEN_EXPIRES_IN)
            .sign(secret)

        return { accessToken, user: { ...user, passwordHash: null } }
    } catch (error) {
        const message =
            error instanceof Error ? error.message : 'An unknown error occurred.'
        return { error: message }
    }
}
</file>

<file path="./backend/src/routes/blackjack/utils/blackjack.utils.ts">
import crypto from 'node:crypto'
import Chance from 'chance'
import type { BlackjackTable, Player } from '../types'
import type { UserWithRelations } from '#/db/schema'

// --- Type Definitions ---

interface Card {
    rank: string;
    suit: string;
}







// --- Validation Functions ---

export function blackjackCheckSendJoinData(data: any): void {
    if (!data) {
        throw new Error('Something went wrong. Please try again in a few seconds.')
    }
    if (data.table === undefined || isNaN(data.table) || Math.floor(data.table) < 0) {
        throw new Error('Your entered table id is invalid.')
    }
    if (data.seat === undefined || isNaN(data.seat) || ![0, 1, 2, 3, 4].includes(data.seat)) {
        throw new Error('Your entered table seat is invalid.')
    }
}

export function blackjackCheckSendJoinTable(data: any, user: UserWithRelations, blackjackTable: BlackjackTable | undefined): void {
    if (!blackjackTable || !['created', 'countdown'].includes(blackjackTable.game.state)) {
        throw new Error('Your requested table is not available.')
    }
    if (blackjackTable.players.some(p => p.seat === data.seat)) {
        throw new Error('Your requested table seat is already occupied.')
    }
    if (blackjackTable.players.filter(p => p.user.id === user.id).length >= 3) {
        throw new Error('You aren’t allowed to sit at more than three seats at once.')
    }
    if (blackjackTable.players.some(p => p.user.id === user.id && !p.bet)) {
        throw new Error('You need to place a bet first on your other seats.')
    }
}

export function blackjackCheckSendJoinUser(user: UserWithRelations, blackjackTable: BlackjackTable): void {
    if (!user.activeWallet || user.activeWallet.balance < Math.floor(blackjackGetBetAmountMin(blackjackTable.game.type) * 1000)) {
        throw new Error('You do not have enough balance for this action.')
    }
}

export function blackjackCheckSendBetData(data: any): void {
    if (!data) {
        throw new Error('Something went wrong. Please try again in a few seconds.')
    }
    if (data.table === undefined || isNaN(data.table) || Math.floor(data.table) < 0) {
        throw new Error('Your entered table id is invalid.')
    }
    if (!data.bets || !Array.isArray(data.bets) || data.bets.length === 0) {
        throw new Error('Your provided bets are invalid.')
    }
}

export function blackjackCheckSendBetTable(blackjackTable: BlackjackTable | undefined): void {
    if (!blackjackTable || blackjackTable.game.state !== 'countdown') {
        throw new Error('Your requested table is not available.')
    }
}

export function blackjackCheckSendBetBets(bets: any[]): void {
    const checked: string[] = []
    for (const bet of bets) {
        if (!bet || !bet.amount) {
            throw new Error('You’ve provided an invalid bet amount.')
        }
        if (bet.seat === undefined || isNaN(bet.seat) || !['0', '1', '2', '3', '4'].includes(bet.seat.toString())) {
            throw new Error('Your provided table seat is invalid.')
        }
        if (isNaN(bet.amount.main) || Math.floor(bet.amount.main) < 0 ||
            isNaN(bet.amount.sideLeft) || Math.floor(bet.amount.sideLeft) < 0 ||
            isNaN(bet.amount.sideRight) || Math.floor(bet.amount.sideRight) < 0) {
            throw new Error('You’ve provided an invalid bet amount.')
        }
        if (checked.includes(bet.seat.toString())) {
            throw new Error('You’ve provided multiple bets for one seat.')
        }
        checked.push(bet.seat.toString())
    }
}

export function blackjackCheckSendBetSeat(bet: any, user: UserWithRelations, blackjackTable: BlackjackTable, blackjackSeat: Player | undefined): void {
    if (!blackjackSeat || blackjackSeat.user.id !== user.id) {
        throw new Error('Your requested table seat is not available.')
    }
    const minBet = Math.floor(blackjackGetBetAmountMin(blackjackTable.game.type) * 1000)
    const maxBet = Math.floor(blackjackGetBetAmountMax(blackjackTable.game.type) * 1000)
    const currentBetAmount = blackjackSeat.bet ? blackjackGetBetAmount(blackjackSeat.bet.amount) : 0
    const newBetAmount = blackjackGetBetAmount(bet.amount)

    if (newBetAmount <= 0) {
        throw new Error('You’ve provided an invalid bet amount.')
    }
    if (Object.values(bet.amount).some((amount: any) => amount > 0 && amount < minBet)) {
        throw new Error(`You can only bet a min amount of R$${(minBet / 1000).toFixed(2)} per seat.`)
    }
    if (currentBetAmount + newBetAmount > maxBet) {
        throw new Error(`You can only bet a total max amount of R$${(maxBet / 1000).toFixed(2)} per seat.`)
    }
    if ((bet.amount.sideLeft > 0 || bet.amount.sideRight > 0) && bet.amount.main <= 0 && !blackjackSeat.bet) {
        throw new Error('You need to place a main bet before you can place side bets.')
    }
    if (new Date().getTime() >= new Date(blackjackTable.game.updatedAt).getTime() + 10000) {
        throw new Error('Your requested table seat is not allowed to act.')
    }
}

export function blackjackCheckSendBetUser(user: UserWithRelations, amount: number): void {
    if (!user.activeWallet || user.activeWallet.balance < amount) {
        throw new Error('You don’t have enough balance for this action.')
    }
}

export function blackjackCheckSendClearData(data: any): void {
    if (!data || data.table === undefined || isNaN(data.table) || data.table < 0) {
        throw new Error('Invalid table specified.')
    }
}

export function blackjackCheckSendClearTable(table: BlackjackTable | undefined): void {
    if (!table || table.game.state !== 'countdown') {
        throw new Error('This table is not in a state to clear bets.')
    }
}

export function blackjackCheckSendClearSeat(table: BlackjackTable, seats: Player[]): void {
    if (seats.length === 0) {
        throw new Error('You have no bets to clear on this table.')
    }
    if (new Date().getTime() >= new Date(table.game.updatedAt).getTime() + 10000) {
        throw new Error('The betting phase has ended.')
    }
}

export function blackjackCheckSendInsuranceData(data: any): void {
    if (!data || typeof data.insurance !== 'boolean' || data.table === undefined || isNaN(data.table)) {
        throw new Error('Invalid insurance data provided.')
    }
}

export function blackjackCheckSendInsuranceTable(table: BlackjackTable | undefined): void {
    if (!table || table.game.state !== 'running') {
        throw new Error('This table is not in a state to accept insurance bets.')
    }
}

export function blackjackCheckSendInsuranceSeat(table: BlackjackTable, seat: Player | undefined): void {
    if (!seat) {
        throw new Error('You do not have a seat at this table.')
    }
    if (table.playersPos !== 'all' || new Date().getTime() >= new Date(table.game.updatedAt).getTime() + 10000) {
        throw new Error('It is not the time to make an insurance decision.')
    }
    if (seat.bet.actions.length > 1 || seat.bet.actions.includes('insurance') || seat.bet.actions.includes('noinsurance')) {
        throw new Error('You have already made an insurance decision.')
    }
}

export function blackjackCheckSendInsuranceUser(data: any, user: UserWithRelations, cost: number): void {
    if (data.insurance && (!user.activeWallet || user.activeWallet.balance < cost)) {
        throw new Error('You do not have enough balance to place insurance.')
    }
}

export function blackjackCheckSendHitData(data: any): void {
    if (!data || data.table === undefined || isNaN(data.table) || data.seat === undefined || isNaN(data.seat)) {
        throw new Error('Invalid hit data provided.')
    }
}

export function blackjackCheckSendHitTable(table: BlackjackTable | undefined): void {
    if (!table || table.game.state !== 'running') {
        throw new Error('This table is not in a state to be hit.')
    }
}

export function blackjackCheckSendHitSeat(user: UserWithRelations, table: BlackjackTable, seat: Player | undefined): void {
    if (!seat || seat.user.id !== user.id) {
        throw new Error('This is not your seat.')
    }
    if (table.playersPos !== seat.seat || new Date().getTime() >= new Date(table.game.updatedAt).getTime() + 10000) {
        throw new Error('It is not your turn to act.')
    }
    if (seat.bet.actions.includes('double')) {
        throw new Error('You cannot hit after doubling down.')
    }
    if (!seat.bet.actions.includes('split') && (seat.bet.actions.includes('stand') || blackjackGetCardsValue(seat.bet.cards) >= 21)) {
        throw new Error('You cannot hit.')
    }
}

export function blackjackCheckSendStandData(data: any): void {
    if (!data || data.table === undefined || isNaN(data.table) || data.seat === undefined || isNaN(data.seat)) {
        throw new Error('Invalid stand data provided.')
    }
}

export function blackjackCheckSendStandTable(table: BlackjackTable | undefined): void {
    if (!table || table.game.state !== 'running') {
        throw new Error('This table is not in a state to be stood on.')
    }
}

export function blackjackCheckSendStandSeat(user: UserWithRelations, table: BlackjackTable, seat: Player | undefined): void {
    if (!seat || seat.user.id !== user.id) {
        throw new Error('This is not your seat.')
    }
    if (table.playersPos !== seat.seat || new Date().getTime() >= new Date(table.game.updatedAt).getTime() + 10000) {
        throw new Error('It is not your turn to act.')
    }
    if (seat.bet.actions.includes('double') || (!seat.bet.actions.includes('split') && (seat.bet.actions.includes('stand') || blackjackGetCardsValue(seat.bet.cards) >= 21)) || (seat.bet.actions.includes('split') && (seat.bet.actions.filter((a: string) => a === 'stand').length >= 2 || (seat.bet.actions.includes('stand') && (blackjackGetCardsValue(seat.bet.cardsLeft) >= 21 || blackjackGetCardsValue(seat.bet.cardsRight) >= 21)) || (blackjackGetCardsValue(seat.bet.cardsLeft) >= 21 && blackjackGetCardsValue(seat.bet.cardsRight) >= 21)))) {
        throw new Error('You cannot stand.')
    }
}

export function blackjackCheckSendSplitData(data: any): void {
    if (!data || data.table === undefined || isNaN(data.table) || data.seat === undefined || isNaN(data.seat)) {
        throw new Error('Invalid split data provided.')
    }
}

export function blackjackCheckSendSplitTable(table: BlackjackTable | undefined): void {
    if (!table || table.game.state !== 'running') {
        throw new Error('This table is not in a state to be split.')
    }
}

export function blackjackCheckSendSplitSeat(user: UserWithRelations, table: BlackjackTable, seat: Player | undefined): void {
    if (!seat || seat.user.id !== user.id) {
        throw new Error('This is not your seat.')
    }
    if (table.playersPos !== seat.seat || new Date().getTime() >= new Date(table.game.updatedAt).getTime() + 10000) {
        throw new Error('It is not your turn to act.')
    }
    if (seat.bet.actions.includes('split')) {
        throw new Error('You have already split.')
    }
    if (seat.bet.cards.length !== 2 || seat.bet.cards[0].rank !== seat.bet.cards[1].rank) {
        throw new Error('You cannot split these cards.')
    }
}

export function blackjackCheckSendSplitUser(user: UserWithRelations, seat: Player): void {
    const betAmount = 'amountMain' in seat.bet ? seat.bet.amountMain : seat.bet.amount.main
    if (!user.activeWallet || user.activeWallet.balance < betAmount) {
        throw new Error('You do not have enough balance to split.')
    }
}

export function blackjackCheckSendDoubleData(data: any): void {
    if (!data || data.table === undefined || isNaN(data.table) || data.seat === undefined || isNaN(data.seat)) {
        throw new Error('Invalid double down data provided.')
    }
}

export function blackjackCheckSendDoubleTable(table: BlackjackTable | undefined): void {
    if (!table || table.game.state !== 'running') {
        throw new Error('This table is not in a state to be doubled down on.')
    }
}

export function blackjackCheckSendDoubleSeat(user: UserWithRelations, table: BlackjackTable, seat: Player | undefined): void {
    if (!seat || seat.user.id !== user.id) {
        throw new Error('This is not your seat.')
    }
    if (table.playersPos !== seat.seat || new Date().getTime() >= new Date(table.game.updatedAt).getTime() + 10000) {
        throw new Error('It is not your turn to act.')
    }
    if (seat.bet.actions.includes('split')) {
        throw new Error('You cannot double down after splitting.')
    }
    if (seat.bet.cards.length !== 2 || blackjackGetCardsValue(seat.bet.cards) < 9 || blackjackGetCardsValue(seat.bet.cards) > 11) {
        throw new Error('You can only double down with a hand value of 9, 10, or 11.')
    }
}

export function blackjackCheckSendDoubleUser(user: UserWithRelations, seat: Player): void {
    const betAmount = 'amountMain' in seat.bet ? seat.bet.amountMain : seat.bet.amount.main
    if (!user.activeWallet || user.activeWallet.balance < betAmount) {
        throw new Error('You do not have enough balance to double down.')
    }
}

// --- Game Logic Functions ---

const cardRanks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
const cardSuits = ['heart', 'spade', 'diamond', 'club']

export function blackjackGenerateDeck(): Card[] {
    const deck: Card[] = []
    const deckCount = Number.parseInt(process.env.BLACKJACK_DEDECK_COUNT!, 10) || 1
    for (let d = 0; d < deckCount; d++) {
        for (const suit of cardSuits) {
            for (const rank of cardRanks) {
                deck.push({ rank, suit })
            }
        }
    }
    return deck
}

export function blackjackShuffleDeck(deck: Card[], combinedSeed: string): Card[] {
    const hash = crypto.createHash('sha256').update(combinedSeed).digest('hex')
    const chance = new Chance(hash)
    return chance.shuffle(deck)
}

export function blackjackGetCardsValue(cards: Card[]): number {
    let value = 0
    let aceCount = 0
    for (const card of cards) {
        if (card.rank === 'A') {
            aceCount++
            value += 11
        } else if (['K', 'Q', 'J'].includes(card.rank)) {
            value += 10
        } else {
            value += Number.parseInt(card.rank, 10)
        }
    }
    while (value > 21 && aceCount > 0) {
        value -= 10
        aceCount--
    }
    return value
}

export function blackjackCheckCardsSoftSeventeen(cards: Card[]): boolean {
    let value = 0
    let hasAce = false
    for (const card of cards) {
        if (card.rank === 'A') {
            hasAce = true
            value += 1
        } else if (['K', 'Q', 'J'].includes(card.rank)) {
            value += 10
        } else {
            value += Number.parseInt(card.rank, 10)
        }
    }
    return hasAce && value === 7
}

export function blackjackGetBetAmountMin(type: string): number {
    return type === 'whale'
        ? Number.parseFloat(process.env.BLACKJACK_MIN_AMOUNT_WHALE!)
        : Number.parseFloat(process.env.BLACKJACK_MIN_AMOUNT_STANDARD!)
}

export function blackjackGetBetAmountMax(type: string): number {
    return type === 'whale'
        ? Number.parseFloat(process.env.BLACKJACK_MAX_AMOUNT_WHALE!)
        : Number.parseFloat(process.env.BLACKJACK_MAX_AMOUNT_STANDARD!)
}

export function blackjackGetBetAmount(amount: any): number {
    // Handle both Prisma BlackjackBet and local BetAmount types
    if ('amountMain' in amount) {
        // Prisma BlackjackBet
        return Math.floor((amount.amountMain || 0) + (amount.amountSideLeft || 0) + (amount.amountSideRight || 0))
    } else if ('main' in amount) {
        // Local BetAmount
        return Math.floor((amount.main || 0) + (amount.sideLeft || 0) + (amount.sideRight || 0))
    } else {
        // If we have a nested structure
        return Math.floor((amount.amount?.main || 0) + (amount.amount?.sideLeft || 0) + (amount.amount?.sideRight || 0))
    }
}



// --- Sanitization Functions ---

export function blackjackTableListSanitize(tables: BlackjackTable[]): any[] {
    return tables.map(table => blackjackTableSanitize(table))
}

export function blackjackTableSanitize(table: BlackjackTable): any {
    const sanitized = JSON.parse(JSON.stringify(table))

    if (sanitized.game.state !== 'completed') {
        delete sanitized.game.deck
        delete sanitized.game.seedServer
        if (sanitized.game.state === 'running' && sanitized.game.dealerCards.length > 1) {
            sanitized.game.dealerCards[1] = { rank: 'hidden', suit: 'hidden' }
        }
    }

    for (const player of sanitized.players) {
        // This should be replaced with a proper user sanitization function
        player.user = {
            id: player.user.id,
            username: player.user.username,
            avatar: player.user.avatar,
            rank: player.user.rank,
            level: player.user.level,
        }
    }

    return sanitized
}
</file>

<file path="./backend/src/routes/blackjack/utils/fair.ts">
import fetch from 'node-fetch'

interface FairData {
    success: boolean;
    data: any;
}

export function fairGetData(): Promise<FairData> {
    return new Promise(async (resolve, reject) => {
        try {
            const response = await fetch(`https://eos.greymass.com/`, {
                headers: { 'Content-Type': 'application/json' }
            })

            if (response !== undefined && response.status === 200) {
                const data = await response.json()
                resolve({ success: true, data })
            } else {
                reject(new Error('Failed to fetch data'))
            }
        } catch (err) {
            reject(err)
        }
    })
}
</file>

<file path="./backend/src/routes/blackjack/utils/message.schema.ts">
/* SPDX-FileCopyrightText: 2025-present Kriasoft */
/* SPDX-License-Identifier: MIT */

import type { ZodObject, ZodRawShape, ZodTypeAny } from "zod";
import { z } from "zod";

/**
 * Base schema for message metadata.
 * Provides common fields that are available on all messages.
 * Can be extended for specific message types.
 */
export const MessageMetadataSchema = z.object({
  clientId: z.string().optional(),
  timestamp: z.number().int().positive().optional(),
  correlationId: z.string().optional(),
});

/**
 * Base message schema that all specific message types extend.
 * Defines the minimum structure required for routing.
 */
export const MessageSchema = z.object({
  type: z.string(),
  meta: MessageMetadataSchema,
});

/**
 * Standard error codes for WebSocket communication.
 * Used in ErrorMessage payloads for consistent error handling.
 */
export const ErrorCode = z.enum([
  "INVALID_MESSAGE_FORMAT",
  "VALIDATION_FAILED",
  "UNSUPPORTED_MESSAGE_TYPE",
  "AUTHENTICATION_FAILED",
  "AUTHORIZATION_FAILED",
  "RESOURCE_NOT_FOUND",
  "RATE_LIMIT_EXCEEDED",
  "INTERNAL_SERVER_ERROR",
]);

export type ErrorCode = z.infer<typeof ErrorCode>;

/**
 * Creates a type-safe WebSocket message schema with optimized overloads.
 *
 * The schema includes:
 * - A literal type field for routing messages
 * - Metadata for tracking client info and message context
 * - Optional payload for the message data
 *
 * Types are fully inferred for use with WebSocketRouter handlers.
 */
export function messageSchema<T extends string>(
  messageType: T,
): ZodObject<{
  type: z.ZodLiteral<T>;
  meta: typeof MessageMetadataSchema;
}>;

export function messageSchema<
  T extends string,
  P extends Record<string, ZodTypeAny> | ZodTypeAny,
>(
  messageType: T,
  payload: P,
): ZodObject<{
  type: z.ZodLiteral<T>;
  meta: typeof MessageMetadataSchema;
  payload: P extends Record<string, ZodTypeAny> ? ZodObject<P> : P;
}>;

export function messageSchema<T extends string, M extends ZodRawShape>(
  messageType: T,
  payload: undefined,
  meta: ZodObject<M>,
): ZodObject<{
  type: z.ZodLiteral<T>;
  meta: ZodObject<typeof MessageMetadataSchema.shape & M>;
}>;

export function messageSchema<
  T extends string,
  P extends Record<string, ZodTypeAny> | ZodTypeAny,
  M extends ZodRawShape,
>(
  messageType: T,
  payload: P,
  meta: ZodObject<M>,
): ZodObject<{
  type: z.ZodLiteral<T>;
  meta: ZodObject<typeof MessageMetadataSchema.shape & M>;
  payload: P extends Record<string, ZodTypeAny> ? ZodObject<P> : P;
}>;

export function messageSchema<
  T extends string,
  P extends Record<string, ZodTypeAny> | ZodTypeAny | undefined = undefined,
  M extends ZodRawShape = Record<string, never>,
>(
  messageType: T,
  payload?: P,
  meta?: ZodObject<M>,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
): ZodObject<any> {
  const metaSchema = meta
    ? MessageMetadataSchema.extend(meta.shape)
    : MessageMetadataSchema;

  const baseSchema = {
    type: z.literal(messageType),
    meta: metaSchema,
  };

  if (payload === undefined) {
    return z.object(baseSchema);
  }

  const payloadSchema =
    payload instanceof z.ZodType
      ? payload
      : z.object(payload as Record<string, ZodTypeAny>);

  return z.object({
    ...baseSchema,
    payload: payloadSchema,
  });
}

/**
 * Standard error message schema for consistent error responses.
 */
export const ErrorMessage = messageSchema("ERROR", {
  code: ErrorCode,
  message: z.string().optional(),
  context: z.record(z.any()).optional(),
});
</file>

<file path="./backend/src/routes/blackjack/utils/setting.ts">
interface Setting {
    id: number;
}
const settings: Setting | null = null
//
// function mapSettingPathToField(path: string): keyof Setting {
//     // const parts = path.split('.');
//     // if (parts.length < 2) return path as keyof Setting;

//     // const main = parts[0];
//     // const sub = parts[1];

//     // const fieldName = `${main.slice(0, -1)}${sub.charAt(0).toUpperCase() + sub.slice(1)}Enabled`;
//     // return fieldName as keyof Setting;
// }

export async function settingInitDatabase(): Promise<void> {
    try {
        // settings = await prisma.setting.findFirst();

        // if (!settings) {
        //     console.log('No settings found, creating default settings...');
        //     settings = await prisma.setting.create({
        //         data: {
        //             generalMaintenanceEnabled: false,
        //             generalRainEnabled: false,
        //             generalLeaderboardEnabled: false,
        //             generalTipEnabled: false,
        //             generalAffiliateEnabled: false,
        //             generalRewardMultiplier: 1,
        //             chatMode: 'normal',
        //             chatEnabled: false,
        //             chatRoomEnEnabled: true,
        //             chatRoomTrEnabled: true,
        //             chatRoomDeEnabled: true,
        //             chatRoomEsEnabled: true,
        //             chatRoomBegEnabled: true,
        //             chatRoomWhaleEnabled: true,
        //             gameCrashEnabled: true,
        //             gameRollEnabled: true,
        //             gameBlackjackEnabled: true,
        //             gameDuelsEnabled: true,
        //             gameCombatLegendEnabled: true,
        //             gameMinesEnabled: true,
        //             gameTowersEnabled: true,
        //             gameUnboxEnabled: true,
        //             gameBattlesEnabled: true,
        //             gameUpgraderEnabled: true,
        //             robuxDepositEnabled: false,
        //             robuxWithdrawEnabled: false,
        //             limitedDepositEnabled: false,
        //             limitedWithdrawEnabled: false,
        //             steamDepositEnabled: false,
        //             steamWithdrawEnabled: false,
        //             cryptoDepositEnabled: false,
        //             cryptoWithdrawEnabled: false,
        //             giftDepositEnabled: false,
        //             giftWithdrawEnabled: false,
        //             creditDepositEnabled: false,
        //             creditWithdrawEnabled: false,
        //         },
        //     });
        // }
    } catch (err: any) {
        console.error(`Error initializing settings: ${err.message}`)
        process.exit(1)
    }
}

export function settingCheck(): void {
    // if (settings!.generalMaintenanceEnabled === true && user?.rank !== 'admin') {
    //     throw new Error('Site is in maintenance! Please try again later.');
    // }

    // if (valuePath) {
    //     const fieldName = mapSettingPathToField(valuePath);
    //     if (settings![fieldName] === false && user?.rank !== 'admin') {
    //         throw new Error('The action you’ve requested is currently unavailable.');
    //     }
    // }
}

export function settingGet(): Setting | null {
    return settings
}

// export const settingSetValue = async (settingKey: keyof Setting, value: any): Promise<Setting> => {
//     // const updatedSettings = await prisma.setting.update({
//     //     where: { id: settings!.id },
//     //     data: { [settingKey]: value },
//     // });

//     // settings = updatedSettings;
//     // return settings;
// };
</file>

<file path="./backend/src/routes/blackjack/utils/socket.ts">
import type { UserWithRelations } from '#/db/schema'

interface SocketActiveConnections {
  [key: string]: string[]
}

const socketActiveConnections: SocketActiveConnections = {
  general: [],
  crash: [],
  roll: [],
  blackjack: [],
  duels: [],
  combat_legend: [],
  mines: [],
  towers: [],
  unbox: [],
  slots: [],
  battles: [],
  upgrader: [],
  cashier: [],
  admin: [],
}

const socketActiveRequests: string[] = []

export function socketCheckUserData(
  user: UserWithRelations | null,
  checkAuth: boolean
): void {
  if (checkAuth && !user) {
    throw new Error('You need to sign in to perform this action.')
  }
}

export function socketAddConnectionLimit(
  room: string,
  identifier: string
): void {
  if (socketActiveConnections[room]) {
    socketActiveConnections[room].push(identifier.toString())
  }
}

export function socketRemoveConnectionLimit(
  _room: string,
  _identifier: string
): void {
  // This function is a placeholder and does not have any functionality.
}

export function socketCheckAntiSpam(_identifier: string): Promise<void> {
  return new Promise(async (resolve) => {
    resolve()
  })
}

export function socketRemoveAntiSpam(identifier: string): void {
  const index = socketActiveRequests.indexOf(identifier.toString())
  if (index !== -1) {
    socketActiveRequests.splice(index, 1)
  }
}
</file>

<file path="./backend/src/routes/blackjack/utils/user.ts">
import type { UserWithRelations } from '#/db/schema'

interface Rakeback {
    name: string | null;
    percentage: number;
}

export function generalUserGetRakeback(user: UserWithRelations): Rakeback {
    if (!user.vipInfo) {
        return { name: null, percentage: 0 };
    }
    const xp = user.vipInfo.totalXp / 1000
    if (xp >= 1000 * 2000) return { name: 'titanium', percentage: 0.0025 }
    if (xp >= 1000 * 1000) return { name: 'platinum', percentage: 0.002 }
    if (xp >= 1000 * 500) return { name: 'gold', percentage: 0.0015 }
    if (xp >= 1000 * 250) return { name: 'silver', percentage: 0.001 }
    if (xp >= 1000 * 100) return { name: 'bronze', percentage: 0.0005 }
    return { name: null, percentage: 0 }
}
</file>

<file path="./backend/src/routes/blackjack/blackjack.handler.ts">
/* SPDX-FileCopyrightText: 2025-present Kriasoft */
/* SPDX-License-Identifier: MIT */

import db from '#/db'
import type { UserWithRelations } from '#/db/schema'
import { users } from '#/db/schema'
import type { ServerWebSocket } from 'bun'
import { eq } from 'drizzle-orm'
import type { WebSocketData } from '../websocket/websocket.handler'
import {
    BetMessage,
    ClearMessage,
    DoubleMessage,
    HitMessage,
    InsuranceMessage,
    JoinMessage,
    SplitMessage,
    StandMessage,
} from './blackjack.schema'
import {
    blackjackGetData,
    blackjackSendBetSocket,
    blackjackSendClearSocket,
    blackjackSendDoubleSocket,
    blackjackSendHitSocket,
    blackjackSendInsuranceSocket,
    blackjackSendJoinSocket,
    blackjackSendSplitSocket,
    blackjackSendStandSocket,
} from './blackjack.service'
import { settingCheck } from './utils/setting'
import {
    socketAddConnectionLimit,
    socketCheckAntiSpam,
    socketCheckUserData,
    socketRemoveAntiSpam,
    socketRemoveConnectionLimit,
} from './utils/socket'

async function handleMessage(
    ws: ServerWebSocket<WebSocketData>,
    msg: any,
    controllerFunction: any
) {
    if (!ws.data.user) {
        ws.send(
            JSON.stringify({
                type: 'error',
                payload: { message: 'You need to sign in.' },
            })
        )
        return
    }

    try {
        await socketCheckAntiSpam(ws.data.user.id)

        const [user] = await db
            .select()
            .from(users)
            .where(eq(users.id, ws.data.user.id))
        socketCheckUserData(user as UserWithRelations, true)
        settingCheck()

        const result = await controllerFunction(user, msg.payload)

        if (result.broadcasts) {
            for (const broadcast of result.broadcasts) {
                ws.publish(
                    broadcast.topic,
                    JSON.stringify({
                        type: broadcast.schema.type,
                        payload: broadcast.payload,
                    })
                )
            }
        }

        if (result.direct) {
            ws.send(
                JSON.stringify({
                    type: result.direct.schema.type,
                    payload: result.direct.payload,
                })
            )
        }

        ws.send(
            JSON.stringify({ type: msg.schema.type, payload: result.response })
        )
    } catch (err: any) {
        socketRemoveAntiSpam(ws.data.user.id)
        ws.send(
            JSON.stringify({ type: 'error', payload: { message: err.message } })
        )
    }
}

export const blackjackHandler = {
    open(ws: ServerWebSocket<WebSocketData>) {
        const identifier = `${ws.remoteAddress}`
        socketAddConnectionLimit('blackjack', identifier)
        ws.subscribe('blackjack')
        const initData = blackjackGetData()
        ws.send(
            JSON.stringify({
                type: 'init',
                payload: { tables: initData.tables },
            })
        )
    },
    message(ws: ServerWebSocket<WebSocketData>, message: string | Buffer) {
        try {
            const msg = JSON.parse(message.toString())
            switch (msg.type) {
                case 'join':
                    handleMessage(
                        ws,
                        { payload: msg.payload, schema: JoinMessage },
                        blackjackSendJoinSocket
                    )
                    break
                case 'bet':
                    handleMessage(
                        ws,
                        { payload: msg.payload, schema: BetMessage },
                        blackjackSendBetSocket
                    )
                    break
                case 'clear':
                    handleMessage(
                        ws,
                        { payload: msg.payload, schema: ClearMessage },
                        blackjackSendClearSocket
                    )
                    break
                case 'insurance':
                    handleMessage(
                        ws,
                        { payload: msg.payload, schema: InsuranceMessage },
                        blackjackSendInsuranceSocket
                    )
                    break
                case 'hit':
                    handleMessage(
                        ws,
                        { payload: msg.payload, schema: HitMessage },
                        blackjackSendHitSocket
                    )
                    break
                case 'stand':
                    handleMessage(
                        ws,
                        { payload: msg.payload, schema: StandMessage },
                        blackjackSendStandSocket
                    )
                    break
                case 'split':
                    handleMessage(
                        ws,
                        { payload: msg.payload, schema: SplitMessage },
                        blackjackSendSplitSocket
                    )
                    break
                case 'double':
                    handleMessage(
                        ws,
                        { payload: msg.payload, schema: DoubleMessage },
                        blackjackSendDoubleSocket
                    )
                    break
            }
        } catch (error) {
            ws.send(
                JSON.stringify({
                    type: 'error',
                    payload: { message: 'Invalid message format' },
                })
            )
        }
    },
    close(ws: ServerWebSocket<WebSocketData>) {
        const identifier = `${ws.remoteAddress}`
        socketRemoveConnectionLimit('blackjack', identifier)
    },
}
</file>

<file path="./backend/src/routes/blackjack/blackjack.schema.ts">
/* SPDX-FileCopyrightText: 2025-present Kriasoft */
/* SPDX-License-Identifier: MIT */

import { z } from "zod";
import { messageSchema } from './utils/message.schema'
 
export const JoinMessage = messageSchema(
  "join",
  z.object({
    table: z.number().int(),
    seat: z.number().int().min(0).max(4),
  }),
);


/**
 * Client requests to place a bet on one or more seats.
 */
export const BetMessage = messageSchema(
  "bet",
  z.object({
    table: z.number().int(),
    bets: z.array(
      z.object({
        seat: z.number().int().min(0).max(4),
        amount: z.object({
          main: z.number().int().min(0),
          sideLeft: z.number().int().min(0),
          sideRight: z.number().int().min(0),
        }),
      }),
    ),
  }),
);

/**
 * Client requests to clear all their bets at a table.
 */
export const ClearMessage = messageSchema(
  "clear",
  z.object({
    table: z.number().int(),
  }),
);

/**
 * Client responds to an insurance offer.
 */
export const InsuranceMessage = messageSchema(
  "insurance",
  z.object({
    table: z.number().int(),
    insurance: z.boolean(),
  }),
);

/**
 * Client requests to "hit" (take another card).
 */
export const HitMessage = messageSchema(
  "hit",
  z.object({
    table: z.number().int(),
    seat: z.number().int().min(0).max(4),
  }),
);

/**
 * Client requests to "stand" (take no more cards).
 */
export const StandMessage = messageSchema(
  "stand",
  z.object({
    table: z.number().int(),
    seat: z.number().int().min(0).max(4),
  }),
);

/**
 * Client requests to "split" a pair.
 */
export const SplitMessage = messageSchema(
  "split",
  z.object({
    table: z.number().int(),
    seat: z.number().int().min(0).max(4),
  }),
);

/**
 * Client requests to "double down".
 */
export const DoubleMessage = messageSchema(
  "double",
  z.object({
    table: z.number().int(),
    seat: z.number().int().min(0).max(4),
  }),
);

// ============================================================================
// Server-to-Client Message Schemas
// ============================================================================

/**
 * Server broadcasts the initial state of all tables to a new client.
 */
export const InitMessage = messageSchema(
  "init",
  z.object({
    tables: z.array(z.any()), // Replace `z.any()` with a proper table schema if available
  }),
);

/**
 * Server broadcasts an update for a single table.
 */
export const TableUpdateMessage = messageSchema(
  "tableUpdate",
  z.object({
    table: z.any(), // Replace `z.any()` with a proper table schema if available
  }),
);

/**
 * Server sends a direct update to a user's data (e.g., balance change).
 */
export const UserUpdateMessage = messageSchema(
  "userUpdate",
  z.object({
    user: z.any(), // Replace `z.any()` with a proper user schema if available
  }),
);

export const ErrorMessage = messageSchema("error", z.object({ message: z.string() }));
</file>

<file path="./backend/src/routes/blackjack/blackjack.service.ts">
import db from '#/db'
import type { UserWithRelations } from '#/db/schema'
import { blackjackBets, users } from '#/db/schema'
import { nanoid } from '#/utils/nanoid'
import type { ServerWebSocket } from 'bun'
import { eq } from 'drizzle-orm'
import { TableUpdateMessage, UserUpdateMessage } from './blackjack.schema'
import type { BetPayload, BlackjackTable, JoinPayload } from './types'
import {
    blackjackCheckSendBetBets,
    blackjackCheckSendBetData,
    blackjackCheckSendBetSeat,
    blackjackCheckSendBetTable,
    blackjackCheckSendBetUser,
    blackjackCheckSendJoinData,
    blackjackCheckSendJoinTable,
    blackjackCheckSendJoinUser,
    blackjackGetBetAmount,
    blackjackTableListSanitize,
    blackjackTableSanitize,
} from './utils/blackjack.utils'
import { socketRemoveAntiSpam } from './utils/socket'
import { generalUserGetRakeback } from './utils/user'

const blackjackTables: BlackjackTable[] = []
const blackjackBetPendingCounts: { [key: string]: number } = {}

// ============================================================================
// Exported Functions
// ============================================================================

export function blackjackGetData() {
    return { tables: blackjackTableListSanitize(blackjackTables) }
}

export async function blackjackSendJoinSocket(
    ws: ServerWebSocket<any>,
    payload: JoinPayload
) {
    const user = ws.data.user
    blackjackCheckSendJoinData(payload)
    const blackjackIndexTable = blackjackTables.findIndex(
        (element) => element.table === Math.floor(payload.table)
    )
    const blackjackTable = blackjackTables[blackjackIndexTable]
    blackjackCheckSendJoinTable(payload, user, blackjackTable)
    blackjackCheckSendJoinUser(user, blackjackTable!)
    if (!blackjackTable) {
        throw new Error('Table not found')
    }
    const level = Math.floor(
        (user!.vipInfo[0]!.totalXp / 1000 / 100) ** (1 / 3)
    )
    const rakeback = generalUserGetRakeback(user)

    blackjackTable.players.push({
        seat: payload.seat,
        user: {
            ...user,
            level,
            rakeback: rakeback.name,
        },
        bet: null,
    })

    blackjackTable.players.sort((a, b) => a.seat - b.seat)

    if (blackjackTable.game.state === 'created') {
        blackjackGameCountdown()
    }

    return {
        broadcasts: [
            {
                topic: 'blackjack',
                schema: TableUpdateMessage,
                payload: { table: blackjackTableSanitize(blackjackTable) },
            },
        ],
        response: { success: true },
    }
}

export async function blackjackSendBetSocket(
    user: UserWithRelations,
    payload: BetPayload
) {
    const { table: tableId, bets } = payload
    const blackjackIndexTable = blackjackTables.findIndex((t) => t.table === tableId)
    const blackjackTable = blackjackTables[blackjackIndexTable]
    if (!blackjackTable) {
        throw new Error('Table not found')
    }
    blackjackCheckSendBetData(payload)
    blackjackCheckSendBetTable(blackjackTable)
    blackjackCheckSendBetBets(bets)

    let amountTotal = 0
    for (const bet of bets) {
        const blackjackSeat = blackjackTable.players.find(
            (p) => p.seat === bet.seat
        )
        blackjackCheckSendBetSeat(bet, user, blackjackTable, blackjackSeat)
        amountTotal += blackjackGetBetAmount(bet.amount)
    }
    blackjackCheckSendBetUser(user, amountTotal)

    try {
        blackjackBetPendingCounts[tableId.toString()] =
            (blackjackBetPendingCounts[tableId.toString()] || 0) + 1

        const result = await db.transaction(async (tx) => {
            const [updatedUser] = await tx
                .update(users)
                .set({
                    activeWalletId: user.activeWallet!.id,
                })
                .where(eq(users.id, user.id))
                .returning()

            const betPromises = bets.map(async (betData) => {
                const blackjackSeat = blackjackTable.players.find(
                    (p) => p.seat === betData.seat
                )
                const betId = blackjackSeat?.bet?.id

                if (betId) {
                    const [bet] = await tx
                        .select()
                        .from(blackjackBets)
                        .where(eq(blackjackBets.id, betId))
                    const amt = {
                        main: (bet!.amount as any).main + betData.amount.main,
                        sideLeft:
                            (bet!.amount as any).sideLeft + betData.amount.sideLeft,
                        sideRight:
                            (bet!.amount as any).sideRight +
                            betData.amount.sideRight,
                    }
                    return tx
                        .update(blackjackBets)
                        .set({ amount: amt })
                        .where(eq(blackjackBets.id, betId))
                        .returning()
                } else {
                    return tx
                        .insert(blackjackBets)
                        .values({
                            id: nanoid(),
                            amount: {
                                main: Math.floor(betData.amount.main),
                                sideLeft: Math.floor(betData.amount.sideLeft),
                                sideRight: Math.floor(
                                    betData.amount.sideRight
                                ),
                            },
                            cards: [],
                            actions: ['created'],
                            seat: betData.seat,
                            gameId: blackjackTable.game.id,
                            userId: user.id,
                        })
                        .returning()
                }
            })

            const createdOrUpdatedBets = await Promise.all(betPromises)
            return { updatedUser, bets: createdOrUpdatedBets }
        })

        result.bets.forEach((dbBet) => {
            const seatIndex = blackjackTable.players.findIndex(
                (p) => p.seat === dbBet[0].seat
            )
            if (seatIndex !== -1 && blackjackTable.players[seatIndex]) {
                // @ts-ignore
                blackjackTable.players[seatIndex].bet = dbBet[0]
            }
        })

        return {
            broadcasts: [
                {
                    topic: 'blackjack',
                    schema: TableUpdateMessage,
                    payload: { table: blackjackTableSanitize(blackjackTable) },
                },
            ],
            direct: {
                schema: UserUpdateMessage,
                payload: { user: result.updatedUser },
            },
            response: { success: true, user: result.updatedUser },
        }
    } finally {
        blackjackBetPendingCounts[tableId.toString()]--
        socketRemoveAntiSpam(user.id)
    }
}

export async function blackjackSendClearSocket() {
    // Implementation goes here
}

export async function blackjackSendInsuranceSocket() {
    // Implementation goes here
}

export async function blackjackSendHitSocket() {
    // Implementation goes here
}

export async function blackjackSendStandSocket() {
    // Implementation goes here
}

export async function blackjackSendSplitSocket() {
    // Implementation goes here
}

export async function blackjackSendDoubleSocket() {
    // Implementation goes here
}

function blackjackGameCountdown() {
    // Implementation goes here
}
</file>

<file path="./backend/src/routes/blackjack/types.ts">
/**
 * Defines the structure for any message coming from a client WebSocket.
 */
export interface ClientMessage<T = unknown> {
    event: string;
    payload: T;
    requestId?: string; // Optional, but required for messages expecting a direct response
}

/**
 * Defines the structure for a direct response from the server to a client.
 */
export interface ServerResponse<T = unknown> {
    event: 'response';
    requestId: string; // Mirrors the requestId from the client's message
    payload: T | null;
    error: { message: string } | null;
}

/**
 * Defines the structure for a broadcast message from the server to a topic.
 */
export interface ServerBroadcast<T = unknown> {
    event: string; // e.g., 'tableUpdate'
    payload: T;
}

/**
 * Defines the data context attached to each authenticated WebSocket connection.
 */
export interface BlackjackWebSocketContext {
    id: string; // User ID
    username: string;
    rank: string;
}

// You can also define specific payload types for each event
export interface JoinPayload {
    table: number;
    seat: number;
}

export interface BetPayload {
    table: number;
    bets: {
        seat: number;
        amount: {
            main: number;
            sideLeft: number;
            sideRight: number;
        };
    }[];
}

export interface BlackjackTable {
    table: number;
    game: any;
    players: Player[];
    playersPos: number | 'all' | null;
}

export interface Player {
    seat: number;
    user: any;
    bet: any;
}

// We can add more payload types here as we refactor other events...
</file>

<file path="./backend/src/routes/common/notifications.handler.ts">
import type { ServerWebSocket } from 'bun'
import type { Buffer } from 'node:buffer'
import { eventEnvelope } from 'shared/ws/envelope'
import type { NotificationsEvents } from 'shared/ws/contracts'

type WS = ServerWebSocket<any>

// Topic channel base; messages are per-user when possible
const CHANNEL = 'notifications'

export const notificationsHandler = {
    open(ws: WS) {
        console.log('[WS][notifications] open')
        ws.subscribe(CHANNEL)
    },

    close(ws: WS) {
        console.log('[WS][notifications] close')
        ws.unsubscribe(CHANNEL)
    },

    /**
     * Accepts raw messages and, if strings with simple commands, rebroadcasts typed events.
     * This keeps compatibility with existing publisher code that may send raw strings.
     * Prefer publishing through typed helpers in services moving forward.
     */
    message(ws: WS, message: string | Buffer) {
        try {
            const raw = typeof message === 'string' ? message : message.toString()
            // Minimal compatibility: accept JSON with { type: 'push'|'read', ... }
            let data: any
            try {
                data = JSON.parse(raw)
            } catch {
                console.log('[WS][notifications] non-JSON payload ignored:', raw)
                return
            }

            if (data?.type === 'push' && data?.notification && data?.userId) {
                const payload: NotificationsEvents['notifications.push'] = {
                    userId: String(data.userId),
                    notification: {
                        id: String(data.notification.id ?? crypto.randomUUID?.() ?? Date.now().toString()),
                        title: String(data.notification.title ?? ''),
                        message: String(data.notification.message ?? ''),
                        createdAt: String(data.notification.createdAt ?? new Date().toISOString()),
                        read: Boolean(data.notification.read ?? false),
                    },
                    ts: Date.now(),
                }
                const envelope = eventEnvelope('notifications', 'notifications.push', payload)
                const topic = `${CHANNEL}-${payload.userId}`
                ws.publish(topic, JSON.stringify(envelope))
                return
            }

            if (data?.type === 'read' && data?.notificationId && data?.userId) {
                const payload: NotificationsEvents['notifications.read'] = {
                    userId: String(data.userId),
                    notificationId: String(data.notificationId),
                    ts: Date.now(),
                }
                const envelope = eventEnvelope('notifications', 'notifications.read', payload)
                const topic = `${CHANNEL}-${payload.userId}`
                ws.publish(topic, JSON.stringify(envelope))
                return
            }

            console.log('[WS][notifications] unrecognized payload:', data)
        } catch (e) {
            console.error('[WS][notifications] message handler error:', e)
        }
    },
}
</file>

<file path="./backend/src/routes/games/games.controller.ts">
import type { Context } from 'hono'
import type { AuthSessionType, UserType } from '#/db/schema'

import * as service from './games.service'

export async function getGameCategories(c: Context) {
    const data = service.findGameCategories()
    return c.json(data)
}

export async function getAllGames(c: Context) {
    console.log('here')
    const data = await service.findAllGames()
    return c.json(data)
}

export async function searchGames(c: Context) {
    const { game_categories_slug, page, limit } = c.req.query()
    const data = await service.searchGames({
        game_categories_slug,
        page: page ? Number.parseInt(page) : 1,
        limit: limit ? Number.parseInt(limit) : 10,
    })
    return c.json(data)
}

export async function getUserGames(c: Context) {
    const { game_categories_slug, page, limit } = c.req.query()
    const user = c.get('user') as UserType
    const data = await service.findUserGames(user.id, {
        game_categories_slug,
        page: page ? Number.parseInt(page) : 1,
        limit: limit ? Number.parseInt(limit) : 10,
    })
    return c.json(data)
}

export async function favoriteGame(c: Context) {
    const user = c.get('user') as UserType
    const { add_game, del_game } = await c.req.json()
    if (add_game) {
        await service.addFavoriteGame(user.id, add_game)
    } else if (del_game) {
        await service.removeFavoriteGame(user.id, del_game)
    }
    return c.json({ message: 'Success' })
}

export async function getFavoriteGames(c: Context) {
    const user = c.get('user') as UserType
    const data = await service.findFavoriteGames(user.id)
    return c.json(data)
}

export async function enterGame(c: Context) {
    const user = c.get('user') as UserType
    const authSession = c.get('authSession') as AuthSessionType
    const token = c.get('token') as string
    const gameId = c.req.param('id')

    const data = await service.enterGame(c, user, authSession, gameId, token)
    return c.json(data)
}

export async function leaveGame(c: Context) {
    const authSession = c.get('authSession') as AuthSessionType
    await service.leaveGame(authSession.id)
    return c.json({ message: 'Success' })
}

export async function getGameHistory(c: Context) {
    const user = c.get('user') as UserType
    const data = await service.findGameHistory(user.id)
    return c.json(data)
}
export async function topWins(c: Context) {
    const data = await service.findTopWins()
    return c.json(data)
}
</file>

<file path="./backend/src/routes/games/games.router.ts">
import { gameResponseSchema } from '#/db/schema'
import { notFoundSchema } from '#/lib/constants'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { sessionMiddleware } from '#/middlewares/session.middleware'
import { createRoute, z } from '@hono/zod-openapi'

import * as controller from './games.controller'

const tags = ['Games']

const getGameCategories = createRoute({
    method: 'get',
    path: '/games/categories',
    tags,
    responses: {
        200: {
            description: 'A list of game categories',
            content: {
                'application/json': {
                    schema: z.array(z.string()),
                },
            },
        },
    },
})

const getAllGames = createRoute({
    method: 'get',
    path: '/games/all',
    tags,
    responses: {
        200: {
            description: 'A list of all games',
            content: {
                'application/json': {
                    schema: z.array(gameResponseSchema.openapi('Game')),
                },
            },
        },
    },
})

const searchGames = createRoute({
    method: 'get',
    path: '/games/search',
    tags,
    request: {
        query: z.object({
            game_categories_slug: z.string().optional(),
            page: z.string().optional(),
            limit: z.string().optional(),
        }),
    },
    responses: {
        200: {
            description: 'A list of games matching the search criteria',
            content: {
                'application/json': {
                    schema: z.object({
                        games: z.array(gameResponseSchema),
                        total: z.number(),
                    }),
                },
            },
        },
    },
})

const getUserGames = createRoute({
    method: 'get',
    path: '/user/games',
    tags,
    request: {
        query: z.object({
            game_categories_slug: z.string(),
            page: z.string().optional(),
            limit: z.string().optional(),
        }),
    },
    responses: {
        200: {
            description:
                'A list of games for the current user (e.g., favorites or history)',
            content: {
                'application/json': {
                    schema: z.object({
                        games: z.array(gameResponseSchema), // This might need to be adjusted for history
                        total: z.number(),
                    }),
                },
            },
        },
    },
})

const favoriteGame = createRoute({
    method: 'post',
    path: '/user/games/favorite',
    tags,
    request: {
        body: {
            content: {
                'application/json': {
                    schema: z.object({
                        add_game: z.string().optional(),
                        del_game: z.string().optional(),
                    }),
                },
            },
        },
    },
    responses: {
        200: {
            description: 'Success',
        },
    },
})

const getFavoriteGames = createRoute({
    method: 'get',
    path: '/user/games/favorites',
    tags,
    responses: {
        200: {
            description: 'A list of the user favorite game IDs',
            content: {
                'application/json': {
                    schema: z.array(z.string()),
                },
            },
        },
    },
})

const enterGame = createRoute({
    method: 'post',
    path: '/games/{id}/enter',
    middleware: [authMiddleware, sessionMiddleware],

    tags,
    request: {
        params: z.object({
            id: z.string(),
        }),
    },
    responses: {
        200: {
            description: 'Game session details',
            content: {
                'application/json': {
                    schema: z.object({
                        webUrl: z.string(),
                        gameConfig: z.object({
                            authToken: z.string(),
                            gameSessionId: z.string(),
                            userId: z.string(),
                            gameName: z.string(),
                            lang: z.string(),
                            currency: z.string(),
                            operator: z.string(),
                            provider: z.string(),
                            depositUrl: z.string(),
                            lobbyUrl: z.string(),
                            mode: z.string(),
                            rgsApiBase: z.string(),
                            cdn: z.string(),
                            baseCdn: z.string(),
                        }),
                    }),
                },
            },
        },
        404: {
            description: 'Not Found',
            content: {
                'application/json': {
                    schema: notFoundSchema,
                },
            },
        },
    },
})

const leaveGame = createRoute({
    method: 'post',
    path: '/games/leave',
    middleware: [authMiddleware, sessionMiddleware],
    tags,
    responses: {
        200: {
            description: 'Success',
        },
    },
})

const router = createRouter()

// Public routes - no authentication or session required
router.openapi(getAllGames, controller.getAllGames as any)
router.openapi(getGameCategories, controller.getGameCategories as any)

// Routes that require authentication but not a game session
router.openapi(searchGames, controller.searchGames as any)
router.openapi(getUserGames, controller.getUserGames as any)
router.openapi(favoriteGame, controller.favoriteGame)
router.openapi(getFavoriteGames, controller.getFavoriteGames as any)

// Routes that require both authentication and a game session
router.openapi(enterGame, controller.enterGame as any)
router.openapi(leaveGame, controller.leaveGame)

export default router
</file>

<file path="./backend/src/routes/games/games.service.ts">
import { and, desc, eq, inArray, sql } from 'drizzle-orm'
import type { Context } from 'hono'

import { GameCategory, games, favoriteGames, gameHistory } from '#/db/schema'
import db from '#/db'
import { nanoid } from '#/utils/nanoid'
import type { AuthSessionType, UserType } from '#/db/schema'
import { SessionManager } from '#/lib/session.manager'

export function findGameCategories() {
    return GameCategory.enumValues
}

export async function findAllGames() {
    return db.query.games.findMany({
        columns: {
            id: true,
            name: true,
            title: true,
            category: true,
            developer: true,
            thumbnailUrl: true,
            isActive: true,
            createdAt: true,
            updatedAt: true,
        },
        orderBy: desc(games.name),
    })
}

export async function searchGames(params: {
    game_categories_slug?: string
    page: number
    limit: number
}) {
    const where = params.game_categories_slug
        ? eq(games.category, params.game_categories_slug)
        : undefined
    const _games = await db.query.games.findMany({
        where,
        limit: params.limit,
        offset: (params.page - 1) * params.limit,
    })
    const totalCount = await db
        .select({ count: sql<number>`count(*)` })
        .from(games)
        .where(where)
    return { games: _games, total: totalCount[0].count }
}

export async function findUserGames(
    userId: string,
    params: { game_categories_slug: string; page: number; limit: number }
) {
    const page = params.page || 1
    const limit = params.limit || 10
    const offset = (page - 1) * limit

    if (params.game_categories_slug === 'favorite') {
        const favoriteGameIds = await db.query.favoriteGames.findMany({
            where: eq(favoriteGames.userId, userId),
            columns: { gameId: true },
        })

        if (favoriteGameIds.length === 0) return { games: [], total: 0 }

        const gameIds = favoriteGameIds.map((f) => f.gameId)

        const favGames = await db.query.games.findMany({
            where: inArray(games.id, gameIds),
            limit,
            offset,
        })
        return { games: favGames, total: gameIds.length }
    } else if (params.game_categories_slug === 'history') {
        const history = await db.query.gameHistory.findMany({
            where: eq(gameHistory.userId, userId),
            orderBy: desc(gameHistory.createdAt),
            limit,
            offset,
        })

        const totalCount = await db
            .select({ count: sql<number>`count(*)` })
            .from(gameHistory)
            .where(eq(gameHistory.userId, userId))

        return { games: history, total: totalCount[0].count }
    }
    return { games: [], total: 0 }
}

export async function addFavoriteGame(userId: string, gameId: string) {
    await db
        .insert(favoriteGames)
        .values({ id: nanoid(), userId, gameId })
        .onConflictDoNothing()
}

export async function removeFavoriteGame(userId: string, gameId: string) {
    await db
        .delete(favoriteGames)
        .where(
            and(
                eq(favoriteGames.userId, userId),
                eq(favoriteGames.gameId, gameId)
            )
        )
}

export async function findFavoriteGames(userId: string): Promise<string[]> {
    const favorites = await db
        .select({ gameId: favoriteGames.gameId })
        .from(favoriteGames)
        .where(eq(favoriteGames.userId, userId))
    return favorites.map((f) => f.gameId)
}

export async function enterGame(
    c: Context,
    user: UserType,
    authSession: AuthSessionType,
    gameId: string,
    token: string
) {
    const game = await db.query.games.findFirst({ where: eq(games.id, gameId) })
    if (!game) {
        throw new Error('Game not found')
    }

    // This logic seems to be session-specific and might need adjustment based on your caching strategy.
    // For now, we'll assume a simple session creation.
    const newSession = {
        id: nanoid(),
        authSessionId: authSession.id,
        userId: user.id,
        gameId,
        status: 'ACTIVE' as const,
        createdAt: new Date(),
    }
    console.log(newSession)

    // await db.insert(GameSession).values(newSession)
    SessionManager.startGameSession(c, game.name)

    const gameConfig = {
        authToken: token,
        gameSessionId: newSession.id,
        userId: user.id,
        gameName: game.name.replace('RTG', ''),
        lang: 'en', // Assuming language, adjust as needed
        currency: 'USD', // Assuming currency, adjust as needed
        operator: 'redtiger',
        provider: 'kronos',
        depositUrl: '/wallet/deposit',
        lobbyUrl: '/',
        mode: 'real',
        rgsApiBase: `http://localhost:9999/rpc/spin-data/redtiger/platform`,
        cdn: `https://cdn-eu.cloudedge.info/all/games/slots/${game.name}/`,
        baseCdn: 'https://cdn-eu.cloudedge.info/all/games/',
    }

    return {
        webUrl: '/games/redtiger/loader.html',
        gameConfig,
    }
}

export async function leaveGame(authSessionId: string) {
    // This logic would involve updating the game session status to COMPLETED or ABANDONED
    // and persisting any final data from cache to the database.
    console.log(`Leaving game for auth session: ${authSessionId}`)
}

export async function findGameHistory(userId: string) {
    const records = await db.query.gameHistory.findMany({
        where: eq(gameHistory.userId, userId),
        orderBy: desc(gameHistory.createdAt),
    })

    const totalCountResult = await db
        .select({ count: sql<number>`count(*)` })
        .from(gameHistory)
        .where(eq(gameHistory.userId, userId))
    const totalCount = totalCountResult[0].count

    return {
        total_pages: Math.ceil(totalCount / 10),
        record: records,
    }
}
export async function findTopWins() {
    const records = await db.query.games.findMany({
        orderBy: desc(games.totalWon),
    })

    const totalCountResult = await db
        .select({ count: sql<number>`count(*)` })
        .from(games)
    // .where(eq(Game.id, userId))
    const totalCount = totalCountResult[0].count

    return {
        total_pages: Math.ceil(totalCount / 10),
        record: records,
    }
}
</file>

<file path="./backend/src/routes/gamespins/gamespins.controller.ts">
import db from '#/db'
import { gameSpins } from '#/db/schema'
import { desc, gt } from 'drizzle-orm'
import type { Context } from 'hono'

export async function getTopWins(c: Context) {
    let result = await db
        .select()
        .from(gameSpins)
        .where(gt(gameSpins.grossWinAmount, 0))
        .orderBy(desc(gameSpins.grossWinAmount))
    // .limit(limit)
    if (result === undefined)
        result = []
    return c.json(result)
}
</file>

<file path="./backend/src/routes/gamespins/gamespins.router.ts">
import { gameSpinResponseSchema } from '#/db'
import { notFoundSchema } from '#/lib/constants'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { createRoute } from '@hono/zod-openapi'
import * as controller from './gamespins.controller'
import { z } from 'zod'

const tags = ['Game Spins']

const getTopWins = createRoute({
    method: 'get',
    path: '/gamespins/topwins',
    middleware: [authMiddleware],
    tags,
    responses: {
        200: {
            description: 'A list of top winning game spins',
            content: {
                'application/json': {
                    schema: z.array(gameSpinResponseSchema.openapi('GameSpin')),
                },
            },
        },
        401: {
            description: 'Unauthorized',
            content: {
                'application/json': {
                    schema: notFoundSchema,
                },
            },
        },
    },
})

// const router = createRouter()

// router.use('/gamespins/*', sessionMiddleware)
// router.use('/gamespins/*', authMiddleware)

// router.openapi(getTopWins, async (c) => {
//     const spins = await controller.getTopWins(10)
//     return c.json(spins, HttpStatusCodes.OK)
// })

// export default router
const router = createRouter()
    .openapi(getTopWins, controller.getTopWins as any)

export default router
</file>

<file path="./backend/src/routes/operator/operator.controller.ts">
import type { Context } from 'hono'

import type { OperatorType } from '#/db'

import * as service from './operator.service'

export async function getOperators(c: Context) {
    const operators = await service.getOperators()
    return c.json(operators)
}

export async function getOperatorProducts(c: Context) {
    const operator = c.get('operator') as OperatorType
    if (!operator) {
        return c.json({ error: 'Operator not found in context' }, 401)
    }
    const products = await service.getProductsByOperatorId(operator.id)
    return c.json(products)
}
</file>

<file path="./backend/src/routes/operator/operator.router.ts">
import { createRoute, z } from '@hono/zod-openapi'

import { selectOperatorSchema, productResponseSchema } from '#/db'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'

import * as controller from './operator.controller'

const tags = ['Operator']

const getOperatorsRoute = createRoute({
    method: 'get',
    path: '/operators',
    tags,
    summary: 'Get all operators',
    responses: {
        200: {
            description: 'Returns a list of operators.',
            content: {
                'application/json': {
                    schema: z.array(selectOperatorSchema),
                },
            },
        },
        401: { description: 'Unauthorized' },
    },
})

const getOperatorProductsRoute = createRoute({
    method: 'get',
    path: '/operators/products',
    tags,
    summary: 'Get all products for the current users operator',
    responses: {
        200: {
            description: 'Returns a list of products.',
            content: {
                'application/json': {
                    schema: z.array(productResponseSchema),
                },
            },
        },
        401: { description: 'Unauthorized' },
    },
})

const router = createRouter()

router.use('/operators/*', authMiddleware)

router.openapi(getOperatorsRoute, controller.getOperators as any)
router.openapi(getOperatorProductsRoute, controller.getOperatorProducts as any)

export default router
</file>

<file path="./backend/src/routes/operator/operator.service.ts">
import { eq } from 'drizzle-orm'

import db from '#/db'
import { products } from '#/db/schema'

export async function getOperators() {
    return db.query.operators.findMany()
}

export async function getProductsByOperatorId(operatorId: string) {
    return db.query.products.findMany({
        where: eq(products.operatorId, operatorId),
    })
}
</file>

<file path="./backend/src/routes/recordings/recordings.controller.ts">
import type { Context } from 'hono'
import { recordingsService } from './recordings.service'

export const recordingsController = {
    async uploadRecording(c: Context) {
        try {
            const body = await c.req.parseBody()
            const file = body.recording as File
            const sessionId = body.sessionId as string

            if (!file || !sessionId) {
                return c.json({ error: 'Missing recording file or session ID.' }, 400)
            }

            const result = await recordingsService.saveRecording(file, sessionId)
            return c.json(result)
        } catch (error) {
            console.error('Error uploading recording:', error)
            return c.json({ error: 'Failed to process recording upload.' }, 500)
        }
    },
}
</file>

<file path="./backend/src/routes/recordings/recordings.router.ts">
import { Hono } from 'hono'
import { recordingsController } from './recordings.controller'

const recordingsRouter = new Hono()

recordingsRouter.post('/upload', recordingsController.uploadRecording)

export default recordingsRouter
</file>

<file path="./backend/src/routes/recordings/recordings.service.ts">
import fs from 'node:fs/promises'
import path from 'node:path'
import { Buffer } from 'node:buffer'

const recordingsDir = path.resolve(process.cwd(), 'recordings')

export const recordingsService = {
    async saveRecording(file: File, sessionId: string) {
        try {
            await fs.mkdir(recordingsDir, { recursive: true })

            const fileName = `session-${sessionId}-${Date.now()}.webm`
            const filePath = path.join(recordingsDir, fileName)

            const buffer = await file.arrayBuffer()
            await fs.writeFile(filePath, Buffer.from(buffer))

            return {
                success: true,
                message: 'Recording saved successfully.',
                filePath,
            }
        } catch (error) {
            console.error('Failed to save recording:', error)
            throw new Error('Could not save the recording.')
        }
    },
}
</file>

<file path="./backend/src/routes/redtiger/data.ts">
export const atlantis_settings = {
    "success": true,
    "result": {
        "user": {
            "balance": {
                "cash": "100.00",
                "freeBets": "0.00",
                "sessionCash": "0.00",
                "sessionFreeBets": "0.00",
                "bonus": "0.00"
            },
            "notifications": [],
            "messages": [],
            "bonuses": [],
            "tournaments": [],
            "vouchers": [],
            "userId": 8594797,
            "country": "US",
            "casino": "NONE",
            "vertical": "Default",
            "currency": {
                "code": "GBP",
                "symbol": "£"
            },
            "token": "5807037a605ac214e3564360958ef6fa1f95e2c6b7c4c31164fae8cba5a7b00c1cb8942881b4dfb93bc7dbcda979ae41fd1b8456539a196103ba496d8766c927",
            "sessionId": "0",
            "sessionNetPosition": "0.00",
            "aamsParticipationId": null,
            "aamsSessionId": null,
            "depositedAmount": "0.00",
            "maxDeposit": "0.00",
            "canGamble": false,
            "lastWin": "0.00",
            "prevRounds": [],
            "limits": {
                "maxGambleStake": "10000.00",
                "maxTotalStake": {
                    "total": "19.22"
                },
                "minTotalStake": {
                    "total": "0.20"
                },
                "spinDuration": null
            },
            "stakes": {
                "defaultIndex": 5,
                "lastIndex": 5,
                "types": [
                    "0.2",
                    "0.4",
                    "0.6",
                    "0.8",
                    "1",
                    "2",
                    "4",
                    "6",
                    "8",
                    "10"
                ]
            },
            "autoplay": {
                "type": "modal",
                "options": {
                    "spins": {
                        "values": [
                            "10",
                            "20",
                            "30",
                            "50",
                            "100"
                        ],
                        "default": 10
                    },
                    "stopOnFeature": {
                        "enabled": true
                    },
                    "stopOnLossLimits": {
                        "mandatory": true,
                        "enabled": true,
                        "values": [
                            "10",
                            "20",
                            "30",
                            "50",
                            "100",
                            "200",
                            "500",
                            "1000",
                            "5000",
                            "10000"
                        ],
                        "default": 0
                    },
                    "stopOnWin": {
                        "enabled": true,
                        "values": [
                            "10",
                            "20",
                            "30",
                            "50",
                            "100",
                            "200",
                            "500",
                            "1000",
                            "5000",
                            "10000",
                            "50000",
                            "100000"
                        ]
                    },
                    "hasRestart": false
                }
            },
            "serverTime": "2025-07-22 07:15:01",
            "additional": null
        },
        "game": {
            "cols": 5,
            "rows": 4,
            "offset": 1,
            "extraWin": {
                "bigWin": "15.00",
                "superWin": "50.00",
                "megaWin": "100.00"
            },
            "lines": [
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    0,
                    1,
                    0,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    1,
                    2,
                    1
                ],
                [
                    2,
                    1,
                    2,
                    1,
                    2
                ],
                [
                    2,
                    3,
                    2,
                    3,
                    2
                ],
                [
                    3,
                    2,
                    3,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    2,
                    1,
                    0
                ],
                [
                    2,
                    1,
                    0,
                    1,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    1
                ],
                [
                    3,
                    2,
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    0,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    2,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    1,
                    2,
                    2
                ],
                [
                    2,
                    2,
                    3,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    2,
                    3,
                    3
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    2,
                    2,
                    1
                ],
                [
                    2,
                    1,
                    1,
                    1,
                    2
                ],
                [
                    2,
                    3,
                    3,
                    3,
                    2
                ],
                [
                    3,
                    2,
                    2,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2
                ],
                [
                    2,
                    2,
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    2,
                    3,
                    3
                ],
                [
                    3,
                    3,
                    2,
                    1,
                    1
                ]
            ],
            "tiles": [
                {
                    "id": 1,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.10",
                        "0.30",
                        "0.50"
                    ]
                },
                {
                    "id": 2,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.10",
                        "0.40",
                        "0.80"
                    ]
                },
                {
                    "id": 3,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.20",
                        "0.50",
                        "1.00"
                    ]
                },
                {
                    "id": 4,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.20",
                        "0.60",
                        "1.20"
                    ]
                },
                {
                    "id": 5,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.50",
                        "1.00",
                        "2.00"
                    ]
                },
                {
                    "id": 6,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.60",
                        "1.20",
                        "2.50"
                    ]
                },
                {
                    "id": 7,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.70",
                        "1.50",
                        "3.00"
                    ]
                },
                {
                    "id": 8,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.80",
                        "2.00",
                        "4.00"
                    ]
                },
                {
                    "id": 9,
                    "type": "normal",
                    "pays": [
                        "0.00",
                        "0.00",
                        "1.00",
                        "2.50",
                        "5.00"
                    ]
                },
                {
                    "id": 10,
                    "type": "scatter",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00"
                    ]
                },
                {
                    "id": 11,
                    "type": "freeSpins",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00"
                    ]
                },
                {
                    "id": 12,
                    "type": "freeSpins",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00"
                    ]
                },
                {
                    "id": 13,
                    "type": "wild",
                    "pays": [
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00"
                    ]
                }
            ],
            "reelsBuffer": [
                [
                    [
                        5
                    ],
                    [
                        5,
                        8,
                        2,
                        8
                    ],
                    [
                        6
                    ]
                ],
                [
                    [
                        3
                    ],
                    [
                        8,
                        1,
                        4,
                        4
                    ],
                    [
                        4
                    ]
                ],
                [
                    [
                        2
                    ],
                    [
                        4,
                        2,
                        2,
                        4
                    ],
                    [
                        2
                    ]
                ],
                [
                    [
                        3
                    ],
                    [
                        3,
                        6,
                        2,
                        2
                    ],
                    [
                        6
                    ]
                ],
                [
                    [
                        2
                    ],
                    [
                        7,
                        6,
                        7,
                        1
                    ],
                    [
                        2
                    ]
                ]
            ],
            "features": [
                "FreeSpins_cheap",
                "FreeSpins_normal",
                "FreeSpins_expensive",
                "FreeSpins"
            ],
            "singlePayline": true,
            "gameModes": [],
            "hasState": false,
            "version": "4.0.1",
            "rtp": {
                "game": {
                    "default": "95.77"
                }
            },
            "volatilityIndex": "3.15",
            "maxMultiplier": "5202.80",
            "maxWinlineHitRate": "0.080000",
            "maxMultiplierHitRate": "0.000002",
            "maxMultiplierHitFrequency": "50000000",
            "maxMultiplierWinLines": null,
            "maxMultiplierWinLinesHitRate": null,
            "maxMultiplierWinLinesHitFrequency": null,
            "hasGambleGame": false,
            "gameType": "slot",
            "stateful": true,
            "hasChoices": false,
            "stateExpireDays": 12,
            "hasBonuses": false,
            "pendingRoundDays": 0,
            "skin": null,
            "hasFeatureBuy": false
        },
        "launcher": {
            "version": "1.31.5"
        },
        "jackpots": null,
        "skins": {
            "game": null,
            "jackpot": null,
            "tournament": null
        }
    }
}

export const atlantis_spin = {
    "success": true,
    "result": {
        "transactions": {
            "roundId": 220688904
        },
        "user": {
            "balance": {
                "cash": {
                    "atStart": "100.00",
                    "afterBet": "98.00",
                    "atEnd": "100.60"
                },
                "freeBets": {
                    "atStart": "0.00",
                    "afterBet": "0.00",
                    "atEnd": "0.00"
                },
                "bonus": {
                    "atStart": "0.00",
                    "afterBet": "0.00",
                    "atEnd": "0.00"
                },
                "sessionCash": {
                    "atStart": "0.00",
                    "afterBet": "0.00",
                    "atEnd": "0.00"
                },
                "sessionFreeBets": {
                    "atStart": "0.00",
                    "afterBet": "0.00",
                    "atEnd": "0.00"
                }
            },
            "canGamble": false,
            "userId": 8378444,
            "sessionId": "0",
            "sessionNetPosition": "0.60",
            "token": "5f0d773de09a2d1c59a11bd9bbec7949f651eeabaa510acade69e8fc566e1bbe8aea93ff979fc81550f9e09926c809bd2f217572eb8272bcf16f96ed81eb4487",
            "bonuses": [],
            "tournaments": [],
            "vouchers": [],
            "messages": [],
            "limits": {
                "betThresholdTime": 947
            },
            "serverTime": "2025-06-21 08:24:26"
        },
        "game": {
            "win": {
                "respin": "0.00",
                "lines": "2.60",
                "total": "2.60"
            },
            "stake": "2.00",
            "multiplier": 1,
            "winLines": [
                {
                    "index": 2,
                    "start": 0,
                    "length": 4,
                    "tiles": [
                        1,
                        1,
                        1,
                        1,
                        0
                    ],
                    "tile": 1,
                    "multiplier": 1,
                    "amount": "0.60",
                    "multipliedAmount": "0.60"
                },
                {
                    "index": 13,
                    "start": 0,
                    "length": 4,
                    "tiles": [
                        1,
                        1,
                        1,
                        1,
                        0
                    ],
                    "tile": 1,
                    "multiplier": 1,
                    "amount": "0.60",
                    "multipliedAmount": "0.60"
                },
                {
                    "index": 17,
                    "start": 0,
                    "length": 4,
                    "tiles": [
                        1,
                        1,
                        1,
                        1,
                        0
                    ],
                    "tile": 1,
                    "multiplier": 1,
                    "amount": "0.60",
                    "multipliedAmount": "0.60"
                },
                {
                    "index": 25,
                    "start": 0,
                    "length": 4,
                    "tiles": [
                        1,
                        1,
                        1,
                        1,
                        0
                    ],
                    "tile": 1,
                    "multiplier": 1,
                    "amount": "0.60",
                    "multipliedAmount": "0.60"
                },
                {
                    "index": 27,
                    "start": 0,
                    "length": 3,
                    "tiles": [
                        1,
                        1,
                        1,
                        0,
                        0
                    ],
                    "tile": 1,
                    "multiplier": 1,
                    "amount": "0.20",
                    "multipliedAmount": "0.20"
                }
            ],
            "nearMiss": [],
            "chainReactor": {
                "destroy": [
                    {
                        "reel": 0,
                        "index": 2,
                        "tile": 1
                    },
                    {
                        "reel": 1,
                        "index": 2,
                        "tile": 1
                    },
                    {
                        "reel": 2,
                        "index": 2,
                        "tile": 1
                    },
                    {
                        "reel": 3,
                        "index": 2,
                        "tile": 1
                    },
                    {
                        "reel": 0,
                        "index": 3,
                        "tile": 1
                    },
                    {
                        "reel": 2,
                        "index": 1,
                        "tile": 1
                    }
                ],
                "drop": [
                    {
                        "reel": 0,
                        "index": 1,
                        "tile": 2,
                        "to": {
                            "reel": 0,
                            "index": 3
                        }
                    },
                    {
                        "reel": 0,
                        "index": 0,
                        "tile": 3,
                        "to": {
                            "reel": 0,
                            "index": 2
                        }
                    },
                    {
                        "reel": 1,
                        "index": 1,
                        "tile": 7,
                        "to": {
                            "reel": 1,
                            "index": 2
                        }
                    },
                    {
                        "reel": 1,
                        "index": 0,
                        "tile": 1,
                        "to": {
                            "reel": 1,
                            "index": 1
                        }
                    },
                    {
                        "reel": 2,
                        "index": 0,
                        "tile": 6,
                        "to": {
                            "reel": 2,
                            "index": 2
                        }
                    },
                    {
                        "reel": 3,
                        "index": 1,
                        "tile": 7,
                        "to": {
                            "reel": 3,
                            "index": 2
                        }
                    },
                    {
                        "reel": 3,
                        "index": 0,
                        "tile": 3,
                        "to": {
                            "reel": 3,
                            "index": 1
                        }
                    }
                ],
                "lock": [
                    {
                        "reel": 0,
                        "index": 2,
                        "tile": 3
                    },
                    {
                        "reel": 0,
                        "index": 3,
                        "tile": 2
                    },
                    {
                        "reel": 1,
                        "index": 1,
                        "tile": 1
                    },
                    {
                        "reel": 1,
                        "index": 2,
                        "tile": 7
                    },
                    {
                        "reel": 1,
                        "index": 3,
                        "tile": 8
                    },
                    {
                        "reel": 2,
                        "index": 2,
                        "tile": 6
                    },
                    {
                        "reel": 2,
                        "index": 3,
                        "tile": 8
                    },
                    {
                        "reel": 3,
                        "index": 1,
                        "tile": 3
                    },
                    {
                        "reel": 3,
                        "index": 2,
                        "tile": 7
                    },
                    {
                        "reel": 3,
                        "index": 3,
                        "tile": 1
                    },
                    {
                        "reel": 4,
                        "index": 0,
                        "tile": 7
                    },
                    {
                        "reel": 4,
                        "index": 1,
                        "tile": 9
                    },
                    {
                        "reel": 4,
                        "index": 2,
                        "tile": 2
                    },
                    {
                        "reel": 4,
                        "index": 3,
                        "tile": 4
                    }
                ],
                "screen": [
                    [
                        null,
                        null,
                        3,
                        2
                    ],
                    [
                        null,
                        1,
                        7,
                        8
                    ],
                    [
                        null,
                        null,
                        6,
                        8
                    ],
                    [
                        null,
                        3,
                        7,
                        1
                    ],
                    [
                        7,
                        9,
                        2,
                        4
                    ]
                ]
            },
            "respin": [
                {
                    "win": {
                        "lines": "0.00",
                        "total": "0.00"
                    },
                    "stake": "2.00",
                    "multiplier": 1,
                    "winLines": [],
                    "nearMiss": [],
                    "movingTiles": [
                        {
                            "reel": 1,
                            "index": 0,
                            "tileId": 10,
                            "to": {
                                "reel": 1,
                                "index": 0
                            }
                        }
                    ],
                    "scatters": [
                        {
                            "reel": 3,
                            "index": 0,
                            "tileId": 11,
                            "spins": 0
                        }
                    ],
                    "reelsBuffer": [
                        [
                            [
                                1
                            ],
                            [
                                4,
                                4,
                                3,
                                2
                            ],
                            [
                                5
                            ]
                        ],
                        [
                            [
                                4
                            ],
                            [
                                10,
                                1,
                                7,
                                8
                            ],
                            [
                                4
                            ]
                        ],
                        [
                            [
                                1
                            ],
                            [
                                5,
                                4,
                                6,
                                8
                            ],
                            [
                                4
                            ]
                        ],
                        [
                            [
                                1
                            ],
                            [
                                11,
                                3,
                                7,
                                1
                            ],
                            [
                                5
                            ]
                        ],
                        [
                            [
                                5
                            ],
                            [
                                7,
                                9,
                                2,
                                4
                            ],
                            [
                                4
                            ]
                        ]
                    ]
                }
            ],
            "scatters": [],
            "reelsBuffer": [
                [
                    [
                        5
                    ],
                    [
                        3,
                        2,
                        1,
                        1
                    ],
                    [
                        4
                    ]
                ],
                [
                    [
                        3
                    ],
                    [
                        1,
                        7,
                        1,
                        8
                    ],
                    [
                        2
                    ]
                ],
                [
                    [
                        3
                    ],
                    [
                        6,
                        1,
                        1,
                        8
                    ],
                    [
                        1
                    ]
                ],
                [
                    [
                        4
                    ],
                    [
                        3,
                        7,
                        1,
                        1
                    ],
                    [
                        2
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        7,
                        9,
                        2,
                        4
                    ],
                    [
                        2
                    ]
                ]
            ],
            "features": [],
            "hasState": true
        },
        "jackpots": null,
        "bonusChance": null
    }
}

export const atlantis_settings_request = {
  "token": null,
  "sessionId": "0",
  "playMode": "demo",
  "gameId": "Atlantis",
  "userData": {
    "userId": "demo-user",
    "hash": "",
    "affiliate": "",
    "lang": "en",
    "channel": "I",
    "userType": "U",
    "fingerprint": "18d24995-0f1d-49f7-a7e6-c5346f013207"
  },
  "custom": {
    "siteId": "",
    "extras": ""
  }
}

export const atlantis_spin_request = {
  "token": "9d272c7d01ffed9780188d50c901411151fa67b7ca266ea13c2228e589065063cc50f5ab5cde57835d8fd89ac0663b5642cae5d6e15f8089a86df001c6f7db4a",
  "sessionId": "0",
  "playMode": "demo",
  "gameId": "Atlantis",
  "userData": {
    "userId": 8596331,
    "affiliate": "",
    "lang": "en",
    "channel": "I",
    "userType": "U",
    "fingerprint": "18d24995-0f1d-49f7-a7e6-c5346f013207"
  },
  "custom": {
    "siteId": "",
    "extras": ""
  },
  "stake": 2,
  "bonusId": null,
  "extras": null,
  "gameMode": 0
}
</file>

<file path="./backend/src/routes/redtiger/redtiger.controller.ts">
import type { Context } from 'hono'
import chalk from 'chalk'

import type { UserWithRelations } from '#/db/schema'

import {
    rtgSettingsRequestDtoSchema,
    rtgSpinRequestDtoSchema,
} from '#/db/schema'
import { SessionManager } from '#/lib/session.manager'

import { createRedtigerSettings, createRedtigerSpin } from './redtiger.service'

export const redtigerController = {
    settings: async (c: Context) => {
        console.log(chalk.magenta('redtigerController gettingSettings'))
        const body = await c.req.json()
        const data = rtgSettingsRequestDtoSchema.parse(body)
        const user = c.get('user') as UserWithRelations
        const authSession = c.get('authSession')
        if (!data.gamesId || !authSession) {
            return c.json({ message: 'not authenticated' }, 401)
        }

        const gameName = `${data.gamesId}RTG`

        const gameSession = await SessionManager.startGameSession(c, gameName)

        if (!gameSession) {
            return c.json({ message: 'no gameSession' }, 404)
        }
        c.set('gameSession', gameSession)

        const settings = await createRedtigerSettings(
            user,
            gameName,
            gameSession.id,
            data
        )
        if (settings && settings.result && settings.result.user) {
            settings.result.user.sessionId = gameSession.id
        }
        return c.json(settings)
    },
    spin: async (c: Context) => {
        const body = await c.req.json()
        const data = rtgSpinRequestDtoSchema.parse(body)
        const user = c.get('user') as UserWithRelations
        if (!user) {
            return c.json({ message: 'not authenticated' }, 401)
        }

        const gameSession = c.get('gameSession')
        if (!gameSession) {
            return c.json({ message: 'no gameSession RT46' }, 404)
        }

        const gameName = `${data.gamesId}RTG`
        if (!gameName) {
            return c.json({ message: 'no gameName' }, 404)
        }

        const spin = await createRedtigerSpin(c, data)
        return c.json(spin)
    },
}
</file>

<file path="./backend/src/routes/redtiger/redtiger.router.ts">
import { createRoute, z } from '@hono/zod-openapi'

import {
    rtgSettingsRequestDtoSchema,
    rtgSettingsResponseDtoSchema,
    rtgSpinRequestDtoSchema,
    rtgSpinResultSchema,
} from '#/db/schema'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { sessionMiddleware } from '#/middlewares/session.middleware'

// import { RTGSettingsResponseDtoSchema, RTGSpinResponseDtoSchema } from "../gameplay.schema";
import { redtigerController } from './redtiger.controller'

const tags = ['RedTiger']

const ErrorSchema = z.object({
    success: z.boolean(),
    error: z.object({
        code: z.string(),
        message: z.string(),
    }),
})

const settingsRoute = createRoute({
    method: 'post',
    path: '/redtiger/game/settings',
    tags,
    middleware: [authMiddleware],
    summary: 'Get redtiger settings for a game',
    request: {
        // params: z.object({
        //   gameSessionId: z.string(),
        //   gameName: z.string(),
        // }),
        body: {
            content: {
                'application/json': {
                    schema: rtgSettingsRequestDtoSchema,
                },
            },
        },
    },
    responses: {
        200: {
            description: 'Redtiger game settings',
            content: {
                'application/json': {
                    schema: rtgSettingsResponseDtoSchema,
                },
            },
        },
        500: {
            description: 'Internal Server Error',
            content: {
                'application/json': {
                    schema: ErrorSchema,
                },
            },
        },
    },
})

const spinRoute = createRoute({
    method: 'post',
    path: '/redtiger/game/spin',
    tags,
    middleware: [authMiddleware, sessionMiddleware],
    summary: 'Perform a spin in a redtiger game',
    request: {
        body: {
            content: {
                'application/json': {
                    schema: rtgSpinRequestDtoSchema,
                },
            },
        },
    },
    responses: {
        200: {
            description: 'Redtiger spin result',
            content: {
                'application/json': {
                    schema: rtgSpinResultSchema,
                },
            },
        },
        500: {
            description: 'Internal Server Error',
            content: {
                'application/json': {
                    schema: ErrorSchema,
                },
            },
        },
    },
})

const router = createRouter()

// router.use('/redtiger/*', authMiddleware)

router.openapi(settingsRoute, redtigerController.settings as any)

// router.use('/redtiger/game/spin', sessionMiddleware)
router.openapi(spinRoute, redtigerController.spin as any)

export default router
</file>

<file path="./backend/src/routes/redtiger/redtiger.service.ts">
import type { Context } from 'hono'
import type { z } from 'zod'
import chalk from 'chalk'

import { and, eq, inArray } from 'drizzle-orm'

import type {
    GameSessionType,
    JackpotType,
    providerSpinResponseDataSchema,
    rtgSettingsRequestDtoSchema,
    rtgSettingsResponseDtoSchema,
    rtgSpinRequestDtoSchema,
    rtgSpinResponseDtoSchema,
    UserWithRelations,
} from '#/db/schema'

import db from '#/db'
import { jackpots } from '#/db/schema'
import { updateGameSessionStats } from '#/lib/gameplay'
import * as jackpotService from '#/lib/jackpot'
import { sendNotificationToUser } from '#/lib/websocket.service'
import {
    addXpTousers,
    calculateXpForWagerAndWins,
} from '#/routes/vip/vip.service'
import { creditTowallets, debitFromwallets } from '#/routes/wallet/wallet.service'
import { coinsToDollars, dollarsToCoins } from '#/utils/misc.utils'

import { atlantis_settings, atlantis_spin } from './data'
import { getGameSessionFromCache } from '#/lib/cache'

type ProviderSpinResponseData = z.infer<typeof providerSpinResponseDataSchema>
type RTGSettingsRequestDto = z.infer<typeof rtgSettingsRequestDtoSchema>
type RTGSettingsResponseDto = z.infer<typeof rtgSettingsResponseDtoSchema>
type RTGSpinRequestDto = z.infer<typeof rtgSpinRequestDtoSchema>
type RTGSpinResponseDto = z.infer<typeof rtgSpinResponseDtoSchema>

const testing = false

export async function createRedtigerSettings(
    user: UserWithRelations,
    gameName: string,
    authSessionId: string,
    data: RTGSettingsRequestDto
): Promise<RTGSettingsResponseDto | null> {
    console.log(chalk.magenta('--- createRedtigerSettings ---'))
    try {
        if (!authSessionId || !gameName || !user) {
            console.log(chalk.red('fuk'))
            return null
        }
        const gameSession = await getGameSessionFromCache(authSessionId)
        if (!gameSession) {
            console.log(chalk.red('fuk'))
            return null
        }
        let gameSettingsFromDeveloper: RTGSettingsResponseDto
        console.log(chalk.blue('testing', testing))
        if (testing) {
            gameSettingsFromDeveloper = atlantis_settings
        } else {
            const init = {
                body: JSON.stringify({
                    token: data.token,
                    sessionId: '0',
                    playMode: 'demo',
                    gameId: gameName.replace('RTG', ''),
                    userData: {
                        userId: data.userData!.userId,
                        affiliate: '',
                        lang: 'en',
                        channel: 'I',
                        userType: 'U',
                        fingerprint: data.userData?.fingerprint,
                        hash: '',
                    },
                    custom: { siteId: '', extras: '' },
                }),
                method: 'POST',
                headers: {
                    'content-type': 'application/json;charset=UTF-8',
                },
            }
            const response = await fetch(
                `https://proxy.andrews.workers.dev/proxy/gserver-rtg.redtiger.com/rtg/platform/game/settings`,
                init
            )
            gameSettingsFromDeveloper = await response.json()
        }
        return gameSettingsFromDeveloper
    } catch (error: any) {
        return {
            success: false,
            error: {
                code: 'INTERNAL_SERVER_ERROR',
                message: error.message,
            },
        }
    }
}

export async function createRedtigerSpin(
    c: Context,
    data: RTGSpinRequestDto
): Promise<RTGSpinResponseDto> {
    console.log(chalk.magenta('--- createRedtigerSpin ---'))
    const user = c.get('user') as UserWithRelations
    const gameName = `${data.gamesId}RTG`
    const gameSession = c.get('gameSession') as GameSessionType
    console.log('user', user.id)
    console.log('gs', gameSession.id)
    if (!user || !gameSession) {
        console.log(chalk.red('fuk'))
        return {
            success: false,
            error: {
                code: 'INTERNAL_SERVER_ERROR',
                message: 'User and game session are required.',
            },
        }
    }

    const wagerAmountCoins = dollarsToCoins(
        Number.parseFloat(data.stake as string)
    )

    try {
        await debitFromwallets(
            user.id,
            wagerAmountCoins,
            `Wager for ${gameName}`
        )

        let gameResultFromDeveloper: RTGSpinResponseDto
        if (testing) {
            gameResultFromDeveloper = atlantis_spin as unknown as RTGSpinResponseDto
        } else {
            const init = {
                body: JSON.stringify(data),
                method: 'POST',
                headers: { 'content-type': 'application/json;charset=UTF-8' },
            }
            const response = await fetch(
                `https://proxy.andrews.workers.dev/proxy/gserver-rtg.redtiger.com/rtg/platform/game/spin`,
                init
            )
            gameResultFromDeveloper = await response.json()
        }

        if (!gameResultFromDeveloper.success) {
            await creditTowallets(
                user.id,
                wagerAmountCoins,
                `Refund for failed spin on ${gameName}`
            )
            return gameResultFromDeveloper
        }

        const grossWinAmountCoins = dollarsToCoins(
            Number.parseFloat(gameResultFromDeveloper.result!.games.win.total)
        )

        if (grossWinAmountCoins > 0) {
            await creditTowallets(
                user.id,
                grossWinAmountCoins,
                `Win from ${gameName}`
            )
        }

        if (user.vipInfo) {
            const xpResult = calculateXpForWagerAndWins(
                wagerAmountCoins / 100, // Convert cents to dollars
                grossWinAmountCoins / 100, // Convert cents to dollars
                user.vipInfo
            )

            if (xpResult.totalXp > 0) {
                await addXpTousers(user.id, xpResult.totalXp)
                gameSession.totalXpGained =
                    (gameSession.totalXpGained || 0) + xpResult.totalXp
                c.set('gameSession', gameSession)
            }

            if (gameResultFromDeveloper.result?.games) {
                ;(gameResultFromDeveloper.result.games as any).xpBreakdown =
                    xpResult
            }
        } else {
            console.warn('No VIP info found for user:', user.id)
        }

        await updateGameSessionStats(c, {
            totalSpinWinnings: grossWinAmountCoins,
            wagerAmount: wagerAmountCoins,
        })

        const jackpotResult = await jackpotService.processJackpots({
            gameSpinId: 'temp-spin-id',
            wagerAmountCoins,
            gameCategory: 'SLOTS',
            userId: user.id,
        })

        const enhancedResponse = await enhanceRTGResponseWithJackpots(
            gameResultFromDeveloper.result as ProviderSpinResponseData,
            jackpotResult as any
        )
        gameResultFromDeveloper.result = enhancedResponse

        const winAmountInDollars = coinsToDollars(grossWinAmountCoins)
        const wagerAmountInDollars = coinsToDollars(wagerAmountCoins)

        if (winAmountInDollars > (wagerAmountInDollars * 100)) {
            sendNotificationToUser(user.id, {
                title: 'recording:upload',
                message: JSON.stringify({
                    sessionId: gameSession.id,
                    reason: 'big_win',
                    winAmount: winAmountInDollars,
                    wagerAmount: wagerAmountInDollars,
                })
            })
        }

        if (winAmountInDollars > 10) {
            sendNotificationToUser(user.id, {
                title: 'Big Win!',
                message: `Congratulations! You won ${winAmountInDollars.toFixed(2)} on ${gameName}!`,
            })
        }

        return gameResultFromDeveloper
    } catch (error) {
        console.error('Error creating Redtiger spin:', error)
        return {
            success: false,
            error: {
                code: 'SPIN_FAILED',
                message:
                    error instanceof Error
                        ? error.message
                        : 'An unexpected error occurred.',
            },
        }
    }
}

async function enhanceRTGResponseWithJackpots(
    originalResponse: ProviderSpinResponseData,
    jackpotResult: {
        contributions: {
            jackpotType: string
            contributionAmountCoins: number
        }[]
        jackpotWin: {
            id: string
            jackpotType: string
            winAmountCoins: number
        } | null
    }
): Promise<ProviderSpinResponseData> {
    const enhancedResponse = { ...originalResponse }

    if (jackpotResult?.contributions?.length > 0) {
        enhancedResponse.jackpots = {
            contributions: jackpotResult.contributions.map(
                (contrib: {
                    jackpotType: string
                    contributionAmountCoins: number
                }) => ({
                    type: contrib.jackpotType,
                    amount: coinsToDollars(contrib.contributionAmountCoins),
                    amountCoins: contrib.contributionAmountCoins,
                })
            ),
            totalContribution: coinsToDollars(
                jackpotResult.contributions.reduce(
                    (
                        acc: number,
                        contrib: { contributionAmountCoins: number }
                    ) => acc + contrib.contributionAmountCoins,
                    0
                )
            ),
        }
    }

    if (jackpotResult?.jackpotWin) {
        const jackpotWin = jackpotResult.jackpotWin

        enhancedResponse.jackpots = {
            ...enhancedResponse.jackpots,
            type: jackpotWin.jackpotType,
            amount: coinsToDollars(jackpotWin.winAmountCoins),
            amountCoins: jackpotWin.winAmountCoins,
            winId: jackpotWin.id,
        }

        if (enhancedResponse.user?.balance?.cash?.atEnd) {
            const currentBalance = Number.parseFloat(
                enhancedResponse.user.balance.cash.atEnd
            )
            const newBalance =
                currentBalance + coinsToDollars(jackpotWin.winAmountCoins)
            enhancedResponse.user.balance.cash.atEnd = newBalance.toFixed(2)
        }

        if (enhancedResponse.games?.win?.total) {
            const currentWin = Number.parseFloat(
                enhancedResponse.games.win.total
            )
            const newWin =
                currentWin + coinsToDollars(jackpotWin.winAmountCoins)
            enhancedResponse.games.win.total = newWin.toFixed(2)
        }
    }

    const eligibleTypes = ['MAJOR', 'MINOR', 'GRAND']
    const currentJackpots = await db.query.jackpots.findMany({
        where: and(
            inArray(
                jackpots.type,
                eligibleTypes as (typeof jackpots.type.enumValues)[number][]
            ),
            eq(jackpots.isActive, true)
        ),
    })
    ;(
        enhancedResponse as ProviderSpinResponseData & {
            currentJackpots: unknown[]
        }
    ).currentJackpots = currentJackpots.map((jackpot: JackpotType) => ({
        type: jackpot.type,
        amount: coinsToDollars(jackpot.currentAmountCoins),
        amountCoins: jackpot.currentAmountCoins,
    }))

    return enhancedResponse
}
</file>

<file path="./backend/src/routes/tasks/tasks.handlers.ts">
import { eq } from 'drizzle-orm'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import * as HttpStatusPhrases from 'stoker/http-status-phrases'

import type { AppRouteHandler } from '#/lib/types'

import db from '#/db'
import { tasks } from '#/db/schema'
import { ZOD_ERROR_CODES, ZOD_ERROR_MESSAGES } from '#/lib/constants'

import type {
    CreateRoute,
    GetOneRoute,
    ListRoute,
    PatchRoute,
    RemoveRoute,
} from './tasks.routes'
import { nanoid } from '#/utils/nanoid'

export const list: AppRouteHandler<ListRoute> = async (c) => {
    const tasksData = await db.query.tasks.findMany()
    return c.json(tasksData)
}

export const create: AppRouteHandler<CreateRoute> = async (c) => {
    const task = c.req.valid('json')
    const [inserted] = await db.insert(tasks).values({ ...task, id: nanoid() }).returning()
    return c.json(inserted, HttpStatusCodes.OK)
}

export const getOne: AppRouteHandler<GetOneRoute> = async (c) => {
    const { id } = c.req.valid('param')
    const task = await db.query.tasks.findFirst({
        where(
            fields: { id: any },
            operators: { eq: (arg0: any, arg1: any) => any }
        ) {
            return operators.eq(fields.id, id.toString())
        },
    })

    if (!task) {
        return c.json(
            {
                message: HttpStatusPhrases.NOT_FOUND,
            },
            HttpStatusCodes.NOT_FOUND
        )
    }

    return c.json(task, HttpStatusCodes.OK)
}

export const patch: AppRouteHandler<PatchRoute> = async (c) => {
    const { id } = c.req.valid('param')
    const updates = c.req.valid('json')

    if (Object.keys(updates).length === 0) {
        return c.json(
            {
                success: false,
                error: {
                    issues: [
                        {
                            code: ZOD_ERROR_CODES.INVALID_UPDATES,
                            path: [],
                            message: ZOD_ERROR_MESSAGES.NO_UPDATES,
                        },
                    ],
                    name: 'ZodError',
                },
            },
            HttpStatusCodes.UNPROCESSABLE_ENTITY
        )
    }

    const [task] = await db
        .update(tasks)
        .set(updates)
        .where(eq(tasks.id, id.toString()))
        .returning()

    if (!task) {
        return c.json(
            {
                message: HttpStatusPhrases.NOT_FOUND,
            },
            HttpStatusCodes.NOT_FOUND
        )
    }

    return c.json(task, HttpStatusCodes.OK)
}

export const remove: AppRouteHandler<RemoveRoute> = async (c) => {
    const { id } = c.req.valid('param')
    await db.delete(tasks).where(eq(tasks.id, id.toString()))

    // if (result.rowsAffected === 0) {
    //   return c.json(
    //     {
    //       message: HttpStatusPhrases.NOT_FOUND,
    //     },
    //     HttpStatusCodes.NOT_FOUND,
    //   );
    // }

    return c.body(null, HttpStatusCodes.NO_CONTENT)
}
</file>

<file path="./backend/src/routes/tasks/tasks.index.ts">
import { createRouter } from '#/lib/create-app'

import * as handlers from './tasks.handlers'
import * as routes from './tasks.routes'

const router = createRouter()
    .openapi(routes.list, handlers.list)
    .openapi(routes.create, handlers.create)
    .openapi(routes.getOne, handlers.getOne)
    .openapi(routes.patch, handlers.patch)
    .openapi(routes.remove, handlers.remove)

export default router
</file>

<file path="./backend/src/routes/tasks/tasks.routes.ts">
import { createRoute, z } from '@hono/zod-openapi'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'
import { createErrorSchema, IdParamsSchema } from 'stoker/openapi/schemas'

import { insertTasksSchema, patchTasksSchema, selectTasksSchema } from '#/db/schema'
import { notFoundSchema } from '#/lib/constants'

const tags = ['Tasks']

export const list = createRoute({
    path: '/tasks',
    method: 'get',
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.array(selectTasksSchema),
            'The list of tasks',
        ),
    },
})

export const create = createRoute({
    path: '/tasks',
    method: 'post',
    request: {
        body: jsonContentRequired(
            insertTasksSchema,
            'The task to create',
        ),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            selectTasksSchema,
            'The created task',
        ),
        [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
            createErrorSchema(insertTasksSchema),
            'The validation error(s)',
        ),
    },
})

export const getOne = createRoute({
    path: '/tasks/{id}',
    method: 'get',
    request: {
        params: IdParamsSchema,
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            selectTasksSchema,
            'The requested task',
        ),
        [HttpStatusCodes.NOT_FOUND]: jsonContent(
            notFoundSchema,
            'Task not found',
        ),
        [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
            createErrorSchema(IdParamsSchema),
            'Invalid id error',
        ),
    },
})

export const patch = createRoute({
    path: '/tasks/{id}',
    method: 'patch',
    request: {
        params: IdParamsSchema,
        body: jsonContentRequired(
            patchTasksSchema,
            'The task updates',
        ),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            selectTasksSchema,
            'The updated task',
        ),
        [HttpStatusCodes.NOT_FOUND]: jsonContent(
            notFoundSchema,
            'Task not found',
        ),
        [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
            createErrorSchema(patchTasksSchema)
                .or(createErrorSchema(IdParamsSchema)),
            'The validation error(s)',
        ),
    },
})

export const remove = createRoute({
    path: '/tasks/{id}',
    method: 'delete',
    request: {
        params: IdParamsSchema,
    },
    tags,
    responses: {
        [HttpStatusCodes.NO_CONTENT]: {
            description: 'Task deleted',
        },
        [HttpStatusCodes.NOT_FOUND]: jsonContent(
            notFoundSchema,
            'Task not found',
        ),
        [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
            createErrorSchema(IdParamsSchema),
            'Invalid id error',
        ),
    },
})

export type ListRoute = typeof list
export type CreateRoute = typeof create
export type GetOneRoute = typeof getOne
export type PatchRoute = typeof patch
export type RemoveRoute = typeof remove
</file>

<file path="./backend/src/routes/updates/updates.controller.ts">
/* eslint-disable style/indent */
import type { Context } from 'hono'

import * as crypto from 'node:crypto'
import { z } from 'zod'

import type { AppVersion } from '#/db'

import {
    AppVersionSchema,
    CheckUpdateRequestSchema,
    updateTypeSchema,
} from '#/db/schema/zod'
import env from '#/env'

import * as service from './updates.service'

export async function handleCheckUpdate(c: Context) {
    try {
        const body = CheckUpdateRequestSchema.safeParse(await c.req.json())
        if (!body.success) {
            return c.json({ error: 'Invalid request body' } as const, 400)
        }

        const { currentVersion, platform, appId, updateType } = body.data

        if (!currentVersion || !platform || !appId || !updateType) {
            return c.json(
                { error: 'Missing required parameters' } as const,
                400
            )
        }

        const metadata = await service.loadMetadata()
        const appVersions = metadata[appId]?.[platform] || []
        const latestVersion = service.getLatestVersion(appVersions, updateType)

        if (!latestVersion) {
            return c.json({ hasUpdate: false } as const)
        }

        const hasUpdate = latestVersion.version > currentVersion

        // Ensure the response matches CheckUpdateResponseSchema
        const response = hasUpdate
            ? {
                  hasUpdate: true,
                  version: latestVersion.version,
                  platform: latestVersion.platform,
                  updateType: latestVersion.updateType,
                  downloadUrl: latestVersion.downloadUrl,
                  changelog: latestVersion.changelog,
                  mandatory: latestVersion.mandatory,
                  releaseDate: latestVersion.releaseDate,
                  fileSize: latestVersion.fileSize,
                  checksum: latestVersion.checksum,
              }
            : ({ hasUpdate: false } as const)

        return c.json(response)
    } catch (error) {
        console.error('Error checking for updates:', error)
        return c.json({ error: 'Internal server error' } as const, 500)
    }
}
export async function handleUploadUpdate(c: Context) {
    try {
        const formData = await c.req.formData()
        const file = formData.get('file')
        const appId = formData.get('appId')?.toString()
        const platform = formData.get('platform')?.toString()
        const version = formData.get('version')?.toString()
        const updateTypeRaw = formData.get('updateType')?.toString()
        const changelogRaw = formData.get('changelog')?.toString() || '[]'
        const mandatoryRaw = formData.get('mandatory')?.toString() === 'true'

        // Validate required fields
        if (
            !(file instanceof File) ||
            !appId ||
            !platform ||
            !version ||
            !updateTypeRaw
        ) {
            return c.json({ error: 'Missing required parameters' }, 400)
        }

        // Validate update type
        const updateTypeResult = updateTypeSchema.safeParse(updateTypeRaw)
        if (!updateTypeResult.success) {
            return c.json({ error: 'Invalid update type' }, 400)
        }
        const updateType = updateTypeResult.data

        // Parse changelog safely
        let changelog: string[] = []
        try {
            const parsed = JSON.parse(changelogRaw)
            if (Array.isArray(parsed)) {
                changelog = parsed.filter(
                    (item: unknown): item is string => typeof item === 'string'
                )
            }
        } catch {
            console.warn('Failed to parse changelog, using empty array')
        }

        // At this point, all required fields are validated

        const { buffer } = await service.saveUpdateFile(
            file,
            appId,
            platform,
            updateType,
            version
        )
        const checksum = crypto
            .createHash('sha256')
            .update(new Uint8Array(buffer))
            .digest('hex')

        const metadata = await service.loadMetadata()
        if (!metadata[appId]) metadata[appId] = {}
        if (!metadata[appId][platform]) metadata[appId][platform] = []

        const newVersion: AppVersion = {
            version,
            platform,
            updateType,
            downloadUrl: service.generateDownloadUrl(
                appId,
                platform,
                updateType,
                version
            ),
            changelog,
            mandatory: mandatoryRaw,
            releaseDate: new Date().toISOString(),
            fileSize: buffer.byteLength,
            checksum,
            appId: '',
            id: 0,
        }

        metadata[appId][platform] = metadata[appId][platform].filter(
            (v: any) => !(v.version === version && v.updateType === updateType)
        )
        metadata[appId][platform].push(newVersion)

        await service.saveMetadata(metadata)

        return c.json({
            success: true,
            message: 'Update uploaded successfully',
            version: newVersion,
        })
    } catch (error) {
        console.error('Error uploading update:', error)
        return c.json({ error: 'Internal server error' }, 500)
    }
}

export async function handleDownloadLocalUpdate(c: Context) {
    // This controller is only for development/local serving
    if (env.NODE_ENV === 'production') {
        return c.json({ error: 'Not Found' }, 404)
    }
    try {
        const { filename } = c.req.param()
        const result = await service.getLocalFile(filename)

        if (!result) {
            return c.json({ error: 'File not found' }, 404)
        }

        return new Response(result.file.toString(), {
            headers: {
                'Content-Type': result.contentType,
                'Content-Disposition': `attachment; filename="${filename}"`,
                'Content-Length': result.file.length.toString(),
            },
        })
    } catch (error) {
        console.error('Error downloading update:', error)
        return c.json({ error: 'Internal server error' }, 500)
    }
}

export async function handleListVersions(c: Context) {
    try {
        const params = z
            .object({
                appId: z.string(),
                platform: z.string(),
            })
            .safeParse(c.req.param())

        if (!params.success) {
            return c.json({ error: 'Invalid parameters' }, 400)
        }

        const { appId, platform } = params.data
        const metadata = await service.loadMetadata()
        const versions = (metadata[appId]?.[platform] || []).map((version) =>
            AppVersionSchema.parse(version)
        )

        return c.json({ appId, platform, versions })
    } catch (error) {
        console.error('Error listing versions:', error)
        return c.json({ error: 'Internal server error' }, 500)
    }
}
</file>

<file path="./backend/src/routes/updates/updates.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'

import {
    CheckUpdateRequestSchema,
    CheckUpdateResponseSchema,
    ErrorSchema,
    ListVersionsResponseSchema,
    SuccessResponseSchema,
} from '#/db/schema'

import { createRouter } from '../../lib/create-app'
import {
    handleCheckUpdate,
    handleDownloadLocalUpdate,
    handleListVersions,
    handleUploadUpdate,
} from './updates.controller'

const tags = ['Upates']

// --- Route Definitions ---

const checkUpdateRoute = createRoute({
    path: '/updates/check',
    method: 'post',
    tags,
    request: {
        body: jsonContentRequired(
            CheckUpdateRequestSchema,
            'The user to create'
        ),
    },
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            CheckUpdateResponseSchema,
            'The updated user'
        ),
    },
})
const uploadUpdateRoute = createRoute({
    method: 'post',
    path: '/updates/upload',
    tags: ['Updates'],
    summary: 'Upload a new application version (APK or OTA bundle)',
    request: {
        body: { content: { 'multipart/form-data': { schema: z.object({}) } } },
    },
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            SuccessResponseSchema,
            'Upload success response'
        ),
        400: {
            description: 'Bad Request',
            content: { 'application/json': { schema: ErrorSchema } },
        },
    },
})

const downloadLocalUpdateRoute = createRoute({
    method: 'get',
    path: '/updates/download/{filename}',
    tags: ['Updates'],
    summary: 'Download an update file (for local development only)',
    request: { params: z.object({ filename: z.string() }) },
    responses: {
        200: { description: 'Application file (APK or ZIP)' },
        404: {
            description: 'Not Found',
            content: { 'application/json': { schema: ErrorSchema } },
        },
    },
})

const listVersionsRoute = createRoute({
    method: 'get',
    path: '/updates/versions/{appId}/{platform}',
    tags: ['Updates'],
    summary: 'List all available versions for an app and platform',
    request: { params: z.object({ appId: z.string(), platform: z.string() }) },
    responses: {
        200: {
            description: 'List of versions',
            content: {
                'application/json': { schema: ListVersionsResponseSchema },
            },
        },
        400: {
            description: 'Bad Request',
            content: { 'application/json': { schema: ErrorSchema } },
        },
    },
})

// --- Register Routes ---
const routes = createRouter()
    .openapi(checkUpdateRoute, handleCheckUpdate as any)
    .openapi(uploadUpdateRoute, handleUploadUpdate as any)
    .openapi(downloadLocalUpdateRoute, handleDownloadLocalUpdate)
    .openapi(listVersionsRoute, handleListVersions as any)
//
export default routes
</file>

<file path="./backend/src/routes/updates/updates.service.ts">
/* eslint-disable node/prefer-global/buffer */

import chalk from 'chalk'
import { existsSync } from 'node:fs'
import { mkdir, readFile, unlink, writeFile } from 'node:fs/promises'
import { tmpdir } from 'node:os'
import { join } from 'node:path'
import rclone from 'rclone.js'

import type { AppVersion } from '#/db'

import env from '#/env'

// --- Configuration ---
const isProduction = env.NODE_ENV === 'production'
const UPDATES_DIR = join(process.cwd(), 'updates') // Still used for local dev
const METADATA_FILE = join(UPDATES_DIR, 'metadata.json')
const R2_REMOTE_NAME = env.RCLONE_R2_REMOTE || 'cloudflare' // The name of your configured rclone remote
const R2_BUCKET_NAME = env.R2_BUCKET_NAME || 'apkfiles'

// Ensure the updates directory exists on startup
;(async () => {
    if (!existsSync(UPDATES_DIR)) {
        await mkdir(UPDATES_DIR, { recursive: true })
    }
})()

// --- Metadata Management (No changes) ---
export async function loadMetadata(): Promise<any> {
    try {
        if (existsSync(METADATA_FILE)) {
            const content = await readFile(METADATA_FILE, 'utf-8')
            return JSON.parse(content)
        }
    } catch (error) {
        console.error('Failed to load metadata:', error)
    }
    return {}
}

export async function saveMetadata(metadata: any): Promise<void> {
    try {
        await writeFile(METADATA_FILE, JSON.stringify(metadata, null, 2))
    } catch (error) {
        console.error('Failed to save metadata:', error)
    }
}

// --- Version Logic (No changes) ---
function compareVersions(v1: string, v2: string): number {
    const parts1 = v1.split('.').map(Number)
    const parts2 = v2.split('.').map(Number)
    const len = Math.max(parts1.length, parts2.length)
    for (let i = 0; i < len; i++) {
        const p1 = parts1[i] || 0
        const p2 = parts2[i] || 0
        if (p1 > p2) return 1
        if (p1 < p2) return -1
    }
    return 0
}

export function getLatestVersion(
    versions: AppVersion[],
    type: any
): AppVersion | null {
    const filteredVersions = versions.filter((v) => v.updateType === type)
    if (filteredVersions.length === 0) return null

    return filteredVersions.reduce((latest, current) =>
        compareVersions(current.version, latest.version) > 0 ? current : latest
    )
}

// --- File Storage Logic (Refactored for rclone) ---
function getFileExtension(type: any): string {
    return type === 'BINARY' ? 'apk' : 'zip'
}

function generateR2Key(
    appId: string,
    platform: string,
    type: any,
    version: string
): string {
    const extension = getFileExtension(type)
    return `${appId}/${platform}/${type}/${version}/bundle.${extension}`
}

export function generateDownloadUrl(
    appId: string,
    platform: string,
    type: any,
    version: string
): string {
    if (isProduction) {
        if (!env.R2_PUBLIC_URL) {
            console.warn(
                'R2_PUBLIC_URL is not set. Download links may be incorrect.'
            )
            return ''
        }
        const key = generateR2Key(appId, platform, type, version)
        return `${env.R2_PUBLIC_URL}/${key}`
    } else {
        const extension = getFileExtension(type)
        const filename = `${appId}_${platform}_${type}_${version}.${extension}`
        return `/api/updates/download/${filename}` // Local download URL
    }
}

export async function saveUpdateFile(
    file: File,
    appId: string,
    platform: string,
    type: any,
    version: string
): Promise<{ buffer: ArrayBuffer }> {
    const buffer = await file.arrayBuffer()
    const body = new Uint8Array(buffer)
    console.log(chalk.white('Saving update file for app:', appId))

    if (isProduction) {
        if (!R2_BUCKET_NAME) {
            throw new Error(
                'R2_BUCKET_NAME environment variable is not set for production.'
            )
        }

        // 1. Write file to a temporary local path
        const tempFilePath = join(tmpdir(), `${appId}-${version}-${file.name}`)
        await writeFile(tempFilePath, body)

        // 2. Define the destination for rclone
        const destination = `${R2_REMOTE_NAME}:${R2_BUCKET_NAME}/${generateR2Key(appId, platform, type, version)}`

        try {
            // 3. Use rclone to copy the file to the R2 remote
            const result = await rclone.copy(tempFilePath, destination)
            console.log('Rclone upload successful:', result)
        } catch (error) {
            console.error('Rclone upload failed:', error)
            throw new Error('Failed to upload file to R2 storage.')
        } finally {
            // 4. Clean up the temporary file from the server
            await unlink(tempFilePath)
        }
    } else {
        // Save locally for development
        const extension = getFileExtension(type)
        const filename = `${appId}_${platform}_${type}_${version}.${extension}`
        const filepath = join(UPDATES_DIR, filename)
        await writeFile(filepath, body)
    }

    return { buffer }
}

export async function getLocalFile(
    filename: string
): Promise<{ file: Buffer; contentType: string } | null> {
    const filepath = join(UPDATES_DIR, filename)
    if (!existsSync(filepath)) {
        return null
    }
    const file = await readFile(filepath)
    const contentType = filename.endsWith('.apk')
        ? 'application/vnd.android.package-archive'
        : 'application/zip'
    return { file, contentType }
}
</file>

<file path="./backend/src/routes/user/user.controller.ts">
import type { Context } from 'hono'

import { SessionManager } from '#/lib/session.manager'

import * as service from './user.service'

// Basic CRUD
export async function listUser(c: Context) {
    const { limit, offset, username, email } = c.req.query()
    const limitNum = limit ? parseInt(limit, 10) : undefined
    const offsetNum = offset ? parseInt(offset, 10) : undefined
    const filter = {
        username: username || undefined,
        email: email || undefined,
    }
    const data = await service.findManyUser(limitNum, offsetNum, filter)
    return c.json(data, 200)
}

export async function createUser(c: Context) {
    const data = await c.req.json()
    const newUser = await service.createUser(data)
    return c.json(newUser[0], 201)
}

export async function getUserById(c: Context) {
    const id = c.req.param('id')
    const user = await service.findUserById(id)
    if (!user || user.length === 0) {
        return c.json({ error: 'User not found' }, 404)
    }
    return c.json(user[0], 200)
}

export async function updateUser(c: Context) {
    const id = c.req.param('id')
    const data = await c.req.json()
    const updatedUser = await service.updateUser(id, data)
    if (!updatedUser || updatedUser.length === 0) {
        return c.json({ error: 'User not found' }, 404)
    }
    return c.json(updatedUser[0], 200)
}

export async function deleteUser(c: Context) {
    const id = c.req.param('id')
    const deletedUser = await service.deleteUser(id)
    if (!deletedUser || deletedUser.length === 0) {
        return c.json({ error: 'User not found' }, 404)
    }
    return c.json({ id: deletedUser[0].id }, 200)
}

// From Pinia Store & HAR files
export async function checkUser(c: Context) {
    const userId = c.req.param('id')
    const user = await service.checkUser(userId)
    if (!user || user.length === 0) {
        return c.json({ error: 'User not found' }, 404)
    }
    return c.json({ userCheck: true }, 200)
}

export async function verifyEmail(c: Context) {
    const userId = c.req.param('id')
    const result = await service.sendEmailVerification(userId)
    return c.json(result, 200)
}

export async function getInfo(c: Context) {
    const userId = c.req.param('id')
    const info = await service.getUserInfo(userId)
    if (!info || info.length === 0) {
        return c.json({ error: 'User not found' }, 404)
    }
    return c.json(info[0], 200)
}

export async function getVipInfo(c: Context) {
    const userId = c.req.param('id')
    const vipInfo = await service.getVipInfo(userId)
    if (!vipInfo || vipInfo.length === 0) {
        return c.json({ vipLevel: null }, 200)
    }
    return c.json(vipInfo[0], 200)
}

// New Routes
export async function getUserAmount(c: Context) {
    const data = await service.getUserAmount()
    return c.json(data, 200)
}

export async function updateUserInfo(c: Context) {
    const data = await c.req.json()
    const updatedUser = await service.updateUserInfo(data)
    return c.json(updatedUser, 200)
}

export async function updateEmail(c: Context) {
    const data = await c.req.json()
    const updatedUser = await service.updateEmail(data)
    return c.json(updatedUser, 200)
}

export async function updatePassword(c: Context) {
    const data = await c.req.json()
    await service.updatePassword(data)
    return c.json({ message: 'Password updated' }, 200)
}

export async function suspendUser(c: Context) {
    const data = await c.req.json()
    await service.suspendUser(data)
    return c.json({ message: 'User suspended' }, 200)
}

// export async function getBalanceList(c: Context) {
//   const data = await service.getBalanceList();
//   return c.json(data, 200);
// }

// Game Routes
export async function enterGame(c: Context) {
    const data = await service.enterGame() // Placeholder
    return c.json({ code: 0, data, message: 'Success' })
}

export async function userGame(c: Context) {
    const data = await service.userGame() // Placeholder
    return c.json({ code: 0, data, message: 'Success' })
}

export async function favoriteGame(c: Context) {
    const data = await service.favoriteGame() // Placeholder
    return c.json({ code: 0, data, message: 'Success' })
}

// export async function gameHistory(c: Context) {
//   const userId = c.req.param("id");
//   const data = await service.getGameHistory(userId); // Placeholder
//   return c.json({ code: 0, data, message: "Success" });
// }

export async function spinPage(c: Context) {
    const data = await service.spinPage() // Placeholder
    return c.json({ code: 0, data, message: 'Success' })
}

export async function spin(c: Context) {
    const data = await service.spin() // Placeholder
    return c.json({ code: 0, data, message: 'Success' })
}

export async function favoriteGameList(c: Context) {
    const data = await service.favoriteGameList() // Placeholder
    return c.json({ code: 0, data, message: 'Success' })
}

export async function startSession(c: Context) {
    const { gameId } = await c.req.json()
    const session = await SessionManager.startGameSession(c, gameId)
    return c.json(session, 200)
}

export async function endSession(c: Context) {
    const user = c.get('user')
    if (!user) {
        return c.json({ error: 'Unauthorized' }, 401)
    }

    await SessionManager.endCurrentGameSession(user.id)
    return c.json({ success: true, message: 'Game session ended.' })
}
</file>

<file path="./backend/src/routes/user/user.handler.ts">
import type { ServerWebSocket } from 'bun'

import { GracefulDisconnectManager } from '#/lib/disconnect.manager'

import type { WebSocketData } from '../websocket/websocket.handler'

export const userHandler = {
    open(ws: ServerWebSocket<WebSocketData>) {
        const { user } = ws.data
        // Subscribe to a private, user-specific topic
        GracefulDisconnectManager.cancel(user.id)

        const userTopic = `user-${user.id}`
        ws.subscribe(userTopic)
        console.log(
            `User ${user.username} subscribed to private updates on topic ${userTopic}`
        )
        ws.send(
            JSON.stringify({
                type: 'notification',
                message: 'You are now subscribed to private user updates.',
            })
        )
    },

    message() {
        // This channel is primarily for server-to-client pushes, so we can ignore client messages.
    },

    close(ws: ServerWebSocket<WebSocketData>) {
        const { user } = ws.data
        GracefulDisconnectManager.start(user.id)

        const userTopic = `user-${user.id}`
        ws.unsubscribe(userTopic)
        console.log(`User ${user.username} unsubscribed from private updates.`)
    },
}
</file>

<file path="./backend/src/routes/user/user.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'
import { createErrorSchema, IdParamsSchema } from 'stoker/openapi/schemas'

import { createRouter } from '#/lib/create-app'

import {
    insertUserSchema,
    selectUserSchema,
} from '../../db/schema'
import { notFoundSchema } from '../../lib/constants'
import * as controller from './user.controller'

export const tags = ['User']

export const listUser = createRoute({
    path: '/users',
    method: 'get',
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.array(selectUserSchema),
            'The list of users',
        ),
    },
})

export const createUser = createRoute({
    path: '/users',
    method: 'post',
    request: {
        body: jsonContentRequired(insertUserSchema, 'The user to create'),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(selectUserSchema, 'The created user'),
        [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
            createErrorSchema(insertUserSchema),
            'The validation error(s)',
        ),
    },
})

export const getOneUser = createRoute({
    path: '/users/{id}',
    method: 'get',
    request: {
        params: IdParamsSchema,
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(selectUserSchema, 'The requested user'),
        [HttpStatusCodes.NOT_FOUND]: jsonContent(notFoundSchema, 'User not found'),
        [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
            createErrorSchema(IdParamsSchema),
            'Invalid id error',
        ),
    },
})

export const updateUser = createRoute({
    path: '/users/{id}',
    method: 'patch',
    request: {
        params: IdParamsSchema,
        body: jsonContentRequired(selectUserSchema, 'The user updates'),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(selectUserSchema, 'The updated user'),
        [HttpStatusCodes.NOT_FOUND]: jsonContent(notFoundSchema, 'User not found'),
    // [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
    //   createErrorSchema(User).or(createErrorSchema(IdParamsSchema)),
    //   "The validation error(s)",
    // ),
    },
})

export const removeUser = createRoute({
    path: '/users/{id}',
    method: 'delete',
    request: {
        params: IdParamsSchema,
    },
    tags,
    responses: {
        [HttpStatusCodes.NO_CONTENT]: {
            description: 'User deleted',
        },
        [HttpStatusCodes.NOT_FOUND]: jsonContent(notFoundSchema, 'User not found'),
        [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
            createErrorSchema(IdParamsSchema),
            'Invalid id error',
        ),
    },
})

export const checkUser = createRoute({
    method: 'get',
    path: '/users/{id}/check',
    tags,
    summary: 'Check if a user exists',
    request: { params: IdParamsSchema },
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({ userCheck: z.boolean() }),
            'User status',
        ),
        [HttpStatusCodes.NOT_FOUND]: jsonContent(notFoundSchema, 'User not found'),
    },
})

// export const getBalance = createRoute({
//   method: "get",
//   path: "/users/{id}/balance",
//   tags,
//   summary: "Get user's balance",
//   request: { params: IdParamsSchema },
//   responses: {
//     [HttpStatusCodes.OK]: jsonContent(
//       z.array(selectBalancesSchema),
//       "User balance",
//     ),
//   },
// });

// export const setCurrency = createRoute({
//   method: "post",
//   path: "/users/{id}/currency",
//   tags,
//   summary: "Set user's currency",
//   request: {
//     params: IdParamsSchema,
//     body: jsonContentRequired(
//       z.object({ currency: z.string() }),
//       "The currency to set",
//     ),
//   },
//   responses: {
//     [HttpStatusCodes.OK]: jsonContent(selectCurrenciesSchema, "Currency set"),
//     [HttpStatusCodes.BAD_REQUEST]: jsonContent(
//       createErrorSchema(z.object({ currency: z.string() })),
//       "Invalid currency",
//     ),
//   },
// });

export const verifyEmail = createRoute({
    method: 'post',
    path: '/users/{id}/verify-email',
    tags,
    summary: 'Send email verification',
    request: { params: IdParamsSchema },
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({ status: z.string(), time: z.number() }),
            'Verification sent',
        ),
    },
})

export const getInfo = createRoute({
    method: 'get',
    path: '/users/{id}/info',
    tags,
    summary: 'Get user info',
    request: { params: IdParamsSchema },
    responses: {
        [HttpStatusCodes.OK]: jsonContent(selectUserSchema, 'User info'),
        [HttpStatusCodes.NOT_FOUND]: jsonContent(notFoundSchema, 'User not found'),
    },
})

export const getVipInfo = createRoute({
    method: 'get',
    path: '/users/{id}/vipinfo',
    tags,
    summary: 'Get user VIP info',
    request: { params: IdParamsSchema },
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({ vipLevel: z.number().nullable() }),
            'VIP info',
        ),
    },
})

// New routes
export const getUserAmount = createRoute({
    path: '/user/amount',
    method: 'get',
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({
                amount: z.number(),
                currency: z.object({
                    fiat: z.boolean(),
                    name: z.string(),
                    symbol: z.string(),
                    type: z.string(),
                }),
                withdraw: z.number(),
                rate: z.number(),
            }),
            'Get user amount',
        ),
    },
})

export const updateUserInfo = createRoute({
    path: '/user/change',
    method: 'post',
    request: {
        body: jsonContentRequired(insertUserSchema, 'The user info to update'),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(selectUserSchema, 'The updated user'),
    },
})

export const updateEmail = createRoute({
    path: '/user/email',
    method: 'post',
    request: {
        body: jsonContentRequired(
            z.object({
                email: z.string().email(),
                password: z.string(),
            }),
            'The email to update',
        ),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(selectUserSchema, 'The updated user'),
    },
})

export const updatePassword = createRoute({
    path: '/user/password',
    method: 'post',
    request: {
        body: jsonContentRequired(
            z.object({
                now_password: z.string(),
                new_password: z.string(),
            }),
            'The password to update',
        ),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({ message: z.string() }),
            'Password updated',
        ),
    },
})

export const suspendUser = createRoute({
    path: '/user/suspend',
    method: 'post',
    request: {
        body: jsonContentRequired(
            z.object({
                time: z.number(),
            }),
            'The suspension time',
        ),
    },
    tags,
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({ message: z.string() }),
            'User suspended',
        ),
    },
})

// export const getBalanceList = createRoute({
//   path: "/user/balance/list",
//   method: "get",
//   tags,
//   responses: {
//     [HttpStatusCodes.OK]: jsonContent(
//       z.array(selectBalancesSchema),
//       "The list of balances",
//     ),
//   },
// });

export const enterGame = createRoute({
    method: 'post',
    path: '/enter/game',
    tags,
    responses: { 200: { description: 'Enter game' } },
})

export const userGame = createRoute({
    method: 'post',
    path: '/games',
    tags,
    responses: { 200: { description: 'User game' } },
})

export const favoriteGame = createRoute({
    method: 'post',
    path: '/setup/game',
    tags,
    responses: { 200: { description: 'Favorite game' } },
})

export const gameHistory = createRoute({
    method: 'get',
    path: '/gamehistory',
    tags,
    responses: { 200: { description: 'Game history' } },
})

export const spinPage = createRoute({
    method: 'get',
    path: '/spinpage',
    tags,
    responses: { 200: { description: 'Spin page' } },
})

export const spin = createRoute({
    method: 'post',
    path: '/spin',
    tags,
    responses: { 200: { description: 'Spin' } },
})

export const favoriteGameList = createRoute({
    method: 'get',
    path: '/favorite/game',
    tags,
    responses: { 200: { description: 'Favorite game list' } },
})

export const endGameSession = createRoute({
    method: 'post',
    path: '/end-game-session',
    tags,
    summary: 'End the current game session',
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({ success: z.boolean(), message: z.string() }),
            'Session ended response',
        ),
        [HttpStatusCodes.UNAUTHORIZED]: { description: 'Unauthorized' },
    },
})

export const router = createRouter()
// .openapi(createUser, controller.createUser)
    .openapi(listUser, controller.listUser as any)
    .openapi(enterGame, controller.enterGame)
    .openapi(userGame, controller.userGame)
    .openapi(favoriteGame, controller.favoriteGame)
// .openapi(gameHistory, controller.gameHistory)
    .openapi(spinPage, controller.spinPage)
    .openapi(spin, controller.spin)
    .openapi(favoriteGameList, controller.favoriteGameList)
    .openapi(endGameSession, controller.endSession as any)

// Basic CRUD
    .openapi(getOneUser, controller.getUserById as any)
    .openapi(updateUser, controller.updateUser as any)
    .openapi(removeUser, controller.deleteUser as any)

// From Pinia Store & HAR files
    .openapi(checkUser, controller.checkUser as any)
// .openapi(getBalance, controller.getBalance)
// .openapi(setCurrency, controller.setCurrency)
    .openapi(verifyEmail, controller.verifyEmail)
    .openapi(getInfo, controller.getInfo as any)
    .openapi(getVipInfo, controller.getVipInfo as any)

// New Routes
    .openapi(getUserAmount, controller.getUserAmount)
    .openapi(updateUserInfo, controller.updateUserInfo as any)
    .openapi(updateEmail, controller.updateEmail as any)
    .openapi(updatePassword, controller.updatePassword)
    .openapi(suspendUser, controller.suspendUser)
// .openapi(getBalanceList, controller.getBalanceList);

export default router
</file>

<file path="./backend/src/routes/user/user.service.ts">
/* eslint-disable ts/ban-ts-comment */
import type { z } from '@hono/zod-openapi'
import type { createInsertSchema } from 'drizzle-zod'

import { eq, ilike, or } from 'drizzle-orm'

import db from '#/db'
import { users } from '#/db/schema'

import type {
    Newusers,
} from '../../db/schema'

export async function findManyUser(
    limit?: number,
    offset?: number,
    filter?: { username?: string; email?: string },
) {
    const query = db.select().from(users)

    if (filter) {
        const { username, email } = filter
        if (username || email) {
            query.where(
                or(
                    username ? ilike(users.username, `%${username}%`) : undefined,
                    email ? ilike(users.email, `%${email}%`) : undefined,
                ),
            )
        }
    }

    if (limit) {
        query.limit(limit)
    }

    if (offset) {
        query.offset(offset)
    }

    return await query
}

export async function createUser(data: z.infer<ReturnType<typeof createInsertSchema>>) {
    return await db.insert(users).values(data).returning()
}

export async function findUserById(id: string) {
    return await db.select().from(users).where(eq(users.id, id))
}

export async function updateUser(id: string, data: Partial<Newusers>) {
    // @ts-ignore
    return await db.update(User).set(data).where(eq(User.id, id)).returning()
}

export async function deleteUser(id: string) {
    return await db.delete(users).where(eq(users.id, id)).returning()
}

// From Pinia Store & HAR files

export async function checkUser(userId: string) {
    // Assuming a simple check that returns the user if they exist
    return await findUserById(userId)
}

// export async function getUserBalance(userId: string) {
//   return await db.select().from(balances).where(eq(balances.userId, userId));
// }

// export async function setUserCurrency(currencyCode: string) {
//   // This is a simplified example. A real implementation would be more complex.
//   const currency = await db
//     .select()
//     .from(currencies)
//     .where(eq(currencies.code, currencyCode));
//   if (currency.length === 0) {
//     throw new Error("Invalid currency code");
//   }
//   // Logic to update user's currency preference would go here.
//   // For now, we'll just return the currency.
//   return currency[0];
// }

export async function sendEmailVerification(userId: string) {
    // Placeholder for sending a verification email
    console.log(`Sending verification email to user`, userId)
    return { status: 'ok', time: Date.now() }
}

export async function getUserInfo(userId: string) {
    return await findUserById(userId)
}

export async function getVipInfo(userId: string) {
    // Assuming vip info is part of the users table for now
    return await db
        .select({ vipInfo: users.vipInfoId })
        .from(users)
        .where(eq(users.id, userId))
}

// New Routes
export async function getUserAmount() {
    // Placeholder, you will need to implement the actual logic
    return {
        amount: 1000,
        currency: { fiat: true, name: 'USD', symbol: '$', type: 'fiat' },
        withdraw: 500,
        rate: 1,
    }
}

export async function updateUserInfo(data: Newusers) {
    // Placeholder, you will need to implement the actual logic
    return { data }
}

export async function updateEmail(data: {
    email: string;
    password: string;
}) {
    // Placeholder, you will need to implement the actual logic
    return { ...data }
}

export async function updatePassword(data: {
    now_password: string;
    new_password: string;
}) {
    // Placeholder, you will need to implement the actual logic
    console.log(data)
}

export async function suspendUser(data: { time: number }) {
    // Placeholder, you will need to implement the actual logic
    console.log(data)
}

// export async function getBalanceList() {
//   return await db.select().from(balances);
// }

// Game Routes
export async function enterGame() {
    // Placeholder
    return {}
}

export async function userGame() {
    // Placeholder
    return []
}

export async function favoriteGame() {
    // Placeholder
    return { success: true }
}

// export async function getGameHistory(userId: string) {
//   return await db.select().from(GameHistory).where(eq(gameHistory.userId, userId));
// }

export async function spinPage() {
    // Placeholder
    return {}
}

export async function spin() {
    // Placeholder
    return {}
}

export async function favoriteGameList() {
    // Placeholder
    return []
}
</file>

<file path="./backend/src/routes/vip/vip.config.ts">
// src/modules/vip/vip.config.ts
export interface LevelBenefit {
    id: string;
    name: string;
    description: string;
    type: 'monetary' | 'item' | 'perk';
    value?: number | string;
    currencyId?: string;
}

export interface CycleRewardConfig {
    type: 'daily' | 'weekly' | 'monthly';
    rewardName: string;
    description: string;
    amount?: number;
    currencyId?: string;
    items?: { itemId: string; quantity: number }[];
}

export interface SignInReward {
    day: number;
    description: string;
    amount?: number;
    currencyId?: string;
    xp?: number;
}

export interface LevelConfig {
    level: number;
    name: string;
    xpRequired: number;
    xpMultiplier: number;
    cumulativeXpToReach: number;
    cashbackPercentage: number;
    prioritySupport: boolean;
    initialSpecialBonuses?: number;
    benefits: LevelBenefit[];
    dailyBonusMultiplier: number;
    levelUpRewards?: Array<{
        id: string;
        type: string;
        description: string;
        amount?: number;
        currencyId?: string;
        metaData?: Record<string, any>;
    }>;
    dailyCycleReward?: CycleRewardConfig;
    weeklyCycleReward?: CycleRewardConfig;
    monthlyCycleReward?: CycleRewardConfig;
}

export const VIP_LEVEL_CONFIGS: Readonly<LevelConfig[]> = Object.freeze([
    {
        level: 1,
        name: 'Bronze',
        xpRequired: 100,
        xpMultiplier: 1,
        cumulativeXpToReach: 0,
        cashbackPercentage: 0.01,
        prioritySupport: false,
        benefits: [],
        dailyBonusMultiplier: 1.0,
        levelUpRewards: [{
            id: 'bronze-welcome-bonus',
            type: 'monetary',
            description: 'Welcome Bonus!',
            amount: 10,
            currencyId: 'USD_FUN',
        }],
        dailyCycleReward: {
            type: 'daily',
            rewardName: 'Daily Login Spark',
            description: 'A small daily spark.',
            amount: 1,
            currencyId: 'USD_FUN',
        },
    },
    {
        level: 2,
        name: 'Silver',
        xpRequired: 200,
        xpMultiplier: 1.1,
        cumulativeXpToReach: 100,
        cashbackPercentage: 0.02,
        prioritySupport: true,
        benefits: [],
        dailyBonusMultiplier: 1.1,
        levelUpRewards: [{
            id: 'silver-tier-bonus',
            type: 'monetary',
            description: 'Silver Tier Bonus!',
            amount: 50,
            currencyId: 'USD_FUN',
        }],
        dailyCycleReward: {
            type: 'daily',
            rewardName: 'Daily Silver Bonus',
            description: 'A better daily bonus.',
            amount: 5,
            currencyId: 'USD_FUN',
        },
        weeklyCycleReward: {
            type: 'weekly',
            rewardName: 'Weekly Silver Chest',
            description: 'A chest of goodies.',
            items: [{ itemId: 'silver_key', quantity: 1 }],
        },
    },
    // ... more levels can be added here
])

export const DAILY_SIGN_IN_REWARDS: Readonly<SignInReward[]> = Object.freeze([
    { day: 1, description: 'Day 1: Welcome Sparkles!', xp: 10, amount: 1, currencyId: 'USD_FUN' },
    { day: 2, description: 'Day 2: Double Sparkles!', xp: 20, amount: 2, currencyId: 'USD_FUN' },
    { day: 3, description: 'Day 3: Minor Boost!', xp: 30, amount: 5, currencyId: 'USD_FUN' },
    { day: 4, description: 'Day 4: Steady On!', xp: 20, amount: 2, currencyId: 'USD_FUN' },
    { day: 5, description: 'Day 5: Mid-week Perk!', xp: 50, amount: 10, currencyId: 'USD_FUN' },
    { day: 6, description: 'Day 6: Almost there!', xp: 20, amount: 2, currencyId: 'USD_FUN' },
    { day: 7, description: 'Day 7: Weekly Jackpot!', xp: 100, amount: 25, currencyId: 'USD_FUN' },
])

// ... (all the interface definitions and VIP_LEVEL_CONFIGS array remain the same)

export function getVipLevelConfiguration(level: number): Readonly<LevelConfig> | undefined {
    return VIP_LEVEL_CONFIGS.find(l => l.level === level)
}

// This function was missing and has been restored
export function getAllVipLevelConfigurations(): Readonly<LevelConfig[]> {
    return VIP_LEVEL_CONFIGS
}

export function getVipLevelByTotalXp(totalXp: number): Readonly<LevelConfig> {
    for (let i = VIP_LEVEL_CONFIGS.length - 1; i >= 0; i--) {
        const config = VIP_LEVEL_CONFIGS[i]
        if (config && totalXp >= config.cumulativeXpToReach) {
            return config
        }
    }
    return VIP_LEVEL_CONFIGS[0]!
}
</file>

<file path="./backend/src/routes/vip/vip.controller.ts">
import type { Context } from 'hono'

import * as service from './vip.service'

/**
 * Gets the detailed VIP status for the currently authenticated user.
 */
export async function getMyVipDetails(c: Context) {
    const user = c.get('user')
    if (!user) {
        return c.json({ error: 'Unauthorized' }, 401)
    }

    try {
        const vipDetails = await service.getVipDetailsForusers(user.id)
        if (!vipDetails) {
            return c.json({ error: 'VIP information not found for user.' }, 404)
        }
        return c.json(vipDetails)
    }
    catch (error) {
        const message = error instanceof Error ? error.message : 'An unknown error occurred.'
        return c.json({ error: message }, 500)
    }
}

/**
 * Gets the VIP level configuration table.
 */
export async function getVipLevels(c: Context) {
    try {
        const levels = await service.getAllvipLevels()
        return c.json(levels)
    }
    catch (error) {
        const message = error instanceof Error ? error.message : 'An unknown error occurred.'
        return c.json({ error: message }, 500)
    }
}

/**
 * Gets the VIP rank configuration table.
 */
export async function getVipRanks(c: Context) {
    try {
        const ranks = await service.getAllvipRanks()
        return c.json(ranks)
    }
    catch (error) {
        const message = error instanceof Error ? error.message : 'An unknown error occurred.'
        return c.json({ error: message }, 500)
    }
}
</file>

<file path="./backend/src/routes/vip/vip.router.ts">
import { createRoute, z } from '@hono/zod-openapi'

import {
    selectVipLevelSchema,
    selectVipRankSchema,
    vipInfoResponseSchema,
} from '#/db'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'

import * as controller from './vip.controller'

const tags = ['VIP']

// ---  Definitions ---
const getMyVipDetails = createRoute({
    method: 'get',
    path: '/vip/me',
    middleware: [authMiddleware],
    tags,
    summary: 'Get the authenticated user VIP details',
    responses: {
        200: {
            description:
                'Returns the users VIP information, rank, and progress.',
            content: {
                'application/json': {
                    schema: z
                        .object({
                            vipInfo: vipInfoResponseSchema.openapi('VipInfo'),
                            vipRank: selectVipRankSchema.openapi('VipRank'),
                            xpForNextLevel: z.number(),
                        })
                        .openapi('VipDetails'),
                },
            },
        },
        401: { description: 'Unauthorized' },
        404: { description: 'VIP Info not found' },
    },
})

const getVipLevels = createRoute({
    method: 'get',
    path: '/vip/levels',
    middleware: [authMiddleware],
    tags,
    summary: 'Get the configuration for all VIP levels',
    responses: {
        200: {
            description: 'Returns the VIP level configuration table.',
            content: {
                'application/json': {
                    schema: z.array(selectVipLevelSchema.openapi('VipLevel')),
                },
            },
        },
    },
})

const getVipRanks = createRoute({
    method: 'get',
    path: '/vip/ranks',
    middleware: [authMiddleware],
    tags,
    summary: 'Get the configuration for all VIP ranks',
    responses: {
        200: {
            description: 'Returns the VIP rank configuration table.',
            content: {
                'application/json': {
                    schema: z.array(selectVipRankSchema.openapi('VipRank')),
                },
            },
        },
    },
})

const router = createRouter()

// All VIP routes require authentication

router.openapi(getMyVipDetails, controller.getMyVipDetails as any)
router.openapi(getVipLevels, controller.getVipLevels as any)
router.openapi(getVipRanks, controller.getVipRanks as any)

export default router
</file>

<file path="./backend/src/routes/vip/vip.service.ts">
import type { ExtractTablesWithRelations } from 'drizzle-orm'
import type { BunSQLQueryResultHKT } from 'drizzle-orm/bun-sql'
import type { PgTransaction } from 'drizzle-orm/pg-core'

import { eq } from 'drizzle-orm'

import type { VipInfoType, VipRankType, } from '#/db'
import db, { users, vipInfo, vipRank } from '#/db'
import type * as schema from '#/db/schema'
import { publishUserUpdated } from '#/lib/websocket.service'

import { nanoid } from 'nanoid'
import { getAllVipLevelConfigurations, getVipLevelByTotalXp, getVipLevelConfiguration } from './vip.config' // Ensure the function is imported

type Transaction = PgTransaction<BunSQLQueryResultHKT, typeof schema, ExtractTablesWithRelations<typeof schema>>

export interface XpCalculationResult {
    xpGained: number;
    newTotalXp: number;
    newCurrentLevelXp: number;
    levelChanged: boolean;
    newLevel: number;
    oldLevel: number;
}

interface VipDetails {
    info: VipInfoType;
    rank: VipRankType;
    xpForNextLevel: number;
}

// Export the function so the controller can use it
export { getAllVipLevelConfigurations as getAllvipLevelConfigurations }

export async function getAllvipLevels() {
    return db.query.vipLevel.findMany()
}

export async function getAllvipRanks() {
    return db.query.vipRank.findMany()
}

/**
 * Retrieves a comprehensive overview of a user's VIP status.
 */
export async function getVipDetailsForusers(userId: string): Promise<VipDetails | null> {
    let _vipInfo = await db.query.vipInfo.findFirst({ where: eq(vipInfo.userId, userId) })
    if (!_vipInfo) {
        _vipInfo = await db.transaction(async tx => createDefaultvipInfo(userId, tx as any))
    }
    if (!_vipInfo) {
        return null
    }
    const currentRank = await db.query.vipRank.findFirst({
        where: eq(vipRank.id, vipInfo.currentRankid!),
    })

    if (!currentRank) {
        throw new Error(`No matching VIP Rank found for user ${userId}.`)
    }

    const nextLevelData = await db.query.vipLevel.findFirst({
        where: eq(vipInfo.level, _vipInfo.level),
    })

    if (!nextLevelData) {
        throw new Error(`XP requirement for level ${_vipInfo.level} not found.`)
    }

    return {
        info: _vipInfo,
        rank: currentRank,
        xpForNextLevel: nextLevelData.xpForNext,
    }
}

export function calculateXpForWagerAndWins(
    wagerAmount: number,
    winAmount: number,
    vipInfo: VipInfoType
): { baseXp: number; bonusXp: number; totalXp: number } {
    if (wagerAmount <= 0) {
        return { baseXp: 0, bonusXp: 0, totalXp: 0 }
    }

    const levelConfig = getVipLevelConfiguration(vipInfo.level)
    const multiplier = levelConfig?.dailyBonusMultiplier || 1.0

    // Base XP is from the wager amount
    const baseXp = Math.floor(wagerAmount * multiplier)

    // Bonus XP is based on the win multiplier
    let bonusXp = 0
    const winMultiplier = winAmount / wagerAmount

    if (winMultiplier >= 100) { // Mega Win
        bonusXp = Math.floor(baseXp * 1.00) // 100% bonus
    } else if (winMultiplier >= 50) { // Huge Win
        bonusXp = Math.floor(baseXp * 0.50) // 50% bonus
    } else if (winMultiplier >= 10) { // Big Win
        bonusXp = Math.floor(baseXp * 0.25) // 25% bonus
    }

    // If it was a winning spin, double the base XP
    const totalXp = (winAmount > 0 ? baseXp * 2 : baseXp) + bonusXp

    return { baseXp, bonusXp, totalXp }
}

export async function addXpTousers(userId: string, xpAmount: number): Promise<XpCalculationResult | null> {
    if (xpAmount <= 0) {
        throw new Error('XP amount must be positive')
    }

    return await db.transaction(async (tx) => {
        let _vipInfo = await tx.query.vipInfo.findFirst({ where: eq(vipInfo.userId, userId) })
        if (!_vipInfo) {
            _vipInfo = await createDefaultvipInfo(userId, tx as any)
        }
        if (!_vipInfo) {
            return null
        }
        const oldLevel = _vipInfo.level
        const oldTotalXp = _vipInfo.totalXp
        const newTotalXp = oldTotalXp + xpAmount

        const newLevelConfig = getVipLevelByTotalXp(newTotalXp)
        const newLevel = newLevelConfig.level
        const newCurrentLevelXp = newTotalXp - newLevelConfig.cumulativeXpToReach

        await tx.update(vipInfo).set({
            totalXp: newTotalXp,
            level: newLevel,
            xp: newCurrentLevelXp,
        }).where(eq(vipInfo.userId, userId))

        const result = {
            xpGained: xpAmount,
            newTotalXp,
            newCurrentLevelXp,
            levelChanged: oldLevel !== newLevel,
            newLevel,
            oldLevel,
        }

        if (result.levelChanged) {
            await applyLevelUpBenefits(userId, newLevel, tx as any)
        }

        return result
    }).then((result) => {
        // Notify client with a VIP patch. Include minimal fields; client can refetch snapshot if needed.
        publishUserUpdated(userId, {
            vipInfo: result
                ? {
                        level: result.newLevel,
                        totalXp: result.newTotalXp,
                        xp: result.newCurrentLevelXp,
                    }
                : {},
        })
        return result
    })
}

async function createDefaultvipInfo(userId: string, tx: Transaction): Promise<VipInfoType> {
    const _users = await tx.select().from(users).where(eq(users.id, userId)).limit(1)
    if (!_users[0]) {
        throw new Error(`users with ID ${userId} not found.`)
    }
    const id = nanoid()
    const [newvipInfo] = await tx.insert(vipInfo).values({
        id,
        userId,
        level: 1,
        xp: 0,
        totalXp: 0,
    }).returning()

    return newvipInfo
}

async function applyLevelUpBenefits(userId: string, newLevel: number, _tx: Transaction): Promise<void> {
    const levelConfig = getVipLevelConfiguration(newLevel)
    if (!levelConfig)
        return

    // The tx parameter is currently unused, prefixing with _ to satisfy ESLint
    console.log(`users ${userId} has reached level ${newLevel}! Applying benefits.`)
}
</file>

<file path="./backend/src/routes/wallet/wallet.controller.ts">
import type { Context } from 'hono'

import { creditTowallets, debitFromwallets } from './wallet.service' // Assuming wallet service is in the same directory

export async function handleUpdateBalance(c: Context) {
    const user = c.get('user')
    const { amount, type, description } = await c.req.json()

    if (!user) {
        return c.json({ error: 'Unauthorized' }, 401)
    }

    if (typeof amount !== 'number' || amount <= 0) {
        return c.json({ error: 'Invalid amount' }, 400)
    }

    try {
        if (type === 'credit') {
            await creditTowallets(user.id, amount, description || 'Test credit')
        }
        else if (type === 'debit') {
            await debitFromwallets(user.id, amount, description || 'Test debit')
        }
        else {
            return c.json({ error: 'Invalid transaction type' }, 400)
        }
        return c.json({ success: true, message: `Balance updated successfully.` })
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.'
        return c.json({ error: errorMessage }, 500)
    }
}
</file>

<file path="./backend/src/routes/wallet/wallet.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'
// import { createErrorSchema } from 'stoker/openapi/schemas'

import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { selectWalletSchema } from '#/db/schema'
import { getMyWallet, getWalletHistory, postSwitchOperator, } from './wallet.service'

const tags = ['Wallets']

export const getMyWalletRoute = createRoute({
    method: 'get',
    path: '/wallets/me',
    tags,
    summary: 'Get the active wallet for the authenticated user',
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({
                wallet: selectWalletSchema.nullable(),
            }),
            'Active wallet summary or null if none is active'
        ),
        // Add error variants so handler types can union to them without violating the typed response
        [HttpStatusCodes.NOT_FOUND]: jsonContent(
            z.object({ error: z.string() }),
            'User not found'
        ),
    },
})

export const getWalletHistoryRoute = createRoute({
    method: 'get',
    path: '/wallets/history',
    tags,
    summary: 'List all wallets for the authenticated user',
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({
                wallets: z.array(selectWalletSchema),
            }),
            'All wallets for the authenticated user'
        ),
    },
})

export const postSwitchOperatorRoute = createRoute({
    method: 'post',
    path: '/wallets/switch-operator',
    tags,
    summary: 'Switch the active wallet to the given operator, creating if needed',
    request: {
        body: jsonContentRequired(
            // Inline schema here to avoid import/type resolution issues
            z.object({
                operatorId: z.string(),
                idempotencyKey: z.string().optional(),
            }),
            'Target operator to switch the active wallet to'
        ),
    },
    responses: {
        [HttpStatusCodes.OK]: jsonContent(
            z.object({
                wallet: selectWalletSchema,
            }),
            'The newly activated wallet'
        ),
        [HttpStatusCodes.BAD_REQUEST]: jsonContent(
            z.object({ error: z.string() }),
            'Invalid request body'
        ),
        [HttpStatusCodes.UNAUTHORIZED]: jsonContent(
            z.object({ error: z.string() }),
            'Unauthorized'
        ),
    },
})

const router = createRouter()

// Require auth for all wallet endpoints
router.use('/wallets/*', authMiddleware)

router.openapi(getMyWalletRoute, getMyWallet)
router.openapi(getWalletHistoryRoute, getWalletHistory)
router.openapi(postSwitchOperatorRoute, postSwitchOperator)

export default router

export type GetMyWalletRoute = typeof getMyWalletRoute
export type GetWalletHistoryRoute = typeof getWalletHistoryRoute
export type PostSwitchOperatorRoute = typeof postSwitchOperatorRoute
</file>

<file path="./backend/src/routes/wallet/wallet.service.ts">
import { and, eq } from 'drizzle-orm'

import db from '#/db'
import { transactions, users, wallets } from '#/db/schema'
import { publishUserUpdated } from '#/lib/websocket.service'
import { nanoid } from 'nanoid'
import type { Context } from 'hono'

/**
 * Debits a specified amount from a user's active wallet.
 * Throws an error if the user or wallet is not found, or if funds are insufficient.
 */
export async function debitFromwallets(userId: string, amountToDebit: number, description: string): Promise<void> {
    if (amountToDebit <= 0) {
        throw new Error('Debit amount must be positive.')
    }

    await db.transaction(async (tx) => {
        const user = await tx.query.users.findFirst({
            where: eq(users.id, userId),
            with: { activeWallet: true },
        })

        if (!user?.activeWallet) {
            throw new Error('Active wallet not found for user.')
        }

        const wallet = user.activeWallet

        if (wallet.balance < amountToDebit) {
            throw new Error('Insufficient funds.')
        }

        const newBalance = wallet.balance - amountToDebit

        await tx.update(wallets).set({ balance: newBalance }).where(eq(wallets.id, wallet.id))
        const id = nanoid()
        await tx.insert(transactions).values({
            id,
            walletId: wallet.id,
            userId,
            type: 'BET_PLACE',
            amount: amountToDebit,
            balanceBefore: wallet.balance,
            balanceAfter: newBalance,
            description,
        })
    })

    // After the transaction is successful, notify the client with a wallet patch.
    publishUserUpdated(userId, {
        wallet: {
            // We do not know exact balance here without another query; client will refresh via snapshot if needed.
            // If you prefer an exact number, fetch the updated balance and include it.
        },
    })
}

/**
 * Credits a specified amount to a user's active wallet.
 */
export async function creditTowallets(userId: string, amountToCredit: number, description: string): Promise<void> {
    if (amountToCredit <= 0) {
        return // No need to process zero or negative credits.
    }

    await db.transaction(async (tx) => {
        const user = await tx.query.users.findFirst({
            where: eq(users.id, userId),
            with: { activeWallet: true },
        })

        if (!user?.activeWallet) {
            throw new Error('Active wallet not found for user.')
        }

        const wallet = user.activeWallet
        const newBalance = wallet.balance + amountToCredit

        await tx.update(wallets).set({ balance: newBalance }).where(eq(wallets.id, wallet.id))
        const id = nanoid()

        await tx.insert(transactions).values({
            id,
            walletId: wallet.id,
            userId,
            type: 'BET_WIN',
            amount: amountToCredit,
            balanceBefore: wallet.balance,
            balanceAfter: newBalance,
            description,
        })
    })

    // After crediting, send an update to the client.
    publishUserUpdated(userId, {
        wallet: {
            // Optionally include balance or last transaction info
        },
    })
}

/**
 * Helpers to read auth user from context
 */
function getAuthUserId(c: Context): string {
    const user = (c as any).var?.user
    if (!user?.id) {
        throw new Error('Unauthorized')
    }
    return String(user.id)
}

/**
 * GET /wallets/me
 * Return active wallet summary for the authenticated user.
 */
export async function getMyWallet(c: Context) {
    const userId = getAuthUserId(c)

    // Fetch user's activeWalletId then select that wallet
    const [u] = await db.select({ activeWalletId: users.activeWalletId }).from(users).where(eq(users.id, userId)).limit(1)
    // Router's typed response expects { wallet: ... } for all outcomes;
    // return wallet: null on missing user to satisfy schema.
    if (!u) return c.json({ wallet: null }, 200)

    if (!u.activeWalletId) {
        // No active wallet set
        return c.json({
            wallet: null,
        }, 200)
    }

    const [w] = await db
        .select({
            id: wallets.id,
            userId: wallets.userId,
            operatorId: wallets.operatorId,
            balance: wallets.balance,
            currency: wallets.currency,
            isActive: wallets.isActive,
            lastUsedAt: wallets.lastUsedAt,
            createdAt: wallets.createdAt,
            updatedAt: wallets.updatedAt,
        })
        .from(wallets)
        .where(and(eq(wallets.id, u.activeWalletId), eq(wallets.userId, userId)))
        .limit(1)

    return c.json({ wallet: w ?? null }, 200)
}

/**
 * GET /wallets/history
 * List all wallets (active and inactive) for the authenticated user.
 */
export async function getWalletHistory(c: Context) {
    const userId = getAuthUserId(c)

    const data = await db
        .select({
            id: wallets.id,
            userId: wallets.userId,
            operatorId: wallets.operatorId,
            balance: wallets.balance,
            currency: wallets.currency,
            isActive: wallets.isActive,
            lastUsedAt: wallets.lastUsedAt,
            createdAt: wallets.createdAt,
            updatedAt: wallets.updatedAt,
        })
        .from(wallets)
        .where(eq(wallets.userId, userId))

    return c.json({ wallets: data }, 200)
}

/**
 * POST /wallets/switch-operator
 * Transactionally deactivate current active wallet, activate or create the target operator wallet,
 * set users.activeWalletId, and return the new active wallet.
 *
 * Body: { operatorId: string, idempotencyKey?: string }
 */
export async function postSwitchOperator(c: Context) {
    const userId = getAuthUserId(c)
    const body = await c.req.json().catch(() => ({}))
    const operatorId = body?.operatorId as string | undefined
    if (!operatorId) {
        // Router declares BAD_REQUEST as { error: string }
        return c.json({ error: 'operatorId is required' }, 400)
    }

    const result = await db.transaction(async (tx) => {
        // Lock the user row
        const [u] = await tx
            .select({
                id: users.id,
                activeWalletId: users.activeWalletId,
            })
            .from(users)
            .where(eq(users.id, userId))
            .for('update')

        if (!u) throw new Error('User not found')

        // Deactivate current active wallet if any
        if (u.activeWalletId) {
            await tx.update(wallets)
                .set({ isActive: false })
                .where(and(eq(wallets.id, u.activeWalletId), eq(wallets.userId, userId)))
        }

        // Find existing wallet for (userId, operatorId)
        const [existing] = await tx
            .select({
                id: wallets.id,
                isActive: wallets.isActive,
            })
            .from(wallets)
            .where(and(eq(wallets.userId, userId), eq(wallets.operatorId, operatorId)))
            .limit(1)
            .for('update')

        let targetWalletId: string

        if (existing) {
            // Reactivate
            const [w] = await tx.update(wallets)
                .set({ isActive: true, lastUsedAt: new Date().toISOString(), updatedAt: new Date().toISOString() })
                .where(eq(wallets.id, existing.id))
                .returning({ id: wallets.id })
            targetWalletId = w[0].id
        } else {
            // Create new wallet for user/operator
            const [w] = await tx.insert(wallets)
                .values({
                    id: crypto.randomUUID(),
                    userId,
                    operatorId,
                    balance: 0,
                    currency: 'USD',
                    isActive: true,
                    isDefault: false,
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    lastUsedAt: new Date().toISOString(),
                } as any)
                .returning({ id: wallets.id })
            targetWalletId = w[0].id
        }

        // Update users.activeWalletId
        await tx.update(users)
            .set({ activeWalletId: targetWalletId, updatedAt: new Date().toISOString() as any })
            .where(eq(users.id, userId))

        // Return active wallet summary
        const [active] = await tx
            .select({
                id: wallets.id,
                userId: wallets.userId,
                operatorId: wallets.operatorId,
                balance: wallets.balance,
                currency: wallets.currency,
                isActive: wallets.isActive,
                lastUsedAt: wallets.lastUsedAt,
                createdAt: wallets.createdAt,
                updatedAt: wallets.updatedAt,
            })
            .from(wallets)
            .where(eq(wallets.id, targetWalletId))
            .limit(1)

        return active
    })

    // Emit WS event for wallet update
    publishUserUpdated(userId, {
        wallet: {
            id: result?.id,
            operatorId: result?.operatorId,
            balance: result?.balance,
            currency: result?.currency,
            isActive: result?.isActive,
            lastUsedAt: result?.lastUsedAt,
        },
    })

    return c.json({ wallet: result }, 200)
}
</file>

<file path="./backend/src/routes/websocket/chat.handler.ts">
import type { ServerWebSocket } from 'bun'
import type { Buffer } from 'node:buffer'

import type { WebSocketData } from './websocket.handler'

export const chatHandler = {
    open(ws: ServerWebSocket<WebSocketData>) {
        const { user } = ws.data
        console.log(`User ${user.username} joined the chat`)
        ws.subscribe('chat')
        ws.publish('chat', `${user.username} has joined the chat.`)
        ws.send(`Welcome to the chat, ${user.username}!`)
    },

    message(ws: ServerWebSocket<WebSocketData>, message: string | Buffer) {
        const { user } = ws.data
        console.log(`Message from ${user.username} in chat:`, message)
        ws.publish('chat', `${user.username}: ${message}`)
    },

    close(ws: ServerWebSocket<WebSocketData>) {
        const { user } = ws.data
        console.log(`User ${user.username} left the chat`)
        ws.unsubscribe('chat')
        ws.publish('chat', `${user.username} has left the chat.`)
    },
}
</file>

<file path="./backend/src/routes/websocket/proxy.handler.ts">
import type { Buffer } from 'node:buffer'
import chalk from 'chalk'

// LZW decompression function
function lzw_decode(s: string): string {
    if (!s) return ''
    const dict: { [key: number]: string } = {}
    const data = s.split('')
    let currChar = data[0]
    let oldPhrase = currChar
    const out = [currChar]
    let code = 256
    let phrase
    for (let i = 1; i < data.length; i++) {
        const currCode = data[i].charCodeAt(0)
        if (currCode < 256) {
            phrase = data[i]
        } else {
            phrase = dict[currCode] ? dict[currCode] : oldPhrase + currChar
        }
        out.push(phrase)
        currChar = phrase.charAt(0)
        dict[code] = oldPhrase + currChar
        code++
        oldPhrase = phrase
    }
    return out.join('')
}

export const proxyHandler = {
    open(ws: any) {
        console.log(chalk.green('[PROXY-WS] Client connected.'))
        ws.data.upstreamSocket = null

        try {
            const url = new URL(ws.data.url)
            const upstreamUrl = url.searchParams.get('upstream')

            if (!upstreamUrl) {
                console.error(
                    chalk.red('[PROXY-WS] Fatal: No upstream URL provided in query parameters.')
                )
                ws.close(1011, 'No upstream URL provided.')
                return
            }

            console.log(
                chalk.cyan(`[PROXY-WS] Connecting to upstream: ${upstreamUrl}`)
            )

            const upstreamSocket = new WebSocket(upstreamUrl)

            ws.data.upstreamSocket = upstreamSocket

            upstreamSocket.onopen = () => {
                console.log(
                    chalk.green(
                        '[PROXY-WS] Upstream connection established. Proxy is ready.'
                    )
                )
            }

            upstreamSocket.onmessage = (event) => {
                const decodedMessage = event.data.toString()
                if (decodedMessage.startsWith('lzw:')) {
                    const decompressed = lzw_decode(
                        decodedMessage.substring(4)
                    )
                    console.log(
                        chalk.magenta('[PROXY-WS] S -> C (DECODED):'),
                        decompressed
                    )
                    ws.send(decompressed)
                } else {
                    console.log(
                        chalk.magenta('[PROXY-WS] S -> C (RAW):'),
                        decodedMessage
                    )
                    ws.send(decodedMessage)
                }
            }

            upstreamSocket.onclose = () => {
                console.log(
                    chalk.yellow('[PROXY-WS] Upstream connection closed.')
                )
                ws.close()
            }

            upstreamSocket.onerror = (error) => {
                console.error(
                    chalk.red('[PROXY-WS] Upstream connection error:'),
                    error
                )
                ws.close()
            }
        } catch (e) {
            console.error(chalk.red('[PROXY-WS] Error in open handler:'), e)
            ws.close()
        }
    },

    message(ws: any, msg: Buffer) {
        if (ws.data.upstreamSocket && ws.data.upstreamSocket.readyState === WebSocket.OPEN) {
            const messageString = msg.toString()
            console.log(chalk.blue('[PROXY-WS] C -> S:'), messageString)
            ws.data.upstreamSocket.send(messageString)
        } else {
            console.log(chalk.yellow('[PROXY-WS] Received message, but upstream socket is not ready.'))
        }
    },

    close(ws: any) {
        console.log(chalk.yellow('[PROXY-WS] Client disconnected.'))
        if (ws.data.upstreamSocket) {
            ws.data.upstreamSocket.close()
        }
    },

    error(ws: any, error: Error) {
        console.error(chalk.red('[PROXY-WS] Client connection error:'), error)
        if (ws.data.upstreamSocket) {
            ws.data.upstreamSocket.close()
        }
    },
}
</file>

<file path="./backend/src/routes/websocket/proxy.router.ts">
import { Hono } from 'hono'
import { GameProxyService } from './proxy.service'

const router = new Hono()

// This route will accept the initial handshake request from the game client.
router.post('/EjsFrontWeb/fs', async (c) => {
    // The game sends the body as form data, so we parse it.
    const body = await c.req.parseBody()

    // We forward the request to the real server.
    const response = await GameProxyService.forwardRequest(body)

    // We return the real server's response back to the client.
    return c.json(response)
})

export default router
</file>

<file path="./backend/src/routes/websocket/proxy.service.ts">
import chalk from 'chalk'

// The real Nolimit server URL for the initial handshake
const UPSTREAM_URL = 'https://demo.nolimitcity.com/EjsFrontWeb/fs'

export const GameProxyService = {
    async forwardRequest(body: any): Promise<any> {
        console.log(
            chalk.blue('[PROXY-HTTP] Forwarding request to:'),
            UPSTREAM_URL
        )
        console.log(chalk.blue('[PROXY-HTTP] Body:'), JSON.stringify(body, null, 2))

        try {
            // We use a plain urlencoded form for this request
            const formData = new URLSearchParams()
            for (const key in body) {
                formData.append(key, body[key])
            }

            const response = await fetch(UPSTREAM_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Accept': 'application/json',
                },
                body: formData,
            })

            if (!response.ok) {
                const errorText = await response.text()
                console.error(
                    chalk.red(
                        `[PROXY-HTTP] Upstream request failed with status ${response.status}:`
                    ),
                    errorText
                )
                throw new Error(
                    `Upstream server responded with status ${response.status}`
                )
            }

            const data = await response.json()
            console.log(
                chalk.green('[PROXY-HTTP] Received response from upstream:'),
                data
            )
            return data
        } catch (error) {
            console.error(
                chalk.red('[PROXY-HTTP] Error forwarding request:'),
                error
            )
            throw new Error('Failed to forward request to upstream server.')
        }
    },
}
</file>

<file path="./backend/src/routes/websocket/websocket.handler.ts">
import type { ServerWebSocket } from 'bun'
import type { Buffer } from 'node:buffer'

import type { AuthSessionType, UserType } from '#/db/schema'

import { chatHandler } from './chat.handler'
import { notificationsHandler } from '../common/notifications.handler'
import { userHandler } from '../user/user.handler'
import { blackjackHandler } from '../blackjack/blackjack.handler' // Import the new handler
import { proxyHandler } from './proxy.handler'

// RPC helpers and contracts
import { rpcResultEnvelope, rpcErrorEnvelope } from 'shared/ws/envelope'
import type { WSMessage, RpcMessage } from 'shared/ws/protocol'
import type { UserEvents } from 'shared/ws/contracts'
import { eq } from 'drizzle-orm'
import db from '#/db'
import { vipInfo, wallets } from '#/db/schema'

// Define a map of topic names to their handlers
const topicHandlers = {
    chat: chatHandler,
    notifications: notificationsHandler,
    user: userHandler,
    blackjack: blackjackHandler, // Add the blackjack handler
    proxy: proxyHandler,
}

// Define an interface for the data attached to the WebSocket
export interface WebSocketData {
    user: UserType
    authSession: AuthSessionType
    topic: keyof typeof topicHandlers // The topic for this connection
}

export const websocketHandler = {
    open(ws: ServerWebSocket<WebSocketData>) {
        const { topic } = ws.data
        if (topicHandlers[topic]) {
            topicHandlers[topic].open(ws)
        } else {
            console.error(`No handler for topic: ${topic}`)
            ws.close(1011, 'Invalid topic')
        }
    },

    message(ws: ServerWebSocket<WebSocketData>, message: string | Buffer) {
        const { topic } = ws.data

        // Try to parse as a structured WSMessage for RPC support; fallback to legacy handler on failure.
        let parsed: WSMessage | null = null
        if (typeof message === 'string') {
            try {
                parsed = JSON.parse(message)
            } catch {
                parsed = null
            }
        } else {
            try {
                parsed = JSON.parse(new TextDecoder().decode(message as Buffer))
            } catch {
                parsed = null
            }
        }

        // Handle RPC messages for the 'user' topic
        if (parsed && parsed.kind === 'rpc' && topic === 'user') {
            const rpc = parsed as RpcMessage<'user', keyof any, any>
            void handleUserRpc(ws, rpc)
            return
        }

        // Default to existing topic handlers for non-RPC or other topics
        if (topicHandlers[topic]) {
            topicHandlers[topic].message(ws, message as any)
        }
    },

    close(ws: ServerWebSocket<WebSocketData>, code: number, reason: string) {
        const { topic } = ws.data
        if (topicHandlers[topic]) {
            // Pass all arguments to the topic handler's close method
            ;(topicHandlers[topic].close as any)(ws, code, reason)
        }
    },
}

/**
 * Handle RPC methods under the 'user' topic.
 * Currently supports:
 * - method: 'user.get' -> returns a snapshot of wallet + vipInfo for the current user
 */
async function handleUserRpc(
    ws: ServerWebSocket<WebSocketData>,
    rpc: RpcMessage<'user', string, any>
) {
    const { id, method } = rpc
    const { user } = ws.data

    try {
        switch (method) {
            case 'user.get': {
                const walletRow = await db.query.wallets.findFirst({
                    where: eq(wallets.userId, user.id),
                })
                const vipRow = await db.query.vipInfo.findFirst({
                    where: eq(vipInfo.userId, user.id),
                })

                const result: UserEvents['user.snapshot'] = {
                    userId: user.id,
                    user: {
                        id: user.id,
                        username: user.username,
                    } as Record<string, unknown>,
                    wallet: walletRow
                        ? { balance: walletRow.balance }
                        : undefined,
                    vipInfo: vipRow
                        ? {
                                level: vipRow.level,
                                xp: vipRow.xp,
                                totalXp: vipRow.totalXp,
                            }
                        : undefined,
                    ts: Date.now(),
                }

                const envelope = rpcResultEnvelope(id, result)
                ws.send(JSON.stringify(envelope))
                return
            }
            default: {
                const err = rpcErrorEnvelope(id, {
                    code: 'METHOD_NOT_FOUND',
                    message: `Unknown RPC method '${method}' for topic 'user'`,
                })
                ws.send(JSON.stringify(err))
            }
        }
    } catch (error: any) {
        const err = rpcErrorEnvelope(id, {
            code: 'INTERNAL_ERROR',
            message: error?.message ?? 'Unhandled RPC error',
        })
        ws.send(JSON.stringify(err))
    }
}
</file>

<file path="./backend/src/routes/websocket/websocket.router.ts">
import { createRouter } from '#/lib/create-app'

const router = createRouter()

// The route now accepts a topic parameter
router.get('/ws/:topic', (_c) => {
    return new Response('Upgrading to WebSocket', { status: 101 })
})

export default router
</file>

<file path="./backend/src/routes/gameService.route.ts">
import { createRoute } from '@hono/zod-openapi'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import { jsonContent } from 'stoker/openapi/helpers'
import { createMessageObjectSchema } from 'stoker/openapi/schemas'

import { createRouter } from '#/lib/create-app'

const gameService = createRouter()
    .openapi(
        createRoute({
            tags: ['Index'],
            method: 'get',
            path: '/',
            responses: {
                [HttpStatusCodes.OK]: jsonContent(
                    createMessageObjectSchema('Cashino API'),
                    'Cashino API Index',
                ),
            },
        }),
        (c) => {
            console.log('hai2u')
            return c.json({
                message: 'Cashino API',
            }, HttpStatusCodes.OK)
        },
    )

export default gameService
</file>

<file path="./backend/src/routes/index.route.ts">
import { createRoute } from '@hono/zod-openapi'
import * as HttpStatusCodes from 'stoker/http-status-codes'
import { jsonContent } from 'stoker/openapi/helpers'
import { createMessageObjectSchema } from 'stoker/openapi/schemas'

import { createRouter } from '#/lib/create-app'

const router = createRouter()
    .openapi(
        createRoute({
            tags: ['Index'],
            method: 'get',
            path: '/',
            responses: {
                [HttpStatusCodes.OK]: jsonContent(
                    createMessageObjectSchema('Cashino API'),
                    'Cashino API Index',
                ),
            },
        }),
        (c) => {
            return c.json({
                message: 'Cashino API',
            }, HttpStatusCodes.OK)
        },
    )

export default router
</file>

<file path="./backend/src/utils/crypto.js">
/**
 * This module provides simple encryption and decryption functionalities
 * using the RC4 stream cipher.
 *
 * WARNING: RC4 is considered cryptographically insecure and should not be
 * used for sensitive data. It is provided here for compatibility or
 * educational purposes only.
 */
'use strict'

const HEX_CHARS = '0123456789abcdef'

/**
 * Converts a hexadecimal string into an array of bytes.
 * @param {string} hexString - The hexadecimal string to convert.
 * @returns {number[]} An array of bytes.
 */
function hexStringToByteArray(hexString) {
    if (typeof hexString !== 'string') {
        return []
    }
    const bytes = []
    for (let i = 0; i < hexString.length; i += 2) {
        const high = HEX_CHARS.indexOf(hexString[i])
        const low = HEX_CHARS.indexOf(hexString[i + 1])
        bytes.push((high << 4) | low)
    }
    return bytes
}

/**
 * Converts an array of bytes into a hexadecimal string.
 * @param {number[]} byteArray - The array of bytes to convert.
 * @returns {string} The resulting hexadecimal string.
 */
function byteArrayToHexString(byteArray) {
    const hexChars = []
    byteArray.forEach(byte => {
        hexChars.push(HEX_CHARS.charAt((byte >> 4) & 0x0F))
        hexChars.push(HEX_CHARS.charAt(byte & 0x0F))
    })
    return hexChars.join('')
}

/**
 * Converts a UTF-8 string into an array of bytes.
 * Handles URI encoding to correctly represent multi-byte characters.
 * @param {string} str - The string to convert.
 * @returns {number[]} An array of bytes.
 */
function stringToByteArray(str) {
    const uriEncoded = encodeURIComponent(str)
    const bytes = []
    for (let i = 0; i < uriEncoded.length; i++) {
        const char = uriEncoded[i]
        if (char === '%') {
            const high = HEX_CHARS.indexOf(uriEncoded[i + 1].toLowerCase())
            const low = HEX_CHARS.indexOf(uriEncoded[i + 2].toLowerCase())
            bytes.push((high << 4) | low)
            i += 2
        } else {
            bytes.push(char.charCodeAt(0))
        }
    }
    return bytes
}

/**
 * Converts an array of bytes into a UTF-8 string.
 * @param {number[]} byteArray - The array of bytes to convert.
 * @returns {string} The resulting UTF-8 string.
 */
function byteArrayToString(byteArray) {
    let uriEncoded = ''
    for (const byte of byteArray) {
        uriEncoded += `%${HEX_CHARS.charAt((byte >> 4) & 0x0F)}${HEX_CHARS.charAt(byte & 0x0F)}`
    }
    // If the byte sequence is not valid UTF-8, this will throw a URIError.
    // This is the desired behavior, as it indicates an issue with the
    // key or the ciphertext.
    return decodeURIComponent(uriEncoded)
}

/**
 * Implements the RC4 stream cipher algorithm.
 * It performs the same operation for both encryption and decryption.
 * @param {number[]} key - The key as an array of bytes.
 * @param {number[]} data - The data to process as an array of bytes.
 * @returns {number[]} The processed (encrypted or decrypted) data as an array of bytes.
 */
function rc4(key, data) {
    // Key-Scheduling Algorithm (KSA)
    const sBox = []
    for (let i = 0; i < 256; i++) {
        sBox[i] = i
    }

    let j = 0
    for (let i = 0; i < 256; i++) {
        j = (j + sBox[i] + key[i % key.length]) % 256;
        // Swap sBox[i] and sBox[j]
        [sBox[i], sBox[j]] = [sBox[j], sBox[i]]
    }

    // Pseudo-Random Generation Algorithm (PRGA)
    let i = 0
    j = 0
    const result = []
    for (const charCode of data) {
        i = (i + 1) % 256
        j = (j + sBox[i]) % 256;
        // Swap sBox[i] and sBox[j]
        [sBox[i], sBox[j]] = [sBox[j], sBox[i]]
        const keyStreamChar = sBox[(sBox[i] + sBox[j]) % 256]
        result.push(charCode ^ keyStreamChar)
    }
    return result
}

const cryptoApi = {
    /**
     * Encrypts a plaintext string using a key.
     * @param {string} key - The encryption key.
     * @param {string} plaintext - The string to encrypt.
     * @returns {string} The encrypted string in hexadecimal format.
     */
    encrypt(key, plaintext) {
        const keyBytes = stringToByteArray(key)
        const plaintextBytes = stringToByteArray(plaintext)
        const encryptedBytes = rc4(keyBytes, plaintextBytes)
        return byteArrayToHexString(encryptedBytes)
    },

    /**
     * Decrypts a hexadecimal ciphertext string using a key.
     * @param {string} key - The decryption key.
     * @param {string} ciphertext - The hexadecimal string to decrypt.
     * @returns {string} The decrypted plaintext string.
     */
    decrypt(key, ciphertext) {
        const keyBytes = stringToByteArray(key)
        const ciphertextBytes = hexStringToByteArray(ciphertext)
        const decryptedBytes = rc4(keyBytes, ciphertextBytes)
        return byteArrayToString(decryptedBytes)
    }
}

module.exports = cryptoApi
</file>

<file path="./backend/src/utils/crypto.test.ts">
import { describe, it, expect } from 'vitest';
import crypto from './crypto.js';

describe('Crypto Module', () => {
    it('should encrypt and decrypt a simple string successfully', () => {
        const key = 'my-secret-key';
        const plaintext = 'This is a test message.';
        
        const encrypted = crypto.encrypt(key, plaintext);
        const decrypted = crypto.decrypt(key, encrypted);
        
        expect(decrypted).toBe(plaintext);
    });

    it('should handle UTF-8 characters correctly', () => {
        const key = 'another-secret';
        const plaintext = '你好,世界！🌍'; // "Hello, World!" in Chinese with an emoji
        
        const encrypted = crypto.encrypt(key, plaintext);
        const decrypted = crypto.decrypt(key, encrypted);
        
        expect(decrypted).toBe(plaintext);
    });

    it('should fail decryption with an incorrect key', () => {
        const key = 'correct-key';
        const wrongKey = 'wrong-key';
        const plaintext = 'This should not be revealed.';
        
        const encrypted = crypto.encrypt(key, plaintext);
        
        // Expecting the decrypt function to throw a URIError because the
        // resulting byte stream will not be valid UTF-8.
        expect(() => {
            crypto.decrypt(wrongKey, encrypted);
        }).toThrow(URIError);
    });

    it('should produce different results with corrupted ciphertext', () => {
        const key = 'a-good-key';
        const plaintext = 'Some important data.';
        
        const encrypted = crypto.encrypt(key, plaintext);
        const corruptedEncrypted = '00' + encrypted.slice(2); // Alter the first byte
        
        const decrypted = crypto.decrypt(key, corruptedEncrypted);

        expect(decrypted).not.toBe(plaintext);
    });
});
</file>

<file path="./backend/src/utils/lzw.ts">
const e = '0123456789abcdef'

export function lzwDecode(t) {
    const e = {}
    let i = (t = t.substr(4)).substr(0, 1)
    let n = i
    let s = 256
    const o = [i]
    for (let r = 1; r < t.length; r++) {
        const a = t.charCodeAt(r)
        let l
        l = a < 256 ? t.substr(r, 1) : e[a] ? e[a] : n + i, o.push(l), i = l.substr(0, 1), e[s] = n + i, s++, n = l
    }
    // if (JSON.parse(o.join("")).game) {
    //     if (JSON.parse(o.join("")).game.totalSpinWinnings) {
    //         if (JSON.parse(o.join("")).game.totalSpinWinnings > 0) {
    //             const coins = JSON.parse(o.join("")).game.totalSpinWinnings * 100
    //             // window.parent.supabase.rpc('nolimit_increment_coins', { row_id: window.parent.userId, val: coins }).then((data, error) => {
    //             //     console.log(error)
    //             //     console.log(data)
    //             //     window.top.postMessage('nolimit_increment_coins', '*')
    //             // })
    //         }
    //     }
    // }
    // console.log(o)

    return o.join('')
}
function n(t) {
    const i = encodeURIComponent(t).split('')
    const n = []
    for (let t = 0; t < i.length; t++) i[t] === '%' ? (n.push(e.indexOf(i[t + 1].toLowerCase()) << 4 | e.indexOf(i[t + 2].toLowerCase())), t += 2) : n.push(i[t].charCodeAt(0))
    return n
}
function i(t, e) {
    let i; let n; let s; let o = []
    let r = []
    for (i = 0; i < 256; i++) o[i] = i
    for (i = 0, n = 0; i < 256; i++) n = (n + o[i] + t[i % t.length]) % 256, s = o[i], o[i] = o[n], o[n] = s
    for (let t = 0, i = 0, n = 0; t < e.length; t++) i = (i + 1) % 256, n = (n + o[i]) % 256, s = o[i], o[i] = o[n], o[n] = s, r.push(e[t] ^ o[(o[i] + o[n]) % 256])
    return r
}
export function decrypt(t, s) {
    return (function (t) {
        let i = ''
        for (let n = 0; n < t.length; n++) i += `%${e.charAt(t[n] >> 4 & 15)}${e.charAt(15 & t[n])}`
        return decodeURIComponent(i)
    }(i(n(t), (function (t) {
        if (typeof t != 'string') return []
        const i = []
        const n = t.split('')
        for (let t = 0; t < n.length; t += 2) i.push(e.indexOf(n[t]) << 4 | e.indexOf(n[t + 1]))
        return i
    }(s)))))
}
</file>

<file path="./backend/src/utils/misc.utils.ts">
export function toDecimal(value: number | null): number | null {
    return value === null ? null : value
}

export function toNumber(value: number | null): number | null {
    return value === null ? null : value
}

export function decimalToNumber(value: number | null): number | null {
    if (value === null)
        return null
    return value
}

export function numberToDecimal(value: number | null): number | null {
    if (value === null)
        return null
    return value
}

/**
 * Checks if the given value is an instance of Decimal.
 * @param rtp The value to check.
 * @returns True if the value is a Decimal instance, false otherwise.
 */
export function isDecimal(rtp: unknown): rtp is number {
    return typeof rtp === 'number'
}

export const coinsToDollars = (coins: number): number => coins / 100
export const dollarsToCoins = (dollars: number): number => Math.round(dollars * 100)
export const toCents = (amount: number): number => Math.round(amount * 100)
export const fromCents = (amountInCents: number): number => amountInCents / 100
</file>

<file path="./backend/src/utils/nanoid.ts">
// utils/nanoid.ts
import { customAlphabet } from 'nanoid'

// Using a simple alphabet for demonstration.
// You can customize this as needed.
const alphabet = '0123456789abcdefghijklmnopqrstuvwxyz'
export const nanoid = customAlphabet(alphabet, 21)
</file>

<file path="./backend/src/app.ts">
import configureOpenAPI from '#/lib/configure-open-api'
import createApp from '#/lib/create-app'
import auth from '#/routes/auth/auth.router'
import game from '#/routes/games/games.router'
import gameService from '#/routes/gameService.route'
import gameSpin from '#/routes/gamespins/gamespins.router'
import index from '#/routes/index.route'
import redtiger from '#/routes/redtiger/redtiger.router'
import updates from '#/routes/updates/updates.router'
import wallet from '#/routes/wallet/wallet.router'
import users from '#/routes/user/user.router'
import vip from '#/routes/vip/vip.router'
import { serveStatic } from 'hono/bun'
import { cors } from 'hono/cors'

const app = createApp()

/**
 * Dynamic CORS that reflects the exact allowed Origin and always enables credentials.
 * This is required so the browser accepts Set-Cookie on cross-site requests
 * (app.cashflowcasino.com -> api.cashflowcasino.com) for refresh_token.
 */
const allowedOrigins = new Set<string>([
    'http://localhost',
    'http://localhost:5173',
    'http://localhost:5174',
    'http://localhost:9999',
    'http://localhost:3001',
    'http://localhost:3000',
    'https://slots.cashflowcasino.com',
    'https://app.cashflowcasino.com',
    'https://api.cashflowcasino.com',
])

app.use('*', cors({
    origin: (origin,) => {
        if (allowedOrigins.has(origin)) {
            return origin
        }
        return '' // Block by returning an empty string
    },
    allowMethods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
    allowHeaders: [
        'Authorization',
        'Content-Type',
        'X-Requested-With',
        'Upgrade-Insecure-Requests',
        'Cache-Control',
        'Pragma'
    ],
    exposeHeaders: [
        'Content-Length',
        'X-Kuma-Revision'
    ],
    credentials: true,
    maxAge: 600,
    // preflight: (c) => {
    //     // Hono's cors middleware handles the 204 response for OPTIONS requests automatically
    //     return c.text('', 204)
    // }
}))
configureOpenAPI(app)

app.use('/*', serveStatic({ root: './public' }))

const routes = [
    auth,
    index,
    updates,
    users,
    redtiger,
    game,
    vip,
    gameSpin,
    wallet,
] as const

routes.forEach((route) => {
    app.route('/api/', route)
})

app.route('/gs2c/ge/v3/gameService/', gameService)



export type AppType = (typeof routes)[number]

export default app
</file>

<file path="./backend/src/env.ts">
/* eslint-disable node/no-process-env */
import { z } from 'zod'

// Load .env file from the root of the monorepo

const EnvSchema = z
    .object({
        NODE_ENV: z.string().default('development'),
        PORT: z.coerce.number().default(9999),
        LOG_LEVEL: z.enum([
            'fatal',
            'error',
            'warn',
            'info',
            'debug',
            'trace',
            'silent',
        ]),
        DATABASE_URL: z.string().url(),
        DATABASE_AUTH_TOKEN: z.string().optional(),
        ACCESS_TOKEN_SECRET: z.string(),
        R2_PUBLIC_URL: z.string(),
        R2_BUCKET_NAME: z.string(),
        RCLONE_R2_REMOTE: z.string(),
    })
    .superRefine((input, ctx) => {
        if (input.NODE_ENV === 'production' && !input.DATABASE_AUTH_TOKEN) {
            ctx.addIssue({
                code: z.ZodIssueCode.invalid_type,
                expected: 'string',
                received: 'undefined',
                fatal: true,
                path: ['DATABASE_AUTH_TOKEN'],
                message: 'Must be set when NODE_ENV is production',
            })
        }
    })

export type Env = z.infer<typeof EnvSchema>

const { data: env, error } = EnvSchema.safeParse(process.env)

if (error) {
    console.error('❌ Invalid env:')
    console.error(JSON.stringify(error.flatten().fieldErrors, null, 2))
    process.exit(1)
}

export default env!
</file>

<file path="./backend/src/index.ts">
import type { Server, ServerWebSocket, WebSocketHandler } from 'bun'
import chalk from 'chalk'
import { and, eq } from 'drizzle-orm'
import * as jose from 'jose'

import app from './app'
import db from './db'
import { authSessions, users } from './db/schema'
import env from './env'
import { decrypt, lzwDecode, } from './utils/lzw'
import { websocketHandler } from './routes/websocket/websocket.handler'


const port = env.PORT

console.log(`Server is running on http://localhost:${port}`)

// Assign the server instance to a constant
const server: Server = Bun.serve({
    port,
    async fetch(req, server) {
        const url = new URL(req.url)
        const match = /^\/ws\/(?<topic>\w+)$/.exec(url.pathname)
        if (url.pathname.includes('ws/proxy')) {
            console.log(url.searchParams.get('data'))
        }

        if (url.pathname.includes('EjsFrontWeb/fs')) {
            console.log('here')
            // const whatWeNeed = await fetch('https://dev.cashflowcasino.com/EjsFrontWeb/fs', {
            //     headers: {
            //         'accept': 'application/json',
            //         'accept-language': 'en-US,en;q=0.9,es;q=0.8,pt;q=0.7',
            //         'cache-control': 'no-cache',
            //         'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
            //         'pragma': 'no-cache',
            //         'priority': 'u=1, i',
            //         'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
            //         'sec-ch-ua-mobile': '?0',
            //         'sec-ch-ua-platform': '"Linux"',
            //         'sec-fetch-dest': 'empty',
            //         'sec-fetch-mode': 'cors',
            //         'sec-fetch-site': 'cross-site'
            //     },
            //     body: 'action=open_game&clientString=FAKE1&language=en&gameCodeString=TheCrypt%40desktop',
            //     method: 'POST'
            // })
            const whatWeNeed = { b: 'a' }
            console.log(whatWeNeed)
            const request = new Request('https://partner.nolimitcity.com/EjsFrontWeb/fs', {
                method: 'POST',
                body: 'action=open_game&clientString=FAKE1&language=en&gameCodeString=TheCrypt%40desktop',
                headers: {
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8'
                }
            })
            console.log(request)

            const response = await fetch(request)
            console.log(response)

            const json = await response.json()
            console.log(json)
            return new Response(JSON.stringify(json), {
                status: 200,
                headers: {
                    'content-type': 'application/json'
                }
            })
        }
        if (match) {
            const topic = match.groups?.topic as keyof typeof websocketHandler
            const token = url.searchParams.get('token')

            if (!token) {
                console.error(chalk.red('[WS Auth] No token provided.'))
                return new Response('Unauthorized: No token provided', {
                    status: 401,
                })
            }

            try {
                const secret = new TextEncoder().encode(env.ACCESS_TOKEN_SECRET)
                const { payload } = await jose.jwtVerify(token, secret)

                if (!payload.userId || !payload.sessionId) {
                    console.error(
                        chalk.red('[WS Auth] Invalid token payload.')
                    )
                    return new Response('Unauthorized: Invalid token payload', {
                        status: 401,
                    })
                }

                const authSession = await db.query.authSessions.findFirst({
                    where: and(
                        eq(authSessions.id, payload.sessionId as string),
                        eq(authSessions.status, 'ACTIVE')
                    ),
                })

                if (!authSession) {
                    console.error(
                        chalk.red(
                            `[WS Auth] Session not found or expired for session ID: ${payload.sessionId}`
                        )
                    )
                    return new Response(
                        'Unauthorized: Session not found or has expired',
                        { status: 401 }
                    )
                }

                const user = await db.query.users.findFirst({
                    where: eq(users.id, payload.userId as string),
                })

                if (!user) {
                    console.error(
                        chalk.red(
                            `[WS Auth] User not found for user ID: ${payload.userId}`
                        )
                    )
                    return new Response('Unauthorized: User not found', {
                        status: 401,
                    })
                }

                // If all checks pass, upgrade the connection.
                if (
                    server.upgrade(req, { data: { user, authSession, topic } })
                ) {
                    console.log(
                        chalk.green(
                            `[WS Auth] Successful upgrade for user ${user.username} on topic '${topic}'`
                        )
                    )
                    return // Bun handles the response after a successful upgrade.
                }

                // This should not be reached if upgrade is successful.
                return new Response('WebSocket upgrade failed', { status: 500 })
            } catch (error: any) {
                console.error(
                    chalk.red('[WS Auth] Token verification failed:'),
                    error.message
                )
                return new Response(`Unauthorized: ${error.message}`, {
                    status: 401,
                })
            }
        }

        // Fallback to Hono for all non-WebSocket requests.
        return app.fetch(req, server)
    },
    websocket: websocketHandler,
    error() {
        return new Response('Uh oh!!', { status: 500 })
    },
})

// Export the server instance
export { server }

// The backend WebSocket server you want to proxy connections to.
const TARGET_WS_URL = 'wss://demo.nolimitcity.com/EjsGameWeb/ws/game?data='

/**
 * Defines the shape of the data attached to each client WebSocket connection.
 * This provides type safety for accessing `ws.data`.
 */
interface WebSocketContext {
    backendSocket: WebSocket;
    messageQueue: (string | Uint8Array)[];
    nolimitSessionKey: string
    id: string
}

console.log(` Bun WebSocket Proxy (TypeScript Edition) `)
console.log(`-------------------------------------------`)
console.log(`Forwarding from localhost:3000 -> ${TARGET_WS_URL}\n`)

// We define the handler object separately to apply strong types.
// It uses our WebSocketContext for its generic type.
const webSocketHandler: WebSocketHandler<WebSocketContext> = {
    /**
     * Called when a client successfully connects to this proxy server.
     * @param ws The client WebSocket connection, typed with our context.
     */
    open(ws: ServerWebSocket<WebSocketContext>) {
        console.log('✅ Client connected to proxy.')
        const { backendSocket, messageQueue } = ws.data

        backendSocket.onopen = () => {
            console.log('✅ Proxy connected to backend.')

            // ✨ NEW: Process and send all queued messages.
            console.log(`▶️ Flushing ${messageQueue.length} queued message(s)...`)
            for (const msg of messageQueue) {
                backendSocket.send(msg)
            }
            // Clear the queue after flushing.
            ws.data.messageQueue = []
        }

        backendSocket.onmessage = (event: MessageEvent) => {
            // console.log(`[RECV ◀️ Backend] ${event.data}`)

            // console.log('--- Decrypting RC4 ---')
            // console.log('using key:', ws.data.nolimitSessionKey)
            // const result = s.decrypt(event.data, ws.data.nolimitSessionKey)
            // console.log(result)
            // console.log(event.data)
            // 2. Decrypt the raw data using the hex key
            // const rc4Decrypted = rc4Api.decryptRaw(ws.data.nolimitSessionKey, event.data)
            // const rc4Decrypted = rc42(ws.data.nolimitSessionKey, event.data)
            // console.log('RC4 Output (first 100 chars):', `${rc4Decrypted.substring(0, 100)}...`)

            // console.log('\n--- Decompressing LZW ---')
            // 3. Decompress the decrypted data
            const finalResult = lzwDecode(event.data)
            // console.log('Final Result (first 1500 chars):', `${finalResult.substring(0, 1500)}...`)
            console.log(JSON.parse(finalResult))
            ws.send(event.data)
        }

        backendSocket.onclose = (event: CloseEvent) => {
            console.log(`❌ Backend connection closed: ${event.code}`)
            ws.close(event.code, event.reason)
        }

        backendSocket.onerror = () => {
            console.error('❌ Backend connection error.')
            ws.close()
        }
    },

    /**
     * Called when the proxy receives a message from the client.
     * @param ws The client WebSocket connection.
     * @param message The message, which can be a string or a buffer.
     */
    message(ws: ServerWebSocket<WebSocketContext>, message: string | Uint8Array) {
        const { backendSocket, messageQueue } = ws.data

        // ✨ UPDATED LOGIC: If the backend is open, send. If it's connecting, queue.
        if (backendSocket.readyState === WebSocket.OPEN) {
            // console.log(`[SEND ▶️ Backend] ${message}`)
            // const finalResult = lzwDecode(message)
            // console.log('Final Result (first 1500 chars):', `${finalResult.substring(0, 1500)}...`)
            // console.log(JSON.parse(finalResult))
            console.log(decrypt(ws.data.nolimitSessionKey, message))
            backendSocket.send(message)
        } else if (backendSocket.readyState === WebSocket.CONNECTING) {
            console.log(`[QUEUE ➡️] Message queued as backend is not ready.`)
            messageQueue.push(message)
        }
    },

    /**
     * Called when the client's connection to the proxy is closed.
     * @param ws The client WebSocket connection.
     */
    close(ws: ServerWebSocket<WebSocketContext>) {
        console.log('❌ Client disconnected from proxy.')
        const { backendSocket } = ws.data

        if (backendSocket.readyState === WebSocket.OPEN || backendSocket.readyState === WebSocket.CONNECTING) {
            backendSocket.close()
        }
    },
}

const server2: Server = Bun.serve({
    port: 3000,

    fetch(req: Request, server: Server): Response | undefined {
    // We pass the generic type to server.upgrade to ensure the context is correctly typed.
        const url = new URL(req.url)
        const key = url.searchParams.get('data')
        console.log(key)
        if (key == null)
            return new Response('No key', { status: 401 })

        const success = server.upgrade<WebSocketContext>(req, {
            data: {
                backendSocket: new WebSocket(TARGET_WS_URL + key),
                messageQueue: [],
                nolimitSessionKey: key,
                id: 'hai2u'
            },
        })

        if (!success) {
            return new Response('This is a WebSocket endpoint.', { status: 400 })
        }

        // On successful upgrade, Bun handles the response automatically.
        return undefined
    },

    // Assign our strongly-typed handler to the server configuration.
    websocket: webSocketHandler,
})

console.log(`Proxy server running on http://localhost:${server2.port}`)
</file>

<file path="./backend/drizzle.config.ts">
import { defineConfig } from 'drizzle-kit'

// export default defineConfig({
//   schema: "./src/db/schema/index.ts",
//   out: "./src/db/migrations",
//   dialect: "sqlite",
//   driver: "turso",
//   dbCredentials: {
//     url: env.DATABASE_URL,
//     authToken: env.DATABASE_AUTH_TOKEN,
//   },
// });
export default defineConfig({
    schema: './src/db/schema/index.ts',
    out: './drizzle',
    dialect: 'postgresql',
    casing: 'camelCase',
    dbCredentials: {
        url: 'postgres://user:asdfasdf@localhost:5439/cashinin',
    },
})
</file>

<file path="./backend/package.json">
{
    "name": "@monorepo/backend",
    "type": "module",
    "version": "1.0.0",
    "private": true,
    "license": "MIT",
    "module": "src/index.ts",
    "scripts": {
        "dev": "bun --watch src/index.ts",
        "start": "bun src/index.ts",
        "typecheck": "tsc --noEmit",
        "lint": "eslint ./src",
        "lint:fix": "bun lint --fix",
        "test": "bun test",
        "build": "tsc && tsc-alias",
        "format": "prettier --write .",
        "db:reset": "bun run scripts/seeds/reset.ts",
        "generate": "bun --bun drizzle-kit generate",
        "push": "bun --bun drizzle-kit push",
        "migrate": "bun --bun drizzle-kit migrate",
        "seed": "bun scripts/seed.ts",
        "studio": "bun --bun drizzle-kit studio"
    },
    "dependencies": {
        "@elysiajs/eden": "^1.3.2",
        "@google-cloud/vision": "^5.3.2",
        "@hono/node-server": "^1.18.1",
        "@hono/zod-openapi": "^0.19.10",
        "@libsql/client": "^0.15.10",
        "@scalar/hono-api-reference": "^0.9.13",
        "@thanhhoajs/websocket": "^1.0.9",
        "@types/rclone.js": "^0.6.3",
        "chance": "^1.1.13",
        "cheerio": "^1.1.2",
        "dotenv": "^17.2.1",
        "dotenv-expand": "^12.0.2",
        "drizzle-orm": "^0.44.4",
        "drizzle-zod": "^0.5.1",
        "hono": "^4.8.12",
        "hono-pino": "^0.9.1",
        "http-status-codes": "^2.3.0",
        "jose": "^6.0.12",
        "jose-simple": "^1.3.1",
        "nanoid": "^5.1.5",
        "node-html-parser": "^7.0.1",
        "pg": "^8.16.3",
        "pino": "^9.7.0",
        "pino-pretty": "^13.1.1",
        "rclone.js": "^0.6.6",
        "stoker": "1.4.3",
        "unstorage": "^1.16.1",
        "zod": "^3.25.76"
    },
    "devDependencies": {
        "@antfu/eslint-config": "^4.19.0",
        "@ngneat/falso": "^8.0.2",
        "@types/bun": "latest",
        "@types/node": "^24.1.0",
        "bun-types": "^1.2.19",
        "cross-env": "^7.0.3",
        "drizzle-kit": "^0.31.4",
        "eslint": "^9.32.0",
        "eslint-plugin-format": "^1.0.1",
        "tsc-alias": "^1.8.16",
        "tsx": "^4.20.3",
        "typescript": "^5.9.2",
        "vitest": "^3.2.4"
    }
}
</file>

<file path="./backend/tsconfig.json">
{
    "extends": "../tsconfig.base.json",
    "compilerOptions": {
        "target": "ES2018",
        "module": "ESNext",
        "moduleResolution": "bundler",
        "jsx": "react-jsx",
        "jsxImportSource": "hono/jsx",
        "baseUrl": ".",
        "paths": {
            "#/*": ["./src/*"],
            "shared/*": ["../shared/*"]
        },
        "types": ["bun-types"],
        "lib": ["ESNext", "DOM"],
        "outDir": "./dist",
        "esModuleInterop": true,
        "skipLibCheck": true,
        "strictNullChecks": true,
        "noImplicitAny": false,
        "strictFunctionTypes": true,
        "strictBindCallApply": true,
        "noImplicitThis": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitReturns": true,
        "noFallthroughCasesInSwitch": true,
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true
    },
    "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.d.ts"],
    "exclude": ["node_modules", "dist"]
}
</file>

<file path="./backend/vitest.config.ts">
import path from 'node:path'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    resolve: {
        alias: {
            '@': path.resolve(__dirname, './src'),
        },
    },
})
</file>

<file path="./frontend/src/assets/anim/avatar_xp.json">
{
  "frames": [

    {
      "filename": "FX_Sym_Win_00000.jpg",
      "frame": { "x": 1, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00001.jpg",
      "frame": { "x": 1, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00002.jpg",
      "frame": { "x": 1, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00003.jpg",
      "frame": { "x": 1, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00004.jpg",
      "frame": { "x": 1, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00005.jpg",
      "frame": { "x": 93, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00006.jpg",
      "frame": { "x": 185, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00007.jpg",
      "frame": { "x": 277, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00008.jpg",
      "frame": { "x": 369, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00009.jpg",
      "frame": { "x": 93, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00010.jpg",
      "frame": { "x": 93, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00011.jpg",
      "frame": { "x": 93, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00012.jpg",
      "frame": { "x": 93, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00013.jpg",
      "frame": { "x": 185, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00014.jpg",
      "frame": { "x": 277, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00015.jpg",
      "frame": { "x": 369, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00016.jpg",
      "frame": { "x": 185, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00017.jpg",
      "frame": { "x": 185, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00018.jpg",
      "frame": { "x": 185, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00019.jpg",
      "frame": { "x": 277, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00020.jpg",
      "frame": { "x": 369, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00021.jpg",
      "frame": { "x": 277, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00022.jpg",
      "frame": { "x": 277, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00023.jpg",
      "frame": { "x": 369, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00026.jpg",
      "frame": { "x": 369, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    }
  ],
  "meta": {
    "app": "https://www.codeandweb.com/texturepacker",
    "version": "1.0",
    "image": "avatar_xp.png",
    "format": "RGBA8888",
    "size": { "w": 460, "h": 460 },
    "scale": "0.5",
    "smartupdate": "$TexturePacker:SmartUpdate:b50fba8a4fee6b1f579ef4c16ef7857f:a5c0e1812a01acf3c65da25789d792c4:0b6a5c7eba8d1f172ef74690c1905054$"
  }
}
</file>

<file path="./frontend/src/assets/anim/fireBlue.json">
{
    "frames": [
        {
            "filename": "Logo 7 instance 10000",
            "frame": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10001",
            "frame": {
                "x": 0,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10002",
            "frame": {
                "x": 0,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10003",
            "frame": {
                "x": 0,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10004",
            "frame": {
                "x": 0,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10005",
            "frame": {
                "x": 0,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10006",
            "frame": {
                "x": 83,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10007",
            "frame": {
                "x": 83,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10008",
            "frame": {
                "x": 83,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10009",
            "frame": {
                "x": 83,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10010",
            "frame": {
                "x": 83,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10011",
            "frame": {
                "x": 83,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10012",
            "frame": {
                "x": 166,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10013",
            "frame": {
                "x": 166,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10014",
            "frame": {
                "x": 166,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10015",
            "frame": {
                "x": 166,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10016",
            "frame": {
                "x": 166,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10017",
            "frame": {
                "x": 166,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10018",
            "frame": {
                "x": 249,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10019",
            "frame": {
                "x": 249,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10020",
            "frame": {
                "x": 249,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10021",
            "frame": {
                "x": 249,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10022",
            "frame": {
                "x": 249,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10023",
            "frame": {
                "x": 249,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10024",
            "frame": {
                "x": 332,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10025",
            "frame": {
                "x": 332,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10026",
            "frame": {
                "x": 332,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10027",
            "frame": {
                "x": 332,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10028",
            "frame": {
                "x": 332,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        {
            "filename": "Logo 7 instance 10029",
            "frame": {
                "x": 332,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        }
    ]
}
</file>

<file path="./frontend/src/assets/anim/leadernew.json">
{
  "frames": [

    {
      "filename": "leaderboard-0.png",
      "frame": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-1.png",
      "frame": { "x": 65, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-2.png",
      "frame": { "x": 130, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-3.png",
      "frame": { "x": 195, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-4.png",
      "frame": { "x": 260, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-5.png",
      "frame": { "x": 325, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-6.png",
      "frame": { "x": 390, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-7.png",
      "frame": { "x": 455, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-8.png",
      "frame": { "x": 520, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-9.png",
      "frame": { "x": 585, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-10.png",
      "frame": { "x": 650, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-11.png",
      "frame": { "x": 715, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-12.png",
      "frame": { "x": 780, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-13.png",
      "frame": { "x": 845, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-14.png",
      "frame": { "x": 910, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-15.png",
      "frame": { "x": 975, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-16.png",
      "frame": { "x": 1040, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-17.png",
      "frame": { "x": 1105, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-18.png",
      "frame": { "x": 1170, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-19.png",
      "frame": { "x": 1235, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-20.png",
      "frame": { "x": 1300, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-21.png",
      "frame": { "x": 1365, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-22.png",
      "frame": { "x": 1430, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-23.png",
      "frame": { "x": 1495, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-24.png",
      "frame": { "x": 0, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-25.png",
      "frame": { "x": 65, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-26.png",
      "frame": { "x": 130, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-27.png",
      "frame": { "x": 195, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-28.png",
      "frame": { "x": 260, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-29.png",
      "frame": { "x": 325, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-30.png",
      "frame": { "x": 390, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-31.png",
      "frame": { "x": 455, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-32.png",
      "frame": { "x": 520, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-33.png",
      "frame": { "x": 585, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-34.png",
      "frame": { "x": 650, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-35.png",
      "frame": { "x": 715, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-36.png",
      "frame": { "x": 780, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-37.png",
      "frame": { "x": 845, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-38.png",
      "frame": { "x": 910, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-39.png",
      "frame": { "x": 975, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-40.png",
      "frame": { "x": 1040, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-41.png",
      "frame": { "x": 1105, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-42.png",
      "frame": { "x": 1170, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-43.png",
      "frame": { "x": 1235, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-44.png",
      "frame": { "x": 1300, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-45.png",
      "frame": { "x": 1365, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-46.png",
      "frame": { "x": 1430, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-47.png",
      "frame": { "x": 1495, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    }
  ],
  "meta": {
    "app": "https://www.codeandweb.com/texturepacker",
    "version": "1.0",
    "image": "/tmp/sprites/leadernew.png",
    "format": "RGBA8888",
    "size": { "w": 1560, "h": 138 },
    "scale": "0.75",
    "smartupdate": "$TexturePacker:SmartUpdate:be3bfbc1359df1f6a2692e10cbbfaedb:c6367f6f1c6c9ceacd3c1a5b7223969b:d7fe8b6cdaa71fb7129620343088dc0c$"
  }
}
</file>

<file path="./frontend/src/assets/anim/logo_shine.json">
{"frames": [

{
	"filename": "frame_00_delay-0.04s.gif",
	"frame": {"x":1,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_01_delay-0.04s.gif",
	"frame": {"x":83,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_02_delay-0.04s.gif",
	"frame": {"x":165,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_03_delay-0.04s.gif",
	"frame": {"x":247,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_04_delay-0.04s.gif",
	"frame": {"x":329,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_05_delay-0.04s.gif",
	"frame": {"x":411,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_06_delay-0.04s.gif",
	"frame": {"x":1,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_07_delay-0.04s.gif",
	"frame": {"x":83,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_08_delay-0.04s.gif",
	"frame": {"x":165,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_09_delay-0.04s.gif",
	"frame": {"x":247,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_10_delay-0.04s.gif",
	"frame": {"x":329,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_11_delay-0.04s.gif",
	"frame": {"x":411,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_12_delay-0.04s.gif",
	"frame": {"x":1,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_13_delay-0.04s.gif",
	"frame": {"x":1,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_14_delay-0.04s.gif",
	"frame": {"x":1,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_15_delay-0.04s.gif",
	"frame": {"x":1,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_16_delay-0.04s.gif",
	"frame": {"x":1,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_17_delay-0.04s.gif",
	"frame": {"x":1,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_18_delay-0.04s.gif",
	"frame": {"x":1,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_19_delay-0.04s.gif",
	"frame": {"x":83,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_20_delay-0.04s.gif",
	"frame": {"x":165,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_21_delay-0.04s.gif",
	"frame": {"x":247,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_22_delay-0.04s.gif",
	"frame": {"x":329,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_23_delay-0.04s.gif",
	"frame": {"x":411,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_24_delay-0.04s.gif",
	"frame": {"x":83,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_25_delay-0.04s.gif",
	"frame": {"x":83,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_26_delay-0.04s.gif",
	"frame": {"x":83,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_27_delay-0.04s.gif",
	"frame": {"x":83,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_28_delay-0.04s.gif",
	"frame": {"x":83,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_29_delay-0.04s.gif",
	"frame": {"x":83,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_30_delay-0.04s.gif",
	"frame": {"x":165,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_31_delay-0.04s.gif",
	"frame": {"x":247,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_32_delay-0.04s.gif",
	"frame": {"x":329,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_33_delay-0.04s.gif",
	"frame": {"x":411,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_34_delay-0.04s.gif",
	"frame": {"x":165,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_35_delay-0.04s.gif",
	"frame": {"x":247,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_36_delay-0.04s.gif",
	"frame": {"x":329,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_37_delay-0.04s.gif",
	"frame": {"x":411,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_38_delay-0.04s.gif",
	"frame": {"x":165,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_39_delay-0.04s.gif",
	"frame": {"x":165,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_40_delay-0.04s.gif",
	"frame": {"x":165,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_41_delay-0.04s.gif",
	"frame": {"x":165,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_42_delay-0.04s.gif",
	"frame": {"x":247,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_43_delay-0.04s.gif",
	"frame": {"x":329,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_44_delay-0.04s.gif",
	"frame": {"x":411,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_45_delay-0.04s.gif",
	"frame": {"x":247,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_46_delay-0.04s.gif",
	"frame": {"x":247,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_47_delay-0.04s.gif",
	"frame": {"x":247,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_48_delay-0.04s.gif",
	"frame": {"x":329,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_49_delay-0.04s.gif",
	"frame": {"x":411,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_50_delay-0.04s.gif",
	"frame": {"x":329,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_51_delay-0.04s.gif",
	"frame": {"x":411,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_52_delay-0.04s.gif",
	"frame": {"x":329,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_53_delay-0.04s.gif",
	"frame": {"x":411,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
}],
"meta": {
	"app": "https://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "logo_shine.png",
	"format": "RGBA8888",
	"size": {"w":492,"h":477},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:3ef8692086ae53baaa67d8bdbd71f45d:0b9d1251883753c15a7ea46cc0404421:cd3d03c84f9a6d39a7b389d1d35eedef$"
}
}
</file>

<file path="./frontend/src/assets/anim/part0.json">
{
  "frames": [
    {
      "filename": "All 47 instance 10000",
      "frame": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10001",
      "frame": { "x": 0, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10002",
      "frame": { "x": 0, "y": 188, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10003",
      "frame": { "x": 0, "y": 282, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10004",
      "frame": { "x": 0, "y": 376, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10005",
      "frame": { "x": 94, "y": 0, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10006",
      "frame": { "x": 94, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10007",
      "frame": { "x": 94, "y": 188, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10008",
      "frame": { "x": 94, "y": 282, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10009",
      "frame": { "x": 94, "y": 376, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10010",
      "frame": { "x": 188, "y": 0, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10011",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10012",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10013",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10014",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10015",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10016",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10017",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10018",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10019",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10020",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10021",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10022",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10023",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    },
    {
      "filename": "All 47 instance 10024",
      "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
      "sourceSize": { "w": 94, "h": 94 }
    }
  ]
}
</file>

<file path="./frontend/src/assets/anim/part1.json">
{
  "frames": [
    {
      "filename": "Slots 51 instance 10000",
      "frame": { "x": 0, "y": 878, "w": 112, "h": 85 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 3, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10001",
      "frame": { "x": 112, "y": 878, "w": 112, "h": 85 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 3, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10002",
      "frame": { "x": 0, "y": 792, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10003",
      "frame": { "x": 112, "y": 792, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10004",
      "frame": { "x": 114, "y": 176, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10005",
      "frame": { "x": 114, "y": 262, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10006",
      "frame": { "x": 0, "y": 620, "w": 113, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10007",
      "frame": { "x": 113, "y": 620, "w": 113, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10008",
      "frame": { "x": 226, "y": 703, "w": 113, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10009",
      "frame": { "x": 226, "y": 616, "w": 113, "h": 87 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10010",
      "frame": { "x": 0, "y": 532, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10011",
      "frame": { "x": 113, "y": 532, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10012",
      "frame": { "x": 114, "y": 0, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10013",
      "frame": { "x": 114, "y": 88, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10014",
      "frame": { "x": 226, "y": 176, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10015",
      "frame": { "x": 227, "y": 0, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10016",
      "frame": { "x": 0, "y": 268, "w": 114, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10017",
      "frame": { "x": 0, "y": 356, "w": 114, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10018",
      "frame": { "x": 0, "y": 90, "w": 114, "h": 89 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10019",
      "frame": { "x": 0, "y": 0, "w": 114, "h": 90 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10020",
      "frame": { "x": 0, "y": 179, "w": 114, "h": 89 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10021",
      "frame": { "x": 0, "y": 356, "w": 114, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10022",
      "frame": { "x": 0, "y": 444, "w": 114, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10023",
      "frame": { "x": 227, "y": 88, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10024",
      "frame": { "x": 226, "y": 264, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10025",
      "frame": { "x": 114, "y": 88, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10026",
      "frame": { "x": 114, "y": 0, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10027",
      "frame": { "x": 226, "y": 352, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10028",
      "frame": { "x": 226, "y": 440, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10029",
      "frame": { "x": 226, "y": 528, "w": 113, "h": 88 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10030",
      "frame": { "x": 0, "y": 706, "w": 113, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10031",
      "frame": { "x": 113, "y": 706, "w": 113, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10032",
      "frame": { "x": 226, "y": 789, "w": 113, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10033",
      "frame": { "x": 114, "y": 348, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10034",
      "frame": { "x": 114, "y": 262, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10035",
      "frame": { "x": 114, "y": 434, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10036",
      "frame": { "x": 112, "y": 792, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10037",
      "frame": { "x": 224, "y": 875, "w": 112, "h": 86 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10038",
      "frame": { "x": 112, "y": 878, "w": 112, "h": 85 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 3, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    },
    {
      "filename": "Slots 51 instance 10039",
      "frame": { "x": 0, "y": 878, "w": 112, "h": 85 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 2, "y": 3, "w": 114, "h": 90 },
      "sourceSize": { "w": 114, "h": 90 }
    }
  ]
}
</file>

<file path="./frontend/src/assets/anim/part2.json">
{
  "frames": [
    {
      "filename": "Fish 54 instance 10000",
      "frame": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10001",
      "frame": { "x": 116, "y": 0, "w": 116, "h": 103 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10002",
      "frame": { "x": 232, "y": 0, "w": 116, "h": 103 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10003",
      "frame": { "x": 116, "y": 103, "w": 116, "h": 102 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10004",
      "frame": { "x": 232, "y": 103, "w": 116, "h": 102 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10005",
      "frame": { "x": 232, "y": 205, "w": 116, "h": 101 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10006",
      "frame": { "x": 348, "y": 205, "w": 116, "h": 101 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10007",
      "frame": { "x": 0, "y": 206, "w": 116, "h": 101 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10008",
      "frame": { "x": 116, "y": 307, "w": 116, "h": 100 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10009",
      "frame": { "x": 116, "y": 407, "w": 116, "h": 100 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10010",
      "frame": { "x": 116, "y": 407, "w": 116, "h": 100 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10011",
      "frame": { "x": 232, "y": 306, "w": 116, "h": 101 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10012",
      "frame": { "x": 348, "y": 306, "w": 116, "h": 101 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10013",
      "frame": { "x": 0, "y": 307, "w": 116, "h": 101 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10014",
      "frame": { "x": 348, "y": 103, "w": 116, "h": 102 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10015",
      "frame": { "x": 232, "y": 205, "w": 116, "h": 101 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10016",
      "frame": { "x": 116, "y": 205, "w": 116, "h": 102 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10017",
      "frame": { "x": 348, "y": 0, "w": 116, "h": 103 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10018",
      "frame": { "x": 0, "y": 103, "w": 116, "h": 103 },
      "rotated": false,
      "trimmed": true,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    },
    {
      "filename": "Fish 54 instance 10019",
      "frame": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
      "sourceSize": { "w": 116, "h": 103 }
    }
  ]
}
</file>

<file path="./frontend/src/assets/anim/rewards.json">
{"frames": [

{
	"filename": "GiftCenterAnimation_0000.png",
	"frame": {"x":233,"y":526,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0001.png",
	"frame": {"x":233,"y":526,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0002.png",
	"frame": {"x":233,"y":526,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0003.png",
	"frame": {"x":349,"y":527,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0004.png",
	"frame": {"x":349,"y":527,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0005.png",
	"frame": {"x":349,"y":527,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0006.png",
	"frame": {"x":1,"y":431,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0007.png",
	"frame": {"x":1,"y":431,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0008.png",
	"frame": {"x":1,"y":431,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0009.png",
	"frame": {"x":349,"y":329,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0010.png",
	"frame": {"x":349,"y":329,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0011.png",
	"frame": {"x":349,"y":329,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0012.png",
	"frame": {"x":117,"y":326,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0013.png",
	"frame": {"x":117,"y":326,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0014.png",
	"frame": {"x":117,"y":326,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0015.png",
	"frame": {"x":1,"y":331,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0016.png",
	"frame": {"x":1,"y":331,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0017.png",
	"frame": {"x":1,"y":331,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0018.png",
	"frame": {"x":117,"y":426,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0019.png",
	"frame": {"x":117,"y":426,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0020.png",
	"frame": {"x":117,"y":426,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0021.png",
	"frame": {"x":233,"y":427,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0022.png",
	"frame": {"x":233,"y":427,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0023.png",
	"frame": {"x":233,"y":427,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0024.png",
	"frame": {"x":233,"y":624,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0025.png",
	"frame": {"x":233,"y":624,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0026.png",
	"frame": {"x":233,"y":624,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0027.png",
	"frame": {"x":117,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0028.png",
	"frame": {"x":117,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0029.png",
	"frame": {"x":117,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0030.png",
	"frame": {"x":1,"y":629,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0031.png",
	"frame": {"x":1,"y":629,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0032.png",
	"frame": {"x":1,"y":629,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0033.png",
	"frame": {"x":349,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0034.png",
	"frame": {"x":349,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0035.png",
	"frame": {"x":349,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0036.png",
	"frame": {"x":233,"y":722,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0037.png",
	"frame": {"x":233,"y":722,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0038.png",
	"frame": {"x":233,"y":722,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0039.png",
	"frame": {"x":349,"y":428,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0040.png",
	"frame": {"x":349,"y":428,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0041.png",
	"frame": {"x":349,"y":428,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0042.png",
	"frame": {"x":117,"y":526,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0043.png",
	"frame": {"x":117,"y":526,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0044.png",
	"frame": {"x":117,"y":526,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0045.png",
	"frame": {"x":1,"y":530,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0046.png",
	"frame": {"x":1,"y":530,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0047.png",
	"frame": {"x":1,"y":530,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0048.png",
	"frame": {"x":117,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0049.png",
	"frame": {"x":117,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0050.png",
	"frame": {"x":117,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0051.png",
	"frame": {"x":233,"y":325,"w":114,"h":100},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":10,"w":114,"h":100},
	"sourceSize": {"w":114,"h":100}
},
{
	"filename": "GiftCenterAnimation_0052.png",
	"frame": {"x":233,"y":325,"w":114,"h":100},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":10,"w":114,"h":100},
	"sourceSize": {"w":114,"h":100}
},
{
	"filename": "GiftCenterAnimation_0053.png",
	"frame": {"x":233,"y":325,"w":114,"h":100},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":10,"w":114,"h":100},
	"sourceSize": {"w":114,"h":100}
},
{
	"filename": "GiftCenterAnimation_0054.png",
	"frame": {"x":349,"y":226,"w":114,"h":101},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":9,"w":114,"h":101},
	"sourceSize": {"w":114,"h":101}
},
{
	"filename": "GiftCenterAnimation_0055.png",
	"frame": {"x":349,"y":226,"w":114,"h":101},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":9,"w":114,"h":101},
	"sourceSize": {"w":114,"h":101}
},
{
	"filename": "GiftCenterAnimation_0056.png",
	"frame": {"x":349,"y":226,"w":114,"h":101},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":9,"w":114,"h":101},
	"sourceSize": {"w":114,"h":101}
},
{
	"filename": "GiftCenterAnimation_0057.png",
	"frame": {"x":117,"y":113,"w":116,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":7,"y":6,"w":116,"h":104},
	"sourceSize": {"w":116,"h":104}
},
{
	"filename": "GiftCenterAnimation_0058.png",
	"frame": {"x":117,"y":113,"w":116,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":7,"y":6,"w":116,"h":104},
	"sourceSize": {"w":116,"h":104}
},
{
	"filename": "GiftCenterAnimation_0059.png",
	"frame": {"x":117,"y":113,"w":116,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":7,"y":6,"w":116,"h":104},
	"sourceSize": {"w":116,"h":104}
},
{
	"filename": "GiftCenterAnimation_0060.png",
	"frame": {"x":233,"y":219,"w":114,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":6,"w":114,"h":104},
	"sourceSize": {"w":114,"h":104}
},
{
	"filename": "GiftCenterAnimation_0061.png",
	"frame": {"x":233,"y":219,"w":114,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":6,"w":114,"h":104},
	"sourceSize": {"w":114,"h":104}
},
{
	"filename": "GiftCenterAnimation_0062.png",
	"frame": {"x":233,"y":219,"w":114,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":6,"w":114,"h":104},
	"sourceSize": {"w":114,"h":104}
},
{
	"filename": "GiftCenterAnimation_0063.png",
	"frame": {"x":117,"y":219,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0064.png",
	"frame": {"x":117,"y":219,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0065.png",
	"frame": {"x":117,"y":219,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0066.png",
	"frame": {"x":351,"y":118,"w":114,"h":106},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":4,"w":114,"h":106},
	"sourceSize": {"w":114,"h":106}
},
{
	"filename": "GiftCenterAnimation_0067.png",
	"frame": {"x":351,"y":118,"w":114,"h":106},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":4,"w":114,"h":106},
	"sourceSize": {"w":114,"h":106}
},
{
	"filename": "GiftCenterAnimation_0068.png",
	"frame": {"x":351,"y":118,"w":114,"h":106},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":4,"w":114,"h":106},
	"sourceSize": {"w":114,"h":106}
},
{
	"filename": "GiftCenterAnimation_0069.png",
	"frame": {"x":235,"y":1,"w":115,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0070.png",
	"frame": {"x":235,"y":1,"w":115,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0071.png",
	"frame": {"x":235,"y":1,"w":115,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0072.png",
	"frame": {"x":352,"y":1,"w":115,"h":107},
	"rotated": true,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0073.png",
	"frame": {"x":352,"y":1,"w":115,"h":107},
	"rotated": true,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0074.png",
	"frame": {"x":352,"y":1,"w":115,"h":107},
	"rotated": true,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0075.png",
	"frame": {"x":1,"y":1,"w":116,"h":109},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":1,"w":116,"h":109},
	"sourceSize": {"w":116,"h":109}
},
{
	"filename": "GiftCenterAnimation_0076.png",
	"frame": {"x":1,"y":1,"w":116,"h":109},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":1,"w":116,"h":109},
	"sourceSize": {"w":116,"h":109}
},
{
	"filename": "GiftCenterAnimation_0077.png",
	"frame": {"x":1,"y":1,"w":116,"h":109},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":1,"w":116,"h":109},
	"sourceSize": {"w":116,"h":109}
},
{
	"filename": "GiftCenterAnimation_0078.png",
	"frame": {"x":119,"y":1,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0079.png",
	"frame": {"x":119,"y":1,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0080.png",
	"frame": {"x":119,"y":1,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0081.png",
	"frame": {"x":1,"y":112,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0082.png",
	"frame": {"x":1,"y":112,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0083.png",
	"frame": {"x":1,"y":112,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0084.png",
	"frame": {"x":235,"y":110,"w":114,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":114,"h":107},
	"sourceSize": {"w":114,"h":107}
},
{
	"filename": "GiftCenterAnimation_0085.png",
	"frame": {"x":235,"y":110,"w":114,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":114,"h":107},
	"sourceSize": {"w":114,"h":107}
},
{
	"filename": "GiftCenterAnimation_0086.png",
	"frame": {"x":235,"y":110,"w":114,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":114,"h":107},
	"sourceSize": {"w":114,"h":107}
},
{
	"filename": "GiftCenterAnimation_0087.png",
	"frame": {"x":1,"y":224,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0088.png",
	"frame": {"x":1,"y":224,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0089.png",
	"frame": {"x":1,"y":224,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0090.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0091.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0092.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0093.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0094.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0095.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
}],
"meta": {
	"app": "https://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "rewards.png",
	"format": "RGBA8888",
	"size": {"w":466,"h":820},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:9613dd134119f93046d5096446cbdc03:2880d321d04270c3db51e855c997aa71:4e549fd5f25429ef5063a975f7080ca0$"
}
}
</file>

<file path="./frontend/src/assets/anim/small_logo.json">
{"frames": [

{
	"filename": "tile000.webp",
	"frame": {"x":6,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile001.webp",
	"frame": {"x":163,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile002.webp",
	"frame": {"x":320,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile003.webp",
	"frame": {"x":477,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile004.webp",
	"frame": {"x":634,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile005.webp",
	"frame": {"x":791,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile006.webp",
	"frame": {"x":948,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile007.webp",
	"frame": {"x":1105,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile008.webp",
	"frame": {"x":1262,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile009.webp",
	"frame": {"x":1419,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile010.webp",
	"frame": {"x":1576,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile011.webp",
	"frame": {"x":1733,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile012.webp",
	"frame": {"x":1890,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile013.webp",
	"frame": {"x":1,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile014.webp",
	"frame": {"x":158,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile015.webp",
	"frame": {"x":315,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile016.webp",
	"frame": {"x":472,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile017.webp",
	"frame": {"x":629,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile018.webp",
	"frame": {"x":786,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile019.webp",
	"frame": {"x":943,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile020.webp",
	"frame": {"x":1100,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile021.webp",
	"frame": {"x":1257,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile022.webp",
	"frame": {"x":1414,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile023.webp",
	"frame": {"x":1571,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile024.webp",
	"frame": {"x":1728,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile025.webp",
	"frame": {"x":1885,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile026.webp",
	"frame": {"x":1,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile027.webp",
	"frame": {"x":158,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile028.webp",
	"frame": {"x":315,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile029.webp",
	"frame": {"x":472,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile030.webp",
	"frame": {"x":629,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile031.webp",
	"frame": {"x":786,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile032.webp",
	"frame": {"x":943,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile033.webp",
	"frame": {"x":1100,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile034.webp",
	"frame": {"x":1257,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile035.webp",
	"frame": {"x":1414,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile036.webp",
	"frame": {"x":1571,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile037.webp",
	"frame": {"x":1728,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile038.webp",
	"frame": {"x":1885,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile039.webp",
	"frame": {"x":1,"y":1,"w":3,"h":3},
	"rotated": false,
	"trimmed": true,
	"spriteSourceSize": {"x":0,"y":0,"w":3,"h":3},
	"sourceSize": {"w":155,"h":153}
}],
"meta": {
	"app": "https://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "small_logo.png",
	"format": "RGBA8888",
	"size": {"w":2046,"h":465},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:498e5d81c4a21b96910857e6c142ea81:5bbe115d024cc0c00d92884d0a126eb1:6706f3c77aeab101369574e31c8311af$"
}
}
</file>

<file path="./frontend/src/assets/anim/vault.json">
{
  "frames": [
    {
      "filename": "vaultIcon-0001",
      "frame": { "x": 2, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0002",
      "frame": { "x": 132, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0003",
      "frame": { "x": 2, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0004",
      "frame": { "x": 2, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0005",
      "frame": { "x": 132, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0006",
      "frame": { "x": 262, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0007",
      "frame": { "x": 2, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0008",
      "frame": { "x": 132, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0009",
      "frame": { "x": 132, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0010",
      "frame": { "x": 262, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0011",
      "frame": { "x": 392, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0012",
      "frame": { "x": 2, "y": 132, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0013",
      "frame": { "x": 132, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0014",
      "frame": { "x": 262, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0015",
      "frame": { "x": 392, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0016",
      "frame": { "x": 522, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0017",
      "frame": { "x": 2, "y": 2, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0018",
      "frame": { "x": 132, "y": 132, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0019",
      "frame": { "x": 262, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0020",
      "frame": { "x": 392, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0021",
      "frame": { "x": 522, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0022",
      "frame": { "x": 652, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0023",
      "frame": { "x": 132, "y": 2, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0024",
      "frame": { "x": 262, "y": 132, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0025",
      "frame": { "x": 392, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0026",
      "frame": { "x": 522, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0027",
      "frame": { "x": 652, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0028",
      "frame": { "x": 262, "y": 2, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0029",
      "frame": { "x": 392, "y": 132, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0030",
      "frame": { "x": 522, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0031",
      "frame": { "x": 652, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0032",
      "frame": { "x": 392, "y": 2, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0033",
      "frame": { "x": 2, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    }
  ]
}
</file>

<file path="./frontend/src/assets/anim/wheel.json">
{"frames": [

{
	"filename": "wheel-0.png",
	"frame": {"x":1,"y":1,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-1.png",
	"frame": {"x":1,"y":158,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-2.png",
	"frame": {"x":1,"y":472,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-3.png",
	"frame": {"x":1,"y":629,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-4.png",
	"frame": {"x":1,"y":786,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-5.png",
	"frame": {"x":1,"y":943,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-6.png",
	"frame": {"x":1,"y":1100,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-7.png",
	"frame": {"x":1,"y":1257,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-8.png",
	"frame": {"x":1,"y":1414,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-9.png",
	"frame": {"x":1,"y":1571,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-10.png",
	"frame": {"x":1,"y":315,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
}],
"meta": {
	"app": "https://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "wheel.png",
	"format": "RGBA8888",
	"size": {"w":230,"h":1727},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:20bfc979d3a611190a89dd49b7050afc:5fe153dc0bcdc49794c71d5ac5b8d812:8a3f0e13418c7922d5e92446500fa75c$"
}
}
</file>

<file path="./frontend/src/assets/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 261.76 226.69"><path d="M161.096.001l-30.225 52.351L100.647.001H-.005l130.877 226.688L261.749.001z" fill="#41b883"/><path d="M161.096.001l-30.225 52.351L100.647.001H52.346l78.526 136.01L209.398.001z" fill="#34495e"/></svg>
</file>

<file path="./frontend/src/assets/main.css">
@import 'tailwindcss';
@import 'tw-animate-css';

@custom-variant dark (&:is(.dark *));

:root {
    --card: oklch(1 0 0);
    --card-foreground: oklch(0.129 0.042 264.695);
    --popover: oklch(1 0 0);
    --popover-foreground: oklch(0.129 0.042 264.695);
    --primary: oklch(0.208 0.042 265.755);
    --primary-foreground: oklch(0.984 0.003 247.858);
    --secondary: oklch(0.968 0.007 247.896);
    --secondary-foreground: oklch(0.208 0.042 265.755);
    --muted: oklch(0.968 0.007 247.896);
    --muted-foreground: oklch(0.554 0.046 257.417);
    --accent: oklch(0.968 0.007 247.896);
    --accent-foreground: oklch(0.208 0.042 265.755);
    --destructive: oklch(0.577 0.245 27.325);
    --destructive-foreground: oklch(0.577 0.245 27.325);
    --border: oklch(0.929 0.013 255.508);
    --input: oklch(0.929 0.013 255.508);
    --ring: oklch(0.704 0.04 256.788);
    --radius: 0.625rem;
    --background: oklch(1 0 0);
    --foreground: oklch(0.129 0.042 264.695);
    --chart-1: oklch(0.646 0.222 41.116);
    --chart-2: oklch(0.6 0.118 184.704);
    --chart-3: oklch(0.398 0.07 227.392);
    --chart-4: oklch(0.828 0.189 84.429);
    --chart-5: oklch(0.769 0.188 70.08);
    --sidebar: oklch(0.984 0.003 247.858);
    --sidebar-foreground: oklch(0.129 0.042 264.695);
    --sidebar-primary: oklch(0.208 0.042 265.755);
    --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
    --sidebar-accent: oklch(0.968 0.007 247.896);
    --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
    --sidebar-border: oklch(0.929 0.013 255.508);
    --sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
    --background: oklch(0.129 0.042 264.695);
    --foreground: oklch(0.984 0.003 247.858);
    --card: oklch(0.129 0.042 264.695);
    --card-foreground: oklch(0.984 0.003 247.858);
    --popover: oklch(0.129 0.042 264.695);
    --popover-foreground: oklch(0.984 0.003 247.858);
    --primary: oklch(0.984 0.003 247.858);
    --primary-foreground: oklch(0.208 0.042 265.755);
    --secondary: oklch(0.279 0.041 260.031);
    --secondary-foreground: oklch(0.984 0.003 247.858);
    --muted: oklch(0.279 0.041 260.031);
    --muted-foreground: oklch(0.704 0.04 256.788);
    --accent: oklch(0.279 0.041 260.031);
    --accent-foreground: oklch(0.984 0.003 247.858);
    --destructive: oklch(0.396 0.141 25.723);
    --destructive-foreground: oklch(0.637 0.237 25.331);
    --border: oklch(0.279 0.041 260.031);
    --input: oklch(0.279 0.041 260.031);
    --ring: oklch(0.446 0.043 257.281);
    --chart-1: oklch(0.488 0.243 264.376);
    --chart-2: oklch(0.696 0.17 162.48);
    --chart-3: oklch(0.769 0.188 70.08);
    --chart-4: oklch(0.627 0.265 303.9);
    --chart-5: oklch(0.645 0.246 16.439);
    --sidebar: oklch(0.208 0.042 265.755);
    --sidebar-foreground: oklch(0.984 0.003 247.858);
    --sidebar-primary: oklch(0.488 0.243 264.376);
    --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
    --sidebar-accent: oklch(0.279 0.041 260.031);
    --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
    --sidebar-border: oklch(0.279 0.041 260.031);
    --sidebar-ring: oklch(0.446 0.043 257.281);
}

@theme inline {
    --color-background: var(--background);
    --color-foreground: var(--foreground);
    --color-card: var(--card);
    --color-card-foreground: var(--card-foreground);
    --color-popover: var(--popover);
    --color-popover-foreground: var(--popover-foreground);
    --color-primary: var(--primary);
    --color-primary-foreground: var(--primary-foreground);
    --color-secondary: var(--secondary);
    --color-secondary-foreground: var(--secondary-foreground);
    --color-muted: var(--muted);
    --color-muted-foreground: var(--muted-foreground);
    --color-accent: var(--accent);
    --color-accent-foreground: var(--accent-foreground);
    --color-destructive: var(--destructive);
    --color-destructive-foreground: var(--destructive-foreground);
    --color-border: var(--border);
    --color-input: var(--input);
    --color-ring: var(--ring);

    --radius-sm: calc(var(--radius) - 4px);
    --radius-md: calc(var(--radius) - 2px);
    --radius-lg: var(--radius);
    --radius-xl: calc(var(--radius) + 4px);
    --color-sidebar-ring: var(--sidebar-ring);
    --color-sidebar-border: var(--sidebar-border);
    --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
    --color-sidebar-accent: var(--sidebar-accent);
    --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
    --color-sidebar-primary: var(--sidebar-primary);
    --color-sidebar-foreground: var(--sidebar-foreground);
    --color-sidebar: var(--sidebar);
    --color-chart-5: var(--chart-5);
    --color-chart-4: var(--chart-4);
    --color-chart-3: var(--chart-3);
    --color-chart-2: var(--chart-2);
    --color-chart-1: var(--chart-1);
}

@layer base {
    * {
        @apply border-border outline-ring/50;
    }
    body {
        @apply bg-background text-foreground;
    }
}

html {
    color-scheme: light dark;
}
html.dark {
    color-scheme: dark;
}
html.light {
    color-scheme: light;
}
@font-face {
    font-family: 'Onacona'; /* Choose a name for your font */
    src: url('/Onacona.ttf') format('truetype');
    /* url('/fonts/your-font-file.woff2') format('woff2'), Path relative to public folder
         url('/fonts/your-font-file.woff') format('woff'),
         /* Add other formats if needed for broader browser support */
    /* url('/fonts/your-font-file.ttf') format('truetype'); */
    font-weight: normal; /* Or the specific weight of the font file */
    font-style: normal; /* Or 'italic' if it's an italic font file */
    /* Add font-display: swap; for better performance */
    font-display: swap;
}
.onacona {
    /* color: #ffea00; A bright yellow */
    /* text-shadow: 0 0 1px black; */

    /* First layer: a subtle yellow glow */
    /* Make the text bold */
    /* font-weight: bold; */

    font-family: 'onacona', sans-serif;
    letter-spacing: 0.6px;
    font-size: large;
    /* font-weight: bold; */
    text-align: end;
    /* margin-top: 20px;
    margin-bottom: 20px; */
}
.glow {
    font-family: Onacano;
    font-size: 22px;
    color: #fff;
    text-align: center;
    letter-spacing: 1.5px;
    text-shadow:
        1px 1px 3px #c74dff,
        0 0 2px #c74dff,
        0 0 4px #720fc4;
}
.futex-cell {
    background: rgb(105, 33, 146);
    background: radial-gradient(
        circle,
        rgba(105, 33, 146, 1) 24%,
        rgba(28, 0, 46, 1) 100%
    );
}
body > *:not(.loading-container) {
    position: relative;
    z-index: 1;
}
</file>

<file path="./frontend/src/components/auth/AuthPanel.vue">
<template>
  <div ref="target" class="animate__animated animate__flipInY overflow-hidden" style="
      border-radius: 20px;
      padding: 10px;
      width: 100vw;
      height: 100vh;
      align-items: center;
      justify-content: center;
      z-index: 99999999;
      overflow: hidden;
    ">
    <div class="left-0 top-0 flex flex-col items-center justify-start overflow-y-hidden" style="
        width: 90vw;
        margin: auto;
        overflow: hidden;

        padding: 20px;
        height: 60vh;
        background-repeat: no-repeat;
        border-image: url('/images/common/cell-2.png') 20 20 20 20 fill / 20px 20px 20px 20px;
        padding: 20px 20px 20px 20px;
        max-width: 480px;
        z-index: 99999999;

        background-repeat: no-repeat;
        background-size: 100% 100%;
      ">
      <div class="mt-3 flex w-full flex-row items-center justify-center" style="
          margin: auto;
          max-width: 480px;
          margin-top: 4px;
          align-items: center;
          justify-content: center;
          margin-bottom: 0px;

          padding: 10px;
          background-color: transparent;
        ">
        <div class="pt-0" style="font-size: 50px">
          <AuroraText>{{ title }}</AuroraText>
        </div>
      </div>
      <slot />
    </div>
  </div>
</template>

<script setup>
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const props = defineProps({
  title: {
    type: String,
    default: '',
  },
  closePressed: {
    type: Boolean,
    default: false,
  },
})
onMounted(() => {
})
</script>

<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');

.glowing-element-container {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 60vh;
  width: 100vw;
  /* Simulates full body height for centering */
  overflow: hidden;
  /* Prevent scrollbars if element is slightly off due to glow */
  font-family: 'Inter', sans-serif;
  /* Apply Inter font */
}

.element-bg {
  background-color: #1f0137;
}

.glowing-element-body {
  /* Required for absolute positioning of the ::before pseudo-element and the title box */
  position: relative;
  /* Ensures the pseudo-element's rounded corners are clipped if they exceed this */
  overflow: visible;
  /* Changed from hidden to allow top element to protrude */
  /*
      Single, thicker, bright purple/pink glowing border.
      The glow emanates directly from this border.
  */

  box-shadow:
    /* Core of the glowing line */
    0 0 0 2px #ffff,
    /* Glow emanating from the line */
    0 0 7px 2px rgba(224, 176, 255, 0.9),
    0 0 15px 2px rgba(200, 140, 255, 0.7),
    0 0 30px 3px rgba(180, 120, 240, 0.5);
}

/* Pseudo-element for the tiled background image */
.glowing-element-body::before {
  content: '';
  /* Necessary for pseudo-elements to be generated */
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  /*
    IMPORTANT: Replace this URL with the actual path to your uploaded image.
    Using a placeholder for now.
  */
  background-image: url('/images/common/neon-coin-sm.png');
  /* Placeholder image */
  transform: rotate(-40deg);
  /* Rotate the entire element */
  background-repeat: repeat;
  /* This tiles the image */
  opacity: 0.06;
  /* Low opacity for the wallpaper effect */
  z-index: 0;
  /* Sits on top of element-bg, but below content and title box */
  border-radius: inherit;
  /* Inherit border-radius from parent to match the shape */
}

.glowing-title-box {
  /* Similar glowing border effect as the main body, but can be scaled if needed */
  box-shadow:
    0 0 0 2px #e0b0ff,
    0 0 5px 2px rgba(224, 176, 255, 0.9),
    /* Slightly tighter glow for smaller element */
    0 0 10px 2px rgba(200, 140, 255, 0.7),
    0 0 20px 3px rgba(180, 120, 240, 0.5);
  /* Ensure title box is above the pseudo-element background */
  z-index: 10;
}

&::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: url('/images/common/neon-coin-sm.png');
  background-size: 100px;
  /* Adjust size as needed */
  background-repeat: repeat;
  opacity: 0.3;
  /* Increased for visibility */
  z-index: 1;
  /* Increased z-index */
  pointer-events: none;
  transform: rotate(-40deg);
  border-radius: inherit;
}

/* Add this to ensure content stays above the background */
:deep(.content) {
  position: relative;
  z-index: 2;
}
</style>
</file>

<file path="./frontend/src/components/auth/LoginForm.vue">
<script setup lang="ts">
import { storeToRefs } from 'pinia'; // Import storeToRefs
import { onMounted, reactive, ref } from 'vue'; // Import necessary Vue 3 APIs
import AuthPanel from './AuthPanel.vue'

const authStore = useAuthStore()
const {
    isLoading: isAuthLoading, // Auth store's loading state
    isAuthenticated, // Auth store's authentication status
} = storeToRefs(authStore)
const formData = reactive({
    email: 'asdf@cashflow.com',
    password: 'asdfasdf',
    confirmPassword: 'asdfasdf', // For sign-up
    username: 'asdf', // For sign-up
})
const showError = ref<boolean>(false)
const showPassword = ref<boolean>(false)

const handleLogin = async () => {
    // Do not clear auth here to avoid races; login handles tokens & session
    await authStore.login({
        username: formData.username,
        password: formData.password,
    })
}
// const handleSignIn = async () => {
//     if (!formData.username || !formData.password) {
//         console.log('error in')
//         notificationStore.addNotification('error', 'Please enter both email and password.')
//         return
//     }

//     const success = await signInWithPassword({
//         username: formData.username,
//         password: formData.password,
//     })
//     console.log(success)
//     if (success) {
//         // notificationStore.addNotification('info', error?.message || 'Sign in succeeded.')
//     } else {
//         showError.value = true
//         // notificationStore.addNotification('error', error?.message || 'Sign in failed.')
//         setTimeout(() => {
//             showError.value = false
//             // isAuthLoading.value = false // Use the store's loading state

//             // window.location.reload()
//         }, 2000)
//     }
// }

onMounted(() => {
    if (isAuthenticated.value) {
        console.log('Already authenticated, redirecting from LoginView.')
        // Optional: we rely on guard to route; no action needed here
    }
})
</script>
<template>
    <AuthPanel title="Login">
        <form class="flip-card__form text-white flex mx-4 px-4 mt-5 overflow-hidden" @submit.prevent="handleLogin">
            <!-- Accessibility: include a (visually hidden) username label and input properly typed -->
            <label for="username" class="sr-only">Username</label>
            <input id="username" v-model="formData.username" type="text" name="username" inputmode="text"
                autocomplete="username" placeholder="Username" required class="flip-card__input"
                :disabled="isAuthLoading || showError" />
            <label for="current-password" class="sr-only">Password</label>
            <div class="password-field">
                <input id="current-password" v-model="formData.password" :type="showPassword ? 'text' : 'password'"
                    name="current-password" placeholder="Password" required autocomplete="current-password"
                    class="flip-card__input pr-10" :disabled="isAuthLoading || showError"
                    aria-describedby="toggle-password-visibility" />
                <button id="toggle-password-visibility" type="button" class="toggle-password-btn"
                    :aria-pressed="showPassword" :aria-label="showPassword ? 'Hide password' : 'Show password'"
                    :title="showPassword ? 'Hide password' : 'Show password'" @click="showPassword = !showPassword">
                    <span aria-hidden="true" class="eye-icon">
                        <!-- Using simple SVGs for open/closed eye to avoid extra deps -->
                        <svg v-if="!showPassword" xmlns="http://www.w3.org/2000/svg" width="18" height="18"
                            viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round">
                            <path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7-11-7-11-7z"></path>
                            <circle cx="12" cy="12" r="3"></circle>
                        </svg>
                        <svg v-else xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
                            fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                            stroke-linejoin="round">
                            <path d="M17.94 17.94A10.94 10.94 0 0 1 12 20c-7 0-11-8-11-8a21.77 21.77 0 0 1 5.06-6.06">
                            </path>
                            <path d="M1 1l22 22"></path>
                            <path d="M9.88 9.88A3 3 0 0 0 12 15a3 3 0 0 0 2.12-.88"></path>
                            <path d="M14.12 14.12L9.88 9.88"></path>
                        </svg>
                    </span>
                </button>
            </div>
            <GlassButton type="submit" class="flip-card__btn mt-3" :disabled="isAuthLoading || showError"
                @click="handleLogin">
                Let's Go!
            </GlassButton>
        </form>

        <div class="flex flex-col">
            <div class="w-full flex justify-center glow">
                <div class="flex mt-12"></div>
            </div>
            <div id="googleSignInButtonContainer" class="google-signin-container flex mt-2 mx-3 px-3 justify-center">
            </div>
        </div>
    </AuthPanel>
    <!-- <div v-if="!isAuthLoading"> -->
    <!-- <Loading /> -->
    <!-- </div> -->
</template>
<style scoped>
/* Visually hidden utility for accessibility */
.sr-only {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    white-space: nowrap !important;
    border: 0 !important;
}

input[type='checkbox'] {
    height: 0;
    width: 0;
    visibility: hidden;
}

label {
    cursor: pointer;
    text-indent: -9999px;
    width: 100px;
    height: 50px;
    background: #d19ae4;
    display: block;
    border-radius: 50px;
    position: relative;
}

label:after {
    content: '';
    position: absolute;
    top: 3px;
    left: 3px;
    width: 45px;
    height: 45px;
    background: #fff;
    border-radius: 90px;
    transition: 0.3s;
}

input:checked+label {
    background: #5b0091;
}

input:checked+label:after {
    left: calc(100% - 5px);
    transform: translateX(-100%);
}

label:active:after {
    width: 130px;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.login-view-container {
    width: 100%;
    height: 60%;
    /* Ensure it takes full viewport height */
    margin-top: 0;
    display: flex;
    /* Use flex to center content */
    flex-direction: column;
    justify-content: start;
    /* Vertically center */
    align-items: center;
    /* Horizontally center */
    /* background-image: url('/src/assets/login-bg.jpg'); */
    background-size: cover;
    /* Changed from contain for full coverage */
    background-position: center;
    /* Center the background */
    background-repeat: no-repeat;
    background-color: #021130;
    /* background-image: url('/images/starsbg.png'); */
    background-size: 120% 120%;
    background-origin: border-box;
    background-position: center;
    background-repeat: no-repeat;
    height: 100vh;
    padding: 20px;
    /* Add some padding for smaller screens */
    box-sizing: border-box;
}

.flip-card__inner {
    width: 320px;
    /* Take full width of its parent label */
    max-width: 420px;
    /* Max width for the form area */
    height: auto;
    /* Let content define height, was 350px */
    min-height: 380px;
    /* Ensure enough space for inputs */
    position: relative;
    background-color: transparent;
    perspective: 1000px;
    text-align: center;
    transition: transform 0.8s;
    transform-style: preserve-3d;
    margin-top: 16px;
    position: relative;
    /* This should already be present */
    z-index: 0;
}

.flip-card__front,
.flip-card__back {
    box-sizing: border-box;
    /* Added for better padding control */
    width: 100%;

    justify-content: center;
    align-items: center;
    /* max-width: 420px; /* Let parent control max-width */
    padding: 20px;
    /* Unified padding */
    position: absolute;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    /* Center form content */
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    background: var(--bg-color, #1f2937);
    /* Slightly lighter dark for card */
    gap: 15px;
    /* Adjusted gap */
    border-radius: 8px;
    /* Softer radius */
    border: 1px solid var(--main-color, #b954f3);
    /* Thinner border */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    /* Softer shadow */
}

.flip-card__back {
    transform: rotateY(180deg);
}

.flip-card__form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 15px;
    /* Adjusted gap */
    width: 100%;
    /* Form takes full width of card */
}

.title {
    margin-bottom: 15px;
    /* Adjusted margin */
    font-size: 24px;
    /* Slightly smaller */
    font-weight: 700;
    /* Adjusted weight */
    text-align: center;
    color: var(--font-color, #fefefe);
}

/* Password visibility toggle */
.password-field {
    position: relative;
    width: 100%;
}

.toggle-password-btn {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    color: var(--font-color, #fefefe);
    border: none;
    padding: 4px 6px;
    font-size: 12px;
    cursor: pointer;
    line-height: 1;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.eye-icon {
    display: inline-flex;
    width: 18px;
    height: 18px;
}

.toggle-password-btn:focus-visible {
    outline: 2px solid var(--input-focus, #2d8cf0);
    border-radius: 4px;
}

.flip-card__input {
    width: 100%;
    /* Full width inputs */
    /* max-width: 300px;  */
    height: 45px;
    /* Slightly taller */
    border-radius: 5px;
    border: 2px solid var(--main-color, #b954f3);
    background-color: var(--bg-color-input, #2c3748);
    /* Different input bg */
    box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.2);
    /* Inset shadow */
    font-size: 16px;
    font-weight: 500;
    color: var(--font-color, #fefefe);
    padding: 5px 15px;
    /* More padding */
    outline: none;
    transition: border-color 0.3s;
}

.flip-card__input::placeholder {
    color: var(--font-color-sub, #7e7e7e);
    opacity: 0.8;
}

.flip-card__input:focus {
    border-color: var(--input-focus, #2d8cf0);
    /* Use border-color for focus */
}

.flip-card__btn {
    /* justify-content: center; */
    /* align-items: center; Center button text */
    /* min-width: 150px; Minimum width */
    padding: 8px 20px;
    font-size: 16px;
    /* height: 45px; */
    /* box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2); Softer shadow */
}

.flip-card__btn:hover {
    background-color: darken(var(--main-color, #b954f3), 10%);
    /* Darken on hover */
}

.flip-card__btn:active {
    box-shadow: 0px 0px var(--main-color, #b954f3);
    transform: translate(2px, 2px);
    /* Slightly less movement */
}

.flip-card__btn:disabled {
    background-color: #555;
    border-color: #444;
    color: #888;
    cursor: not-allowed;
    box-shadow: none;
    transform: none;
}

.social-login-divider {
    margin: 15px 0;
    color: var(--font-color-sub, #7e7e7e);
    text-align: center;
    width: 100%;
}

.switch-visual-container {
    position: relative;
    width: var(--toggle-track-width);
    height: var(--toggle-track-height);
}

.switch-track {
    width: 100%;
    height: 100%;
    background-color: var(--track-bg-login);
    border-radius: calc(var(--toggle-track-height) / 2);
    /* Pill shape */
    transition: background-color var(--transition-duration) var(--transition-timing-function);
}

/* Change track background when sign up is active */
.auth-mode-toggle.is-signup-active .switch-track {
    background-color: var(--track-bg-signup);
}

.switch-knob {
    position: absolute;
    top: calc((var(--toggle-track-height) - var(--knob-size)) / 2);
    left: var(--track-internal-padding);
    width: var(--knob-size);
    height: var(--knob-size);
    background-color: var(--knob-bg-color);
    border-radius: 50%;
    /* Circular knob */
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    transition: transform var(--transition-duration) var(--transition-timing-function);
}

.auth-mode-toggle:focus-visible {
    box-shadow: 0 0 0 2px var(--focus-ring-color);
}

.lab {
    font-size: 18px;
    font-weight: 700;
    transition:
        color var(--transition-duration) var(--transition-timing-function),
        font-weight var(--transition-duration) var(--transition-timing-function);
}

.login-label {
    color: var(--text-color-inactive);
    font-weight: var(--label-font-weight-inactive);
}

.auth-mode-toggle .login-label.active {
    color: var(--text-color-active);
    font-weight: var(--label-font-weight-active);
}

.signup-label {
    color: var(--text-color-inactive);
    font-weight: var(--label-font-weight-inactive);
}

/* Move knob to the right when sign up is active */
.auth-mode-toggle.is-signup-active .switch-knob {
    transform: translateX(calc(var(--toggle-track-width) - var(--knob-size) - (2 * var(--track-internal-padding))));
}

/* CSS Variables for theming (optional, but good practice) */
:root {
    --input-focus: #4a90e2;
    /* Example: A lighter blue */
    --font-color: #e0e0e0;
    /* Light gray for text */
    --font-color-sub: #a0a0a0;
    /* Medium gray for subtext/placeholders */
    --bg-color: #1e2a3b;
    /* Dark blue-gray background */
    --bg-color-input: #2c3a4b;
    /* Slightly lighter for inputs */
    --main-color: #6c63ff;
    /* Example: A vibrant purple */
    --font-color-btn: #ffffff;
}
</style>
<!-- "{\"currentUser\":{\"id\":\"5fymmflp0ul7r9fq7ccre\",\"username\":\"asdf\",\"email\":null,\"accessToken\":null,\"refreshToken\":null,\"accessTokenExpiresAt\":null,\"refreshTokenExpiresAt\":null,\"currentGameSessionDataId\":null,\"currentAuthSessionDataId\":null,\"avatar\":\"avatar-1.webp\",\"role\":\"USER\",\"isActive\":true,\"lastLoginAt\":null,\"totalXpGained\":0,\"activeWalletId\":\"zcqztc8gzbs5lhevkv5m8\",\"vipInfoId\":\"u7l33tc15m7ut4av2wcw2\",\"createdAt\":\"2025-07-25T17:20:31.000Z\",\"updatedAt\":\"2025-07-25T17:20:31.000Z\",\"deletedAt\":null},\"accessToken\":\"eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiI1ZnltbWZscDB1bDdyOWZxN2NjcmUiLCJzZXNzaW9uSWQiOiJic2pzY3ZjdG9xOW9jZ2RwcnpncjUiLCJpYXQiOjE3NTM1NzQ4NDMsImV4cCI6MTc1NDE3OTY0M30.X2jgDrtVrGVX0AwPWX5OEc79E1tCibgNzAH0dmTYEfo\",\"refreshToken\":\"eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiI1ZnltbWZscDB1bDdyOWZxN2NjcmUiLCJzZXNzaW9uSWQiOiJic2pzY3ZjdG9xOW9jZ2RwcnpncjUiLCJpYXQiOjE3NTM1NzQ4NDMsImV4cCI6MTc1NDE3OTY0M30.X2jgDrtVrGVX0AwPWX5OEc79E1tCibgNzAH0dmTYEfo\",\"isLoading\":false,\"error\":null,\"isSignUpMode\":false}" -->
</file>

<file path="./frontend/src/components/auth/RegisterForm.vue">
<script setup lang="ts">
import { ref, reactive } from 'vue'
import { storeToRefs } from 'pinia'
import AuthPanel from './AuthPanel.vue'
import { useAuthStore } from '@/stores/auth.store'
import { useNotificationStore } from '@/stores/notification.store'

const authStore = useAuthStore()
const notificationStore = useNotificationStore()

const { isLoading } = storeToRefs(authStore)
const showError = ref<boolean>(false)

const formData = reactive({
  email: '',
  password: '',
  confirmPassword: '',
  username: ''
})

const handleSignUp = async () => {
  if (!formData.password || !formData.username) {
    notificationStore.addNotification({
      type: 'error',
      message: 'Please fill in all required fields for sign up.'
    })
    return
  }

  if (formData.password !== formData.confirmPassword) {
    notificationStore.addNotification({
      type: 'error',
      message: 'Passwords do not match.'
    })
    return
  }

  try {
    const success = await authStore.signUp({
      username: formData.username,
      password: formData.password
    })

    if (success) {
      authStore.toggleSignUpMode()
      // Clear form on success
      formData.username = ''
      formData.password = ''
      formData.confirmPassword = ''
    }
  } catch (error) {
    console.error('Registration failed:', error)
    showError.value = true
    setTimeout(() => {
      showError.value = false
    }, 2000)
  }
}

const toggleSignIn = () => {
  authStore.toggleSignUpMode()
}
</script>

<template>
  <AuthPanel title="Register" class="relative">
    <div class="flip-card__form flex mx-4 px-4 flex-col mt-5 overflow-hidden">
      <div class="flip-card__form-container">
        <div class="flip-card__form-group">
          <label for="username" class="flip-card__label">Username</label>
          <input id="username" v-model="formData.username" type="text" class="flip-card__input"
            placeholder="Enter your username" :disabled="isLoading" />
        </div>
        <div class="flip-card__form-group">
          <label for="email" class="flip-card__label">Email (Optional)</label>
          <input id="email" v-model="formData.email" type="email" class="flip-card__input"
            placeholder="Enter your email" :disabled="isLoading" />
        </div>
        <div class="flip-card__form-group">
          <label for="password" class="flip-card__label">Password</label>
          <input id="password" v-model="formData.password" type="password" class="flip-card__input"
            placeholder="Enter your password" :disabled="isLoading" />
        </div>
        <div class="flip-card__form-group">
          <label for="confirmPassword" class="flip-card__label">Confirm Password</label>
          <input id="confirmPassword" v-model="formData.confirmPassword" type="password" class="flip-card__input"
            placeholder="Confirm your password" :disabled="isLoading" />
        </div>
      </div>

      <div class="flex flex-col items-center mt-6">
        <button class="flip-card__button flip-card__button--primary w-full" :disabled="isLoading" @click="handleSignUp">
          <span v-if="isLoading" class="flex items-center justify-center">
            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none"
              viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
              </path>
            </svg>
            Processing...
          </span>
          <span v-else>Sign Up</span>
        </button>

        <div class="mt-4 text-center">
          <span class="text-sm text-gray-400">Already have an account? </span>
          <button class="text-sm font-medium text-primary-400 hover:text-primary-300 transition-colors"
            :disabled="isLoading" @click="toggleSignIn">
            Sign In
          </button>
        </div>
      </div>
    </div>
  </AuthPanel>
</template>

<style scoped>
input[type='checkbox'] {
  height: 0;
  width: 0;
  visibility: hidden;
}

label {
  cursor: pointer;
  text-indent: -9999px;
  width: 100px;
  height: 50px;
  background: #d19ae4;
  display: block;
  border-radius: 50px;
  position: relative;
}

label:after {
  content: '';
  position: absolute;
  top: 3px;
  left: 3px;
  width: 45px;
  height: 45px;
  background: #fff;
  border-radius: 90px;
  transition: 0.3s;
}

input:checked+label {
  background: #5b0091;
}

input:checked+label:after {
  left: calc(100% - 5px);
  transform: translateX(-100%);
}

label:active:after {
  width: 130px;
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.login-view-container {
  width: 100%;
  height: 60%;
  /* Ensure it takes full viewport height */
  margin-top: 0;
  display: flex;
  /* Use flex to center content */
  flex-direction: column;
  justify-content: start;
  /* Vertically center */
  align-items: center;
  /* Horizontally center */
  /* background-image: url('/src/assets/login-bg.jpg'); */
  background-size: cover;
  /* Changed from contain for full coverage */
  background-position: center;
  /* Center the background */
  background-repeat: no-repeat;
  background-color: #021130;
  /* background-image: url('/images/starsbg.png'); */
  background-size: 120% 120%;
  background-origin: border-box;
  background-position: center;
  background-repeat: no-repeat;
  height: 100vh;
  padding: 20px;
  /* Add some padding for smaller screens */
  box-sizing: border-box;
}

.flip-card__inner {
  width: 320px;
  /* Take full width of its parent label */
  max-width: 420px;
  /* Max width for the form area */
  height: auto;
  /* Let content define height, was 350px */
  min-height: 380px;
  /* Ensure enough space for inputs */
  position: relative;
  background-color: transparent;
  perspective: 1000px;
  text-align: center;
  transition: transform 0.8s;
  transform-style: preserve-3d;
  margin-top: 16px;
  position: relative;
  /* This should already be present */
  z-index: 0;
}

.flip-card__front,
.flip-card__back {
  box-sizing: border-box;
  /* Added for better padding control */
  width: 100%;

  justify-content: center;
  align-items: center;
  /* max-width: 420px; /* Let parent control max-width */
  padding: 20px;
  /* Unified padding */
  position: absolute;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  /* Center form content */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  background: var(--bg-color, #1f2937);
  /* Slightly lighter dark for card */
  gap: 15px;
  /* Adjusted gap */
  border-radius: 8px;
  /* Softer radius */
  border: 1px solid var(--main-color, #b954f3);
  /* Thinner border */
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  /* Softer shadow */
}

.flip-card__back {
  transform: rotateY(180deg);
}

.flip-card__form {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  /* Adjusted gap */
  width: 100%;
  /* Form takes full width of card */
}

.title {
  margin-bottom: 15px;
  /* Adjusted margin */
  font-size: 24px;
  /* Slightly smaller */
  font-weight: 700;
  /* Adjusted weight */
  text-align: center;
  color: var(--font-color, #fefefe);
}

.flip-card__input {
  width: 100%;
  /* Full width inputs */
  /* max-width: 300px;  */
  height: 45px;
  /* Slightly taller */
  border-radius: 5px;
  border: 2px solid var(--main-color, #b954f3);
  background-color: var(--bg-color-input, #2c3748);
  /* Different input bg */
  box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.2);
  /* Inset shadow */
  font-size: 16px;
  font-weight: 500;
  color: var(--font-color, #fefefe);
  padding: 5px 15px;
  /* More padding */
  outline: none;
  transition: border-color 0.3s;
}

.flip-card__input::placeholder {
  color: var(--font-color-sub, #7e7e7e);
  opacity: 0.8;
}

.flip-card__input:focus {
  border-color: var(--input-focus, #2d8cf0);
  /* Use border-color for focus */
}

.flip-card__btn {
  /* justify-content: center; */
  /* align-items: center; Center button text */
  /* min-width: 150px; Minimum width */
  padding: 8px 20px;
  font-size: 16px;
  /* height: 45px; */
  /* box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2); Softer shadow */
}

.flip-card__btn:hover {
  background-color: darken(var(--main-color, #b954f3),
      10%);
  /* Darken on hover */
}

.flip-card__btn:active {
  box-shadow: 0px 0px var(--main-color, #b954f3);
  transform: translate(2px, 2px);
  /* Slightly less movement */
}

.flip-card__btn:disabled {
  background-color: #555;
  border-color: #444;
  color: #888;
  cursor: not-allowed;
  box-shadow: none;
  transform: none;
}

.social-login-divider {
  margin: 15px 0;
  color: var(--font-color-sub, #7e7e7e);
  text-align: center;
  width: 100%;
}

.google-signin-container {
  /* display: flex;
    min-width: 100%;
    min-height: 60px;
    justify-content: center;
    align-items: center; */
  /* width: 100%;
    height: 40%; */
  /* margin-top: 10px; */
}

.switch-visual-container {
  position: relative;
  width: var(--toggle-track-width);
  height: var(--toggle-track-height);
}

.flip-card__input {
  width: 100%;
  /* Full width inputs */
  /* max-width: 300px;  */
  height: 45px;
  /* Slightly taller */
  border-radius: 5px;
  border: 2px solid var(--main-color, #b954f3);
  background-color: var(--bg-color-input, #2c3748);
  /* Different input bg */
  box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.2);
  /* Inset shadow */
  font-size: 16px;
  font-weight: 500;
  color: var(--font-color, #fefefe);
  padding: 5px 15px;
  /* More padding */
  outline: none;
  transition: border-color 0.3s;
}

.flip-card__input::placeholder {
  color: var(--font-color-sub, #7e7e7e);
  opacity: 0.8;
}

.flip-card__input:focus {
  border-color: var(--input-focus, #2d8cf0);
  /* Use border-color for focus */
}

.flip-card__btn {
  /* justify-content: center; */
  /* align-items: center; Center button text */
  /* min-width: 150px; Minimum width */
  padding: 8px 20px;
  font-size: 16px;
  /* height: 45px; */
  /* box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2); Softer shadow */
}

.flip-card__btn:hover {
  background-color: darken(var(--main-color, #b954f3),
      10%);
  /* Darken on hover */
}

.flip-card__btn:active {
  box-shadow: 0px 0px var(--main-color, #b954f3);
  transform: translate(2px, 2px);
  /* Slightly less movement */
}

.flip-card__btn:disabled {
  background-color: #555;
  border-color: #444;
  color: #888;
  cursor: not-allowed;
  box-shadow: none;
  transform: none;
}

.switch-track {
  width: 100%;
  height: 100%;
  background-color: var(--track-bg-login);
  border-radius: calc(var(--toggle-track-height) / 2);
  /* Pill shape */
  transition: background-color var(--transition-duration) var(--transition-timing-function);
}

/* Change track background when sign up is active */
.auth-mode-toggle.is-signup-active .switch-track {
  background-color: var(--track-bg-signup);
}

.switch-knob {
  position: absolute;
  top: calc((var(--toggle-track-height) - var(--knob-size)) / 2);
  left: var(--track-internal-padding);
  width: var(--knob-size);
  height: var(--knob-size);
  background-color: var(--knob-bg-color);
  border-radius: 50%;
  /* Circular knob */
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  transition: transform var(--transition-duration) var(--transition-timing-function);
}

.auth-mode-toggle:focus-visible {
  box-shadow: 0 0 0 2px var(--focus-ring-color);
}

.lab {
  font-size: 18px;
  font-weight: 700;
  transition:
    color var(--transition-duration) var(--transition-timing-function),
    font-weight var(--transition-duration) var(--transition-timing-function);
}

.login-label {
  color: var(--text-color-inactive);
  font-weight: var(--label-font-weight-inactive);
}

.auth-mode-toggle .login-label.active {
  color: var(--text-color-active);
  font-weight: var(--label-font-weight-active);
}

.signup-label {
  color: var(--text-color-inactive);
  font-weight: var(--label-font-weight-inactive);
}

/* Move knob to the right when sign up is active */
.auth-mode-toggle.is-signup-active .switch-knob {
  transform: translateX(calc(var(--toggle-track-width) - var(--knob-size) - (2 * var(--track-internal-padding))));
}

/* CSS Variables for theming (optional, but good practice) */
:root {
  --input-focus: #4a90e2;
  /* Example: A lighter blue */
  --font-color: #e0e0e0;
  /* Light gray for text */
  --font-color-sub: #a0a0a0;
  /* Medium gray for subtext/placeholders */
  --bg-color: #1e2a3b;
  /* Dark blue-gray background */
  --bg-color-input: #2c3a4b;
  /* Slightly lighter for inputs */
  --main-color: #6c63ff;
  /* Example: A vibrant purple */
  --font-color-btn: #ffffff;
}
</style>
</file>

<file path="./frontend/src/components/chat/ChatMessage.vue">
<template>
  <div ref="messageRoot" class="message" :class="messageType === 'sent' ? 'message-sent' : 'message-received'">
    <!-- Avatar & Status -->
    <div class="avatar-container">
      <img :src="user.avatar" class="avatar" alt="User Avatar" />
      <div v-if="messageType === 'received'" class="status-indicator"
        :class="user.online ? 'status-online' : 'status-offline'"></div>
    </div>

    <!-- Message Content -->
    <div class="message-content">
      <div class="message-header">
        <div class="message-name">{{ user.name }}</div>
        <div class="message-time">{{ message.time }}</div>
      </div>
      <div class="message-bubble">
        <slot>
          {{ message.text }}
        </slot>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, computed, type PropType } from 'vue';
import { gsap } from 'gsap';
import type { Message, User } from './types'; // Adjust path as needed

// --- Props ---
const props = defineProps({
  message: {
    type: Object as PropType<Message>,
    required: true,
  },
  user: {
    type: Object as PropType<User>,
    required: true,
  },
  // Controls if the message should animate on creation
  animate: {
    type: Boolean,
    default: true
  }
});

// --- Refs ---
const messageRoot = ref<HTMLDivElement | null>(null);

// --- Computed Properties ---
const messageType = computed(() => (props.user.name === 'You' ? 'sent' : 'received'));

// --- Lifecycle Hooks ---
onMounted(() => {
  // Animate the message into view when the component is mounted
  if (messageRoot.value && props.animate) {
    gsap.set(messageRoot.value, { opacity: 0, y: 50, scale: 0.9 });
    gsap.to(messageRoot.value, {
      duration: 0.5,
      opacity: 1,
      y: 0,
      scale: 1,
      ease: 'power2.out',
    });
  } else if (messageRoot.value) {
    // For initial messages, just make them visible without animation
    gsap.set(messageRoot.value, { opacity: 1 });
  }
});
</script>

<style scoped>
/* Scoped styles are the same as the global ones from the original HTML file. */
/* They are included here for component encapsulation. */
.message {
  display: flex;
  align-items: flex-end;
  gap: 0.4rem;
}

.message-content {
  display: grid;
  max-width: calc(100% - 3rem);
  font-size: 1rem;
}

.message-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 0.15rem;
  margin-bottom: 0.20rem;
}

.message-name {
  font-size: 0.75rem;
  color: #d1d5db;
  font-weight: 500;
}

.message-time {
  font-size: 0.65rem;
  color: #9ca3af;
}

.message-bubble {
  padding: 0.4rem 1rem;
  border-radius: 1rem;
  word-wrap: break-word;
}

.avatar-container {
  position: relative;
  width: 2.5rem;
  height: 2.5rem;
  flex-shrink: 0;
}

.avatar {
  width: 100%;
  height: 100%;
  border-radius: 9999px;
  object-fit: cover;
}

.status-indicator {
  position: absolute;
  top: 0;
  right: 0;
  width: 0.65rem;
  height: 0.65rem;
  border-radius: 9999px;
  border: 2px solid #160025;
}

.status-online {
  background-color: #22c55e;
}

.status-offline {
  background-color: #6b7280;
}

.message-sent {
  flex-direction: row-reverse;
}

.message-sent .message-content {
  align-items: flex-end;
}

.message-sent .message-bubble {
  background-color: #3b82f6;
  border-bottom-right-radius: 0.25rem;
}

.message-sent .status-indicator {
  display: none;
}

.message-received .message-content {
  align-items: flex-start;
}

.message-received .message-bubble {
  background-color: #4b5563;
  border-bottom-left-radius: 0.25rem;
}

/* The animation is handled by GSAP, so no keyframes are needed here. */
</style>
</file>

<file path="./frontend/src/components/chat/ChatMessageList.vue">
<template>
  <div ref="messageListEl" class="message-list flex-grow p-4 space-y-4 overflow-y-auto">
    <ChatMessage v-for="message in messages" :key="message.id" :message="message" :user="users[message.userId]"
      :animate="isMessageAnimated(message.id)">
      <!-- Special handling for the typing indicator -->
      <div v-if="message.id === 'typing-indicator'" class="typing-indicator">
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
      </div>
    </ChatMessage>
  </div>
</template>

<script setup lang="ts">
import { ref, watch, type PropType } from 'vue';
import { gsap } from 'gsap';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
import ChatMessage from './ChatMessage.vue'; // Adjust path
import type { Message, User } from './types'; // Adjust path

gsap.registerPlugin(ScrollToPlugin);

// --- Props ---
const props = defineProps({
  messages: {
    type: Array as PropType<Message[]>,
    required: true,
  },
  users: {
    type: Object as PropType<Record<string, User>>,
    required: true
  }
});

// --- Refs ---
const messageListEl = ref<HTMLDivElement | null>(null);

// --- State ---
// Keep track of which messages have already been animated to prevent re-animating on re-renders.
const animatedMessageIds = new Set<string>();

// --- Logic ---
function isMessageAnimated(id: string): boolean {
  if (animatedMessageIds.has(id)) {
    return false;
  }
  animatedMessageIds.add(id);
  return true;
}

// --- Watchers ---
// if (props.messages.length > 0) {
//   watch(() => props.messages[props.messages.length - 1].id, () => {
//     // When a new message is added, scroll to the bottom.
//     // const msg = props.messages[props.messages.length - 1];

//     // if (isMessageAnimated(msg.id)) {
//     gsap.to(messageListEl.value, {
//       duration: 0.5,
//       scrollTo: 'max',
//       ease: 'power2.out',
//     });
//     // }
//   })
// }
// watch(() => props.messages.length, () => {
//   // When a new message is added, scroll to the bottom.
//   // const msg = props.messages[props.messages.length - 1];

//   gsap.to(messageListEl.value, {
//     duration: 0.5,
//     scrollTo: 'max',
//     ease: 'power2.out',
//     delay: 0.1,
//   });
// });
watch(() => props.messages.length, (newLength, oldLength) => {
  // This watcher runs after DOM updates due to flush: 'post'
  if (newLength > 0) {
    // Scroll if:
    // 1. It's the initial population of messages (oldLength is undefined).
    // 2. The number of messages has increased (newLength > oldLength).
    if (oldLength === undefined || newLength > oldLength) {
      const lastMessage = props.messages[newLength - 1];
      // Only scroll if the last message (which was just added or is part of initial load)
      // is NOT the typing indicator.
      if (lastMessage && lastMessage.id !== 'typing-indicator') {
        if (messageListEl.value) {
          gsap.to(messageListEl.value, {
            duration: 0.5,
            scrollTo: 'max',
            ease: 'power2.out',
            delay: 0.1, // Animation delay for visual smoothness
          });
        }
      }
    }
  }
})
</script>

<style scoped>
.message-list {
  /* Custom minimal scrollbar */
  scrollbar-width: thin;
  scrollbar-color: #530080ff transparent;
}

.message-list::-webkit-scrollbar {
  width: 6px;
}

.message-list::-webkit-scrollbar-track {
  background: transparent;
}

.message-list::-webkit-scrollbar-thumb {
  background-color: #530080ff;
  border-radius: 6px;
  border: 2px solid transparent;
}

/* Typing Indicator Styles */
.typing-indicator {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.25rem 0;
  /* Add some padding to match text height */
}

.typing-indicator .dot {
  width: 0.5rem;
  height: 0.5rem;
  border-radius: 50%;
  background-color: #9ca3af;
  animation: bounce 1.2s infinite;
}

.typing-indicator .dot:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-indicator .dot:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes bounce {

  0%,
  60%,
  100% {
    transform: translateY(0);
  }

  30% {
    transform: translateY(-5px);
  }
}
</style>
</file>

<file path="./frontend/src/components/chat/ChatPanel.vue">
<template>
  <div id="morph-container" ref="morphContainer" @click="openChat">
    <div id="neon-box" ref="neonBox" class="text-white pl-7.5 pt-7 border-white zIndex-1">
      <!-- <img v-if="!isExpanded" src="../../assets/flamelogo60x60.png" alt="Chat Logo"
        style="width: 90%; height: 90%; object-fit: cover; position: absolute" /> -->
      <!-- <VGSprite id="logoShine" class="flex" image-src="/images/bottom/logo_shine_trans.png"
        :sprite-sheet-data="LogoJson" style="position: absolute; transform: scale(0.9); z-index: -1" :speed="60"
        :delay="6000" :offset="5000" :autoplay="true" /> -->
      <SpriteAnimator :animation-data="LogoJson" image-url="/images/bottom/logo_shine_trans.png" :width="80"
        :height="80" :frame-count="LogoJson.frames.length" :initial-delay-max="5" :loop-delay="7" />
      <!--background-repeat: no-repeat; z-index: 10; margin-top: -200px; padding-top: 30px; margin-right: -27px; transform: scale(0.6) translateY(55px)-->
      <!-- Close Button -->
      <div id="close-chat" @click.stop="closeChat">
        <img id="close-chat-img" :src="closeImgSrc" alt="Close Chat" @mouseover="closeImgSrc = closePressedImgSrc"
          @mouseout="closeImgSrc = closeDefaultImgSrc" @mousedown="closeImgSrc = closePressedImgSrc"
          @mouseup="closeImgSrc = closeDefaultImgSrc" />
      </div>

      <!-- The Actual Chat UI -->
      <div id="chat-ui" ref="chatUI" class="w-full h-full flex flex-col opacity-0 invisible">
        <MessageList :messages="currentMessages" :users="users" />
        <form id="chat-form" class="p-3 flex items-center space-x-2 border-t border-purple-500/20"
          @submit.prevent="handleSendMessage">
          <input type="text" v-model="newMessageText" placeholder="Type a message..."
            class="flex-grow bg-transparent text-white focus:outline-none" />
          <button type="submit" class="text-purple-400 hover:text-purple-300 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
              stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
            </svg>
          </button>
        </form>
      </div>
    </div>
  </div>
</template>
<style scoped></style>
<script setup lang="ts">
import LogoJson from '@/assets/anim/logo_shine.json'
import { useChatStore } from '@/stores/chat.store'; // Import the chat store
import { gsap } from 'gsap'
import { Flip } from 'gsap/Flip'
import { onMounted, ref } from 'vue'
import MessageList from './ChatMessageList.vue'; // Adjust path

const chatStore = useChatStore()
const isExpanded = ref(false)

interface User {
  name: string
  avatar: string
  online: boolean
}
interface Message {
  id: string
  userId: string
  text: string
  time: string
}

gsap.registerPlugin(Flip)

// --- Refs for DOM Elements ---
const morphContainer = ref<HTMLDivElement | null>(null)
const neonBox = ref<HTMLDivElement | null>(null)
const chatUI = ref<HTMLDivElement | null>(null)

// --- Component State ---
const isChatOpen = ref(false)
const currentMessages = ref<Message[]>([])
const newMessageText = ref('')
const shadowColors = ['#7206b5dd', '#530080dd']
let pulseInterval: number | null = null

// --- Close Button Image State ---
const closeDefaultImgSrc = 'https://images.cashflowcasino.com/misc/close.png'
const closePressedImgSrc = 'https://images.cashflowcasino.com/misc/close-pressed.png'
const closeImgSrc = ref(closeDefaultImgSrc)

// --- Static Data ---
const users: Record<string, User> = {
  'user-you': { name: 'You', avatar: '/images/avatars/avatar-1.webp', online: true },
  'user-alex': { name: 'Alex', avatar: '/images/avatars/avatar-2.webp', online: true },
  'user-sam': { name: 'Sam', avatar: '/images/avatars/avatar-3.webp', online: false },
  'user-jess': { name: 'Jess', avatar: '/images/avatars/avatar-4.webp', online: true }
}

const initialMessages: Omit<Message, 'id'>[] = [
  { userId: 'user-alex', text: "Hey, how's the project going?", time: '10:30 PM' },
  {
    userId: 'user-you',
    text: "It's going well! Just putting the final touches on the animation.",
    time: '10:31 PM'
  },
  {
    userId: 'user-sam',
    text: 'Glad to hear it! The new online status indicators look great.',
    time: '10:32 PM'
  },
  {
    userId: 'user-jess',
    text: 'I agree! The minimal scrollbar is a nice touch too.',
    time: '10:32 PM'
  }
]

// --- Methods ---
const startPulsing = () => {
  if (pulseInterval) return
  pulseInterval = window.setInterval(() => {
    gsap.to(neonBox.value, {
      '--shadow-color': gsap.utils.random(shadowColors),
      duration: 1.5,
      ease: 'power1.inOut'
    })
  }, 1500)
}

const stopPulsing = () => {
  if (pulseInterval) clearInterval(pulseInterval)
  pulseInterval = null
  gsap.to(neonBox.value, { '--shadow-color': shadowColors[0], duration: 0.5 })
}
const openChat = () => {
  if (isExpanded.value) return
  // ... your existing open animation logic ...
  isExpanded.value = true
  chatStore.setChatOpenState(true) // Update store
  if (isChatOpen.value || !morphContainer.value) return

  const state = Flip.getState(morphContainer.value)
  morphContainer.value.classList.add('is-expanded')

  Flip.from(state, {
    duration: 0.8,
    ease: 'expo.inOut',
    onComplete: () => {
      gsap.to(chatUI.value, {
        opacity: 1,
        visibility: 'visible',
        duration: 0.5,
        delay: 0.3,
        onComplete: () => {
          // Load initial messages after UI is visible
          initialMessages.forEach((msg, index) => {
            gsap.delayedCall(index * 0.15, () => {
              addMessage(msg.text, msg.userId, msg.time)
            })
          })
        }
      })
      startPulsing()
    }
  })
  isChatOpen.value = true
}

const closeChat = () => {
  if (!isExpanded.value) return
  // ... your existing close animation logic ...
  isExpanded.value = false
  chatStore.setChatOpenState(false) // Update store
  if (!isChatOpen.value || !morphContainer.value) return

  const state = Flip.getState(morphContainer.value)

  gsap.to(chatUI.value, {
    opacity: 0,
    visibility: 'hidden',
    duration: 0.3,
    onComplete: () => {
      morphContainer.value?.classList.remove('is-expanded')
      currentMessages.value = [] // Clear messages on close
      Flip.from(state, {
        duration: 0.8,
        ease: 'expo.inOut'
      })
    }
  })
  stopPulsing()
  isChatOpen.value = false
}

const addMessage = (text: string, userId: string, time?: string) => {
  const message: Message = {
    id: crypto.randomUUID(),
    userId,
    text,
    time: time || new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
  }
  currentMessages.value.push(message)
}

const handleSendMessage = () => {
  const text = newMessageText.value.trim()
  if (text) {
    addMessage(text, 'user-you')
    newMessageText.value = ''
    simulateReply()
  }
}

const simulateReply = () => {
  const randomResponderId = Object.keys(users).filter((id) => id !== 'user-you')[Math.floor(Math.random() * 3)]
  setTimeout(() => {
    // Show typing indicator
    const typingMessage: Message = {
      id: 'typing-indicator',
      userId: randomResponderId,
      text: '...',
      time: ''
    }
    currentMessages.value.push(typingMessage)

    setTimeout(() => {
      // Remove typing indicator
      currentMessages.value = currentMessages.value.filter((m: Message) => m.id !== 'typing-indicator')
      // Add actual reply
      addMessage("That's an interesting point!", randomResponderId)
    }, 2000)
  }, 800)
}

// --- Lifecycle Hooks ---
onMounted(() => {
  gsap.set(neonBox.value, { '--shadow-color': shadowColors[0] })
})
</script>

<style scoped>
/* All the global styles from the original HTML file are relevant here */
/* .phone-screen { position: relative; overflow: hidden; width: 100%; height: 100%; } */
#morph-container {
  z-index: 1;
  /* position: absolute; */
  bottom: 1.5rem;
  right: 0.4rem;
  width: 4rem;
  height: 4rem;
  cursor: pointer;
  will-change: transform;
}

#neon-box {
  z-index: 99;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 9999px;
  box-shadow: 0 0 15px 5px var(--shadow-color);
  background-color: #080b2a;
  border: 2px solid white;
  position: relative;
}

#morph-container.is-expanded {
  top: 1.5rem !important;
  left: 1.5rem !important;
  bottom: 1.5rem !important;
  right: 1.5rem !important;
  width: auto !important;
  height: auto !important;
  cursor: default;
}

#morph-container.is-expanded #neon-box {
  border-radius: 1rem;
  border-width: 0.5px;
}

#close-chat {
  position: absolute;
  top: 0.25rem;
  right: 0.25rem;
  width: 1.75rem;
  height: 1.75rem;
  cursor: pointer;
  opacity: 0;
  visibility: hidden;
  transition:
    opacity 0.3s,
    visibility 0.3s;
  z-index: 999;
}

#close-chat img {
  width: 100%;
  height: 100%;
}

#morph-container.is-expanded #close-chat {
  opacity: 1;
  visibility: visible;
  transition-delay: 0.5s;
}
</style>
</file>

<file path="./frontend/src/components/chat/CPanel.vue">
<template>
        <div id="morph-container" ref="morphContainer" @click="openChat">
          <div id="neon-box" ref="neonBox" class="text-white border-white">
            
            <!-- Close Button -->
            <div id="close-chat" @click.stop="closeChat">
              <img id="close-chat-img" :src="closeImgSrc" alt="Close Chat" 
                   @mouseover="closeImgSrc = closePressedImgSrc"
                   @mouseout="closeImgSrc = closeDefaultImgSrc"
                   @mousedown="closeImgSrc = closePressedImgSrc"
                   @mouseup="closeImgSrc = closeDefaultImgSrc"
              />
            </div>
            
            <!-- The Actual Chat UI -->
            <div id="chat-ui" ref="chatUI" class="w-full h-full flex flex-col opacity-0 invisible">
              <MessageList :messages="currentMessages" :users="users" />
              <form id="chat-form" class="p-3 flex items-center space-x-2 border-t border-purple-500/20" @submit.prevent="handleSendMessage">
                <input type="text" v-model="newMessageText" placeholder="Type a message..." class="flex-grow bg-transparent text-white focus:outline-none">
                <button type="submit" class="text-purple-400 hover:text-purple-300 transition-colors">
                   <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" /></svg>
                </button>
              </form>
            </div>
            
          </div>
        </div>
  

</template>
<style scoped></style>
<script setup lang="ts">
import { ref, onMounted } from "vue";
import { gsap } from "gsap";
import { Flip } from "gsap/Flip";
import MessageList from "./ChatMessageList.vue"; // Adjust path
 interface User {
  name: string;
  avatar: string;
  online: boolean;
}
interface Message {
  id: string;
  userId: string;
  text: string;
  time: string;
}

gsap.registerPlugin(Flip);

// --- Refs for DOM Elements ---
const morphContainer = ref<HTMLDivElement | null>(null);
const neonBox = ref<HTMLDivElement | null>(null);
const chatUI = ref<HTMLDivElement | null>(null);

// --- Component State ---
const isChatOpen = ref(false);
const currentMessages = ref<Message[]>([]);
const newMessageText = ref("");
const shadowColors = ["#7206b5dd", "#530080dd"];
let pulseInterval: number | null = null;

// --- Close Button Image State ---
const closeDefaultImgSrc = "https://images.cashflowcasino.com/misc/close.png";
const closePressedImgSrc = "https://images.cashflowcasino.com/misc/close-pressed.png";
const closeImgSrc = ref(closeDefaultImgSrc);

// --- Static Data ---
const users: Record<string, User> = {
  "user-you": { name: "You", avatar: "/images/avatars/avatar-1.png", online: true },
  "user-alex": { name: "Alex", avatar: "/images/avatars/avatar-2.png", online: true },
  "user-sam": { name: "Sam", avatar: "/images/avatars/avatar-3.png", online: false },
  "user-jess": { name: "Jess", avatar: "/images/avatars/avatar-4.png", online: true },
};

const initialMessages: Omit<Message, "id">[] = [
  { userId: "user-alex", text: "Hey, how's the project going?", time: "10:30 PM" },
  {
    userId: "user-you",
    text: "It's going well! Just putting the final touches on the animation.",
    time: "10:31 PM",
  },
  {
    userId: "user-sam",
    text: "Glad to hear it! The new online status indicators look great.",
    time: "10:32 PM",
  },
  {
    userId: "user-jess",
    text: "I agree! The minimal scrollbar is a nice touch too.",
    time: "10:32 PM",
  },
];

// --- Methods ---
const startPulsing = () => {
  if (pulseInterval) return;
  pulseInterval = window.setInterval(() => {
    gsap.to(neonBox.value, {
      "--shadow-color": gsap.utils.random(shadowColors),
      duration: 1.5,
      ease: "power1.inOut",
    });
  }, 1500);
};

const stopPulsing = () => {
  if (pulseInterval) clearInterval(pulseInterval);
  pulseInterval = null;
  gsap.to(neonBox.value, { "--shadow-color": shadowColors[0], duration: 0.5 });
};
const openChat = () => {
  if (isChatOpen.value || !morphContainer.value) return;

  const state = Flip.getState(morphContainer.value);
  morphContainer.value.classList.add("is-expanded");

  Flip.from(state, {
    duration: 0.8,
    ease: "expo.inOut",
    onComplete: () => {
      gsap.to(chatUI.value, {
        opacity: 1,
        visibility: "visible",
        duration: 0.5,
        delay: 0.3,
        onComplete: () => {
          // Load initial messages after UI is visible
          initialMessages.forEach((msg, index) => {
            gsap.delayedCall(index * 0.15, () => {
              addMessage(msg.text, msg.userId, msg.time);
            });
          });
        },
      });
      startPulsing();
    },
  });
  isChatOpen.value = true;
};

const closeChat = () => {
  if (!isChatOpen.value || !morphContainer.value) return;

  const state = Flip.getState(morphContainer.value);

gsap.to(chatUI.value, {
    opacity: 0,
    visibility: "hidden",
    duration: 0.3,
    onComplete: () => {
    morphContainer.value?.classList.remove("is-expanded");
      currentMessages.value = []; // Clear messages on close
    Flip.from(state, {
        duration: 0.8,
        ease: "expo.inOut",
    });
    },
});
stopPulsing();
isChatOpen.value = false;
};

const addMessage = (text: string, userId: string, time?: string) => {
  const message: Message = {
    id: crypto.randomUUID(),
    userId,
    text,
    time:
      time || new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
  };
  currentMessages.value.push(message);
};

const handleSendMessage = () => {
  const text = newMessageText.value.trim();
  if (text) {
    addMessage(text, "user-you");
    newMessageText.value = "";
    simulateReply();
  }
};

const simulateReply = () => {
  const randomResponderId = Object.keys(users).filter((id) => id !== "user-you")[
    Math.floor(Math.random() * 3)
  ];
  setTimeout(() => {
    // Show typing indicator
    const typingMessage: Message = {
      id: "typing-indicator",
      userId: randomResponderId,
      text: "...",
      time: "",
    };
    currentMessages.value.push(typingMessage);

    setTimeout(() => {
      // Remove typing indicator
      currentMessages.value = currentMessages.value.filter(
        (m: Message) => m.id !== "typing-indicator"
      );
      // Add actual reply
      addMessage("That's an interesting point!", randomResponderId);
    }, 2000);
  }, 800);
};

// --- Lifecycle Hooks ---
onMounted(() => {
  gsap.set(neonBox.value, { "--shadow-color": shadowColors[0] });
});
</script>
</file>

<file path="./frontend/src/components/chat/MessageList.vue">
<script setup lang="ts">
import { ref, watch, type PropType } from 'vue';
import { gsap } from 'gsap';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
import ChatMessage from './ChatMessage.vue'; // Adjust path
import type { Message, User } from './types'; // Adjust path

gsap.registerPlugin(ScrollToPlugin);

// --- Props ---
const props = defineProps({
  messages: {
    type: Array as PropType<Message[]>,
    required: true,
  },
  users: {
    type: Object as PropType<Record<string, User>>,
    required: true
  }
});

// --- Refs ---
const messageListEl = ref<HTMLDivElement | null>(null);

// --- State ---
// Keep track of which messages have already been animated to prevent re-animating on re-renders.
const animatedMessageIds = new Set<string>();

// --- Logic ---
function isMessageAnimated(id: string): boolean {
    if(animatedMessageIds.has(id)){
        return false;
    }
    animatedMessageIds.add(id);
    return true;
}

// --- Watchers ---
watch(() => props.messages.length, () => {
  // When a new message is added, scroll to the bottom.
  gsap.to(messageListEl.value, {
    duration: 0.5,
    scrollTo: 'max',
    ease: 'power2.out',
    delay: 0.1,
  });
});
</script>

<template>
  <div ref="messageListEl" class="message-list flex-grow p-4 space-y-4 overflow-y-auto">
    <ChatMessage
      v-for="message in messages"
      :key="message.id"
      :message="message"
      :user="users[message.userId]"
      :animate="isMessageAnimated(message.id)"
    >
        <!-- Special handling for the typing indicator -->
        <div v-if="message.id === 'typing-indicator'" class="typing-indicator">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
    </ChatMessage>
  </div>
</template>
<style scoped>
.message-list {
    /* Custom minimal scrollbar */
    scrollbar-width: thin;
    scrollbar-color: #530080ff transparent;
}

.message-list::-webkit-scrollbar {
    width: 6px;
}
.message-list::-webkit-scrollbar-track {
    background: transparent;
}
.message-list::-webkit-scrollbar-thumb {
    background-color: #530080ff;
    border-radius: 6px;
    border: 2px solid transparent;
}

/* Typing Indicator Styles */
.typing-indicator {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.25rem 0; /* Add some padding to match text height */
}
.typing-indicator .dot {
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    background-color: #9ca3af;
    animation: bounce 1.2s infinite;
}
.typing-indicator .dot:nth-child(2) {
    animation-delay: 0.2s;
}
.typing-indicator .dot:nth-child(3) {
    animation-delay: 0.4s;
}

@keyframes bounce {
    0%, 60%, 100% { transform: translateY(0); }
    30% { transform: translateY(-5px); }
}
</style>
</file>

<file path="./frontend/src/components/chat/types.d.ts">
export interface User {
    name: string;
    avatar: string;
    online: boolean;
}
export interface Message {
    id: string;
    userId: string;
    text: string;
    time: string;
}
</file>

<file path="./frontend/src/components/chat/types.ts">
// types.ts

export interface User {
  name: string;
  avatar: string;
  online: boolean;
}

export interface Message {
  id: string;
  userId: string;
  text: string;
  time: string;
}
</file>

<file path="./frontend/src/components/common/Notification.vue">
<template>
    <TransitionGroup name="notification" tag="div" class="fixed top-4 right-4 z-50 flex flex-col gap-3 w-full max-w-xs">
        <div v-for="notification in notifications" :key="notification.id"
            class="p-4 rounded-lg shadow-lg border-l-4 transition-all duration-300 transform"
            :class="notificationClasses(notification.type)" @click="removeNotification(notification.id)">
            <div class="flex items-start">
                <div class="flex-shrink-0">
                    <component :is="notificationIcon(notification.type)" class="h-5 w-5" />
                </div>
                <div class="ml-3 w-0 flex-1 pt-0.5">
                    <p class="text-sm font-medium">
                        {{ notification.message }}
                    </p>
                </div>
                <div class="ml-4 flex-shrink-0 flex">
                    <button class="inline-flex rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2"
                        :class="closeButtonClasses(notification.type)"
                        @click.stop="removeNotification(notification.id)">
                        <span class="sr-only">Close</span>
                        <XMarkIcon class="h-5 w-5" />
                    </button>
                </div>
            </div>
        </div>
    </TransitionGroup>
</template>

<script setup lang="ts">
import { XMarkIcon } from '@heroicons/vue/24/outline'
import { CheckCircleIcon, ExclamationCircleIcon, ExclamationTriangleIcon, InformationCircleIcon } from '@heroicons/vue/24/solid'
import { useNotificationStore } from '@/stores/notification.store'
import { storeToRefs } from 'pinia'

const notificationStore = useNotificationStore()
const { notifications } = storeToRefs(notificationStore)
const { removeNotification } = notificationStore

const notificationIcon = (type: string) => {
    switch (type) {
        case 'success':
            return CheckCircleIcon
        case 'error':
            return ExclamationCircleIcon
        case 'warning':
            return ExclamationTriangleIcon
        default:
            return InformationCircleIcon
    }
}

const notificationClasses = (type: string) => {
    const base = 'bg-white dark:bg-gray-800 border-l-4'
    const typeClasses = {
        success: 'border-green-500',
        error: 'border-red-500',
        warning: 'border-yellow-500',
        info: 'border-blue-500',
    }
    return `${base} ${typeClasses[type as keyof typeof typeClasses] || typeClasses.info}`
}

const closeButtonClasses = (type: string) => {
    const base = 'focus:ring-2 focus:ring-offset-2 rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none'
    const typeClasses = {
        success: 'focus:ring-green-500 hover:text-green-500',
        error: 'focus:ring-red-500 hover:text-red-500',
        warning: 'focus:ring-yellow-500 hover:text-yellow-500',
        info: 'focus:ring-blue-500 hover:text-blue-500',
    }
    return `${base} ${typeClasses[type as keyof typeof typeClasses] || typeClasses.info}`
}
</script>

<style scoped>
.notification-enter-active,
.notification-leave-active {
    transition: all 0.3s ease;
}

.notification-enter-from,
.notification-leave-to {
    opacity: 0;
    transform: translateX(30px);
}

.notification-move {
    transition: transform 0.3s ease;
}
</style>
</file>

<file path="./frontend/src/components/icons/IconCommunity.vue">
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor">
    <path
      d="M15 4a1 1 0 1 0 0 2V4zm0 11v-1a1 1 0 0 0-1 1h1zm0 4l-.707.707A1 1 0 0 0 16 19h-1zm-4-4l.707-.707A1 1 0 0 0 11 14v1zm-4.707-1.293a1 1 0 0 0-1.414 1.414l1.414-1.414zm-.707.707l-.707-.707.707.707zM9 11v-1a1 1 0 0 0-.707.293L9 11zm-4 0h1a1 1 0 0 0-1-1v1zm0 4H4a1 1 0 0 0 1.707.707L5 15zm10-9h2V4h-2v2zm2 0a1 1 0 0 1 1 1h2a3 3 0 0 0-3-3v2zm1 1v6h2V7h-2zm0 6a1 1 0 0 1-1 1v2a3 3 0 0 0 3-3h-2zm-1 1h-2v2h2v-2zm-3 1v4h2v-4h-2zm1.707 3.293l-4-4-1.414 1.414 4 4 1.414-1.414zM11 14H7v2h4v-2zm-4 0c-.276 0-.525-.111-.707-.293l-1.414 1.414C5.42 15.663 6.172 16 7 16v-2zm-.707 1.121l3.414-3.414-1.414-1.414-3.414 3.414 1.414 1.414zM9 12h4v-2H9v2zm4 0a3 3 0 0 0 3-3h-2a1 1 0 0 1-1 1v2zm3-3V3h-2v6h2zm0-6a3 3 0 0 0-3-3v2a1 1 0 0 1 1 1h2zm-3-3H3v2h10V0zM3 0a3 3 0 0 0-3 3h2a1 1 0 0 1 1-1V0zM0 3v6h2V3H0zm0 6a3 3 0 0 0 3 3v-2a1 1 0 0 1-1-1H0zm3 3h2v-2H3v2zm1-1v4h2v-4H4zm1.707 4.707l.586-.586-1.414-1.414-.586.586 1.414 1.414z"
    />
  </svg>
</template>
</file>

<file path="./frontend/src/components/icons/IconDocumentation.vue">
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="17" fill="currentColor">
    <path
      d="M11 2.253a1 1 0 1 0-2 0h2zm-2 13a1 1 0 1 0 2 0H9zm.447-12.167a1 1 0 1 0 1.107-1.666L9.447 3.086zM1 2.253L.447 1.42A1 1 0 0 0 0 2.253h1zm0 13H0a1 1 0 0 0 1.553.833L1 15.253zm8.447.833a1 1 0 1 0 1.107-1.666l-1.107 1.666zm0-14.666a1 1 0 1 0 1.107 1.666L9.447 1.42zM19 2.253h1a1 1 0 0 0-.447-.833L19 2.253zm0 13l-.553.833A1 1 0 0 0 20 15.253h-1zm-9.553-.833a1 1 0 1 0 1.107 1.666L9.447 14.42zM9 2.253v13h2v-13H9zm1.553-.833C9.203.523 7.42 0 5.5 0v2c1.572 0 2.961.431 3.947 1.086l1.107-1.666zM5.5 0C3.58 0 1.797.523.447 1.42l1.107 1.666C2.539 2.431 3.928 2 5.5 2V0zM0 2.253v13h2v-13H0zm1.553 13.833C2.539 15.431 3.928 15 5.5 15v-2c-1.92 0-3.703.523-5.053 1.42l1.107 1.666zM5.5 15c1.572 0 2.961.431 3.947 1.086l1.107-1.666C9.203 13.523 7.42 13 5.5 13v2zm5.053-11.914C11.539 2.431 12.928 2 14.5 2V0c-1.92 0-3.703.523-5.053 1.42l1.107 1.666zM14.5 2c1.573 0 2.961.431 3.947 1.086l1.107-1.666C18.203.523 16.421 0 14.5 0v2zm3.5.253v13h2v-13h-2zm1.553 12.167C18.203 13.523 16.421 13 14.5 13v2c1.573 0 2.961.431 3.947 1.086l1.107-1.666zM14.5 13c-1.92 0-3.703.523-5.053 1.42l1.107 1.666C11.539 15.431 12.928 15 14.5 15v-2z"
    />
  </svg>
</template>
</file>

<file path="./frontend/src/components/icons/IconEcosystem.vue">
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="20" fill="currentColor">
    <path
      d="M11.447 8.894a1 1 0 1 0-.894-1.789l.894 1.789zm-2.894-.789a1 1 0 1 0 .894 1.789l-.894-1.789zm0 1.789a1 1 0 1 0 .894-1.789l-.894 1.789zM7.447 7.106a1 1 0 1 0-.894 1.789l.894-1.789zM10 9a1 1 0 1 0-2 0h2zm-2 2.5a1 1 0 1 0 2 0H8zm9.447-5.606a1 1 0 1 0-.894-1.789l.894 1.789zm-2.894-.789a1 1 0 1 0 .894 1.789l-.894-1.789zm2 .789a1 1 0 1 0 .894-1.789l-.894 1.789zm-1.106-2.789a1 1 0 1 0-.894 1.789l.894-1.789zM18 5a1 1 0 1 0-2 0h2zm-2 2.5a1 1 0 1 0 2 0h-2zm-5.447-4.606a1 1 0 1 0 .894-1.789l-.894 1.789zM9 1l.447-.894a1 1 0 0 0-.894 0L9 1zm-2.447.106a1 1 0 1 0 .894 1.789l-.894-1.789zm-6 3a1 1 0 1 0 .894 1.789L.553 4.106zm2.894.789a1 1 0 1 0-.894-1.789l.894 1.789zm-2-.789a1 1 0 1 0-.894 1.789l.894-1.789zm1.106 2.789a1 1 0 1 0 .894-1.789l-.894 1.789zM2 5a1 1 0 1 0-2 0h2zM0 7.5a1 1 0 1 0 2 0H0zm8.553 12.394a1 1 0 1 0 .894-1.789l-.894 1.789zm-1.106-2.789a1 1 0 1 0-.894 1.789l.894-1.789zm1.106 1a1 1 0 1 0 .894 1.789l-.894-1.789zm2.894.789a1 1 0 1 0-.894-1.789l.894 1.789zM8 19a1 1 0 1 0 2 0H8zm2-2.5a1 1 0 1 0-2 0h2zm-7.447.394a1 1 0 1 0 .894-1.789l-.894 1.789zM1 15H0a1 1 0 0 0 .553.894L1 15zm1-2.5a1 1 0 1 0-2 0h2zm12.553 2.606a1 1 0 1 0 .894 1.789l-.894-1.789zM17 15l.447.894A1 1 0 0 0 18 15h-1zm1-2.5a1 1 0 1 0-2 0h2zm-7.447-5.394l-2 1 .894 1.789 2-1-.894-1.789zm-1.106 1l-2-1-.894 1.789 2 1 .894-1.789zM8 9v2.5h2V9H8zm8.553-4.894l-2 1 .894 1.789 2-1-.894-1.789zm.894 0l-2-1-.894 1.789 2 1 .894-1.789zM16 5v2.5h2V5h-2zm-4.553-3.894l-2-1-.894 1.789 2 1 .894-1.789zm-2.894-1l-2 1 .894 1.789 2-1L8.553.106zM1.447 5.894l2-1-.894-1.789-2 1 .894 1.789zm-.894 0l2 1 .894-1.789-2-1-.894 1.789zM0 5v2.5h2V5H0zm9.447 13.106l-2-1-.894 1.789 2 1 .894-1.789zm0 1.789l2-1-.894-1.789-2 1 .894 1.789zM10 19v-2.5H8V19h2zm-6.553-3.894l-2-1-.894 1.789 2 1 .894-1.789zM2 15v-2.5H0V15h2zm13.447 1.894l2-1-.894-1.789-2 1 .894 1.789zM18 15v-2.5h-2V15h2z"
    />
  </svg>
</template>
</file>

<file path="./frontend/src/components/icons/IconSupport.vue">
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor">
    <path
      d="M10 3.22l-.61-.6a5.5 5.5 0 0 0-7.666.105 5.5 5.5 0 0 0-.114 7.665L10 18.78l8.39-8.4a5.5 5.5 0 0 0-.114-7.665 5.5 5.5 0 0 0-7.666-.105l-.61.61z"
    />
  </svg>
</template>
</file>

<file path="./frontend/src/components/icons/IconTooling.vue">
<!-- This icon is from <https://github.com/Templarian/MaterialDesign>, distributed under Apache 2.0 (https://www.apache.org/licenses/LICENSE-2.0) license-->
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    aria-hidden="true"
    role="img"
    class="iconify iconify--mdi"
    width="24"
    height="24"
    preserveAspectRatio="xMidYMid meet"
    viewBox="0 0 24 24"
  >
    <path
      d="M20 18v-4h-3v1h-2v-1H9v1H7v-1H4v4h16M6.33 8l-1.74 4H7v-1h2v1h6v-1h2v1h2.41l-1.74-4H6.33M9 5v1h6V5H9m12.84 7.61c.1.22.16.48.16.8V18c0 .53-.21 1-.6 1.41c-.4.4-.85.59-1.4.59H4c-.55 0-1-.19-1.4-.59C2.21 19 2 18.53 2 18v-4.59c0-.32.06-.58.16-.8L4.5 7.22C4.84 6.41 5.45 6 6.33 6H7V5c0-.55.18-1 .57-1.41C7.96 3.2 8.44 3 9 3h6c.56 0 1.04.2 1.43.59c.39.41.57.86.57 1.41v1h.67c.88 0 1.49.41 1.83 1.22l2.34 5.39z"
      fill="currentColor"
    ></path>
  </svg>
</template>
</file>

<file path="./frontend/src/components/ui/animated-circular-progressbar/AnimatedCircularProgressBar.vue">
<template>
  <div class="progress-circle-base" :class="cn('relative size-40 text-2xl font-semibold', props.class)">
    <svg fill="none" class="size-full" stroke-width="2" viewBox="0 0 100 100">
      <circle v-if="currentPercent <= 90 && currentPercent >= 0" cx="50" cy="50" r="45" :stroke-width="circleStrokeWidth" stroke-dashoffset="0" stroke-linecap="round" stroke-linejoin="round" class="gauge-secondary-stroke opacity-100" />
      <circle cx="50" cy="50" r="45" :stroke-width="circleStrokeWidth" stroke-dashoffset="0" stroke-linecap="round" stroke-linejoin="round" class="gauge-primary-stroke opacity-100" />
    </svg>
    <span v-if="showPercentage" :data-current-value="currentPercent" class="absolute inset-0 m-auto size-fit delay-0 duration-1000 ease-linear animate-in fade-in">
      {{ currentPercent }}
    </span>
  </div>
</template>

<script setup lang="ts">
import { computed } from "vue";
import { cn } from "@/lib/utils";

interface Props {
  max?: number;
  value?: number;
  min?: number;
  gaugePrimaryColor?: string;
  gaugeSecondaryColor?: string;
  class?: string;
  circleStrokeWidth?: number;
  showPercentage?: boolean;
  duration?: number;
}

const props = withDefaults(defineProps<Props>(), {
  max: 100,
  min: 0,
  value: 0,
  gaugePrimaryColor: "rgb(79 70 229)",
  gaugeSecondaryColor: "rgba(0, 0, 0, 0.1)",
  circleStrokeWidth: 10,
  showPercentage: true,
  duration: 1,
});

const circumference = 2 * Math.PI * 45;
const percentPx = circumference / 100;

const currentPercent = computed(() => ((props.value - props.min) / (props.max - props.min)) * 100);
const percentageInPx = computed(() => `${percentPx}px`);
const durationInSeconds = computed(() => `${props.duration}s`);
</script>

<style scoped lang="css">
.progress-circle-base {
  --circle-size: 100px;
  --circumference: v-bind(circumference);
  --percent-to-px: v-bind(percentageInPx);
  --gap-percent: 5;
  --offset-factor: 0;
  --transition-step: 200ms;
  --percent-to-deg: 3.6deg;
  transform: translateZ(0);
}

.gauge-primary-stroke {
  stroke: v-bind(gaugePrimaryColor);
  --stroke-percent: v-bind(currentPercent);
  stroke-dasharray: calc(var(--stroke-percent) * var(--percent-to-px)) var(--circumference);
  transition:
    v-bind(durationInSeconds) ease,
    stroke v-bind(durationInSeconds) ease;
  transition-property: stroke-dasharray, transform;
  transform: rotate(
    calc(-90deg + var(--gap-percent) * var(--offset-factor) * var(--percent-to-deg))
  );
  transform-origin: calc(var(--circle-size) / 2) calc(var(--circle-size) / 2);
}

.gauge-secondary-stroke {
  stroke: v-bind(gaugeSecondaryColor);
  --stroke-percent: 90 - v-bind(currentPercent);
  --offset-factor-secondary: calc(1 - var(--offset-factor));
  stroke-dasharray: calc(var(--stroke-percent) * var(--percent-to-px)) var(--circumference);
  transform: rotate(
      calc(
        1turn - 90deg -
          (var(--gap-percent) * var(--percent-to-deg) * var(--offset-factor-secondary))
      )
    )
    scaleY(-1);
  transition: all v-bind(durationInSeconds) ease;
  transform-origin: calc(var(--circle-size) / 2) calc(var(--circle-size) / 2);
}
</style>
</file>

<file path="./frontend/src/components/ui/animated-circular-progressbar/index.ts">
export { default as AnimatedCircularProgressBar } from "./AnimatedCircularProgressBar.vue";
</file>

<file path="./frontend/src/components/ui/flickering-grid/FlickeringGrid.vue">
<template>
  <div ref="containerRef" :class="cn('w-full h-full', props.class)">
    <canvas ref="canvasRef" class="pointer-events-none" :width="canvasSize.width" :height="canvasSize.height" />
  </div>
</template>

<script lang="ts" setup>
import { cn } from "@/lib/utils";
import { ref, onMounted, onBeforeUnmount, toRefs, computed } from "vue";

interface FlickeringGridProps {
  starSize?: number;
  gridGap?: number;
  flickerChance?: number;
  color?: string;
  width?: number;
  height?: number;
  class?: string;
  maxOpacity?: number;
}

const props = withDefaults(defineProps<FlickeringGridProps>(), {
  starSize: 12,
  gridGap: 6,
  flickerChance: 0.3,
  color: "#ffea00",
  maxOpacity: 0.3,
});

const { starSize, gridGap, flickerChance, color, maxOpacity, width, height } = toRefs(props);

const containerRef = ref<HTMLDivElement>();
const canvasRef = ref<HTMLCanvasElement>();
const context = ref<CanvasRenderingContext2D>();

const isInView = ref(false);
const canvasSize = ref({ width: 0, height: 0 });

const computedColor = computed(() => {
  if (!context.value) return "rgba(255, 0, 0, 0.3)";

  const hex = color.value.replace(/^#/, "");
  const bigint = Number.parseInt(hex, 16);
  const r = (bigint >> 16) & 255;
  const g = (bigint >> 8) & 255;
  const b = bigint & 255;
  return `rgba(${r}, ${g}, ${b},`;
});

function setupCanvas(
  canvas: HTMLCanvasElement,
  width: number,
  height: number,
): {
  cols: number;
  rows: number;
  opacities: Float32Array;
  dpr: number;
} {
  const dpr = window.devicePixelRatio || 1;
  canvas.width = width * dpr;
  canvas.height = height * dpr;
  canvas.style.width = `${width}px`;
  canvas.style.height = `${height}px`;

  const cols = Math.floor(width / (starSize.value + gridGap.value));
  const rows = Math.floor(height / (starSize.value + gridGap.value));

  const opacities = new Float32Array(cols * rows);
  for (let i = 0; i < opacities.length; i++) {
    opacities[i] = Math.random() * maxOpacity.value;
  }
  return { cols, rows, opacities, dpr };
}

function updateOpacities(opacities: Float32Array, deltaTime: number) {
  for (let i = 0; i < opacities.length; i++) {
    if (Math.random() < flickerChance.value * deltaTime) {
      opacities[i] = Math.random() * maxOpacity.value;
    }
  }
}

function drawStar(
  ctx: CanvasRenderingContext2D,
  cx: number,
  cy: number,
  spikes: number,
  outerRadius: number,
  innerRadius: number,
) {
  let rot = (Math.PI / 2) * 3;
  let x = cx;
  let y = cy;
  const step = Math.PI / spikes;

  ctx.beginPath();
  ctx.moveTo(cx, cy - outerRadius);
  for (let i = 0; i < spikes; i++) {
    x = cx + Math.cos(rot) * outerRadius;
    y = cy + Math.sin(rot) * outerRadius;
    ctx.lineTo(x, y);
    rot += step;

    x = cx + Math.cos(rot) * innerRadius;
    y = cy + Math.sin(rot) * innerRadius;
    ctx.lineTo(x, y);
    rot += step;
  }
  ctx.lineTo(cx, cy - outerRadius);
  ctx.closePath();
}

function drawGrid(
  ctx: CanvasRenderingContext2D,
  width: number,
  height: number,
  cols: number,
  rows: number,
  opacities: Float32Array,
  dpr: number,
) {
  ctx.clearRect(0, 0, width, height);
  ctx.fillStyle = "transparent";
  ctx.fillRect(0, 0, width, height);
  for (let i = 0; i < cols; i++) {
    for (let j = 0; j < rows; j++) {
      const opacity = opacities[i * rows + j];
      ctx.fillStyle = `${computedColor.value}${opacity})`;

      const x = i * (starSize.value + gridGap.value) * dpr;
      const y = j * (starSize.value + gridGap.value) * dpr;
      const starDrawingSize = starSize.value * dpr;
      const cx = x + starDrawingSize / 2;
      const cy = y + starDrawingSize / 2;

      drawStar(ctx, cx, cy, 5, starDrawingSize / 2, starDrawingSize / 4);
      ctx.fill();
    }
  }
}

const gridParams = ref<ReturnType<typeof setupCanvas>>();

function updateCanvasSize() {
  const newWidth = width.value || containerRef.value!.clientWidth;
  const newHeight = height.value || containerRef.value!.clientHeight;

  canvasSize.value = { width: newWidth, height: newHeight };
  gridParams.value = setupCanvas(canvasRef.value!, newWidth, newHeight);
}

let animationFrameId: number | undefined;
let resizeObserver: ResizeObserver | undefined;
let intersectionObserver: IntersectionObserver | undefined;
let lastTime = 0;

function animate(time: number) {
  if (!isInView.value) return;

  const deltaTime = (time - lastTime) / 1000;
  lastTime = time;

  updateOpacities(gridParams.value!.opacities, deltaTime);
  drawGrid(
    context.value!,
    canvasRef.value!.width,
    canvasRef.value!.height,
    gridParams.value!.cols,
    gridParams.value!.rows,
    gridParams.value!.opacities,
    gridParams.value!.dpr,
  );
  animationFrameId = requestAnimationFrame(animate);
}

onMounted(() => {
  if (!canvasRef.value || !containerRef.value) return;
  context.value = canvasRef.value.getContext("2d")!;
  if (!context.value) return;

  updateCanvasSize();

  resizeObserver = new ResizeObserver(() => {
    updateCanvasSize();
  });
  intersectionObserver = new IntersectionObserver(
    ([entry]) => {
      isInView.value = entry.isIntersecting;
      animationFrameId = requestAnimationFrame(animate);
    },
    { threshold: 0 },
  );

  resizeObserver.observe(containerRef.value);
  intersectionObserver.observe(canvasRef.value);
});

onBeforeUnmount(() => {
  if (animationFrameId) {
    cancelAnimationFrame(animationFrameId);
  }
  resizeObserver?.disconnect();
  intersectionObserver?.disconnect();
});
</script>
</file>

<file path="./frontend/src/components/ui/flickering-grid/index.d.ts">
export { default as FlickeringGrid } from "./FlickeringGrid.vue";
</file>

<file path="./frontend/src/components/ui/flickering-grid/index.ts">
export { default as FlickeringGrid } from "./FlickeringGrid.vue";
</file>

<file path="./frontend/src/components/ui/SettingsButton.vue">
<script setup lang="ts">
import { useEventManager } from '@/composables/EventManager'

const eventBus = useEventManager()

function openSettings() {
  eventBus.emit('settingsModal', true)
}
</script>

<template>
    <div class="flex flex-col items-center text-white">
        <img style="
          top: 0px;
          right: 8px;
          gap: 0px;
          margin: 0px;
          padding: 0px;
          background-size: cover;
          z-index: 999999;
        " src="/images/layout/settings.avif" @click="openSettings" />
    </div>
</template>
</file>

<file path="./frontend/src/components/AdCarousel.vue">
<script setup lang="ts">
import { onMounted } from 'vue'
import { useWindowSize } from '@vueuse/core'
import Autoplay from 'embla-carousel-autoplay'
import emblaCarouselVue from 'embla-carousel-vue'

/**
 * Initialize Embla with autoplay.
 * loop: false to avoid infinite loop edge-cases with scaling tween.
 * Autoplay plugin delay is 5000ms.
 */
const [emblaRef, emblaApi] = emblaCarouselVue(
  { loop: false },
  [Autoplay({ delay: 5000 })]
)

const TWEEN_FACTOR_BASE = 0.52
let tweenFactor = 0
let tweenNodes: HTMLElement[] = []

/**
 * Use VueUse to get reactive window height.
 * We show the carousel only when height > 700 (as per template condition).
 */
const { height } = useWindowSize()

const numberWithinRange = (number: number, min: number, max: number): number =>
  Math.min(Math.max(number, min), max)

function setTweenNodes(api: any) {
  if (!api) return
  tweenNodes = api.slideNodes().map((slideNode: HTMLElement) => slideNode)
}

function setTweenFactor(api: any) {
  if (!api) return
  tweenFactor = TWEEN_FACTOR_BASE * api.scrollSnapList().length
}

function tweenScale(api: any, eventName?: string) {
  if (!api) return
  const engine = api.internalEngine()
  const scrollProgress = api.scrollProgress()
  const slidesInView: number[] = api.slidesInView()
  const isScrollEvent = eventName === 'scroll'

  api.scrollSnapList().forEach((scrollSnap: number, snapIndex: number) => {
    let diffToTarget = scrollSnap - scrollProgress
    const slidesInSnap: number[] = engine.slideRegistry[snapIndex]

    slidesInSnap.forEach((slideIndex: number) => {
      if (isScrollEvent && !slidesInView.includes(slideIndex)) return

      if (engine.options.loop) {
        engine.slideLooper.loopPoints.forEach((loopItem: any) => {
          const target = loopItem.target()
          if (slideIndex === loopItem.index && target !== 0) {
            const sign = Math.sign(target)
            if (sign === -1) diffToTarget = scrollSnap - (1 + scrollProgress)
            if (sign === 1) diffToTarget = scrollSnap + (1 - scrollProgress)
          }
        })
      }

      const tweenValue = 1 - Math.abs(diffToTarget * tweenFactor)
      const scale = numberWithinRange(tweenValue, 0, 1).toString()
      const tweenNode = tweenNodes[slideIndex]
      if (tweenNode) tweenNode.style.transform = `scale(${scale})`
    })
  })
}

function setupTweenScale(apiRef: { value: any }) {
  if (!apiRef?.value) return
  setTweenNodes(apiRef.value)
  setTweenFactor(apiRef.value)
  tweenScale(apiRef.value)

  apiRef.value
    .on('reInit', setTweenNodes)
    .on('reInit', setTweenFactor)
    .on('reInit', tweenScale)
    .on('scroll', tweenScale)
    .on('slideFocus', tweenScale)

  return () => {
    tweenNodes.forEach((slide) => slide.removeAttribute('style'))
  }
}

onMounted(() => {
  setupTweenScale(emblaApi)
})
</script>

<template>
  <div
    style="width: 100vw; max-width: 600px; height: 22vh"
    class="justify-start items-start flex grow-0"
  >
    <div v-if="height > 700" id="AdCarousel" class="adcarousel max-w-[700px]">
      <div ref="emblaRef" class="embla">
        <div
          class="embla__container justify-center items-center flex h-[100%] m-auto max-w-[500px]"
        >
          <div class="embla__slide">
            <img src="/images/ads/casinoadfreechips.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoClubBonusContestV2PCA2023.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoSales2024PopUprevamped.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoadfreechips.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoClubBonusContestV2PCA2023.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoSales2024PopUprevamped.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoClubBonusContestV2PCA2023.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoSales2024PopUprevamped.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoadfreechips.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoClubBonusContestV2PCA2023.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoSales2024PopUprevamped.png" style="height: 100%" />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
  .adcarousel {
    position: relative; /* establish stacking context */
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;

    /* Keep enough room for the dock */
    min-height: 220px;
    overflow: hidden;
  }

  /* Render the dock as a persistent background layer via ::before
     so it does not get overwritten by slide-level inline styles or repaint */
  .adcarousel::before {
    content: '';
    position: absolute;
    inset: 0;
    background-image: url('/images/ads/promo-dock.png');
    background-repeat: no-repeat;
    background-position: center bottom;
    background-size: 90% auto;
    pointer-events: none;
    z-index: 0;
  }

  .embla {
    position: relative;
    z-index: 1; /* ensure slides render above the dock layer */
    overflow: hidden;
    height: 100%;
    align-items: start;
    justify-content: center;
    width: 100%;
    margin: auto;
  }

  .embla__container {
    display: flex;
    width: 100%;
    align-items: start;
    justify-content: center;
    position: relative;
    z-index: 1;
  }

  .embla__slide {
    flex: 0 0 100%;
    min-width: 0;
        width: 80%;
    margin: auto;
    padding-bottom: 0px;
    padding-left: 26px;
    padding-right: 26px;
    position: relative;
    z-index: 1;
  }
</style>
</file>

<file path="./frontend/src/components/AnimationLayer.vue">
<!-- /tmp/hono-open-api-starter/frontend/src/components/AnimationLayer.vue -->
<template>
  <div class="animation-layer">
    <component
      v-for="anim in animations"
      :key="anim.id"
      :is="anim.component"
      v-bind="anim.props"
      :style="anim.style"
      class="animation-sprite"
    />
  </div>
</template>

<script setup lang="ts">
import { useAnimationLayer } from '@/composables/useAnimationLayer'

const { animations } = useAnimationLayer()
</script>

<style scoped>
.animation-layer {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: transparent;
  pointer-events: none;
  z-index: 1000; /* Ensure it's on top of most other UI elements */
  overflow: hidden;
}

.animation-sprite {
  position: absolute;
  /* Individual sprites can override pointer-events if they need to be interactive */
}
</style>
</file>

<file path="./frontend/src/components/AuroraText.vue">
<script setup lang="ts">
  interface AuroraTextProps {
    className?: string
    colors?: string[]
    speed?: number
  }
  const props = withDefaults(defineProps<AuroraTextProps>(), {
    colors: () => ['#FF0080', '#7928CA', '#0070F3', '#38bdf8'],
    // colors: () => ['#ffff', '#ff9800', '#ffc107', '#ffea00'],
    // colors: () => ['#ffea00', '#ffea00', '#ffff', '#ffea00', '#ffea00'],
    speed: 1,
  })
  const gradientStyle = {
    backgroundImage: `linear-gradient(135deg, ${props.colors.join(', ')}, ${props.colors[0]})`,
    WebkitBackgroundClip: 'text',
    WebkitTextFillColor: 'transparent',
    animationDuration: `${10 / props.speed}s`,
    fontFamily: 'onacona',
  }
</script>

<template>
  <span :class="`relative inline-block ${props.className}`">
    <span class="sr-only">
      <slot />
    </span>
    <span
      class="relative animate-aurora bg-[length:200%_auto] bg-clip-text text-transparent"
      :style="gradientStyle"
      aria-hidden="true"
    >
      <slot />
    </span>
  </span>
</template>
<style scoped>
  .animate-aurora {
    /* animation-duration: infinite;
     animation-name: aurora
  animation-duration: 1s; */
    animation: aurora 12s ease-in-out infinite alternate;

    /* animate: aurora 1s ease-in-out infinite; */
  }
  @keyframes aurora {
    0% {
      background-position: 0% 50%;
      transform: rotate(-5deg) scale(0.9);
    }
    25% {
      background-position: 50% 100%;
      transform: rotate(5deg) scale(1.1);
    }
    50% {
      background-position: 100% 50%;
      transform: rotate(-3deg) scale(0.95);
    }
    75%: {
      background-position: 50% 0%;
      transform: rotate(3deg) scale(1.05);
    }
    100% {
      background-position: 0% 50%;
      transform: rotate(-5deg) scale(0.9);
    }
  }
</style>
</file>

<file path="./frontend/src/components/CloseButton.vue">
<script setup lang="ts">
  import { computed, ref } from 'vue'

  const props = defineProps({
    label: String,
    idleImage: String,
    pressedImage: String,
    // 9-slice values – adjust these to match your button image
    leftCap: { type: Number, default: 1 },
    rightCap: { type: Number, default: 1 },
    topCap: { type: Number, default: 1 },
    bottomCap: { type: Number, default: 1 },
  })

  defineEmits(['click'])

  const isPressed = ref(false)

  function pressButton() {
    isPressed.value = true
    // nextTick(() => {
    //   setTimeout(() => {
    //     nextTick(() => {
    //       console.log('going home')
    //       router.push('/home')
    //     })
    //   }, 100)
    // })
  }

  const buttonStyle = computed(() => {
    const image = isPressed.value ? props.pressedImage : props.idleImage
    const padding = `${props.topCap}px ${props.rightCap}px ${props.bottomCap}px ${props.leftCap}px`
    return {
      padding,
      backgroundImage: `url(${image})`,
      height: `52px`,
      width: '52px',
      backgroundSize: `calc(100% + ${props.leftCap}px + ${props.rightCap}px) calc(100% + ${props.topCap}px + ${props.bottomCap}px)`, // Stretchable background
      border: 'none',
      cursor: 'pointer',
      // Ensure the button stretches with the label
      display: 'inline-flex', // Use flexbox for alignment
      alignItems: 'center', // Vertically center
      justifyContent: 'center', // Horizontally center
    }
  })
</script>

<template>
  <div style="border-width: 0px">
    <button
      class="nine-slice-button"
      :style="buttonStyle"
      style="border-width: 0px"
      @mousedown="isPressed = true"
      @click="pressButton"
    >
      <span class="button-label">{{ label }}</span>
    </button>
  </div>
</template>

<style scoped>
  .nine-slice-button {
    /* Reset default button styles */
    background-color: transparent;
    /* Important for seeing the image */
    font-family: sans-serif;
    /* Or your preferred font */
    font-size: 16px;
    /* Or your preferred size */
    color: #333;
    /* Or your preferred color */
    white-space: nowrap;
    /* Prevent label from wrapping */
  }

  .button-label {
    /* Add any specific label styling here */
  }
</style>
</file>

<file path="./frontend/src/components/FilterBar.vue">
<script lang="ts" setup>
  import { ref } from 'vue'
  import * as AllJson from '@/assets/anim/part0.json'
  import * as FishJson from '@/assets/anim/part2.json'
  import * as SlotsJson from '@/assets/anim/part1.json'

  const display = ref(true)
  // Create a reactive variable to track the selected filter
  const selectedFilter = ref('all') // 'all', 'fish', or 'slots'

  // Define emits for carousel scrolling
  const emit = defineEmits<{
    scrollLeft: []
    scrollRight: []
  }>()

  // Handle arrow clicks
  const handleScrollLeft = () => {
    emit('scrollLeft')
  }

  const handleScrollRight = () => {
    emit('scrollRight')
  }

  // Function to update the selected filter
  const selectFilter = (filterName: 'all' | 'fish' | 'slots') => {
    selectedFilter.value = filterName
    // You can also emit an event here to notify a parent component of the change
    // emit('filterChanged', filterName)
  }
</script>

<template>
  <div class="flex flex-row justify-center m-0" style="max-width: fit-content; margin-inline: auto">
    <div
      v-show="display"
      class="basis-1/2 animate__animated animate__fadeIn flex justify-between "
      style="
        background-color: white !important;
        z-index: 21;
        background-repeat: no-repeat;
        background-color: transparent;
        justify-content: center;
        width: 100%;
        max-height: 85px; /* Adjusted height to fit background */
        align-items: center;
      "
    >
      <img
        src="/images/filterbar/side-arrow-prev.avif"
        class="mr-2 flex cursor-pointer"
        style="text-align: center"
        @click="handleScrollLeft"
      />

      <div
        class="filter-item bottomDropper ml-2"
        :class="{ selected: selectedFilter === 'all' }"
        @click="selectFilter('all')"
      >
        <SpriteAnimator
          :animation-data="AllJson"
          image-url="/images/filterbar/part0.png"
          :width="60"
          :height="60"
          :frame-count="AllJson.frames.length"
          :initial-delay-max="0"
          :loop-delay="0"
        />
      </div>

      <div
        class="filter-item bottomDropper"
        :class="{ selected: selectedFilter === 'fish' }"
        @click="selectFilter('fish')"
      >
        <SpriteAnimator
          :animation-data="FishJson"
          image-url="/images/filterbar/part2.png"
          :width="65"
          :height="65"
          :frame-count="FishJson.frames.length"
          :initial-delay-max="0"
          :loop-delay="0"
        />
      </div>

      <div
        class="filter-item bottomDropper pt-2"
        :class="{ selected: selectedFilter === 'slots' }"
        @click="selectFilter('slots')"
      >
        <SpriteAnimator
          :animation-data="SlotsJson"
          image-url="/images/filterbar/part1.png"
          :width="60"
          :height="60"
          :frame-count="SlotsJson.frames.length"
          :initial-delay-max="0"
          :loop-delay="0"
        />
      </div>

      <img
        src="/images/filterbar/side-arrow.avif"
        class="ml-2 flex cursor-pointer"
        style="text-align: center"
        @click="handleScrollRight"
      />
    </div>
  </div>
</template>

<style scoped>
  .bottomDropper {
    --animate-duration: 0.3s;
  }

  .filter-item {
    cursor: pointer;
    width: 85px;
    height: 85px;
    display: flex;
    justify-content: center;
    align-items: center;
    /* Background for when the item is NOT selected */
    background-image: url('/images/filterbar/button-dead.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    transition: all 0.2s ease-in-out;
  }

  .filter-item.selected {
    /* Background for when the item IS selected */
    background-image: url('/images/filterbar/button-on.png');
  }

  /* Your existing styles */
  .div --active {
    background-color: transparent;
    margin-top: 5px;
  }

  .van-tabbar {
    height: 42px;
    font-family: 'bungeecolor';
  }
</style>
</file>

<file path="./frontend/src/components/Footer.vue">
<template>
  <footer class="bg-transparent  text-white pb-4 text-sm leading-3 tracking-tighter px-2 w-full bottom-0 flex justify-between h-[50px] left-0 items-end
    " :class="isMobile ? 'fixed' : 'absolute'"
    style=" background-image: url('/images/bottom/slice.avif'); background-size: contain;background-position-y: 100%;  background-repeat: repeat-x;">
    <div class=" flex flex-col onacona tracking-[-.1em]  text-[18px] leading-2.5  items-center text-white">
      <SpriteAnimator :animation-data="WheelAnimation" :image-url="wheelImageUrl" :width="78" :height="50"
        :frame-count="WheelAnimation.frames.length" :frame-rate="10" />
      <span class="">Wheel</span>
    </div>
    <div class="flex flex-col onacona tracking-[-.1em]  text-[18px] leading-2.5  items-center ">
      <SpriteAnimator style="transform: translateX(4px) translateY(-2px);" :animation-data="LeaderNewAnimation"
        :image-url="leaderImageUrl" :width="60" :height="60" :frame-count="LeaderNewAnimation.frames.length"
        :initial-delay-max="4" :loop-delay="7" />
      <span class="">Leaders</span>
    </div>
    <div class="flex flex-col onacona tracking-[-.1em]  text-[18px] leading-2.5 items-center text-white mb-4">
      <ChatPanel />
    </div>
    <div class="flex flex-col onacona tracking-[-.1em]  text-[18px] leading-2.5  items-center text-white">
      <SpriteAnimator :animation-data="VaultAnimation" :image-url="vaultImageUrl" :width="60" :height="60"
        :frame-count="VaultAnimation.frames.length" :initial-delay-max="6" :loop-delay="7" />
      <span class="">Vault</span>
    </div>
    <div class="flex flex-col onacona tracking-[-.1em]  text-[12px] leading-2.5 items-center text-white">
      <SpriteAnimator style="transform: scale(1.3) translateY(4px) translateX(-4px); transform-origin: center"
        :animation-data="RewardsAnimation" :image-url="rewardsImageUrl" :width="60" :height="60"
        :frame-count="RewardsAnimation.frames.length" :initial-delay-max="8" :loop-delay="7" />
      <span class="">Rewards</span>
    </div>
  </footer>
</template>
<style scoped></style>

<script setup lang="ts">
import SpriteAnimator from './SpriteAnimator.vue';

// Import animation data
import LeaderNewAnimation from '@/assets/anim/leadernew.json';
import RewardsAnimation from '@/assets/anim/rewards.json';
import VaultAnimation from '@/assets/anim/vault.json';
import WheelAnimation from '@/assets/anim/wheel.json';

// Import sprite sheet images
import leaderImageUrl from '@/assets/anim/leadernew.png';
import rewardsImageUrl from '@/assets/anim/rewards.png';
import vaultImageUrl from '@/assets/anim/vault.png';
import wheelImageUrl from '@/assets/anim/wheel.png';

const { isMobile } = useScreen()
</script>
</file>

<file path="./frontend/src/components/FormCheckRadio.vue">
<script setup>
  import { computed } from 'vue'

  const props = defineProps({
    name: {
      type: String,
      required: true,
    },
    type: {
      type: String,
      default: 'checkbox',
      validator: (value) => ['checkbox', 'radio', 'switch'].includes(value),
    },
    label: {
      type: String,
      default: null,
    },
    modelValue: {
      type: [Array, String, Number, Boolean],
      default: null,
    },
    inputValue: {
      type: [String, Number, Boolean],
      required: true,
    },
  })

  const emit = defineEmits(['update:modelValue'])

  const computedValue = computed({
    get: () => props.modelValue,
    set: (value) => {
      emit('update:modelValue', value)
    },
  })

  const inputType = computed(() => (props.type === 'radio' ? 'radio' : 'checkbox'))
</script>

<template>
  <label :class="type">
    <input v-model="computedValue" :type="inputType" :name="name" :value="inputValue" />
    <span class="check" />
    <span class="pl-2">{{ label }}</span>
  </label>
</template>
</file>

<file path="./frontend/src/components/FormCheckRadioGroup.vue">
<script setup>
  import { computed } from 'vue'

  const props = defineProps({
    options: {
      type: Object,
      default: () => {},
    },
    name: {
      type: String,
      required: true,
    },
    type: {
      type: String,
      default: 'checkbox',
      validator: (value) => ['checkbox', 'radio', 'switch'].includes(value),
    },
    componentClass: {
      type: String,
      default: null,
    },
    isColumn: Boolean,
    modelValue: {
      type: [Array, String, Number, Boolean],
      default: null,
    },
  })

  const emit = defineEmits(['update:modelValue'])

  const computedValue = computed({
    get: () => props.modelValue,
    set: (value) => {
      emit('update:modelValue', value)
    },
  })
</script>

<template>
  <div class="flex justify-start flex-wrap -mb-3" :class="{ 'flex-col': isColumn }">
    <FormCheckRadio
      v-for="(value, key) in options"
      :key="key"
      v-model="computedValue"
      :type="type"
      :name="name"
      :input-value="key"
      :label="value"
      :class="componentClass"
      class="mr-6 mb-3 last:mr-0"
    />
  </div>
</template>
</file>

<file path="./frontend/src/components/GameCarousel.vue">
<script setup lang="ts">
import { useGameStore } from "@/stores/game.store";
import { onMounted, ref, watch } from "vue";
import StarBurst from "./StarBurst.vue";
import type { Game } from "@/sdk/generated";
import type { PreloadManifest } from "@/composables/useImagePreloader";

interface LocalGame extends Omit<Game, "id"> {
  id: string | number;
  temperature: "hot" | "cold" | "none";
  featured?: boolean;
  developer: string;
}

const gameStore = useGameStore();
const games = ref<LocalGame[]>([]);

// Export critical assets for above-the-fold (first two visible game cards on typical mobile)
// The actual URLs depend on game data; we provide a static fallback banner so cards render cleanly.
// Note: currently unused locally; kept for potential external use. Disable lint warning.
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getGameCarouselAboveTheFoldAssets(): PreloadManifest {
  return {
    images: [
      { url: "/images/games/tall-field.avif", critical: true },
      { url: "/images/games/featured.webp", critical: false },
    ],
  };
}

// Update games when gameStore.games changes
watch(
  () => gameStore.games,
  (newGames) => {
    games.value = newGames.map(
      (game): LocalGame => ({
        ...game,
        id: game.id,
        temperature: "none",
        featured: false,
        title: game.title || game.name || "Untitled Game",
        category: game.category || "other",
        tags: Array.isArray(game.tags) ? game.tags : [],
        isActive: game.isActive ?? true,
      })
    );
  },
  { immediate: true }
);
const carousel = ref<HTMLElement | null>(null);
const customScrollbar = ref<HTMLElement | null>(null);
const thumb = ref<HTMLElement | null>(null);
const animatingGameId = ref<string | null>(null);

// Lazy loading state
const loadedImages = ref<Set<string>>(new Set());
const imageLoadingStates = ref<Map<string, "loading" | "loaded" | "error">>(new Map());
const imageDimensions = ref<
  Map<string, { width: number; height: number; aspectRatio: number }>
>(new Map());
// Get image URL for a game
const getGameImageUrl = (game: LocalGame): string => {
  const developer = game.developer?.toLowerCase() || "";
  const gameName = game.name.toLowerCase().replace(/[^a-z0-9]+/g, "-");
  return `https://images.cashflowcasino.com/${developer}/${gameName}.avif`;
};

// Get smart background sizing based on image aspect ratio
const getSmartBackgroundSize = (game: LocalGame) => {
  const gameId = String(game.id);
  const dimensions = imageDimensions.value.get(gameId);
  if (!dimensions) return "auto 100%"; // Default fallback

  const { aspectRatio } = dimensions;
  // Mobile container aspect ratio: 145.19/239 = 0.608
  const containerAspectRatio = 0.608;

  // Special handling for Red Tiger images (rtg.avif)
  const isRedTiger =
    game.developer.toLowerCase() === "redtiger" ||
    getGameImageUrl(game).includes("rtg.avif");

  if (isRedTiger) {
    return aspectRatio > containerAspectRatio ? "auto 100%" : "100% auto";
  }

  return aspectRatio > containerAspectRatio ? "auto 100%" : "100% auto";
};

// Get background image style with lazy loading and smart sizing
const getBackgroundImageStyle = (game: LocalGame) => {
  const gameId = String(game.id);
  const isLoaded = loadedImages.value.has(gameId);
  const loadingState = imageLoadingStates.value.get(gameId);

  return {
    backgroundImage: isLoaded ? `url(${getGameImageUrl(game)})` : "none",
    backgroundSize: getSmartBackgroundSize(game),
    backgroundPosition: "center",
    backgroundRepeat: "no-repeat",
    opacity: isLoaded && loadingState === "loaded" ? 1 : 0,
    transition: "opacity 0.3s ease-in-out",
  };
};

// Preload image and update state
const preloadImage = (game: LocalGame): void => {
  const gameId = String(game.id);
  if (loadedImages.value.has(gameId)) {
    return;
  }

  const img = new Image();
  const imageUrl = getGameImageUrl(game);

  if (!imageUrl) {
    console.error("No image URL found for game:", game.id);
    return;
  }

  imageLoadingStates.value.set(gameId, "loading");

  img.onload = (): void => {
    loadedImages.value.add(gameId);
    imageLoadingStates.value.set(gameId, "loaded");
    imageDimensions.value.set(gameId, {
      width: img.naturalWidth,
      height: img.naturalHeight,
      aspectRatio: img.naturalWidth / img.naturalHeight,
    });
  };

  img.onerror = (): void => {
    console.error(`Failed to load image: ${imageUrl}`);
    imageLoadingStates.value.set(gameId, "error");
  };

  img.src = imageUrl;
};

const getScrollDistance = () => {
  const screenWidth = window.innerWidth;
  if (screenWidth <= 360) {
    return 2 * 140 + 10 + 10;
  } else if (screenWidth <= 480) {
    return 2 * 160 + 12 + 12;
  } else if (screenWidth <= 768) {
    return 2 * 180 + 12 + 12;
  } else {
    return 200;
  }
};

/**
 * Sync custom scrollbar thumb position with carousel scrollLeft
 */
const syncThumbWithScroll = () => {
  if (!carousel.value || !thumb.value || !customScrollbar.value) return;

  const scrollWidth = carousel.value.scrollWidth;
  const clientWidth = carousel.value.clientWidth;
  const maxScroll = Math.max(1, scrollWidth - clientWidth);

  // Track inner width (excludes padding)
  const trackStyle = getComputedStyle(customScrollbar.value);
  const pl = parseFloat(trackStyle.paddingLeft || '0');
  const pr = parseFloat(trackStyle.paddingRight || '0');
  const innerWidth = customScrollbar.value.clientWidth - pl - pr;

  // Make sure thumb cannot visually exceed the track box
  const thumbWidth = Math.min(thumb.value.clientWidth, innerWidth);
  const maxThumbX = Math.max(0, innerWidth - thumbWidth);

  const ratio = maxScroll === 0 ? 0 : (carousel.value.scrollLeft / maxScroll);
  const thumbX = Math.round(ratio * maxThumbX);

  // Apply transform and clamp via overflow hidden on the track
  thumb.value.style.transform = `translateX(${thumbX}px)`;
};

/**
 * Handle dragging of the custom scrollbar thumb
 */
let isDragging = false;
let dragStartX = 0;
let thumbStartX = 0;
// rAF batching state for smooth drag updates
let rafId: number | null = null;
// Guard to avoid feedback loop between programmatic scroll and scroll listener
let suppressScrollSync = false;

const onThumbPointerDown = (e: PointerEvent) => {
  if (!thumb.value || !customScrollbar.value) return;
  isDragging = true;

  // Compute geometry once at drag start
  const trackRect = customScrollbar.value.getBoundingClientRect();
  const style = getComputedStyle(thumb.value);
  const transform = style.transform;
  const currentX = (!transform || transform === 'none') ? 0 : new DOMMatrixReadOnly(transform).m41;

  // The pointer’s offset within the thumb so the thumb tracks the pointer precisely
  // pointerX relative to the track's inner content box
  const trackStyle = getComputedStyle(customScrollbar.value);
  const pl = parseFloat(trackStyle.paddingLeft || '0');
  dragStartX = e.clientX - trackRect.left - pl;
  thumbStartX = currentX;

  thumb.value.setPointerCapture(e.pointerId);
  // Disable transition during drag to avoid lag
  thumb.value.style.transition = 'none';
  // Prevent native touch scroll
  e.preventDefault();
};

const onPointerMove = (e: PointerEvent) => {
  if (!isDragging || !carousel.value || !customScrollbar.value || !thumb.value) return;

  // Pointer X relative to track inner box
  const trackRect = customScrollbar.value.getBoundingClientRect();
  const trackStyle = getComputedStyle(customScrollbar.value);
  const pl = parseFloat(trackStyle.paddingLeft || '0');
  const pr = parseFloat(trackStyle.paddingRight || '0');
  const innerWidth = customScrollbar.value.clientWidth - pl - pr;

  const pointerX = e.clientX - trackRect.left - pl;

  // Keep the cursor bound to the thumb by using the pointer's absolute position within the track:
  // nextThumbX = pointerX - (cursor offset captured at pointerdown)
  let nextThumbX = pointerX - (dragStartX - thumbStartX);

  const thumbWidth = Math.min(thumb.value.clientWidth, innerWidth);
  const maxThumbX = Math.max(0, innerWidth - thumbWidth);
  nextThumbX = Math.min(maxThumbX, Math.max(0, nextThumbX));

  // Direct transform without additional damping so cursor and thumb stay in sync
  thumb.value.style.transform = `translateX(${nextThumbX}px)`;

  // Map to scrollLeft with a mild easing factor (faster than before)
  const scrollWidth = carousel.value.scrollWidth;
  const clientWidth = carousel.value.clientWidth;
  const maxScroll = Math.max(1, scrollWidth - clientWidth);
  const ratio = maxThumbX === 0 ? 0 : nextThumbX / maxThumbX;

  const scrollDamping = 0.95; // closer to 1.0 => faster than before (was 0.85)
  carousel.value.scrollLeft = ratio * maxScroll * scrollDamping;

  // Prevent page scrolling on touch devices while dragging
  e.preventDefault();
};

const onPointerUp = (e: PointerEvent | Event) => {
  if (!isDragging || !thumb.value) return;
  isDragging = false;
  // For blur/pointercancel events, releasePointerCapture may throw if not captured; guard it
  try {
    if (e instanceof PointerEvent) {
      thumb.value.releasePointerCapture(e.pointerId);
    }
  } catch {}
  // Re-enable transition for non-drag updates
  thumb.value.style.transition = '';
  // Flush any pending RAF
  if (rafId != null) {
    cancelAnimationFrame(rafId);
    rafId = null;
  }
};

/**
 * Clicking on the track should jump the thumb and scroll
 */
const onTrackClick = (e: MouseEvent) => {
  if (!customScrollbar.value || !carousel.value || !thumb.value) return;

  const rect = customScrollbar.value.getBoundingClientRect();
  const clickX = e.clientX - rect.left;

  const trackStyle = getComputedStyle(customScrollbar.value);
  const pl = parseFloat(trackStyle.paddingLeft || '0');
  const pr = parseFloat(trackStyle.paddingRight || '0');
  const innerWidth = customScrollbar.value.clientWidth - pl - pr;
  const innerX = Math.max(0, Math.min(innerWidth, clickX - pl)); /* clamp inside padded area */

  const thumbWidth = Math.min(thumb.value.clientWidth, innerWidth);
  const maxThumbX = Math.max(0, innerWidth - thumbWidth);

  const targetThumbX = Math.min(maxThumbX, Math.max(0, innerX - thumbWidth / 2));
  const scrollWidth = carousel.value.scrollWidth;
  const clientWidth = carousel.value.clientWidth;
  const maxScroll = Math.max(1, scrollWidth - clientWidth);

  const ratio = maxThumbX === 0 ? 0 : targetThumbX / maxThumbX;
  // Apply similar damping when clicking the track so it is not too fast
  const clickScrollDamping = 0.85;
  carousel.value.scrollLeft = ratio * maxScroll * clickScrollDamping;
  // Sync the visual thumb immediately
  thumb.value.style.transform = `translateX(${Math.round(targetThumbX)}px)`;
};

const scrollLeft = (distance?: number) => {
  if (carousel.value) {
    const scrollDistance = distance || getScrollDistance();
    carousel.value.scrollBy({
      left: -scrollDistance,
      behavior: "smooth",
    });
  }
};

const scrollRight = (distance?: number) => {
  if (carousel.value) {
    const scrollDistance = distance || getScrollDistance();
    carousel.value.scrollBy({
      left: scrollDistance,
      behavior: "smooth",
    });
  }
};

defineExpose({
  scrollLeft,
  scrollRight,
});

const loadGame = async (game: LocalGame) => {
  if (animatingGameId.value !== null) return; // Prevent clicking during animation

  const gameId = String(game.id);
  if (animatingGameId.value === gameId) return;

  animatingGameId.value = gameId;
  preloadImage(game);

  await new Promise((resolve) => setTimeout(resolve, 100));

  const gameUrl = "url" in game && game.url ? String(game.url) : "#";
  window.open(gameUrl, "_blank");

  setTimeout(() => {
    animatingGameId.value = null;
  }, 100);
};

// Intersection Observer for lazy loading
let intersectionObserver: IntersectionObserver | null = null;

const setupLazyLoading = () => {
  if (intersectionObserver) {
    intersectionObserver.disconnect();
  }

  intersectionObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const gameId = parseInt(entry.target.getAttribute("data-game-id") || "0");
          const game = games.value.find((g) => String(g.id) === String(gameId));
          if (game && !loadedImages.value.has(String(game.id))) {
            preloadImage(game);
            intersectionObserver?.unobserve(entry.target);
          }
        }
      });
    },
    {
      root: null,
      rootMargin: "100px",
      threshold: 0.1,
    }
  );

  setTimeout(() => {
    const gameCards = document.querySelectorAll(".game-card");
    gameCards.forEach((card) => {
      if (intersectionObserver) {
        intersectionObserver.observe(card);
      }
    });
  }, 100);
};

onMounted(() => {
  setupLazyLoading();
  const initialLoadCount = window.innerWidth <= 768 ? 2 : 4;
  games.value.slice(0, initialLoadCount).forEach((game) => {
    preloadImage(game);
  });

  if (carousel.value) {
    // Inline wrapper defined here (do not export from SFC)
    const localScrollWrapper = () => {
      if (suppressScrollSync) return;
      handleCarouselScroll();
      syncThumbWithScroll();
    };
    carousel.value.addEventListener("scroll", localScrollWrapper);
    // Initial sync
    requestAnimationFrame(syncThumbWithScroll);
  }

  if (thumb.value) {
    thumb.value.addEventListener("pointerdown", onThumbPointerDown);
    // Use non-passive listeners since we update UI immediately
    window.addEventListener("pointermove", onPointerMove, { passive: false });
    window.addEventListener("pointerup", onPointerUp, { passive: false });
    window.addEventListener("pointercancel", onPointerUp, { passive: false });
    window.addEventListener("blur", onPointerUp, { passive: false });
  }

  if (customScrollbar.value) {
    customScrollbar.value.addEventListener("click", onTrackClick);
  }

  window.addEventListener("resize", syncThumbWithScroll);
});

 
const handleCarouselScroll = () => {
  if (!carousel.value) return;

  const scrollLeft = carousel.value.scrollLeft;
  const containerWidth = carousel.value.offsetWidth;
  const scrollRight = scrollLeft + containerWidth;

  games.value.forEach((game, index) => {
    if (!loadedImages.value.has(String(game.id))) {
      const cardWidth = window.innerWidth <= 768 ? 180 : 200;
      const gap = window.innerWidth <= 768 ? 15 : 15;
      const cardPosition = index * (cardWidth + gap);

      if (cardPosition >= scrollLeft - 400 && cardPosition <= scrollRight + 400) {
        preloadImage(game);
      }
    }
  });
};
 

const onImageError = (event: Event) => {
  const target = event.target as HTMLImageElement;
  target.src = "https://placehold.co/300x400/64748b/ffffff?text=Image+Error";
  target.style.objectFit = "contain";
};

const isFeatured = (game: LocalGame): boolean => Boolean(game.featured);
</script>

<template>
  <div
    class="carousel-container animate__animated animate__fadeIn bungee align-center relative flex flex-col items-center justify-start"
  >
    <div ref="carousel" class="carousel-scroll-area" id="carousel">
      <div class="carousel-track">
        <div
          v-for="game in games"
          :key="game.name"
          :data-game-id="game.id"
          class="game-card"
          :class="{
            'theme-cold': game.temperature === 'cold',
            'theme-hot': game.temperature === 'hot',
            'animate-pulse': animatingGameId === String(game.id),
            'is-fading-out':
              animatingGameId !== null && animatingGameId !== String(game.id),
          }"
          @click="loadGame(game)"
        >
          <div
            class="card-content relative flex flex-col pt-5 max-h-[300px]"
            :class="{ 'feat mt-3 flex-col align-bottom': isFeatured(game) }"
            :style="{
              backgroundImage: `url(${
                !isFeatured(game)
                  ? '/images/games/tall-field.avif'
                  : '/images/games/featured.webp'
              })`,
            }"
            style="background-size: 100% 100%; background-repeat: no-repeat"
          >
            <div
              :class="isFeatured(game) ? 'card__banner_feat' : 'card__banner'"
              style=""
            >
              <img
                v-if="game.temperature === 'cold'"
                src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/49240/hand-banner-blue.png"
                alt=""
                class="card__banner-img"
              />
              <img
                v-else-if="game.temperature === 'hot'"
                src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/49240/hand-banner-gold.png"
                alt=""
                class="card__banner-img"
              />
              <img
                v-else
                src="/images/games/hand-banner-black.png"
                alt=""
                class="card__banner-img"
              />
              <div
                class="card__banner__text onacona pb-1"
                style="line-height: 1.7; letter-spacing: 1.2px; color: white"
              >
                <span
                  :style="
                    game.title.length > 12 ? 'font-size: .8rem; ' : 'font-size: 1rem'
                  "
                >
                  {{ game.title.substring(0, 16) }}
                </span>
              </div>
            </div>

            <div
              :class="
                isFeatured(game)
                  ? 'card-image-container-featured feat box'
                  : 'card-image-container'
              "
              class="absolute top-0 overflow-hidden"
              style="z-index: 1"
            >
              <div
                class="game-image-container-with-filler absolute"
                style="
                  width: 92%;
                  top: 20px;
                  height: 240px;
                  max-height: 260px;
                  padding-top: 20px;
                  background: linear-gradient(
                    to bottom,
                    rgba(0, 0, 0, 0.1) 0%,
                    rgba(0, 0, 0, 0.05) 20%,
                    transparent 30%,
                    transparent 70%,
                    rgba(0, 0, 0, 0.05) 80%,
                    rgba(0, 0, 0, 0.1) 100%
                  );
                  border-radius: 15px;
                  border-top-left-radius: 30px;
                  border-top-right-radius: 30px;
                  overflow: hidden;
                "
              >
                <div
                  style="
                    width: 100%;
                    height: 100%;
                    background-position: center center;
                    background-repeat: no-repeat;
                    transition: background-image 0.3s ease, background-size 0.3s ease;
                  "
                  :style="getBackgroundImageStyle(game)"
                  :alt="game.title"
                  class="game-image absolute"
                  @error="onImageError"
                />
              </div>
              <img
                v-if="game.temperature === 'cold'"
                src="/images/games/speedRTP_1.gif"
                height="40px"
                width="40px"
                style="position: absolute; bottom: 0; left: 0"
              />

              <img
                v-if="game.temperature === 'hot'"
                src="/images/games/speedRTP_5.gif"
                height="40px"
                width="40px"
                style="position: absolute; bottom: 0; left: 0"
              />

              <div class="bottom-banner">
                {{ game.developer }}
              </div>
            </div>
          </div>
          <StarBurst />
        </div>
      </div>
    </div>

    <!-- Custom Scrollbar (controls the carousel) -->
    <div class="custom-scrollbar-wrapper">
      <div
        class="custom-scrollbar-track"
        ref="customScrollbar"
        role="scrollbar"
        aria-controls="carousel"
        aria-orientation="horizontal"
        tabindex="0"
      >
        <div
          class="custom-scrollbar-thumb"
          ref="thumb"
          aria-label="Scroll games"
        />
      </div>
    </div>
  </div>
</template>

<style scoped>
/* Your existing styles */
.carousel-container {
  height: 42vh;
  min-height: 300px;
  max-height: 420px; /* bump a bit to ensure room for scrollbar */
  width: 100%;
  max-width: 600px;
  margin: 0;
  margin-top: 4px; /* was 10px, bring the block higher on the page */
  margin-bottom: 4px; /* was 10px */
  position: relative;
  box-sizing: border-box;
}

.carousel-scroll-area {
  display: flex;
  overflow-x: auto;
  overflow-y: hidden;
  height: calc(100% - 28px); /* free space below for custom scrollbar */
  width: 100%;
  scrollbar-width: none;
  /* Disable smooth so drag-driven updates are stable */
  scroll-behavior: auto;
  padding-bottom: 8px; /* ensure content not flush with scrollbar */
  overscroll-behavior-x: contain;
  -webkit-overflow-scrolling: auto;
}
/* Hide native scrollbar on WebKit */
.carousel-scroll-area::-webkit-scrollbar {
  display: none;
}

.carousel-track {
  display: flex;
  gap: 12px;
  height: 100%;
  box-sizing: border-box;
  padding-bottom: 8px; /* small spacing above the scrollbar */
}

.card-image-container {
  height: 100%;
  flex-grow: 1;
  overflow: hidden;
  position: relative;
  border-radius: inherit;
  top: 0;
  z-index: 1;
}

.card-image-container-featured {
  height: 100%;
  flex-grow: 1;
  overflow: hidden;
  position: relative;
  border-radius: inherit;
  top: 20px;
  z-index: 1;
}

.game-image-container-with-filler {
  z-index: 0;
  display: block;
  margin-left: 8px;
  margin-right: 5px;
  border-color: white;
  border-width: 1.5px;
  border-left-style: solid;
  border-right-style: solid;
  border-bottom-style: solid;
  border-top-style: none;
  transition: transform 0.3s ease;
  position: absolute;
}

.game-image {
  z-index: 0;
  display: block;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  object-fit: cover;
  transition: background-image 0.3s ease;
  position: absolute;
}

.game-card {
  flex-shrink: 0;
  width: 200px;
  min-width: 200px;
  max-width: 200px;
  max-height: 330px;
  height: 100%;
  border-radius: 15px;
  position: relative;
  overflow: hidden;
  cursor: pointer;
  transition: transform 0.5s ease-out, opacity 0.5s ease-out;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);
}

.game-card.is-selected {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(1.2);
  z-index: 1000;
  transition: transform 0.5s ease-in-out, top 0.5s ease-in-out, left 0.5s ease-in-out;
}

.game-card.is-fading-out {
  opacity: 0;
  transform: scale(0.8);
}

.card__banner {
  width: 100%;
  position: absolute;
  top: 5%;
  left: 51%;
  transform: translateX(-51.5%) scaleY(1.1);
  background: url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/49240/hand-banner-gold.png")
    0 0 no-repeat;
  background-size: 100% 110%;
  z-index: 4;
}

.card__banner_feat {
  width: 100%;
  position: absolute;
  top: 9%;
  left: 51%;
  transform: translateX(-51.5%);
  background: url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/49240/hand-banner-gold.png")
    0 0 no-repeat;
  background-size: 100% auto;
  z-index: 4;
}

.card__banner-img {
  display: block;
  width: 100%;
  height: auto;
}

.card__banner__text {
  width: 90%;
  position: absolute;
  flex-wrap: nowrap;
  top: -2px;
  font-weight: 800;
  left: 50%;
  padding-left: 7px;
  padding-right: 7px;
  transform: translate(-51%, 10%);
  z-index: 5;
  text-align: center;
  font-size: 16px;
  font-weight: 600;
  color: #ffffff;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.7);
}

.card-content {
  z-index: 2;
  width: 100%;
  height: 100%;
  max-height: 350px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  border-radius: inherit;
  top: 0;
}

.bottom-banner {
  position: absolute;
  left: 0;
  width: 100%;
  background-color: transparent;
  color: white;
  text-align: center;
  font-size: 0.9rem;
  font-weight: bold;
  padding: 8px 8px;
  text-transform: uppercase;
  z-index: 3;
  box-sizing: border-box;
  bottom: 0;
  border-bottom-left-radius: inherit;
  border-bottom-right-radius: inherit;
}
/* Custom Scrollbar */
.custom-scrollbar-wrapper {
  width: 100%;
  max-width: 600px;
  margin-top: 2px; /* was 6px, tighten spacing to bring FilterBar closer */
  display: flex;
  justify-content: center;
}

.custom-scrollbar-track {
  position: relative;
  /* Slightly shorter track to let thumb overlap top/bottom */
  width: calc(100% - 8px);
  min-height: 22px;
  height: 12px;
  background-image: url('/images/common/scroll_bar.png');
  background-repeat: no-repeat;
  background-size: 100% 80%;
  background-position: center center;
  cursor: pointer;
  user-select: none;
  touch-action: none;
  background-color: rgba(255,255,255,0.08);
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  padding-left: 6px;
  padding-right: 6px;
  box-sizing: border-box;
  /* allow thumb to overlap */
  overflow: visible;
  z-index: 0;
}

.custom-scrollbar-thumb {
  position: relative;
  left: 0;
  /* Wider by default but still bounded inside the track’s inner width */
  width: clamp(72px, 18%, 160px);
  /* Make the thumb slightly taller so it overlaps the track */
  height: 26px; /* track is 22px */
  /* Raise the thumb slightly so it sits higher on screen while overlapping more above */
  top: 10%;
  transform: translate(0, -60%); /* was -50% */
  margin-top: -4px; /* was -2px */
  background-image: url('/images/common/scroll_thumb.png');
  background-repeat: no-repeat;
  /* Fill the thumb box completely */
  background-size: 100% 100%;
  background-position: center center;
  cursor: grab;
  user-select: none;
  touch-action: none;
  background-color: rgba(255,255,255,0.2);
  border-radius: 12px;
  outline: 1px solid rgba(255,255,255,0.25);
  box-sizing: border-box;
  z-index: 1;
}

.custom-scrollbar-thumb:active {
  cursor: grabbing;
}

@media (max-width: 360px) {
  .custom-scrollbar-thumb {
    width: 72px;
  }
}
</style>
</file>

<file path="./frontend/src/components/GameLoader.vue">
<!-- src/components/GameHost.vue -->
<template>
  <div ref="gameContainer" class="game-host-container bg-blue">
    <!-- 
      The GameLauncher will inject both the loading indicator and the iframe here.
      No extra template code is needed for the loader.
    -->
  </div>
</template>

<style scoped>
.game-host-container {
  width: 100%;
  height: 800px; 
  overflow: hidden;
  z-index: 9990;
}
</style>

<script setup lang="ts">
// Note the 'lang="ts"' for TypeScript support in Vue SFCs
import { ref, onMounted, onUnmounted, defineProps, defineEmits, defineExpose } from 'vue';
import GameLauncher from '../services/GameLauncher'; // .ts extension is omitted in imports

// --- Type Definitions for Props and Emits ---
interface Props {
  launchOptions: {
    // Define a more specific type for your launch options
    gameConfig?: {
      authToken?: string;
      gameSessionId?: string;
      userId?: string;
      [key: string]: string | number | boolean | undefined;
    };
    [key: string]: unknown;
  };
}

// --- Props and Emits ---
const props = defineProps<Props>();
const emit = defineEmits<{
  (e: 'messageFromGame', data: Record<string, unknown>): void;
}>();

// --- State ---
const gameContainer = ref<HTMLElement | null>(null);
let launcher: GameLauncher | null = null; // Store the launcher instance

// --- Methods ---
function handleMessageFromGame(data: Record<string, unknown>) {
  console.log('Message received from iframe:', data);

  // *** NEW LOGIC: HANDSHAKE ***
  // When the loader is ready, send the auth token back to it.
  if (data.type === 'RTG_LOADER_READY') {
    const gameConfig = props.launchOptions.gameConfig;
    if (launcher && gameConfig) {
      const authPayload = {
        type: 'SET_AUTH_TOKEN',
        token: gameConfig.authToken,
        gameSessionId: gameConfig.gameSessionId,
        userId: gameConfig.userId,
      };
      console.log('Sending SET_AUTH_TOKEN to iframe:', authPayload);
      launcher.sendMessage(authPayload);
    } else {
      console.error('GameHost: Launcher not initialized or gameConfig missing in launchOptions.');
    }
  }

  // Emit all other messages to the parent component
  emit('messageFromGame', data);
}

// --- Lifecycle Hooks ---
onMounted(() => {
  if (gameContainer.value) {
    launcher = new GameLauncher(gameContainer.value, {
      onMessage: handleMessageFromGame,
    });

    launcher.launch(props.launchOptions);
  }
});

onUnmounted(() => {
  if (launcher) {
    launcher.destroy();
  }
});

// Expose the sendMessage method so the parent component can call it
defineExpose({
  sendMessage: (message: Record<string, unknown>) => {
    launcher?.sendMessage(message);
  },
});
</script>
</file>

<file path="./frontend/src/components/GlassButton.vue">
<script lang="ts" setup>
import router from '@/router'

const props = defineProps(['to', 'type', 'w', 'text', 'shine', 'color', 'disabled', 'loading'])

function handleClick() {
  if (props.to) {
    router.push(props.to)
  }
}
const buttonStyle = ref()
if (props.w) {
  // buttonStyle.value = `min-width: ${props.w || 0}px; max-width: ${props.w || 0}px`
}
</script>

<template>
  <div v-if="!disabled && !loading" :id="type" class="button glass relative flex items-center justify-center text-lg"
    :class="color === 'blue' ? 'blueGlass' : color === 'red' ? 'redGlass' : 'greenGlass'" :style="buttonStyle"
    @click="handleClick">
    <div v-if="shine" class="shine-box" :style="`min-width: ${w}px`" />
    <!-- <img
      class="absolute top-0 bottom-0 left-0 right-0 z-0 w-full h-full object-"
    /> -->
    <!-- <div style="line-height: .5;padding-top: 10px; padding-bottom: 3px; padding-left: 10px; padding-right: 10px  ">
      {{ text }}
    </div> -->
    <!-- <slot class="primary-text" /> -->
    <div class="text-2xl flex baseFont">
      <slot />
    </div>
  </div>
  <div v-else>
    <div v-if="disabled" class="button glass greyGlass relative flex items-center justify-center text-lg">
      <div class="" :style="`min-width: ${w}px`">
        <slot class="primary-text" />
      </div>
    </div>
    <div v-if="loading" class="button glass relative flex items-center justify-center text-lg"
      :class="color === 'blue' ? 'blueGlass' : color === 'red' ? 'redGlass' : 'greenGlass'" :style="buttonStyle">
      <div class="" :style="`min-width: ${w}px`">
        <!-- <Loading /> -->
      </div>
    </div>
  </div>
</template>

<style scoped>
.primary-text {
  font-family: 'Broznier';
  font-size: 22px;
  font-weight: 400;
  color: white;
  /* -webkit-text-fill-color: transparent;
    -webkit-text-stroke-width: 0.4px;
    -webkit-text-stroke-color: #752eb3; */
  background: -webkit-linear-gradient(#ba4ff8, #c382fc);
  /* -webkit-background-clip: text; */
  /* background-clip: text; */
  /* -webkit-text-fill-color: #ffe; */
}

.honk {
  font-family: 'Broznier';
  font-optical-sizing: auto;
  font-weight: 400;
  font-style: normal;
  font-variation-settings:
    'MORF' 15,
    'SHLN' 50;
}

.fira-code {
  font-family: 'Broznier';
  font-optical-sizing: auto;
  font-weight: 900;
  font-style: normal;
}

.glass {
  box-shadow: 0px 1px 10px -5px #510099;
  /* text-shadow: 0.5px -1px #510099; */
  /* background styles */
  position: relative;
  display: inline-block;
  padding: 3px 13px 5px 13px;
  /*for compatibility with older browsers*/
  /* text styles */
  font-weight: 900;
  padding-bottom: 0px;
  background-size: 100% 130%;
  border-bottom-right-radius: 0;
  background-color: white;
  font-size: 16px;
  border-bottom-right-radius: 13px;
  border-bottom-left-radius: 13px;
  border-top-left-radius: 13px;
  border-top-right-radius: 13px;
}

.glass.greenGlass {
  background-color: green;
  background-image: linear-gradient(green, lightgreen);
}

.glass.blueGlass {
  background-color: #1f1f8a;
  background-image: linear-gradient(#1f1f8a, #675df0);
}

.glass.greyGlass {
  background-color: #38383a;
  background-image: linear-gradient(#38383a, #908f9e);
}

.glass.redGlass {
  background-color: #8a1f54;
  background-image: linear-gradient(#f05d71, #8a1f48);
}

.shine-box {
  position: absolute;
  width: 100%;
  height: 97%;
  overflow: hidden;
  border-radius: 22px;
  transform: translate(0px, 0px);
}

.shine-box:before {
  position: absolute;
  left: -800px;
  content: '';
  width: 30%;
  height: 97%;
  background: rgba(255, 255, 255, 0.6);
  transform: skew(-50deg);
  /* transition: 1s;
	 */
  animation: shine 4s ease infinite;
}

@keyframes shine {
  from {
    left: -500px;
  }

  to {
    left: 655px;
  }
}

.glass:active {
  color: white;
  transform: translateY(0.2em);
}

.glass:after {
  border-radius: 6px;
  content: '';
  position: absolute;
  top: 2px;
  left: 4px;
  width: calc(100% - 8px);
  height: 40%;
  background: linear-gradient(rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.2));
}
</style>
</file>

<file path="./frontend/src/components/GlobalLoading.vue">
<template>
  <teleport to="body">
    <!-- Use named transition to control timings via CSS below -->
    <Transition name="global-loading-fade" appear>
      <div
        v-if="isVisible"
        ref="loadingElement"
        class="loading-container"
        data-testid="global-loading"
        :style="{ zIndex: 9999 }"
      >
        <div class="loading-content">
          <img src="/images/logo.png" alt="Loading..." class="w-48 h-auto mb-8 animate-pulse">
        </div>
        <img class="w-16 h-16" src="/images/loading.svg" alt="Loading spinner">
      </div>
    </Transition>
  </teleport>
</template>
<script setup lang="ts">
import { useAppStore } from '@/stores/app.store'
import { storeToRefs } from 'pinia'
import { onBeforeUnmount, ref, watch } from 'vue'

const appStore = useAppStore()
const { globalLoading } = storeToRefs(appStore)
const isVisible = ref(false)
const loadingElement = ref<HTMLElement | null>(null)

const updateLoadingState = (isLoading: boolean) => {
  if (isLoading) {
    document.body.classList.add('loading-active')
    isVisible.value = true
  } else {
    document.body.classList.remove('loading-active')
    void document.body.offsetHeight
    isVisible.value = false
  }

}

updateLoadingState(globalLoading.value)

// Watch for changes to globalLoading
const unwatch = watch(globalLoading, (newVal) => {
  updateLoadingState(newVal)
})



// Cleanup
onBeforeUnmount(() => {
  unwatch()
  document.body.style.overflow = ''
})

// Expose debug methods
</script>
<style>
/* Add this at the top of your style section */
:global(body.loading-active) {
  overflow: hidden !important;
  position: fixed;
  width: 100%;
  height: 100%;
}

/* Update the loading container styles */
.loading-container {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(0, 0, 0, 0.7);
  transition: opacity 140ms ease-out; /* ensures container has baseline transition too */
  z-index: 9999;
  pointer-events: auto;
  /* Ensure it's above everything except modals */
  isolation: isolate;
}

/* Quick fade-in, slower fade-out */
.global-loading-fade-enter-active {
  transition: opacity 140ms ease-out;
  will-change: opacity;
}
.global-loading-fade-leave-active {
  /* Start fading sooner with a quicker start, then ease out */
  transition: opacity 220ms cubic-bezier(0.2, 0.0, 0.2, 1);
  will-change: opacity;
}
.global-loading-fade-enter-from,
.global-loading-fade-leave-to {
  opacity: 0;
}

.loading-icon {
  /* animation: spin 1s linear infinite; */
  /* will-change: transform; */
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

/* Removed debug styles */

/* Ensure no other elements can interfere */
.loading-container * {
  position: relative;
  z-index: 10000;
}
</style>
</file>

<file path="./frontend/src/components/Header.vue">
<script lang="ts" setup>
import { ref, computed } from 'vue'
import { useDepositStore } from '@/stores/deposit.store'
import { useEventManager, type EventMessage } from '@/composables/EventManager'
import { BalanceUpdatePayload } from '@/types/events';

const eventBus = useEventManager()
// const router = useRouter()
const countdownActive = ref(false)
const sparkle = ref(false)
const depositStore = useDepositStore()
const { wallet } = storeToRefs(depositStore)
const balanceChange = ref<number | null>(null)
const balanceChangeKey = ref(0) // Used to re-trigger the animation

// const transactionStore = useTransactionStore()
// const {
//   getTransactionHistory,
//   // error: authError, // Auth store errors
// } = storeToRefs(transactionStore)

// Use wallet for balance display
const balance = computed(() => wallet.value?.balance || 0)

function openSettings() {
  console.log('x')
  eventBus.emit('settingsModal', true)
}

const depositItems = ref()

const target = ref()
const remaining_minutes = ref(0)
const remaining_seconds_display = ref(0)

// Format balance with 2 decimal places
const formatBalance = (balance: number) => {
  return balance.toFixed(0)
}
const interval = ref()

// const currentGameSession = computed(() => {
//   return currentUser.value.currentGameSession
// })
function countdownTimer(start_date: Date): void {
  // Calculate the end date, which is one hour after the start date
  const end_date = new Date(start_date.getTime() + 3600000) // One hour later

  // Calculate the difference between the end date and now
  const now = new Date()
  const time_difference = end_date.getTime() - now.getTime()

  // Convert the time difference to seconds
  const total_seconds = Math.floor(time_difference / 1000)

  // Calculate minutes and seconds
  const minutes = Math.floor(total_seconds / 60)
  const seconds = total_seconds % 60

  // Print the initial countdown
  console.log(`Countdown: ${minutes} minutes and ${seconds} seconds`)

  // Start the countdown
  let remaining_seconds = total_seconds
  interval.value = setInterval(async () => {
    // Calculate remaining minutes and seconds
    remaining_minutes.value = Math.floor(remaining_seconds / 60)
    remaining_seconds_display.value = remaining_seconds % 60

    // Print the remaining time
    // console.log(
    //   `Countdown: ${remaining_minutes.value} minutes and ${remaining_seconds_display.value} seconds`,
    // )

    // Decrease the remaining seconds by one
    remaining_seconds -= 1

    // Stop the countdown when it reaches zero
    if (remaining_seconds < 0) {
      clearInterval(interval.value)
      console.log('Countdown finished!')
      // console.log(depositItems.value);
      depositItems.value?.splice(0, 3)
      await Promise.resolve()
    }
  }, 1000)
  countdownActive.value = true
}

// watch(getTransactionHistory, (newVal) => {
//   const pendings = newVal.find((purch: { status: string }) => purch.status === 'PENDING_PAYMENT')
//   if (pendings) {
//     countdownTimer(new Date(pendings.createdAt))
//   }
// })

onMounted(async () => {
  eventBus.on('balance:update', ((payload: BalanceUpdatePayload) => {
    console.log(`TopBarMobile: balance:update event received with change of ${payload.amount}.`);
    balanceChange.value = payload.amount;
    balanceChangeKey.value++; // Increment key to force re-render of animation element

    // Hide the indicator after the animation
    setTimeout(() => {
      balanceChange.value = null;
    }, 2000); // Animation duration: 2 seconds
  }) as EventMessage<'balance:update'>, 'TopBarMobile');
  depositItems.value = []
  // console.log(depositItems.value)

  if (depositItems.value !== undefined && depositItems.value.length > 0) {
    depositItems.value.forEach((item: { status: string; createdAt: string | number | Date }) => {
      // console.log(item.status);
      if (item.status === 'PENDING') {
        countdownTimer(new Date(item.createdAt))
      }
    })
  }
})
</script>

<template>
  <!-- Remove entrance slide to avoid whole page dropping in -->
    <div ref="target" class="tbar flex flex-row justify-stretch">
    <div class="w-100 flex flex-row justify-start">
      <!-- <PlayerAvatar @click="router.push('/client/profile')" style="z-index: 99; max-height: 60px" /> -->
      <PlayerAvatar style="z-index: 99; width: 55px" current-exp="1000" :sparkle="sparkle" :max-exp="100" />
      <div id="PlayerCredits" class="color-white flex flex-col pb-1 pl-1 text-center">
        <div v-if="countdownActive" class="flex w-full flex-row items-center" style="
            height: 14px;
            font-size: 16px;
            font-weight: 600;
            line-height: 0.5;
            margin-left: 8px;
            margin-top: 4px;
            color: white;
          ">
          <img src="/images/layout/cashappicon.avif" width="14px" style="margin-right: 7px; color: white" />
          ends:
          {{ remaining_minutes > 1 ? `${remaining_minutes}m` : `0m:${remaining_seconds_display}` }}
        </div>
        <div v-else class="flex w-full flex-row" style="height: 20px; font-size: 26px; font-weight: 600" />
        <div class="glow-light flex flex-row items-center justify-center" style="
            z-index: 999;
            text-align: center;
            min-height: 35px;
            min-width: 120px;
            max-width: 120px;
            font-size: 23px;
            padding-top: 1px;
            padding-left: 6px;
            margin-left: 6px;
            font-weight: 600;
            background-size: cover;
            background-image: url('/images/layout/money_backing.png');
          ">
          <div v-if="wallet" class="glow mt--2 flex justify-center leading-[0.5] pt-.5"
            style="line-height: 0.8; text-align: center; letter-spacing: 0px; font-weight: 800">
            {{ formatBalance(balance) }}
          </div>
        </div>
      </div>
    </div>


    <div style="
        height: 50px;
        width: 50px;
        right: 38px;
        position: absolute;
        top: 0px;
        gap: 0px;
        margin: 0px;
        padding: 4px;
        background-size: cover;
        z-index: 999999;
      ">
      <img style="
          top: 0px;
          right: 8px;
          gap: 0px;
          margin: 0px;
          padding: 0px;
          background-size: cover;
          z-index: 999999;
        " src="/images/layout/settings.avif" @click="openSettings" />
    </div>
    <div style="
        height: 50px;
        width: 50px;
        position: absolute;
        top: 0px;
        right: -4px;
        gap: 0px;
        margin: 0px;
        padding: 4px;
        background-size: cover;
        z-index: 999999;
      ">
      <img style="
          top: 0px;
          right: 8px;
          gap: 0px;
          margin: 0px;
          padding: 0px;
          background-size: cover;
          z-index: 999999;
        " src="/images/layout/home.png" />
    </div>
    <!-- <div
      class=""
      style="
        position: absolute;
        top: 0px;
        right: 8px;
        gap: 0px;
        margin: 0px;
        padding: 0px;
        background-size: cover;
        z-index: 99;
      "
    >
      <img style="width: 52px; height: 52px" src="@/assets/bars/settings.avif" />
    </div> -->
  </div>
  <!-- </div> -->
</template>

<style scoped>
.tbar {
  background-size: cover;
  z-index: 99;
  position: absolute;
  width: 100%;
  max-height: 62px;

  /* height: 52px; */
  background-position: center;
  top: 0px;
  left: 0px;
  background-repeat: no-repeat;
  background-image: url('/images/layout/topback.png');
}

.moveout {
  animation: moveout 0.32s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  transform: translate(50, 0, 0);
}

@keyframes moveout {
  100% {
    transform: translate3d(-50px, 0, 0);
  }
}
</style>
</file>

<file path="./frontend/src/components/HelloWorld.vue">
<script setup lang="ts">
defineProps<{
  msg: string
}>()
</script>

<template>
  <div class="greetings">
    <h1 class="green">{{ msg }}</h1>
    <h3>
      You’ve successfully created a project with
      <a href="https://vite.dev/" target="_blank" rel="noopener">Vite</a> +
      <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue 3</a>. What's next?
    </h3>
  </div>
</template>

<style scoped>
h1 {
  font-weight: 500;
  font-size: 2.6rem;
  position: relative;
  top: -10px;
}

h3 {
  font-size: 1.2rem;
}

.greetings h1,
.greetings h3 {
  text-align: center;
}

@media (min-width: 1024px) {
  .greetings h1,
  .greetings h3 {
    text-align: left;
  }
}
</style>
</file>

<file path="./frontend/src/components/LiveWin.vue">
<template>
  <!-- Reserve height to prevent layout shift and keep element in DOM even when empty -->
  <div class="marquee-reserved w-full">
    <div
      v-show="displayWinners.length > 10"
      class="marquee-container w-full overflow-hidden relative group"
      role="region"
      aria-label="Recent winning players"
    >
      <ul class="marquee-content flex list-none m-0 p-0 will-change-transform gap-2">
        <LiveWinItem
          v-for="(winner, index) in displayWinners"
          :key="winner.id"
          :winner="winner"
          style="max-width: 280px"
        />
      </ul>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import LiveWinItem from './LiveWinItem.vue';
import { useGameSpinStore } from '@/stores/gamespin.store';

const gameStore = useGameSpinStore();
const sourceWinners = computed(() => gameStore.topWins || []);
let x = 0;

// Map incoming winners into display shape
// Define a minimal structural type to avoid 'any' and match existing payloads without over-constraining.
type SourceWinner = {
  id: string;
  playerName?: string;
  gamesName?: string;
  gameName?: string;
  grossWinAmount: number;
  winAmount?: number;
};

const mappedWinners = computed(() =>
  (sourceWinners.value as ReadonlyArray<SourceWinner>).map((item) => {
    // Use a narrowed local variable to avoid optional chaining on a union
    const resolvedGameName: string = (item.gameName ?? item.gamesName ?? '').toLowerCase();
    const rawAmount: number = (item.winAmount ?? item.grossWinAmount) ?? 0;
    return {
      id: x++,
      imageUrl: `https://images.cashflowcasino.com/all/${resolvedGameName}.avif`,
      gameName: item.gameName ?? item.gamesName,
      name: item.playerName,
      amount: String(rawAmount),
      location: 'Anytown, USA',
    };
  }),
);

// Ensure enough items to make marquee continuous
const contentFilledWinners = computed(() => {
  const minItemsToFill = 10;
  const winnersList = mappedWinners.value;
  if (!winnersList.length) return [];
  const newWinnerList: typeof winnersList = [];
  while (newWinnerList.length < minItemsToFill) {
    newWinnerList.push(...winnersList);
  }
  return newWinnerList;
});

// Duplicate for seamless scroll
const displayWinners = computed(() => [...contentFilledWinners.value, ...contentFilledWinners.value]);
</script>

<style scoped>
/* Reserve stable height to avoid pushing GameCarousel on async mount/render */
.marquee-reserved {
  /* Adjust height to match LiveWinItem height; use responsive clamp for safety */
  min-height: 56px;
  height: auto;
}

/* Mask edges for fade-in/out */
.marquee-container {
  -webkit-mask-image: linear-gradient(to right, transparent, black 10%, black 90%, transparent);
  mask-image: linear-gradient(to right, transparent, black 10%, black 90%, transparent);
}

/* Continuous horizontal scrolling */
.marquee-content {
  display: inline-flex;
  flex-wrap: nowrap;
  animation: scroll-left 1195s linear infinite;
  will-change: transform;
}

@keyframes scroll-left {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(-50%);
  }
}
</style>
</file>

<file path="./frontend/src/components/LiveWinItem.vue">
<template>
  <li
    class="flex-shrink-0 h-[70px] w-[280px] rounded-xl p-1 bg-gradient-to-br from-purple-600 via-pink-500 to-orange-400 shadow-lg transition-all duration-300 ease-in-out hover:-translate-y-1 hover:shadow-[0_0_20px_rgba(236,72,153,0.5)]"
  >
    <div
      class="h-full w-full bg-[#1a1436] rounded-[11px] flex items-center gap-4"
    >
      <div class="relative flex-shrink-0">
        <img
          :src="winner.imageUrl"
          :alt="'Game: ' + winner.gameName"
          class="w-19 h-19 max-h-[68px]  rounded-lg object-cover border-2 border-slate-700"
          onerror="this.onerror=null;this.src='/images/logo_small_animated.webp';"
        />
        <!-- <div class="absolute bottom-1 left-1 right-1 bg-black/60 text-white p-1 text-[10px] font-bold text-center rounded whitespace-normal leading-tight">{{ winner.gameName }}</div> -->
      </div>
      <div
        class="flex flex-col justify-start text-sm overflow-hidden whitespace-nowrap text-slate-300 leading-1"
      >
        <div
          class="text-base font-bold text-slate-50 leading-1 text-ellipsis"
          style="line-height: 1"
        >
          {{ winner.name }} <span class="font-normal">won</span>
        </div>
        <div
          class="flex items-center gap-1 text-lg font-bold text-yellow-400 mb-1 leading-1"
          style="line-height: 1"
        >
          <!-- Coin Icon -->
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="currentColor"
          >
            <path
              d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z"
            ></path>
            <path
              d="M13 14.262V16h-2v-1.738c-1.396-.484-2.381-1.724-2.527-3.262h2.014c.142.92.831 1.594 1.763 1.594.922 0 1.52-.523 1.52-1.199 0-.693-.465-1.148-1.52-1.666-1.39-.703-2.48-1.554-2.48-2.912 0-1.441 1.116-2.617 2.7-2.859V5h2v1.141c1.282.355 2.136 1.492 2.262 2.859h-2.014c-.109-.79-.654-1.432-1.512-1.432-.828 0-1.432.548-1.432 1.148s.604 1.08 1.432 1.52c1.658.842 2.568 1.693 2.568 3.018.001 1.543-1.141 2.748-2.977 2.977z"
            ></path>
          </svg>
          {{ winner.amount }}
        </div>
        <div class="flex items-center gap-1 text-xs text-slate-400">
          <!-- Location Icon -->
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="12"
            height="12"
            viewBox="0 0 24 24"
            fill="currentColor"
          >
            <path
              d="M12 2C7.589 2 4 5.589 4 10c0 4.411 8 12 8 12s8-7.589 8-12c0-4.411-3.589-8-8-8zm0 12c-2.206 0-4-1.794-4-4s1.794-4 4-4 4 1.794 4 4-1.794 4-4 4z"
            ></path>
          </svg>
          {{ winner.location }}
        </div>
      </div>
    </div>
  </li>
</template>

<script setup>
// Define the 'winner' prop that this component accepts.
defineProps({
  winner: {
    type: Object,
    required: true,
  },
});
</script>

<style scoped>
/* No component-specific styles needed here as all are handled by Tailwind utility classes. */
</style>
</file>

<file path="./frontend/src/components/Loading.vue">
<template>
  <!-- <div class="container"></div>
    <div class="spinner"></div>
    <div class="backdrop"></div> -->
  <div class="container">
    <div class="loader" style="transform: translateY(-20px) scale(0.4) translateX(20px)">
      <span style="font-size: 42px; font-weight: 700" class="glow">xxloadingxx</span>
      <span style="--i: 1"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 2"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 3"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 4"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 5"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 6"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 7"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 8"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 9"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 10"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 11"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 12"><i class="fa-solid fa-star"></i></span>
    </div>
  </div>
  <!-- <div class="logo"> -->
  <!-- <img src="/images/logo.png" w="200" h="180" /> -->
  <!-- </div> -->
</template>

<script setup lang="ts">
  // export default {
  //     data() {
  //         return {
  //             loading: true,
  //             showBackdrop: true,
  //         };
  //     },
  //     mounted() {
  //         // setTimeout(() => {
  //         //     this.loading = false;
  //         // }, 2000);
  //     },
  // };
  const showLoading = ref(false)
  onMounted(() => {
    setTimeout(() => {
      showLoading.value = true
    }, 300)
  })
</script>

<style scoped>
  .container {
    z-index: 999;
    margin: 0;
    top: 0px;
    left: 0px;
    z-index: 999999999;
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    background-image: url('/images/common/loading.png');
    background-size: 100% 100%;
    min-height: 300px;
    height: 100%;
    max-width: 580px;
    width: 100%;
    width: 100%;
  }

  .logo {
    z-index: 99099;
    position: absolute;
    width: auto;
    height: 180px;
    display: flex;
    align-items: center;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    justify-content: center;
  }

  .loader {
    z-index: 9909;
    position: absolute;
    width: 200px;
    height: 200px;
    display: flex;
    align-items: center;
    top: 55%;
    left: 25%;
    transform: translate(-50%, -50%);
    justify-content: center;
    animation: animateColor 5.2s linear infinite;
  }

  @keyframes animateColor {
    0% {
      filter: hue-rotate(0deg);
    }

    100% {
      filter: hue-rotate(360deg);
    }
  }

  .loader span {
    position: absolute;
    transform-origin: 150px;
    transform: translateX(-150px) rotate(calc(var(--i) * 30deg));
    filter: drop-shadow(0 0 5px #3cc2ff) drop-shadow(0 0 15px #3cc2ff) drop-shadow(0 0 30px #3cc2ff);
  }

  .loader span i {
    position: relative;
    color: #3cc2ff;
    animation: rotate-stars 2.4s linear infinite;
    animation-delay: calc(var(--i) * -0.2s);
  }

  @keyframes rotate-stars {
    0% {
      transform: rotate(0deg) scale(0);
    }

    50% {
      transform: rotate(180deg) scale(3);
    }

    100% {
      transform: rotate(360deg) scale(0);
    }
  }

  .loader span::before {
    content: '\f005';
    position: absolute;
    font-family: fontAwesome;
    font-size: 0.75em;
    color: #131a1c;
    animation: rotate-particle 2.4s linear infinite;
    animation-delay: calc(var(--i) * -0.2s);
  }

  @keyframes rotate-particle {
    0% {
      scale: 1;
      opacity: 0;
      rotate: 0deg;
    }

    50% {
      scale: 1;
      opacity: 1;
      rotate: 180deg;
    }

    100% {
      scale: 0;
      opacity: 0;
      rotate: 360deg;
      filter: drop-shadow(-150px 0 #3cc2ff) drop-shadow(150px 0 #3cc2ff)
        drop-shadow(0 150px #3cc2ff) drop-shadow(0 -150px #3cc2ff);
    }
  }

  /* .container {
        position: absolute;
        width: 100vw;
        height: 100vh;
        filter: blur(1.5rem);
        z-index: 999999;
    }

    .backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(10px);
        z-index: 1000;

    }

    .show-backdrop {
        display: block;
    }

    .spinner {
        position: absolute;
        filter: blur(0);
        z-index: 2;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        z-index: 999999;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
    }

    @keyframes spin {
        0% {
            transform: translate(-50%, -50%) rotate(0deg);
        }

        100% {
            transform: translate(-50%, -50%) rotate(360deg);
        }
    } */
</style>
</file>

<file path="./frontend/src/components/Logo.vue">
<script setup lang="ts"></script>

<template>
  <div>
    <img class="w-[100%] max-w-[480px] m-auto" src="@/assets/logo.png" />
  </div>
</template>
</file>

<file path="./frontend/src/components/OverlayLayer.vue">
<script setup>
  defineProps({
    zIndex: {
      type: String,
      default: 'z-50',
    },
    type: {
      type: String,
      default: 'flex',
    },
    showOverlay: {
      type: Boolean,
      default: true,
    },
  })

  const emit = defineEmits(['overlayClick'])

  function overlayClick(event) {
    emit('overlayClick', event)
  }
</script>

<template>
  <div
    :class="[type, zIndex]"
    class="items-center flex-col justify-center overflow-hidden fixed inset-0"
  >
    <Transition
      enter-active-class="transition duration-150 ease-in"
      enter-from-class="opacity-0"
      enter-to-class="opacity-100"
      leave-active-class="transition duration-150 ease-in"
      leave-from-class="opacity-100"
      leave-to-class="opacity-0"
    >
      <div
        v-if="showOverlay"
        class="overlay absolute inset-0 bg-linear-to-tr opacity-90 dark:from-gray-700 dark:via-gray-900 dark:to-gray-700"
        @click="overlayClick"
      />
    </Transition>
    <Transition
      enter-active-class="transition duration-100 ease-out"
      enter-from-class="transform scale-95 opacity-0"
      enter-to-class="transform scale-100 opacity-100"
      leave-active-class="animate-fade-out"
    >
      <slot />
    </Transition>
  </div>
</template>
</file>

<file path="./frontend/src/components/PlayerAvatar.vue">
<script setup lang="ts">
import { ref, computed, watch, onMounted, } from 'vue'
import { storeToRefs } from 'pinia'
import { useAuthStore } from '@/stores/auth.store'
import { useVipStore } from '@/stores/vip.store'
import { useEventManager } from '@/composables/EventManager' // Assuming this is the correct path
// If CircleProgressBar and SparklesSprite are globally registered, no import needed.
// Otherwise, import them here:
// import CircleProgressBar from '@/components/CircleProgressBar.vue'
// import SparklesSprite from '@/components/SparklesSprite.vue'

// Props
interface Props {
  sparkle?: boolean
}
const props = withDefaults(defineProps<Props>(), {
  sparkle: false,
})

// Stores
const authStore = useAuthStore()
const vipStore = useVipStore() // Use the store instance directly
const localSparkle = ref(props.sparkle)
const eventBus = useEventManager()
// const currentUser = ref(authStore.currentUser)
const { currentUser } = storeToRefs(authStore)
// const { vipInfo } = storeToRefs(vipStore)

// const { currentUser } = storeToRefs(authStore)
// It's generally better to get reactive state from the store using storeToRefs or computed properties
// to ensure reactivity is maintained.
const vipInfo = computed(() => vipStore.getVipInfo) // Assuming getVipInfo is a getter or a reactive object

// Constants
// const XP_LEVEL_SCALE = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]

// Local State
// const gainingExp = ref(false)
const circleRef = ref<HTMLElement | null>(null) // For the glow effect, if still needed
// const percentOfLevelGained = ref(0)
const xpNeededForNextLevel = ref(0)
const currentXp = ref(0)
// Event Bus

// Computed Properties
// const currentLevel = computed(() => vipInfo.value.level || 0)
// const currentBetExp = computed(() => vipInfo.value.bet_exp || 0)
// const currentRankBetExp = computed(() => vipInfo.value.rank_bet_exp || 0)
// const currentUserTotalXp = computed(() => vipInfo.value.xp || 0)
// const currentUsername = computed(() => currentUser.value?.username || '')
// const currentUserImage = computed(() => currentUser.value?.avatar || 'avatar-5.webp') // Provide a default

// const nextXpThreshold = computed(() => {
//   if (currentLevel.value >= 0 && currentLevel.value < XP_LEVEL_SCALE.length) {
//     return XP_LEVEL_SCALE[currentLevel.value]
//   }
//   return Infinity // Or a very large number if level is out of bounds
// })

// const xpPercentageToNextLevel = computed(() => {
//   if (nextXpThreshold.value === 0 || nextXpThreshold.value === Infinity) return 0
//   const expTowardsNext = currentBetExp.value % nextXpThreshold.value // XP accumulated within the current level
//   const requiredForLevel = nextXpThreshold.value - (XP_LEVEL_SCALE[currentLevel.value - 1] || 0) // Total XP needed for this specific level
//   if (requiredForLevel === 0) return 100 // Avoid division by zero if already at max XP for level 0 or error
//   return Math.min((currentBetExp.value / nextXpThreshold.value) * 100, 100) // Percentage of currentBetExp towards the next threshold
// })

// const betRatePercentage = computed(() => {
//   if (!currentRankBetExp.value) return 0 // Avoid division by zero
//   const rate = (currentBetExp.value / currentRankBetExp.value) * 100
//   return Math.min(rate, 100) // Cap at 100%
// })

// const displayUsername = computed(() => {
//   return currentUsername.value.substring(0, 8)
// })

// const usernameFontSizeClass = computed(() => {
//   return (currentUsername.value?.length || 0) <= 6 ? 'text-lg' : 'text-base' // Using Tailwind classes
// })

// // Methods
// function showProfileModal() {
//   eventBus.emit('profileOpen', true)
// }

function pulseGlowEffect() {
  console.log('Pulsing glow effect')
  if (circleRef.value) {
    circleRef.value.classList.add('glow')
    localSparkle.value = true;

    setTimeout(() => {
      localSparkle.value = false;

    }, 1000)
    setTimeout(() => {
      circleRef.value?.classList.remove('glow')
    }, 2000)
  }
}

// Watchers
watch(() => props.sparkle, (isSparkling) => {
  if (isSparkling) {
    localSparkle.value = true;
    setTimeout(() => {
      localSparkle.value = false;
    }, 3000); // Animation duration
  }
});
// watch(() => currentUser, (user) => {
//   console.log(user)
//   // if (isSparkling) {
//   //     localSparkle.value = true;
//   //     setTimeout(() => {
//   //         localSparkle.value = false;
//   //     }, 3000); // Animation duration
//   // }
// });
watch(
  () => vipStore.getVipInfo,
  (newVipInfo, oldVipInfo) => {
    if (newVipInfo?.betExp !== undefined) {
      const oldXp = oldVipInfo?.betExp || 0
      const newXp = newVipInfo.betExp
      console.log('VIP XP changed:', { oldXp, newXp })
      currentXp.value = newXp

      if (newXp > oldXp) {
        pulseGlowEffect()
      }
    }
  },
  { deep: true }
)
// Listen for XP gain events
const handleXpGain = () => {
  const result = vipStore.getPercentOfCurrentLevel()
  if (result) {
    xpNeededForNextLevel.value = result[2]
    currentXp.value = result[1]
    pulseGlowEffect()
  }
}

// Use the event manager from the VIP store
eventBus.on('xp:gain', handleXpGain)
// function profileGetLevelProgress() {
//   return Math.floor((currentUser.value?.vipInfo.level! >= 100 ? 2970100 * 1000 : currentUser.value?.vipInfo.xp! - (Math.pow(currentUser.value?.vipInfo.level!, 3) * 100 * 1000)) / 10) / 100;
// }
// Event Bus Listener
onMounted(async () => {
  try {
    // Fetch VIP levels if not already loaded
    // if (!vipStore.getVipLevels.length) {
      // await vipStore.fetchAllVipLevels()
    // }
    // Initialize XP display
    const result = vipStore.getPercentOfCurrentLevel()
    if (result) {
      xpNeededForNextLevel.value = result[2]
      currentXp.value = result[1]
    }
  } catch (error) {
    console.error('Failed to initialize VIP data:', error)
  }
  eventBus.on('xp:gain', () => {
    console.log('PlayerAvatar: xp:gain event received, starting animation.');
    localSparkle.value = true;
    // Turn sparkle off after animation duration
    setTimeout(() => {
      localSparkle.value = false;
    }, 3000); // Must match animation duration
  }, 'PlayerAvatar'); // Unique target for safe un-subscription
})
</script>

<template>
  <div v-if="currentUser && vipInfo" class="relative w-[60px] h-[70px] ml-[15px] mt-[1px] z-[2]">
    <div class="relative w-[60px] h-[60px] z-[999]">
      <div ref="circleRef"
        class="player-avatar-wrapper  flex items-center justify-center overflow-hidden rounded-full w-full h-full"
        :class="{ glow: sparkle }">
        <div class="absolute inset-[3px] bg-cover bg-center rounded-full z-999 "
          style=" z-index: 9999; background-size: cover "
          :style="`background-image: url('/images/avatars/${currentUser.avatar_url}')`" />
        <AnimatedCircularProgressBar :gaugePrimaryColor="'red'" :duration="3" :gaugeSecondaryColor="'yellow'"
          :gaugeWidth="10" :max="100" :showPercentage="false" :circle-stroke-width="10" :min="0" :value="currentXp / 2"
          class="absolute inset-[-2px] w-[calc(100%+4px)] h-[calc(100%+4px)] z-[1] -rotate-70" />
        <!-- <CircleProgressBar stroke-width="20" :value="currentXp" :max="xpNeededForNextLevel" color-unfilled="yellow"
          animation-duration="1s" color-filled="yellow" color-back="red" :start-angle="190"
          class="absolute inset-[-2px] w-[calc(100%+4px)] h-[calc(100%+4px)] z-[1]" /> -->
      </div>
    </div>

    <div
      class="text-base  w-[80px] absolute left-[-10px] m-auto  bottom-[6px] z-[999]  bg-white opacity-99 rounded border border-[#6f14a3] shadow-[0px_0px_4px_#6f14a3] text-black font-extrabold text-center">
      <div class="leading-2  onacona overflow-hidden text-clip  flex justify-center p-1" style="font-size: 15px"> {{
        currentUser.username
        }}
      </div>
    </div>

    <div class="absolute top-[18px] left-[-16px] w-[36px] h-[36px] z-[9999] bg-cover cursor-pointer"
      style="background-image: url('/images/avatars/level-star.avif')">
      <div class="flex leading-1 items-center justify-center h-full text-lg onacona text-black pr-1 pt-1 "
        style="color: black">
        {{ vipInfo.level }}
      </div>
    </div>

    <div v-if="localSparkle" class="absolute left-[-5px] top-[-4px] w-[60px] h-[30px] z-[999999]">
      <SparklesSprite />
    </div>
  </div>
</template>

<style scoped>
/* Prefer Tailwind for styling, but keep complex animations or specific CSS here */

.glow {
  animation: pulse-glow 2s linear;
}

@keyframes pulse-glow {

  0%,
  100% {
    filter: drop-shadow(0 0 5px #c22998);
  }

  50% {
    filter: drop-shadow(0 0 10px #8b5df4);
  }
}

/* Removed other CSS that can be replaced by Tailwind or is no longer used
   (e.g., .progress, .circle-progress definitions, input[type=range], .img-wrap)
   If CircleProgressBar needs specific global styles, they should be defined where it's globally styled.
*/
</style>
</file>

<file path="./frontend/src/components/RtgGameLauncher.vue">
<script setup lang="ts">
import { useHead } from '@vueuse/head';
import { onMounted } from 'vue';

// Define props to make the component reusable
const props = defineProps({
  gameId: {
    type: String,
    required: true,
  },
  sessionId:{
    type: String,
    required: true
  }
});

// --- Head Management ---
// Use VueUse to manage the document's head content, making it dynamic
useHead({
  title: '...',
  htmlAttrs: {
    style: 'background: black',
    translate: 'no',
    class: 'notranslate',
  },
  meta: [
     { 'http-equiv': 'Content-Type', content: 'text/html; charset=utf-8' },
  { 'http-equiv': 'X-UA-Compatible', content: 'IE=edge' },
    { name: 'viewport', content: 'width=device-width, user-scalable=no, initial-scale=1' },
    { name: 'apple-mobile-web-app-capable', content: 'yes' },
    { name: 'mobile-web-app-capable', content: 'yes' },
    { name: 'google', content: 'notranslate' },
    { name: 'format-detection', content: 'telephone=no' },
    { name: 'theme-color', content: '#ffffff' },
  ],
  link: [
    { rel: 'apple-touch-icon', sizes: '180x180', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/apple-touch-icon.png` },
    { rel: 'icon', type: 'image/png', sizes: '32x32', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/favicon-32x32.png` },
    { rel: 'icon', type: 'image/png', sizes: '16x16', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/favicon-16x16.png` },
    { rel: 'mask-icon', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/safari-pinned-tab.svg`, color: '#5bbad5' },
    { rel: 'shortcut icon', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/favicon.ico` },
  ],
});


// --- Script Loading & Initialization ---
// Helper to dynamically load external scripts
const loadScript = (src: string, crossOrigin: boolean = true): Promise<void> => {
  return new Promise((resolve, reject) => {
    const script = document.createElement('script');
    script.src = src;
    script.type = 'text/javascript';
    if (crossOrigin) {
      script.crossOrigin = 'anonymous';
    }
    script.onload = () => resolve();
    script.onerror = (error) => reject(error);
    document.body.appendChild(script);
  });
};

// onMounted ensures the DOM is ready before we try to manipulate it
onMounted(async () => {
  // Define the global object structure
  window.com = window.com || {};
  window.com.casino = window.com.casino || {};
  
  // Set CDN paths based on the gameId prop
  const cdnBase = `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/`;
  window.com.casino.cdn = cdnBase;
  window.com.casino.baseCdn = 'https://cdn-eu.cloudedge.info/all/games/';
  window.com.casino.barsPath = 'https://cdn-eu.cloudedge.info/all/games/bars-next/';
  window.com.casino.bridgePath = 'https://cdn-eu.cloudedge.info/all/games/bridge/';
  
  // Load the main bridge script and wait for it to be ready
  await loadScript(`${window.com.casino.bridgePath}bridge.min.js?t=${Date.now()}`);

  // This logic now runs *after* the bridge script has loaded
  (function () {
    'use strict';
    const get = (key: string) => new URLSearchParams(window.location.search).get(key);

    const preconfig = {
      bridge: {
        postParams: [],
        feedUrl: 'https://feed-rtg.redtiger.com/',
        provider: 'kronos',
        operator: 'redtiger',
        timestamp: `?t=${Date.now()}`,
        notifications: {
          inRealPlay: true,
          inDemoPlay: false,
          showUnfinishedWins: true,
          showUnfinishedNoWins: false,
        },
        bridgeLaunch: true,
      },
      server: {
        rgsApi: 'http://localhost:9999/rcp/',
        launchParams: {
          gameId: props.gameId, // Use the prop here
        },
      },
      game: {
        namespace: 'com.casino.game',
        preconfig: {
          cdn: window.com.casino.cdn,
          delayedBalanceUpdate: false,
          defaultLang: 'en',
          splash: true,
          hideCurrency: get('hideCurrency') === 'true',
          disclaimer: '',
          skin: 'next-name-payouts',
          skinURL: get('skinURL'),
          gameType: 'slot',
          gameAppId: props.gameId, // Use the prop here
          responsive: true,
          addedAnticipation: get('addedAnticipation') !== 'false',
        },
      },
      bars: {
        basePath: window.com.casino.barsPath,
        options: {
          historySrc: 'https://cdn-eu.cloudedge.info/all/games/history/',
          hasGamble: true,
        },
      },
      // ... other config sections
    };

    // Initialize the bridge with the configuration
    if (window.com.casino.bridge) {
      window.com.casino.bridge.init(preconfig);
    }
  })();

  // Load non-essential scripts
  // loadScript('https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015', false);
});
</script>

<template>
  <div>
    <img
      class="loading-icon"
      style="position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto"
      src="https://cdn-eu.cloudedge.info/all/assets/loading.svg"
    />
  </div>
</template>

<style scoped>
/* You can add component-specific styles here if needed */
</style>
</file>

<file path="./frontend/src/components/RtgGameLoader.vue">
<template>
  <div class="rtg-game-container w-full h-full">
    <div v-if="isLoading" class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50">
      <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500"></div>
      <p class="ml-4 text-white text-xl">Loading {{ options?.gameName }}...</p>
    </div>
    <div v-if="showInsufficientFunds"
      class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50">
      <div class="h-400 w-full border-t-4 border-b-4 border-blue-500">
        <!-- <CoinSalePopup :offers="COIN_OFFERS" @close="showInsufficientFunds = false" @shop="router.replace('/home')"
          @lobby="router.replace('/home')" /> -->
      </div>
    </div>
    <iframe v-if="iframeUrl" :src="iframeUrl" ref="gameIframe" frameborder="0" scrolling="no" allowfullscreen
      class="w-full h-full" @load="onIframeLoad" @error="onIframeError" title="Game"></iframe>
    <div v-if="loadError" class="absolute inset-0 flex flex-col items-center justify-center bg-gray-800 text-white p-4">
      <p class="text-xl text-red-500 mb-4">Failed to load game.</p>
      <p class="text-sm text-gray-400 mb-2">{{ loadErrorMessage }}</p>
      <button @click="retryLoadGame" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded">
        Retry
      </button>
    </div>
  </div>
</template>

<script setup lang="ts">
import { useAuthStore } from '@/stores/auth.store'
import { computed, onMounted, ref, watch, type PropType } from 'vue'
// import { useNotificationStore } from '@/stores/notification.store' //
// import CoinSalePopup from '@/components/games/coins/CoinSalePopup.vue'
// import { COIN_OFFERS } from '@/components/games/coins/constants'
// import { router } from '@/router'
// import type { RtgGameLaunchOptions } from '@/interfaces'
export interface RtgGameLaunchOptions {
  gameName: string // e.g., "777Strike"
  lang?: string
  currency?: string
  mode?: 'real' | 'demo'
  // Add any other parameters that your rtg_loader_template.html expects
  // or that are needed to construct the full preconfig
  rgsApiBase?: string // Base for your proxy: e.g., /api/rtg/platform
  gameCdnBase?: string // If different from default construction
  operator?: string
  provider?: string
  depositUrl?: string
  lobbyUrl?: string
  // ... any other specific params from com.casino.preconfig
}
const eventBus = useEventManager()

const props = defineProps({
  options: {
    type: Object as PropType<RtgGameLaunchOptions>,
    required: true,
  },
})


const authStore = useAuthStore()
// const notificationStore = useNotificationStore()
const gameIframe = ref<HTMLIFrameElement | null>(null)
const isLoading = ref<boolean>(true)
const loadError = ref<boolean>(false)
const showInsufficientFunds = ref<boolean>(false)

const loadErrorMessage = ref<string>('')

const iframeUrl = computed(() => {
  if (!props.options || !props.options.gameName) {
    loadError.value = true
    loadErrorMessage.value = 'Game ID is missing in options.'
    return null
  }

  const params = new URLSearchParams()
  params.set('gameName', props.options.gameName)
  params.set('userId', authStore.currentUser?.id || 'GUEST_DEMO_USER') // Ensure you have a fallback or handle unauthenticated
  params.set('token', authStore.accessToken || 'GUEST_DEMO_TOKEN')
  // params.set('gameSessionId', gameSession.id)
  // params.set('lang', props.options.lang || authStore.currentUser?.language || 'en')
  // params.set('currency', props.options.currency || authStore.currentUser?.currency || 'USD')
  params.set('mode', props.options.mode || 'real')

  // Pass through other options to the template
  if (props.options.rgsApiBase) params.set('rgsApiBase', props.options.rgsApiBase)
  if (props.options.gameCdnBase) params.set('gameCdnBase', props.options.gameCdnBase)
  if (props.options.operator) params.set('operator', props.options.operator)
  if (props.options.provider) params.set('provider', props.options.provider)
  if (props.options.depositUrl) params.set('depositUrl', props.options.depositUrl)
  if (props.options.lobbyUrl) params.set('lobbyUrl', props.options.lobbyUrl)
  // Add more params as needed from RtgGameLaunchOptions

  // Construct the URL to your static HTML template in the public folder
  // Make sure 'rtg_loader_template.html' is in your project's 'public' directory.
  return `/rtg_loader_template.html?${params.toString()}`
})

// Listen for messages from the iframe
window.addEventListener(
  'message',
  (event) => {
    // IMPORTANT: In a production environment, you should verify event.origin
    // to ensure messages are coming from a trusted source.
    // if (event.origin !== 'expected-origin-of-your-game-loader') return;

    const message = event.data
    if (typeof message !== 'object' || !message.type) {
      return
    }

    if (message.type === 'INSUFFICIENT_FUNDS') {
      showInsufficientFunds.value = true
    }
  },
  false
)
const onIframeLoad = async () => {
  if (gameIframe.value?.contentWindow && authStore.accessToken) {
    gameIframe.value.contentWindow.addEventListener('message', (event) => {
      console.log('event listener message >>. ', event)
    })

    gameIframe.value.contentWindow.postMessage(
      { type: 'SET_AUTH_TOKEN', token: authStore.accessToken, userId: authStore.currentUser?.id, },
      '*' // Or better, the specific origin of your rtg_loader_template.html
    )
  }
  isLoading.value = false
  loadError.value = false

  console.log(`RTG Game Iframe loaded for: ${props.options.gameName}`)
  eventBus.emit('hideBottomBar', undefined)
  // notificationStore.addNotification('info', `Game "${props.options.gameName}" loaded.`)
}

const onIframeError = (event: Event) => {
  isLoading.value = false
  loadError.value = true
  loadErrorMessage.value = `The game frame failed to load. Please check console for details.`
  console.error('Game Iframe load error:', event)
  // notificationStore.addNotification('error', `Error loading game: ${props.options.gameName}`)
}

const retryLoadGame = () => {
  // This will trigger a re-computation of iframeUrl and thus reload the iframe
  // A more robust way might involve adding a cache-buster to the URL or explicitly setting iframe.src again
  loadError.value = false
  isLoading.value = true
  if (gameIframe.value && iframeUrl.value) {
    // Create a new URL object to break reactivity reference if needed, or add cache buster
    gameIframe.value.src = `${iframeUrl.value}&retry=${Date.now()}`
  }
}

// Watch for option changes to reload the game if necessary
watch(
  () => props.options,
  (newOptions, oldOptions) => {
    if (newOptions && oldOptions && newOptions.gameName !== oldOptions.gameName) {
      console.log('Game options changed, reloading game:', newOptions.gameName)
      isLoading.value = true // Will be reset by onIframeLoad or onIframeError
      loadError.value = false
      // iframeUrl computed property will automatically update the src
    }
  },
  { deep: true }
)

onMounted(() => {
  if (!iframeUrl.value) {
    // Handle initial error if options are immediately invalid
    isLoading.value = false
  }
  // Setup postMessage listeners for communication with the iframe if needed
  // window.addEventListener('message', handleGameMessage);
})

// onUnmounted(() => {
//   window.removeEventListener('message', handleGameMessage);
// });

// const handleGameMessage = (event: MessageEvent) => {
//   // IMPORTANT: Check event.origin to ensure messages are from your game iframe's expected origin
//   // if (event.origin !== expected_game_origin) return;
//   const data = event.data;
//   if (data && data.type === 'GAME_EVENT_BALANCE_UPDATE') {
//     authStore.updateBalance(data.payload.balance); // Example
//   } else if (data === 'CLOSE_GAME_REQUEST') {
//     // Handle game close request, navigate to lobby
//   }
// };
</script>

<style scoped>
.rtg-game-container {
  position: relative;
  /* For absolute positioning of overlays */
}

/* .loading-overlay,
.error-overlay { */
/* Basic styling for overlays */
/* } */
</style>
</file>

<file path="./frontend/src/components/SettingsView.vue">
<script lang="ts" setup>
import { useEventManager } from '@/composables/EventManager'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/auth.store'

const eventBus = useEventManager()
const router = useRouter()

const props = defineProps({
  hasCancel: Boolean,
  modelValue: {
    type: [String, Number, Boolean],
    default: null,
  },
})
const emit = defineEmits(['update:modelValue'])
function logout() {
  const authStore = useAuthStore()
  authStore.logout()
}
// const isOpen = ref(false)
const customElementsForm = reactive({
  checkbox: ['lorem'],
  radio: 'one',
  switch: ['one', 'two', 'three'],
  file: null,
})
const value = computed({
  get: () => props.modelValue,
  set: (value) => emit('update:modelValue', value),
})

function gotoAgent() {
  eventBus.emit('settingsModal', false)
  router.replace('/agent')
  // window.location.reload()
}
function cancel() {
  eventBus.emit('settingsModal', false)
  router.replace('/')
  // window.location.reload()
}
// function logOutz() {
//   // console.log('logging out..')
//   logout()
// }
</script>

<template>
  <OverlayLayer v-show="value" @overlay-click="cancel">
    <div v-show="value" class="flex-col relative max-h-modal w-11/12 md:w-3/5 lg:w-2/5 xl:w-4/12 z-50" style="
        background-repeat: no-repeat;
        margin: auto;
        border-image: url('/images/common/cell-2.png') 30 30 30 30 fill / 30px 30px 30px 30px;
        padding: 30px 30px 30px 30px;
      ">
      <!-- <div
        class="futex-cell-3 pb-0 flex pa-[4px] gap-2 flex-col m-8 my-12 justify-center items-center"
        style="
          padding: 8px;
          padding-top: 32px;
          padding-bottom: 3px;
          margin-left: 10px;
          margin-right: 12px;
        "
      > -->
      <div class="absolute right-0 gap-2" style="top: -0px; right: -0px" @click="eventBus.emit('settingsModal', false)">
        <CloseButton width="40" height="40" idle-image="/images/common/close.png"
          pressed-image="/images/common/close-pressed.png" />
      </div>
      <div class="flex justify-end pb-3 w-full px-4 text-white font-bold">version: 1.08</div>
      <div class="flex justify-between w-full glow px-4 gap-2 pb-1">
        Full Screen
        <FormCheckRadioGroup v-model="customElementsForm.switch" name="sample-switch" type="switch"
          :options="{ one: '' }" />
        <!-- <MazSwitch size="large" color="success" /> -->
      </div>
      <div class="flex justify-between w-full glow px-4 pb-1">
        Sound Effects
        <FormCheckRadioGroup v-model="customElementsForm.switch" name="sample-switch" type="switch"
          :options="{ two: '' }" />
        <!-- <MazSwitch /> -->
      </div>
      <div class="flex justify-between w-full glow px-4 pb-1">
        Music
        <FormCheckRadioGroup v-model="customElementsForm.switch" name="sample-switch" type="switch"
          :options="{ three: '' }" />
        <!-- <MazSwitch color="primary" /> -->
      </div>
      <div />
      <div class="flex justify-around items-center w-full glow px-4"
        style="margin-top: 30px; margin-bottom: 0px; padding-bottom: 0px">
        <GlassButton color="red" :shine="false" @click="logout"> LOG OUT </GlassButton>

        <GlassButton :shine="false" @click="gotoAgent"> AGENT </GlassButton>
      </div>
    </div>
    <!-- <div class="flex my-12 h-[80px]" /> -->
  </OverlayLayer>
</template>

<style>
@media (min-width: 1024px) {
  .about {
    min-height: 100vh;
    display: flex;
    align-items: center;
  }
}
</style>
</file>

<file path="./frontend/src/components/SparklesSprite.vue">
<script setup lang="ts">
  import { Motion } from 'motion-v'

  interface Sparkle {
    id: string
    x: string
    y: string
    color: string
    delay: number
    scale: number
    lifespan: number
  }

  interface Props {
    text?: string
    sparklesCount?: number
    colors?: {
      first: string
      second: string
    }
    class?: string
  }

  const props = withDefaults(defineProps<Props>(), {
    sparklesCount: 10,
    colors: () => ({ first: '#9E7AFF', second: 'white' }),
  })

  const sparkles = ref<Sparkle[]>([])

  // Generate a new sparkle with randomized properties
  function generateStar(): Sparkle {
    const starX = `${Math.random() * 100}%`
    const starY = `${Math.random() * 100}%`
    const color = Math.random() > 0.5 ? props.colors.first : props.colors.second
    const delay = Math.random() * 1
    const scale = Math.random() * 1 + 0.3
    const lifespan = Math.random() * 5 + 1
    const id = `${starX}-${starY}-${Date.now()}`
    return { id, x: starX, y: starY, color, delay, scale, lifespan }
  }

  // Initialize sparkles array with random stars
  function initializeStars() {
    sparkles.value = Array.from({ length: props.sparklesCount }, generateStar)
  }

  // Update sparkles - regenerate dead ones and update lifespans
  function updateStars() {
    sparkles.value = sparkles.value.map((star) => {
      if (star.lifespan <= 0) {
        return generateStar()
      } else {
        return { ...star, lifespan: star.lifespan - 0.1 }
      }
    })
  }

  let interval: number

  // Start animation loop
  onMounted(() => {
    initializeStars()
    interval = window.setInterval(updateStars, 100)
    // setTimeout(() => {
    //   clearInterval(interval)
    // }, 100)
  })

  // Cleanup on unmount
  onUnmounted(() => {
    if (interval) {
      clearInterval(interval)
    }
  })
</script>

<template>
  <div class="text-4xl font-bold" :class="props.class">
    <span class="relative inline-block">
      <template v-for="sparkle in sparkles" :key="sparkle.id">
        <!-- Animated star SVG with fade, scale, and rotation effects -->
        <Motion
          :initial="{ opacity: 0, scale: 0, rotate: 75 }"
          :animate="{
            opacity: [0, 1, 0],
            scale: [0, sparkle.scale, 0],
            rotate: [75, 120, 150],
          }"
          :transition="{
            duration: 0.6,
            repeat: Infinity,
            delay: sparkle.delay,
          }"
          as="svg"
          class="pointer-events-none absolute z-20"
          :style="{
            left: sparkle.x,
            top: sparkle.y,
            opacity: 0,
          }"
          width="21"
          height="21"
          viewBox="0 0 21 21"
        >
          <path
            d="M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z"
            :fill="sparkle.color"
          />
        </Motion>
      </template>
      &nbsp;&nbsp;&nbsp;&nbsp;
    </span>
  </div>
</template>
</file>

<file path="./frontend/src/components/SpriteAnimator.vue">
<template>
  <canvas ref="canvasRef" :width="width" :height="height"></canvas>
</template>

<script setup lang="ts">
import { onMounted, onUnmounted, ref, watch } from 'vue';

const props = defineProps<{
  animationData: {
    frames: {
      frame: { x: number; y: number; w: number; h: number };
      rotated: boolean;
      trimmed?: boolean;
      spriteSourceSize: { x: number; y: number; w: number; h: number };
      sourceSize: { w: number; h: number };
    }[];
  };
  imageUrl: string;
  width: number;
  height: number;
  frameRate?: number;
  initialDelayMax?: number; // in seconds
  loopDelay?: number; // in seconds
}>();

const canvasRef = ref<HTMLCanvasElement | null>(null);
const image = new Image();
let frameIndex = 0;
let startTimeoutId: NodeJS.Timeout;
let loopTimeoutId: NodeJS.Timeout;
let lastFrameTime = 0;
let animationFrameId: number;

const frameList = props.animationData.frames as {
  frame: { x: number; y: number; w: number; h: number };
  rotated: boolean;
  trimmed: boolean;
  spriteSourceSize: { x: number; y: number; w: number; h: number };
  sourceSize: { w: number; h: number };
}[];

const drawFrame = (index: number) => {
  const canvas = canvasRef.value;
  if (!canvas || !image.complete || image.naturalHeight === 0) return;
  const ctx = canvas.getContext('2d');
  if (!ctx) return;

  const currentFrame = frameList[index];
  if (!currentFrame) return;

  const { frame, sourceSize, spriteSourceSize } = currentFrame;

  // Calculate the scaling factor to fit the original, untrimmed source size
  // into the component's bounding box, preserving aspect ratio.
  const scale = Math.min(props.width / sourceSize.w, props.height / sourceSize.h);

  // These are the final dimensions of the visible sprite part on the canvas
  const targetWidth = spriteSourceSize.w * scale;
  const targetHeight = spriteSourceSize.h * scale;

  // This is where the sprite should be drawn on the canvas to respect trimmed space
  const destX = spriteSourceSize.x * scale;
  const destY = spriteSourceSize.y * scale;

  ctx.clearRect(0, 0, props.width, props.height);
  ctx.save();

  // We draw the sub-rectangle from the spritesheet (frame) onto the destination
  // rectangle on the canvas.
  ctx.drawImage(
    image,
    frame.x,
    frame.y,
    frame.w,
    frame.h,
    destX,
    destY,
    targetWidth,
    targetHeight
  );

  ctx.restore();
};


const animate = (timestamp: number) => {
  const frameInterval = 1000 / (props.frameRate || 60);
  if (!lastFrameTime) lastFrameTime = timestamp;
  const deltaTime = timestamp - lastFrameTime;

  if (deltaTime > frameInterval) {
    lastFrameTime = timestamp - (deltaTime % frameInterval);
    drawFrame(frameIndex);
    frameIndex++;

    if (frameIndex >= frameList.length) {
      frameIndex = 0;
      if (props.loopDelay && props.loopDelay > 0) {
        cancelAnimationFrame(animationFrameId);
        loopTimeoutId = setTimeout(() => {
          lastFrameTime = 0;
          animationFrameId = requestAnimationFrame(animate);
        }, props.loopDelay * 1000);
        return;
      }
    }
  }
  animationFrameId = requestAnimationFrame(animate);
};

const startAnimationCycle = () => {
  cancelAnimationFrame(animationFrameId);
  clearTimeout(startTimeoutId);
  clearTimeout(loopTimeoutId);

  const initialDelay = (props.initialDelayMax || 0) * 1000 //Math.random() * (props.initialDelayMax || 0) * 1000;

  startTimeoutId = setTimeout(() => {
    frameIndex = 0;
    lastFrameTime = 0;
    animationFrameId = requestAnimationFrame(animate);
  }, initialDelay);
};

onMounted(() => {
  image.src = props.imageUrl;
  image.onload = () => {
    drawFrame(0); // Draw the first frame immediately
    startAnimationCycle(); // Then, start the animation cycle with delays
  };
});

onUnmounted(() => {
  cancelAnimationFrame(animationFrameId);
  clearTimeout(startTimeoutId);
  clearTimeout(loopTimeoutId);
});

watch(() => [props.animationData, props.imageUrl], () => {
  image.src = props.imageUrl; // onload will handle the rest
});
</script>
</file>

<file path="./frontend/src/components/StarBurst.vue">
<template>
  <div class="star-burst-container">
    <img v-for="star in stars" :key="star.id" :src="star.src" class="star" :style="star.style" alt="Shining star" />
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue';

const starImages = [
  '/images/stars/particle02.png',
  '/images/stars/particle03.png',
  '/images/stars/particle05.png',
  '/images/stars/star0.avif',
  '/images/stars/star1.avif',
  '/images/stars/star2.avif',
  '/images/stars/star3.avif',
];

interface Star {
  id: number;
  src: string;
  style: Record<string, string | number>;
}

const stars = ref<Star[]>([]);
const numStars = 30; // Number of stars to generate

onMounted(() => {
  for (let i = 0; i < numStars; i++) {
    const randomImage = starImages[Math.floor(Math.random() * starImages.length)];
    const angle = Math.random() * 360; // Random angle for spiral direction
    const distance = 50 + Math.random() * 150; // Random distance from center
    const duration = 2 + Math.random() * 5; // Random animation duration (2s to 5s)
    const delay = Math.random() * 1; // Random delay to stagger animations

    stars.value.push({
      id: i,
      src: randomImage,
      style: {
        '--angle': `${angle}deg`,
        '--distance': `${distance}px`,
        'animation-duration': `${duration}s`,
        'animation-delay': `${delay}s`,
        'z-index': 9999,
      },
    });
  }
});
</script>

<style scoped>
.star-burst-container {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 1px;
  height: 1px;
  z-index: -1;
  /* Behind the card */
}

.star {
  position: absolute;
  top: 0;
  left: 0;
  width: 30px;
  /* Adjust size as needed */
  height: 30px;
  opacity: 1;
  z-index: 9999;
  animation: spiral-out 5s forwards;
}

@keyframes spiral-out {
  0% {
    transform: translate(-50%, -50%) rotate(0deg) scale(0.1);
    opacity: 0;
  }

  20% {
    transform: translate(calc(cos(var(--angle)) * var(--distance) / 4), calc(sin(var(--angle)) * var(--distance) / 4)) rotate(180deg) scale(1.2);
    opacity: 1;
  }

  100% {
    transform: translate(calc(cos(var(--angle)) * var(--distance)), calc(sin(var(--angle)) * var(--distance))) rotate(720deg) scale(0.5);
    opacity: 0;
  }
}
</style>
</file>

<file path="./frontend/src/components/Starfield.vue">
<template>
  <div class="starfield-wrapper bg-black/30 backdrop-blur-sm rounded-lg  border border-blue-500/20">
    <!-- The main container for the starfield effect -->
    <div ref="starContainer" class="star-container w-full h-full rounded-md relative overflow-hidden bg-cover bg-center"
      style="background-image: url('/images/starsbg.png');">
      <!-- Stars will be dynamically added here by the script -->
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue';

// --- Type Definitions ---
interface StarPosition {
  x: number;
  y: number;
  width: number;
  height: number;
}

// Holds all data for a single star instance
interface StarInstance {
  element: HTMLImageElement;
  position: StarPosition;
}

// --- Component State ---
const starContainer = ref<HTMLDivElement | null>(null);

// --- Animation & Layout Configuration ---
const starUrls: string[] = [
  'https://gameui.cashflowcasino.com/images/stars/star0.avif',
  'https://gameui.cashflowcasino.com/images/stars/star1.avif',
  'https://gameui.cashflowcasino.com/images/stars/star2.avif',
  'https://gameui.cashflowcasino.com/images/stars/star3.avif'
];
const numStars: number = 15;
const starSize: number = 50;
const minSpacing: number = 20;

// This runs once the component is mounted to the DOM
onMounted(() => {
  if (!starContainer.value) {
    console.error('Starfield container not found.');
    return;
  }

  const container: HTMLDivElement = starContainer.value;
  const containerWidth = container.offsetWidth;
  const containerHeight = container.offsetHeight;
  const starInstances: StarInstance[] = [];

  // --- Core Functions ---

  /**
  * Checks if two rectangular areas overlap, including a minimum spacing buffer.
  */
  const checkOverlap = (rect1: StarPosition, rect2: StarPosition): boolean => {
    const noOverlap =
      rect1.x > rect2.x + rect2.width + minSpacing ||
      rect1.x + rect1.width + minSpacing < rect2.x ||
      rect1.y > rect2.y + rect2.height + minSpacing ||
      rect1.y + rect1.height + minSpacing < rect2.y;
    return !noOverlap;
  };

  /**
  * Finds a new, non-overlapping position for a given star and applies it.
  */
  const findAndSetNewPosition = (instance: StarInstance) => {
    const otherInstances = starInstances.filter(inst => inst !== instance);
    let newPosition: StarPosition | null = null;
    let isPositionSafe = false;
    let attempts = 0;
    const maxAttempts = 200;

    while (!isPositionSafe && attempts < maxAttempts) {
      attempts++;
      const candidateX = Math.random() * (containerWidth - starSize);
      const candidateY = Math.random() * (containerHeight - starSize);
      const candidatePos: StarPosition = { x: candidateX, y: candidateY, width: starSize, height: starSize };

      if (!otherInstances.some(other => checkOverlap(candidatePos, other.position))) {
        isPositionSafe = true;
        newPosition = candidatePos;
      }
    }

    if (isPositionSafe && newPosition) {
      instance.position = newPosition;
      instance.element.style.left = `${(newPosition.x / containerWidth) * 100}%`;
      instance.element.style.top = `${(newPosition.y / containerHeight) * 100}%`;
    } else {
      console.warn('Could not find a new non-overlapping position. Hiding star for one cycle.');
      instance.element.style.opacity = '0';
    }
  };


  /**
  * Handles the cycling animation for types A and C (grow/shrink, grow-only).
  */
  const animateStarContinuous = (instance: StarInstance, animationName: string) => {
    const runCycle = () => {
      // 1. Find a new position.
      findAndSetNewPosition(instance);

      // 2. Set up the listener that will restart the cycle.
      instance.element.addEventListener('animationend', (event: AnimationEvent) => {
        // Only restart if the correct animation finished.
        if (event.animationName === animationName) {
          setTimeout(runCycle, Math.random() * 4000 + 2000);
        }
      }, { once: true });

      // 3. Reset the animation to force a re-trigger.
      instance.element.style.animation = 'none';
      // This line is crucial. It forces the browser to "reflow" the element,
      // acknowledging that the animation has been removed.
      void instance.element.offsetHeight;

      // 4. Apply the new animation with halved duration.
      const duration = animationName === 'star-type-a-animation'
        ? Math.random() * 3.5 + 4 // Was 7 + 8
        : Math.random() * 2.5 + 3; // Was 5 + 6
      instance.element.style.animation = `${animationName} ${duration}s linear forwards`;
    };
    // Start the very first cycle after a random delay.
    setTimeout(runCycle, Math.random() * 5000);
  };

  /**
  * Handles the multi-step fade/spin animation for intermittent stars (Type B).
  */
  const animateStarTypeB = (instance: StarInstance) => {
    const runAnimationCycle = () => {
      findAndSetNewPosition(instance);

      const star = instance.element;
      star.style.animation = '';
      star.style.transform = 'scale(1) rotate(0deg)';
      star.style.opacity = '0';

      star.style.animation = 'star-type-b-fade-in 0.5s ease-out forwards';

      star.addEventListener('animationend', function onFadeInEnd(event) {
        if (event.animationName !== 'star-type-b-fade-in') return;

        setTimeout(() => {
          star.addEventListener('animationend', function onCycleEnd(event) {
            if (event.animationName !== 'star-type-b-fade-out' && event.animationName !== 'star-type-b-spin-out') return;
            setTimeout(runAnimationCycle, Math.random() * 7000 + 8000);
          }, { once: true });

          if (Math.random() < 0.5) {
            star.style.animation = 'star-type-b-fade-out 0.5s ease-in forwards';
          } else {
            star.style.animation = 'star-type-b-spin-out 1s ease-in-out forwards';
          }
        }, 500);
      }, { once: true });
    };
    setTimeout(runAnimationCycle, Math.random() * 8000);
  };

  // --- Initialization Loop ---
  let typeACStarCount = 0;
  const maxTypeACStars = 2;

  for (let i = 0; i < numStars; i++) {
    let initialPosition: StarPosition | null = null;
    let isPositionSafe = false;
    let attempts = 0;
    const maxAttempts = 200;

    while (!isPositionSafe && attempts < maxAttempts) {
      attempts++;
      const candidateX = Math.random() * (containerWidth - starSize);
      const candidateY = Math.random() * (containerHeight - starSize);
      const candidatePos: StarPosition = { x: candidateX, y: candidateY, width: starSize, height: starSize };

      if (!starInstances.some(inst => checkOverlap(candidatePos, inst.position))) {
        isPositionSafe = true;
        initialPosition = candidatePos;
      }
    }

    if (isPositionSafe && initialPosition) {
      const starElement = document.createElement('img');
      let starTypeIndex = Math.floor(Math.random() * starUrls.length);

      const isTypeACCandidate = starTypeIndex === 0 || starTypeIndex === 3;
      if (isTypeACCandidate && typeACStarCount >= maxTypeACStars) {
        starTypeIndex = Math.random() < 0.5 ? 1 : 2;
      }

      starElement.src = starUrls[starTypeIndex];
      starElement.classList.add('star-image');
      starElement.style.left = `${(initialPosition.x / containerWidth) * 100}%`;
      starElement.style.top = `${(initialPosition.y / containerHeight) * 100}%`;
      starElement.onerror = () => { starElement.style.display = 'none'; };
      container.appendChild(starElement);

      const instance: StarInstance = {
        element: starElement,
        position: initialPosition,
      };
      starInstances.push(instance);

      if (starTypeIndex === 0 || starTypeIndex === 3) {
        typeACStarCount++;
        if (Math.random() < 0.5) {
          animateStarContinuous(instance, 'star-type-c-animation');
        } else {
          animateStarContinuous(instance, 'star-type-a-animation');
        }
      } else {
        animateStarTypeB(instance);
      }
    } else {
      console.warn(`Could not find an initial non-overlapping position for star ${i + 1}.`);
    }
  }
});
</script>

<style>
/* Styles are global, allowing JS to find the keyframes by name. */
.starfield-wrapper {
  width: 100%;
  max-width: 480px;
  height: 100%;
}

.star-image {
  position: absolute;
  width: clamp(25px, 5vw, 50px);
  height: auto;
  transform-origin: center center;
  will-change: transform, opacity;
  opacity: 0;
}

@keyframes star-type-a-animation {
  0% {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }

  60% {
    opacity: 1;
    transform: scale(1.5) rotate(216deg);
  }

  75% {
    opacity: 1;
    transform: scale(1.5) rotate(270deg);
  }

  100% {
    opacity: 0;
    transform: scale(0) rotate(360deg);
  }
}

@keyframes star-type-c-animation {
  0% {
    opacity: 0;
    transform: scale(0.5) rotate(0deg);
  }

  80% {
    opacity: 1;
    transform: scale(2.0) rotate(288deg);
  }

  100% {
    opacity: 0;
    transform: scale(3) rotate(360deg);
  }
}

@keyframes star-type-b-fade-in {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes star-type-b-fade-out {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
  }
}

@keyframes star-type-b-spin-out {
  0% {
    transform: rotate(0deg);
    opacity: 1;
  }

  100% {
    transform: rotate(720deg);
    opacity: 0;
  }
}
</style>
</file>

<file path="./frontend/src/composables/EventManager.ts">
// PATH: frontend/src/composables/EventManager.ts

import { AnimationEventFromServer, BalanceUpdatePayload, ModelChangeEventFromServer } from '@/types/events'


/**
 * Defines all possible events and their payload structures.
 * This ensures type safety across the application for event handling.
 */
export interface Events {
  'balance:update': BalanceUpdatePayload
  settingsModal: boolean
  'xp:gain': BalanceUpdatePayload
  'animation:add': AnimationEventFromServer
  'animation:update': AnimationEventFromServer
  'animation:remove': AnimationEventFromServer
  'animation:clear-by-owner': AnimationEventFromServer
  'animation:clear-all': AnimationEventFromServer
  'user:updated': ModelChangeEventFromServer 
  'wallet:updated': ModelChangeEventFromServer
  'vip:updated': ModelChangeEventFromServer
  hideBottomBar: void
  // Add other events here as needed, for example:
  // 'user:logout': void;
  // 'notification:new': { type: 'success' | 'error'; message: string };
}

/**
 * A generic type for event message callbacks.
 * It ensures that the payload passed to the callback matches the
 * structure defined in the `Events` interface for a given event.
 *
 * @template T - The event name, which must be a key of the `Events` interface.
 */
export type EventMessage<T extends keyof Events> = (payload: Events[T]) => void

// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
const baseEventList: { [key: string]: { call: Function; target: unknown }[] } = {}

/**
 * Defines the contract for the type-safe EventManager service.
 * This service provides methods to manage a global event bus.
 */
export interface IEventManagerService {
  /**
   * Adds a type-safe event listener for the specified event.
   * @param eventName The name of the event to listen for.
   * @param callback The function to execute when the event is emitted.
   * The payload received by the callback is strongly typed based on the event name.
   * @param target The context (e.g., component instance) to which the callback is bound.
   */
  on: <K extends keyof Events>(
    eventName: K,
    callback: (payload: Events[K]) => void,
    target?: unknown
  ) => void

  /**
   * Emits a type-safe event, triggering all registered callbacks for that event.
   * @param eventName The name of the event to emit.
   * @param payload The data to pass to the event listeners, matching the structure defined in `Events`.
   */
  emit: <K extends keyof Events>(eventName: K, payload: Events[K]) => void

  /**
   * Removes event listeners associated with a specific event name and target.
   * @param eventName The name of the event from which to remove listeners.
   * @param target The target object whose listeners for the specified event should be removed.
   */
  off: (eventName: keyof Events, target: unknown) => void

  /**
   * Removes multiple event listeners based on the provided criteria.
   * @param remove Optional criteria for removal (event name or target object).
   */
  removeAllEvent: (remove?: keyof Events | object) => void
}

export function useEventManager(): IEventManagerService {
  const on = <K extends keyof Events>(
    eventName: K,
    callback: (payload: Events[K]) => void,
    target?: unknown
  ) => {
    if (!baseEventList[eventName]) {
      baseEventList[eventName] = []
    }

    const listeners = baseEventList[eventName]!

    if (
      listeners.findIndex(
        (element) => element.target === target && element.call === callback
      ) === -1
    ) {
      listeners.push({ call: callback, target })
    } else {
      console.warn(
        `EventManager: Listener for event "${eventName}" and target already exists.`
      )
    }
  }

  const emit = <K extends keyof Events>(eventName: K, payload: Events[K]) => {
    if (baseEventList[eventName]) {
      const listeners = [...baseEventList[eventName]!]
      listeners.forEach((element) => {
        try {
          ;(element.call as (payload: Events[K]) => void).call(
            element.target,
            payload
          )
        } catch (error) {
          console.error(
            `EventManager: Error in event listener for "${eventName}":`,
            error
          )
        }
      })
    }
  }

  const off = (eventName: keyof Events, target: unknown) => {
    const listeners = baseEventList[eventName]
    if (!listeners) return

    baseEventList[eventName] = listeners.filter(
      (element) => element.target !== target
    )

    if (baseEventList[eventName]?.length === 0) {
      delete baseEventList[eventName]
    }
  }

  const removeAllEvent = (remove?: keyof Events | object | undefined) => {
    if (remove == null) {
      for (const key in baseEventList) {
        delete baseEventList[key as keyof Events]
      }
    } else if (typeof remove === 'string') {
      delete baseEventList[remove]
    } else if (typeof remove === 'object') {
      for (const eventName in baseEventList) {
        const key = eventName as keyof Events
        const listeners = baseEventList[key]
        if (listeners) {
          baseEventList[key] = listeners.filter(
            (element) => element.target !== remove
          )
          if (baseEventList[key]?.length === 0) {
            delete baseEventList[key]
          }
        }
      }
    }
  }

  return {
    on,
    emit,
    off,
    removeAllEvent,
  }
}
</file>

<file path="./frontend/src/composables/useAnimationLayer.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
// /tmp/hono-open-api-starter/frontend/src/composables/useAnimationLayer.ts
import { ref, shallowRef, type Component } from 'vue'
import { useEventManager } from './EventManager'
import SpriteAnimator from '@/components/SpriteAnimator.vue'

// --- Interfaces ---

interface SpriteAnimatorProps {
    animationData: any
    imageUrl: string
    width: number
    height: number
    frameRate?: number
    initialDelayMax?: number
    loopDelay?: number
}

interface AnimationPosition {
    top: string
    left: string
    transform?: string
    zIndex?: number
}

export interface AnimationInstance {
    id: string // Unique ID for this animation instance
    ownerId?: string // Optional: ID of the component that created it
    component: Component
    props: SpriteAnimatorProps
    style: AnimationPosition
}

// --- Singleton State ---
const animations = ref<AnimationInstance[]>([])
const eventManager = useEventManager()

// --- Event Handlers ---

/**
 * Adds a new animation to the layer.
 * The config requires a unique `id`.
 */
const addAnimation = (config: Omit<AnimationInstance, 'component'>) => {
    const existing = animations.value.find((a) => a.id === config.id)
    if (existing) {
        console.warn(
            `Animation with ID ${config.id} already exists. Use 'animation:update' instead.`
        )
        return
    }
    animations.value.push({
        ...config,
        component: shallowRef(SpriteAnimator),
    })
}

/**
 * Updates an existing animation's properties, like its position.
 */
const updateAnimation = (
    id: string,
    partialConfig: Partial<Omit<AnimationInstance, 'id' | 'component'>>
) => {
    const anim = animations.value.find((a) => a.id === id)
    if (anim) {
        // Merge new style and props with existing ones
        if (partialConfig.style) {
            anim.style = { ...anim.style, ...partialConfig.style }
        }
        if (partialConfig.props) {
            anim.props = { ...anim.props, ...partialConfig.props }
        }
        // Update other top-level properties if provided
        if (partialConfig.ownerId) {
            anim.ownerId = partialConfig.ownerId
        }
    } else {
        console.warn(`Animation with ID ${id} not found for update.`)
    }
}

/**
 * Removes a specific animation by its unique ID.
 */
const removeAnimation = (id: string) => {
    animations.value = animations.value.filter((a) => a.id !== id)
}

/**
 * Removes all animations created by a specific owner.
 * Useful for cleanup when a component is unmounted.
 */
const clearByOwner = (ownerId: string) => {
    animations.value = animations.value.filter((a) => a.ownerId !== ownerId)
}

/**
 * Removes all animations from the layer.
 */
const clearAll = () => {
    animations.value = []
}

// --- Singleton Setup ---
// Registers listeners on the global event bus. This code runs only once.
eventManager.on('animation:add', addAnimation as (...args: unknown[]) => void)
eventManager.on(
    'animation:update',
    updateAnimation as (...args: unknown[]) => void
)
eventManager.on(
    'animation:remove',
    removeAnimation as (...args: unknown[]) => void
)
eventManager.on(
    'animation:clear-by-owner',
    clearByOwner as (...args: unknown[]) => void
)
eventManager.on('animation:clear-all', clearAll as (...args: unknown[]) => void)

// --- Composable ---
/**
 * Provides access to the global animation layer state.
 * @returns The reactive list of animations to be rendered.
 */
export function useAnimationLayer() {
    return {
        animations,
    }
}
</file>

<file path="./frontend/src/composables/useImagePreloader.ts">
import { ref, computed, type Ref } from 'vue'

/**
 * Unified preloader for critical above-the-fold assets.
 * Supports images (with decode()), JSON (e.g., Lottie files), and generic fetches.
 * Exposes progress, state, and a waitForReady() promise to gate initial render.
 *
 * Usage:
 *  const preloader = useImagePreloader()
 *  preloader.initialize({
 *    images: [{ url: '/img/hero.webp', critical: true }],
 *    json: [{ url: '/anim/intro.json', critical: true }],
 *  })
 *  await preloader.waitForReady()
 */
export type PreloadState = 'idle' | 'loading' | 'ready' | 'error'

export type ImageAsset = {
  url: string
  critical?: boolean
  timeoutMs?: number
}

export type JsonAsset = {
  url: string
  critical?: boolean
  timeoutMs?: number
}

export type GenericAsset = {
  url: string
  critical?: boolean
  requestInit?: RequestInit
  timeoutMs?: number
}

export type PreloadManifest = {
  images?: ImageAsset[]
  json?: JsonAsset[] // Lottie JSON or any JSON required before first paint
  fetches?: GenericAsset[] // any HEAD/GET you want to warm
}

/** Internal helper: promise with timeout */
function withTimeout<T>(p: Promise<T>, timeoutMs: number, label: string): Promise<T> {
  if (!timeoutMs || timeoutMs <= 0) return p
  return new Promise<T>((resolve, reject) => {
    const startedAt = performance.now?.() ?? Date.now()
    const to = setTimeout(() => {
      const dur = (performance.now?.() ?? Date.now()) - startedAt
      console.warn('[preloader] timeout', { label, timeoutMs, elapsedMs: Math.round(dur) })
      reject(new Error(`Timeout ${timeoutMs}ms while loading ${label}`))
    }, timeoutMs)
    p.then((v) => {
      clearTimeout(to)
      const dur = (performance.now?.() ?? Date.now()) - startedAt
      console.debug('[preloader] completed', { label, elapsedMs: Math.round(dur) })
      resolve(v)
    }).catch((e) => {
      clearTimeout(to)
      const dur = (performance.now?.() ?? Date.now()) - startedAt
      console.error('[preloader] failed', { label, elapsedMs: Math.round(dur), error: e instanceof Error ? e.message : String(e) })
      reject(e)
    })
  })
}

/** Preload and decode an image */
async function loadAndDecodeImage(url: string): Promise<void> {
  const t0 = performance.now?.() ?? Date.now()
  console.debug('[preloader:image] start', { url })
  await new Promise<void>((resolve, reject) => {
    const img = new Image()
    img.decoding = 'async'
    ;(img as unknown as Record<string, unknown>).fetchPriority = 'high'
    img.src = url
    img.onload = () => resolve()
    img.onerror = () => reject(new Error(`Failed to load image: ${url}`))
  })
  try {
    const img = new Image()
    img.src = url
    const maybeDecodable = img as HTMLImageElement & Partial<{ decode: () => Promise<void> }>
    if (typeof maybeDecodable.decode === 'function') {
      await maybeDecodable.decode()
      const dur = (performance.now?.() ?? Date.now()) - t0
      console.debug('[preloader:image] decoded', { url, elapsedMs: Math.round(dur) })
    } else {
      const dur = (performance.now?.() ?? Date.now()) - t0
      console.debug('[preloader:image] loaded-no-decode', { url, elapsedMs: Math.round(dur) })
    }
  } catch (e) {
    const dur = (performance.now?.() ?? Date.now()) - t0
    console.warn('[preloader:image] decode-unsupported', { url, elapsedMs: Math.round(dur), info: e instanceof Error ? e.message : String(e) })
  }
}

/** Fetch and parse JSON */
async function fetchJson(url: string): Promise<unknown> {
  const t0 = performance.now?.() ?? Date.now()
  console.debug('[preloader:json] start', { url })
  const res = await fetch(url, { credentials: 'omit', cache: 'force-cache' })
  if (!res.ok) {
    const dur = (performance.now?.() ?? Date.now()) - t0
    console.error('[preloader:json] http-error', { url, status: res.status, elapsedMs: Math.round(dur) })
    throw new Error(`Failed to fetch JSON ${url}: ${res.status}`)
  }
  const data = await res.json()
  const dur = (performance.now?.() ?? Date.now()) - t0
  console.debug('[preloader:json] done', { url, elapsedMs: Math.round(dur), bytes: (res.headers.get('content-length') ?? 'unknown') })
  return data
}

/** Generic warm fetch (e.g., HEAD) */
async function warmFetch(url: string, init?: RequestInit): Promise<void> {
  const t0 = performance.now?.() ?? Date.now()
  console.debug('[preloader:fetch] start', { url, method: init?.method ?? 'GET' })
  const res = await fetch(url, init ?? { method: 'GET', credentials: 'omit', cache: 'force-cache' })
  if (!res.ok) {
    const dur = (performance.now?.() ?? Date.now()) - t0
    console.error('[preloader:fetch] http-error', { url, status: res.status, elapsedMs: Math.round(dur) })
    throw new Error(`Failed to warm fetch ${url}: ${res.status}`)
  }
  const dur = (performance.now?.() ?? Date.now()) - t0
  console.debug('[preloader:fetch] done', { url, elapsedMs: Math.round(dur) })
}

export function useImagePreloader() {
  const state = ref<PreloadState>('idle')
  const progress = ref(0) // 0..100
  const errors = ref<{ url: string; type: 'image' | 'json' | 'fetch'; err: string; critical: boolean }[]>([])
  const loaded = ref<number>(0)
  const total = ref<number>(0)
  console.info('[preloader] created')

  const loadedImages: Ref<string[]> = ref([])
  const failedImages: Ref<string[]> = ref([])

  let readyResolver: ((value: void | PromiseLike<void>) => void) | null = null
  let readyRejecter: ((reason?: unknown) => void) | null = null
  let readyPromise: Promise<void> | null = null
  let initStartedAt = 0

  function resetReadyPromise() {
    readyPromise = new Promise<void>((resolve, reject) => {
      readyResolver = resolve
      readyRejecter = reject
    })
    console.debug('[preloader] resetReadyPromise')
  }

  function updateProgress() {
    if (total.value === 0) {
      progress.value = 100
      console.debug('[preloader] progress', { loaded: loaded.value, total: total.value, pct: progress.value })
      return
    }
    const pct = Math.min(100, Math.round((loaded.value / total.value) * 100))
    progress.value = pct
    console.debug('[preloader] progress', { loaded: loaded.value, total: total.value, pct })
  }

  function markLoaded() {
    loaded.value += 1
    console.debug('[preloader] markLoaded', { loaded: loaded.value, total: total.value })
    updateProgress()
  }

  function markFailed(item: { url: string; type: 'image' | 'json' | 'fetch'; critical: boolean }, err: unknown) {
    const entry = { url: item.url, type: item.type, err: err instanceof Error ? err.message : String(err), critical: item.critical }
    errors.value.push(entry)
    console.warn('[preloader] markFailed', entry)
    if (item.type === 'image') {
      failedImages.value.push(item.url)
    }
    markLoaded()
  }

  async function initialize(manifest: PreloadManifest): Promise<void> {
    initStartedAt = performance.now?.() ?? Date.now()
    console.info('[preloader] initialize', {
      images: manifest.images?.length ?? 0,
      json: manifest.json?.length ?? 0,
      fetches: manifest.fetches?.length ?? 0,
    })
    state.value = 'loading'
    errors.value = []
    loaded.value = 0

    const imgList = manifest.images ?? []
    const jsonList = manifest.json ?? []
    const fetchList = manifest.fetches ?? []

    total.value = imgList.length + jsonList.length + fetchList.length
    updateProgress()
    resetReadyPromise()
    console.debug('[preloader] totals', { total: total.value })

    const tasks: Promise<void>[] = []

    // Images
    for (const img of imgList) {
      const task = withTimeout(loadAndDecodeImage(img.url).then(() => {
        loadedImages.value.push(img.url)
        markLoaded()
      }).catch((e) => {
        markFailed({ url: img.url, type: 'image', critical: !!img.critical }, e)
      }), img.timeoutMs ?? 10000, `image ${img.url}`)
      tasks.push(task)
    }

    // JSON (e.g., Lottie)
    for (const j of jsonList) {
      const task = withTimeout(fetchJson(j.url).then(() => {
        markLoaded()
      }).catch((e) => {
        markFailed({ url: j.url, type: 'json', critical: !!j.critical }, e)
      }), j.timeoutMs ?? 10000, `json ${j.url}`)
      tasks.push(task)
    }

    // Generic fetch warmups
    for (const f of fetchList) {
      const task = withTimeout(warmFetch(f.url, f.requestInit).then(() => {
        markLoaded()
      }).catch((e) => {
        markFailed({ url: f.url, type: 'fetch', critical: !!f.critical }, e)
      }), f.timeoutMs ?? 8000, `fetch ${f.url}`)
      tasks.push(task)
    }

    try {
      await Promise.all(tasks)
      const elapsedMs = Math.round((performance.now?.() ?? Date.now()) - initStartedAt)
      // If any critical failed, surface error
      const hasCriticalFailure = errors.value.some((e) => e.critical)
      if (hasCriticalFailure) {
        state.value = 'error'
        console.error('[preloader] ready=error (critical failures)', { errors: errors.value, elapsedMs })
        readyRejecter?.(new Error('Critical preload failure'))
      } else {
        state.value = 'ready'
        console.info('[preloader] ready', { loaded: loaded.value, total: total.value, elapsedMs })
        readyResolver?.()
      }
    } catch (e) {
      state.value = 'error'
      console.error('[preloader] initialize-caught', { error: e instanceof Error ? e.message : String(e) })
      readyRejecter?.(e)
    }
  }

  async function waitForReady(): Promise<void> {
    if (state.value === 'ready') {
      console.debug('[preloader] waitForReady already ready')
      return
    }
    if (!readyPromise) {
      console.debug('[preloader] waitForReady creating promise')
      resetReadyPromise()
    }
    return readyPromise as Promise<void>
  }

  const imagesLoaded = computed(() => state.value === 'ready' && (failedImages.value.length === 0 || !errors.value.some(e => e.type === 'image' && e.critical)))

  return {
    // State
    state,
    progress,
    errors,
    loaded,
    total,
    // Compatibility with previous API
    imagesLoaded,
    loadedImages,
    failedImages,
    // Controls
    initialize,
    waitForReady,
  }
}
</file>

<file path="./frontend/src/composables/useRealtimeUpdates.ts">
import { useAuthStore } from '@/stores/auth.store'
import { useEventManager } from './EventManager'
import { onUnmounted } from 'vue'
import type { User } from '@/sdk/generated'

export function useRealtimeUpdates() {
  const authStore = useAuthStore()
  const eventManager = useEventManager()

  const setupEventListeners = (): (() => void) => {
    const updateUser = (userData: unknown): void => {
      if (!userData || typeof userData !== 'object' || !authStore.currentUser) return
      
      // Create a new user object with updated properties
      const updatedUser = { ...authStore.currentUser } as User
      const userDataObj = userData as Partial<User>
      
      // Only update existing properties that are allowed
      Object.entries(userDataObj).forEach(([key, value]) => {
        if (key in updatedUser && value !== undefined) {
          // Use type assertion to handle the index signature
          const userKey = key as keyof User
          updatedUser[userKey] = value as never
        }
      })
      
      authStore.currentUser = updatedUser
    }

    const updateWallet = (walletData: unknown): void => {
      // Wallet updates will be handled by the backend through the user object
      if (walletData && typeof walletData === 'object') {
        updateUser({ wallet: walletData })
      }
    }

    const updateVipInfo = (vipData: unknown): void => {
      // VIP info updates will be handled by the backend through the user object
      if (vipData && typeof vipData === 'object') {
        updateUser({ vipInfo: vipData })
      }
    }

    // Register event listeners
    eventManager.on('user:updated', updateUser)
    eventManager.on('wallet:updated', updateWallet)
    eventManager.on('vip:updated', updateVipInfo)

    // Return cleanup function
    return (): void => {
      eventManager.off('user:updated', updateUser)
      eventManager.off('wallet:updated', updateWallet)
      eventManager.off('vip:updated', updateVipInfo)
    }
  }

  onUnmounted(() => {
    setupEventListeners()()
  })

  return {
    setupEventListeners
  }
}
</file>

<file path="./frontend/src/composables/useScreen.ts">
import { onMounted, onUnmounted, ref } from 'vue'

export function useScreen() {
  const isMobile = ref(window.innerWidth <= 430)

  const onResize = () => {
    isMobile.value = window.innerWidth <= 430
  }

  onMounted(() => {
    window.addEventListener('resize', onResize)
  })

  onUnmounted(() => {
    window.removeEventListener('resize', onResize)
  })

  return { isMobile }
}
</file>

<file path="./frontend/src/lib/utils.d.ts">
import { type ClassValue } from 'clsx';
export declare function cn(...inputs: ClassValue[]): string;
</file>

<file path="./frontend/src/lib/utils.ts">
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="./frontend/src/router/index.ts">
import { useAuthStore } from '@/stores/auth.store'
import { useAppStore } from '@/stores/app.store'
import { createRouter, createWebHistory } from 'vue-router'
import HomeView from '../views/HomeView.vue'
import LoginView from '../views/LoginView.vue'
import RtgGame from '../views/RtgGame.vue'

const router = createRouter({
    history: createWebHistory(import.meta.env.BASE_URL),
    routes: [
        {
            path: '/',
            name: 'home',
            component: HomeView,
            meta: { requiresAuth: true },
        },
        {
            path: '/about',
            name: 'about',
            component: () => import('../views/AboutView.vue'),
            meta: { requiresAuth: true },
        },
        {
            path: '/login',
            name: 'login',
            component: LoginView,
        },
        {
            path: '/redtiger',
            name: 'rtgGame',
            component: RtgGame,
        },
    ],
})

router.beforeEach(async (_to, _from, next) => {
    const authStore = useAuthStore()
    const appStore = useAppStore()

    // Wait for auth initialization readiness to avoid redirect races
    if (!authStore.authReady) {
        await new Promise<void>((resolve) => {
            const id = setInterval(() => {
                if (authStore.authReady) {
                    clearInterval(id)
                    resolve()
                }
            }, 10)
        })
    }

    // Ensure loader is not masking the login screen
    if (_to.path === '/login') {
        appStore.hideLoading()
    }

    if (
        !authStore.isAuthenticated &&
        _to.path !== '/login' &&
        _to.path !== '/redtiger'
    ) {
        next('/login')
    } else {
        next()
    }
})

export default router
</file>

<file path="./frontend/src/router/interface.ts">
// export interface Category {
//     image: string
//     pictures: string
//     game_count: string | number
//     name: string
//     slug: string
//     games: Array<Search>
//     page_no: number
// }

// export interface Search {
//     id: number
//     name: string
//     image: string
//     provider: string
//     is_demo: boolean
// }

// export interface GameItem {
//     id: number
//     name: string
//     image: string
//     provider: string
//     producer: string
//     is_demo: boolean
// }

// export interface GameEnterBody {
//     id: string | Array<string>
//     demo: boolean
// }

// export interface GameUserBody {
//     game_categories_slug: string
//     page: number
//     limit: number
// }

// export interface GameEnterResponse {
//     method: string
//     parames: string
//     provider: string
//     reserve: string
//     weburl: string
// }

// export interface GameHistoryItem {
//     name : string,
//     created_at : number,
//     amount : string | number,
//     multiplier : string | number,
//     bet_id : string | number,
//     status : string | number,
//     profit : number,
// }

// export interface GameBigWinItem {
//     game_id: string
//     game_name: string
//     game_icon: string
//     user_name: string
//     user_vip_group: number
//     user_vip_level: number
//     bet_amount: string
//     multiplier: string
//     win_amount: string
//     time: number
// }

// export interface GameBigWinData {
//     high_rollers: Array<GameBigWinItem>
//     lucky_bets: Array<GameBigWinItem>
// }

// export interface GameHistoryResponse {
//     total_pages: number
//     record: Array<GameHistoryItem>
// }

// export interface GameSearchResponse {
//     list: Array<Search>
//     total: number
// }

// export type GetGameFavoriteListResponse = {
//     code: number
//     data: Array<number | string>
//     message: string
// }

// export type GetGameBigWinResponse = {
//     code: number
//     data: GameBigWinData
//     message: string
// }

// export type GetGameCategoriesResponse = {
//     code: number
//     data: Array<Category>
//     messsage: string
// }

// export type GetGameSearchResponse = {
//     code: number
//     data: GameSearchResponse
//     message: string
// }

// export type GetGameEnterResponse = {
//     code: number
//     data: GameEnterResponse
//     message: string
// }

// export type GetGameHistoryResponse = {
//     code: number
//     data: GameHistoryResponse
//     message: string
// }
</file>

<file path="./frontend/src/sdk/generated/client/client.ts">
import type { AxiosError, RawAxiosRequestHeaders } from "axios";
import axios from "axios";

import type { Client, Config } from "./types";
import {
  buildUrl,
  createConfig,
  mergeConfigs,
  mergeHeaders,
  setAuthParams,
} from "./utils";

export const createClient = (config: Config = {}): Client => {
  let _config = mergeConfigs(createConfig(), config);

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { auth, ...configWithoutAuth } = _config;
  const instance = axios.create(configWithoutAuth);
  // Ensure cookies are sent with all requests (needed for cookie-based auth)
  // This propagates to request calls below unless explicitly overridden.
  instance.defaults.withCredentials = true;

  const getConfig = (): Config => ({ ..._config });

  const setConfig = (config: Config): Config => {
    _config = mergeConfigs(_config, config);
    instance.defaults = {
      ...instance.defaults,
      ..._config,
      // @ts-expect-error - axios types for defaults.headers don't match our merged header shape
      headers: mergeHeaders(instance.defaults.headers, _config.headers),
    };
    // Preserve withCredentials default even after updating defaults
    // unless user explicitly sets it differently in _config.
    if (typeof instance.defaults.withCredentials === "undefined") {
      instance.defaults.withCredentials = true;
    }
    return getConfig();
  };

  // @ts-expect-error
  const request: Client["request"] = async (options) => {
    const opts = {
      ..._config,
      ...options,
      axios: options.axios ?? _config.axios ?? instance,
      headers: mergeHeaders(_config.headers, options.headers),
    };

    if (opts.security) {
      await setAuthParams({
        ...opts,
        security: opts.security,
      });
    }

    if (opts.requestValidator) {
      await opts.requestValidator(opts);
    }

    if (opts.body && opts.bodySerializer) {
      opts.body = opts.bodySerializer(opts.body);
    }

    const url = buildUrl(opts);

    try {
      // assign Axios here for consistency with fetch
      const _axios = opts.axios!;
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { auth, ...optsWithoutAuth } = opts;
      const response = await _axios({
        ...optsWithoutAuth,
        baseURL: opts.baseURL as string,
        data: opts.body,
        headers: opts.headers as RawAxiosRequestHeaders,
        // let `paramsSerializer()` handle query params if it exists
        params: opts.paramsSerializer ? opts.query : undefined,
        url,
      });

      let { data } = response;

      if (opts.responseType === "json") {
        if (opts.responseValidator) {
          await opts.responseValidator(data);
        }

        if (opts.responseTransformer) {
          data = await opts.responseTransformer(data);
        }
      }

      return {
        ...response,
        data: data ?? {},
      };
    } catch (error) {
      const e = error as AxiosError;
      if (opts.throwOnError) {
        throw e;
      }
      // @ts-expect-error - attach parsed error payload for downstream handling
      e.error = e.response?.data ?? {};
      return e;
    }
  };

  return {
    buildUrl,
    delete: (options) => request({ ...options, method: "DELETE" }),
    get: (options) => request({ ...options, method: "GET" }),
    getConfig,
    head: (options) => request({ ...options, method: "HEAD" }),
    instance,
    options: (options) => request({ ...options, method: "OPTIONS" }),
    patch: (options) => request({ ...options, method: "PATCH" }),
    post: (options) => request({ ...options, method: "POST" }),
    put: (options) => request({ ...options, method: "PUT" }),
    request,
    setConfig,
  } as Client;
};
</file>

<file path="./frontend/src/sdk/generated/client/index.ts">
export type { Auth } from "../core/auth";
export type { QuerySerializerOptions } from "../core/bodySerializer";
export {
  formDataBodySerializer,
  jsonBodySerializer,
  urlSearchParamsBodySerializer,
} from "../core/bodySerializer";
export { buildClientParams } from "../core/params";
export { createClient } from "./client";
export type {
  Client,
  ClientOptions,
  Config,
  CreateClientConfig,
  Options,
  OptionsLegacyParser,
  RequestOptions,
  RequestResult,
  TDataShape,
} from "./types";
export { createConfig } from "./utils";
</file>

<file path="./frontend/src/sdk/generated/client/types.ts">
import type {
  AxiosError,
  AxiosInstance,
  AxiosRequestHeaders,
  AxiosResponse,
  AxiosStatic,
  CreateAxiosDefaults,
} from "axios";

import type { Auth } from "../core/auth";
import type { Client as CoreClient, Config as CoreConfig } from "../core/types";

export interface Config<T extends ClientOptions = ClientOptions>
  extends Omit<CreateAxiosDefaults, "auth" | "baseURL" | "headers" | "method">,
    CoreConfig {
  /**
   * Axios implementation. You can use this option to provide a custom
   * Axios instance.
   *
   * @default axios
   */
  axios?: AxiosStatic;
  /**
   * Base URL for all requests made by this client.
   */
  baseURL?: T["baseURL"];
  /**
   * An object containing any HTTP headers that you want to pre-populate your
   * `Headers` object with.
   *
   * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}
   */
  headers?:
    | AxiosRequestHeaders
    | Record<
        string,
        | string
        | number
        | boolean
        | (string | number | boolean)[]
        | null
        | undefined
        | unknown
      >;
  /**
   * Throw an error instead of returning it in the response?
   *
   * @default false
   */
  throwOnError?: T["throwOnError"];
}

export interface RequestOptions<
  ThrowOnError extends boolean = boolean,
  Url extends string = string,
> extends Config<{
    throwOnError: ThrowOnError;
  }> {
  /**
   * Any body that you want to add to your request.
   *
   * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}
   */
  body?: unknown;
  path?: Record<string, unknown>;
  query?: Record<string, unknown>;
  /**
   * Security mechanism(s) to use for the request.
   */
  security?: ReadonlyArray<Auth>;
  url: Url;
}

export type RequestResult<
  TData = unknown,
  TError = unknown,
  ThrowOnError extends boolean = boolean,
> = ThrowOnError extends true
  ? Promise<
      AxiosResponse<
        TData extends Record<string, unknown> ? TData[keyof TData] : TData
      >
    >
  : Promise<
      | (AxiosResponse<
          TData extends Record<string, unknown> ? TData[keyof TData] : TData
        > & { error: undefined })
      | (AxiosError<
          TError extends Record<string, unknown> ? TError[keyof TError] : TError
        > & {
          data: undefined;
          error: TError extends Record<string, unknown>
            ? TError[keyof TError]
            : TError;
        })
    >;

export interface ClientOptions {
  baseURL?: string;
  throwOnError?: boolean;
}

type MethodFn = <
  TData = unknown,
  TError = unknown,
  ThrowOnError extends boolean = false,
>(
  options: Omit<RequestOptions<ThrowOnError>, "method">,
) => RequestResult<TData, TError, ThrowOnError>;

type RequestFn = <
  TData = unknown,
  TError = unknown,
  ThrowOnError extends boolean = false,
>(
  options: Omit<RequestOptions<ThrowOnError>, "method"> &
    Pick<Required<RequestOptions<ThrowOnError>>, "method">,
) => RequestResult<TData, TError, ThrowOnError>;

type BuildUrlFn = <
  TData extends {
    body?: unknown;
    path?: Record<string, unknown>;
    query?: Record<string, unknown>;
    url: string;
  },
>(
  options: Pick<TData, "url"> & Omit<Options<TData>, "axios">,
) => string;

export type Client = CoreClient<RequestFn, Config, MethodFn, BuildUrlFn> & {
  instance: AxiosInstance;
};

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 *
 * You may want to initialize your client this way instead of calling
 * `setConfig()`. This is useful for example if you're using Next.js
 * to ensure your client always has the correct values.
 */
export type CreateClientConfig<T extends ClientOptions = ClientOptions> = (
  override?: Config<ClientOptions & T>,
) => Config<Required<ClientOptions> & T>;

export interface TDataShape {
  body?: unknown;
  headers?: unknown;
  path?: unknown;
  query?: unknown;
  url: string;
}

type OmitKeys<T, K> = Pick<T, Exclude<keyof T, K>>;

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = OmitKeys<RequestOptions<ThrowOnError>, "body" | "path" | "query" | "url"> &
  Omit<TData, "url">;

export type OptionsLegacyParser<
  TData = unknown,
  ThrowOnError extends boolean = boolean,
> = TData extends { body?: any }
  ? TData extends { headers?: any }
    ? OmitKeys<RequestOptions<ThrowOnError>, "body" | "headers" | "url"> & TData
    : OmitKeys<RequestOptions<ThrowOnError>, "body" | "url"> &
        TData &
        Pick<RequestOptions<ThrowOnError>, "headers">
  : TData extends { headers?: any }
    ? OmitKeys<RequestOptions<ThrowOnError>, "headers" | "url"> &
        TData &
        Pick<RequestOptions<ThrowOnError>, "body">
    : OmitKeys<RequestOptions<ThrowOnError>, "url"> & TData;
</file>

<file path="./frontend/src/sdk/generated/client/utils.ts">
import { getAuthToken } from "../core/auth";
import type {
  QuerySerializer,
  QuerySerializerOptions,
} from "../core/bodySerializer";
import type { ArraySeparatorStyle } from "../core/pathSerializer";
import {
  serializeArrayParam,
  serializeObjectParam,
  serializePrimitiveParam,
} from "../core/pathSerializer";
import type { Client, ClientOptions, Config, RequestOptions } from "./types";

interface PathSerializer {
  path: Record<string, unknown>;
  url: string;
}

const PATH_PARAM_RE = /\{[^{}]+\}/g;

const defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {
  let url = _url;
  const matches = _url.match(PATH_PARAM_RE);
  if (matches) {
    for (const match of matches) {
      let explode = false;
      let name = match.substring(1, match.length - 1);
      let style: ArraySeparatorStyle = "simple";

      if (name.endsWith("*")) {
        explode = true;
        name = name.substring(0, name.length - 1);
      }

      if (name.startsWith(".")) {
        name = name.substring(1);
        style = "label";
      } else if (name.startsWith(";")) {
        name = name.substring(1);
        style = "matrix";
      }

      const value = path[name];

      if (value === undefined || value === null) {
        continue;
      }

      if (Array.isArray(value)) {
        url = url.replace(
          match,
          serializeArrayParam({ explode, name, style, value }),
        );
        continue;
      }

      if (typeof value === "object") {
        url = url.replace(
          match,
          serializeObjectParam({
            explode,
            name,
            style,
            value: value as Record<string, unknown>,
            valueOnly: true,
          }),
        );
        continue;
      }

      if (style === "matrix") {
        url = url.replace(
          match,
          `;${serializePrimitiveParam({
            name,
            value: value as string,
          })}`,
        );
        continue;
      }

      const replaceValue = encodeURIComponent(
        style === "label" ? `.${value as string}` : (value as string),
      );
      url = url.replace(match, replaceValue);
    }
  }
  return url;
};

export const createQuerySerializer = <T = unknown>({
  allowReserved,
  array,
  object,
}: QuerySerializerOptions = {}) => {
  const querySerializer = (queryParams: T) => {
    const search: string[] = [];
    if (queryParams && typeof queryParams === "object") {
      for (const name in queryParams) {
        const value = queryParams[name];

        if (value === undefined || value === null) {
          continue;
        }

        if (Array.isArray(value)) {
          const serializedArray = serializeArrayParam({
            allowReserved,
            explode: true,
            name,
            style: "form",
            value,
            ...array,
          });
          if (serializedArray) search.push(serializedArray);
        } else if (typeof value === "object") {
          const serializedObject = serializeObjectParam({
            allowReserved,
            explode: true,
            name,
            style: "deepObject",
            value: value as Record<string, unknown>,
            ...object,
          });
          if (serializedObject) search.push(serializedObject);
        } else {
          const serializedPrimitive = serializePrimitiveParam({
            allowReserved,
            name,
            value: value as string,
          });
          if (serializedPrimitive) search.push(serializedPrimitive);
        }
      }
    }
    return search.join("&");
  };
  return querySerializer;
};

export const setAuthParams = async ({
  security,
  ...options
}: Pick<Required<RequestOptions>, "security"> &
  Pick<RequestOptions, "auth" | "query"> & {
    headers: Record<any, unknown>;
  }) => {
  for (const auth of security) {
    const token = await getAuthToken(auth, options.auth);

    if (!token) {
      continue;
    }

    const name = auth.name ?? "Authorization";

    switch (auth.in) {
      case "query":
        if (!options.query) {
          options.query = {};
        }
        options.query[name] = token;
        break;
      case "cookie": {
        const value = `${name}=${token}`;
        if ("Cookie" in options.headers && options.headers["Cookie"]) {
          options.headers["Cookie"] = `${options.headers["Cookie"]}; ${value}`;
        } else {
          options.headers["Cookie"] = value;
        }
        break;
      }
      case "header":
      default:
        options.headers[name] = token;
        break;
    }

    return;
  }
};

export const buildUrl: Client["buildUrl"] = (options) => {
  const url = getUrl({
    path: options.path,
    // let `paramsSerializer()` handle query params if it exists
    query: !options.paramsSerializer ? options.query : undefined,
    querySerializer:
      typeof options.querySerializer === "function"
        ? options.querySerializer
        : createQuerySerializer(options.querySerializer),
    url: options.url,
  });
  return url;
};

export const getUrl = ({
  path,
  query,
  querySerializer,
  url: _url,
}: {
  path?: Record<string, unknown>;
  query?: Record<string, unknown>;
  querySerializer: QuerySerializer;
  url: string;
}) => {
  const pathUrl = _url.startsWith("/") ? _url : `/${_url}`;
  let url = pathUrl;
  if (path) {
    url = defaultPathSerializer({ path, url });
  }
  let search = query ? querySerializer(query) : "";
  if (search.startsWith("?")) {
    search = search.substring(1);
  }
  if (search) {
    url += `?${search}`;
  }
  return url;
};

export const mergeConfigs = (a: Config, b: Config): Config => {
  const config = { ...a, ...b };
  config.headers = mergeHeaders(a.headers, b.headers);
  return config;
};

/**
 * Special Axios headers keywords allowing to set headers by request method.
 */
export const axiosHeadersKeywords = [
  "common",
  "delete",
  "get",
  "head",
  "patch",
  "post",
  "put",
] as const;

export const mergeHeaders = (
  ...headers: Array<Required<Config>["headers"] | undefined>
): Record<any, unknown> => {
  const mergedHeaders: Record<any, unknown> = {};
  for (const header of headers) {
    if (!header || typeof header !== "object") {
      continue;
    }

    const iterator = Object.entries(header);

    for (const [key, value] of iterator) {
      if (
        axiosHeadersKeywords.includes(
          key as (typeof axiosHeadersKeywords)[number],
        ) &&
        typeof value === "object"
      ) {
        mergedHeaders[key] = {
          ...(mergedHeaders[key] as Record<any, unknown>),
          ...value,
        };
      } else if (value === null) {
        delete mergedHeaders[key];
      } else if (Array.isArray(value)) {
        for (const v of value) {
          // @ts-expect-error
          mergedHeaders[key] = [...(mergedHeaders[key] ?? []), v as string];
        }
      } else if (value !== undefined) {
        // assume object headers are meant to be JSON stringified, i.e. their
        // content value in OpenAPI specification is 'application/json'
        mergedHeaders[key] =
          typeof value === "object" ? JSON.stringify(value) : (value as string);
      }
    }
  }
  return mergedHeaders;
};

export const createConfig = <T extends ClientOptions = ClientOptions>(
  override: Config<Omit<ClientOptions, keyof T> & T> = {},
): Config<Omit<ClientOptions, keyof T> & T> => ({
  ...override,
});
</file>

<file path="./frontend/src/sdk/generated/core/auth.ts">
export type AuthToken = string | undefined;

export interface Auth {
  /**
   * Which part of the request do we use to send the auth?
   *
   * @default 'header'
   */
  in?: "header" | "query" | "cookie";
  /**
   * Header or query parameter name.
   *
   * @default 'Authorization'
   */
  name?: string;
  scheme?: "basic" | "bearer";
  type: "apiKey" | "http";
}

export const getAuthToken = async (
  auth: Auth,
  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,
): Promise<string | undefined> => {
  const token =
    typeof callback === "function" ? await callback(auth) : callback;

  if (!token) {
    return;
  }

  if (auth.scheme === "bearer") {
    return `Bearer ${token}`;
  }

  if (auth.scheme === "basic") {
    return `Basic ${btoa(token)}`;
  }

  return token;
};
</file>

<file path="./frontend/src/sdk/generated/core/bodySerializer.ts">
import type {
  ArrayStyle,
  ObjectStyle,
  SerializerOptions,
} from "./pathSerializer";

export type QuerySerializer = (query: Record<string, unknown>) => string;

export type BodySerializer = (body: any) => any;

export interface QuerySerializerOptions {
  allowReserved?: boolean;
  array?: SerializerOptions<ArrayStyle>;
  object?: SerializerOptions<ObjectStyle>;
}

const serializeFormDataPair = (
  data: FormData,
  key: string,
  value: unknown,
): void => {
  if (typeof value === "string" || value instanceof Blob) {
    data.append(key, value);
  } else {
    data.append(key, JSON.stringify(value));
  }
};

const serializeUrlSearchParamsPair = (
  data: URLSearchParams,
  key: string,
  value: unknown,
): void => {
  if (typeof value === "string") {
    data.append(key, value);
  } else {
    data.append(key, JSON.stringify(value));
  }
};

export const formDataBodySerializer = {
  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(
    body: T,
  ): FormData => {
    const data = new FormData();

    Object.entries(body).forEach(([key, value]) => {
      if (value === undefined || value === null) {
        return;
      }
      if (Array.isArray(value)) {
        value.forEach((v) => serializeFormDataPair(data, key, v));
      } else {
        serializeFormDataPair(data, key, value);
      }
    });

    return data;
  },
};

export const jsonBodySerializer = {
  bodySerializer: <T>(body: T): string =>
    JSON.stringify(body, (_key, value) =>
      typeof value === "bigint" ? value.toString() : value,
    ),
};

export const urlSearchParamsBodySerializer = {
  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(
    body: T,
  ): string => {
    const data = new URLSearchParams();

    Object.entries(body).forEach(([key, value]) => {
      if (value === undefined || value === null) {
        return;
      }
      if (Array.isArray(value)) {
        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));
      } else {
        serializeUrlSearchParamsPair(data, key, value);
      }
    });

    return data.toString();
  },
};
</file>

<file path="./frontend/src/sdk/generated/core/params.ts">
type Slot = "body" | "headers" | "path" | "query";

export type Field =
  | {
      in: Exclude<Slot, "body">;
      /**
       * Field name. This is the name we want the user to see and use.
       */
      key: string;
      /**
       * Field mapped name. This is the name we want to use in the request.
       * If omitted, we use the same value as `key`.
       */
      map?: string;
    }
  | {
      in: Extract<Slot, "body">;
      /**
       * Key isn't required for bodies.
       */
      key?: string;
      map?: string;
    };

export interface Fields {
  allowExtra?: Partial<Record<Slot, boolean>>;
  args?: ReadonlyArray<Field>;
}

export type FieldsConfig = ReadonlyArray<Field | Fields>;

const extraPrefixesMap: Record<string, Slot> = {
  $body_: "body",
  $headers_: "headers",
  $path_: "path",
  $query_: "query",
};
const extraPrefixes = Object.entries(extraPrefixesMap);

type KeyMap = Map<
  string,
  {
    in: Slot;
    map?: string;
  }
>;

const buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {
  if (!map) {
    map = new Map();
  }

  for (const config of fields) {
    if ("in" in config) {
      if (config.key) {
        map.set(config.key, {
          in: config.in,
          map: config.map,
        });
      }
    } else if (config.args) {
      buildKeyMap(config.args, map);
    }
  }

  return map;
};

interface Params {
  body: unknown;
  headers: Record<string, unknown>;
  path: Record<string, unknown>;
  query: Record<string, unknown>;
}

const stripEmptySlots = (params: Params) => {
  for (const [slot, value] of Object.entries(params)) {
    if (value && typeof value === "object" && !Object.keys(value).length) {
      delete params[slot as Slot];
    }
  }
};

export const buildClientParams = (
  args: ReadonlyArray<unknown>,
  fields: FieldsConfig,
) => {
  const params: Params = {
    body: {},
    headers: {},
    path: {},
    query: {},
  };

  const map = buildKeyMap(fields);

  let config: FieldsConfig[number] | undefined;

  for (const [index, arg] of args.entries()) {
    if (fields[index]) {
      config = fields[index];
    }

    if (!config) {
      continue;
    }

    if ("in" in config) {
      if (config.key) {
        const field = map.get(config.key)!;
        const name = field.map || config.key;
        (params[field.in] as Record<string, unknown>)[name] = arg;
      } else {
        params.body = arg;
      }
    } else {
      for (const [key, value] of Object.entries(arg ?? {})) {
        const field = map.get(key);

        if (field) {
          const name = field.map || key;
          (params[field.in] as Record<string, unknown>)[name] = value;
        } else {
          const extra = extraPrefixes.find(([prefix]) =>
            key.startsWith(prefix),
          );

          if (extra) {
            const [prefix, slot] = extra;
            (params[slot] as Record<string, unknown>)[
              key.slice(prefix.length)
            ] = value;
          } else {
            for (const [slot, allowed] of Object.entries(
              config.allowExtra ?? {},
            )) {
              if (allowed) {
                (params[slot as Slot] as Record<string, unknown>)[key] = value;
                break;
              }
            }
          }
        }
      }
    }
  }

  stripEmptySlots(params);

  return params;
};
</file>

<file path="./frontend/src/sdk/generated/core/pathSerializer.ts">
interface SerializeOptions<T>
  extends SerializePrimitiveOptions,
    SerializerOptions<T> {}

interface SerializePrimitiveOptions {
  allowReserved?: boolean;
  name: string;
}

export interface SerializerOptions<T> {
  /**
   * @default true
   */
  explode: boolean;
  style: T;
}

export type ArrayStyle = "form" | "spaceDelimited" | "pipeDelimited";
export type ArraySeparatorStyle = ArrayStyle | MatrixStyle;
type MatrixStyle = "label" | "matrix" | "simple";
export type ObjectStyle = "form" | "deepObject";
type ObjectSeparatorStyle = ObjectStyle | MatrixStyle;

interface SerializePrimitiveParam extends SerializePrimitiveOptions {
  value: string;
}

export const separatorArrayExplode = (style: ArraySeparatorStyle) => {
  switch (style) {
    case "label":
      return ".";
    case "matrix":
      return ";";
    case "simple":
      return ",";
    default:
      return "&";
  }
};

export const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {
  switch (style) {
    case "form":
      return ",";
    case "pipeDelimited":
      return "|";
    case "spaceDelimited":
      return "%20";
    default:
      return ",";
  }
};

export const separatorObjectExplode = (style: ObjectSeparatorStyle) => {
  switch (style) {
    case "label":
      return ".";
    case "matrix":
      return ";";
    case "simple":
      return ",";
    default:
      return "&";
  }
};

export const serializeArrayParam = ({
  allowReserved,
  explode,
  name,
  style,
  value,
}: SerializeOptions<ArraySeparatorStyle> & {
  value: unknown[];
}) => {
  if (!explode) {
    const joinedValues = (
      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))
    ).join(separatorArrayNoExplode(style));
    switch (style) {
      case "label":
        return `.${joinedValues}`;
      case "matrix":
        return `;${name}=${joinedValues}`;
      case "simple":
        return joinedValues;
      default:
        return `${name}=${joinedValues}`;
    }
  }

  const separator = separatorArrayExplode(style);
  const joinedValues = value
    .map((v) => {
      if (style === "label" || style === "simple") {
        return allowReserved ? v : encodeURIComponent(v as string);
      }

      return serializePrimitiveParam({
        allowReserved,
        name,
        value: v as string,
      });
    })
    .join(separator);
  return style === "label" || style === "matrix"
    ? separator + joinedValues
    : joinedValues;
};

export const serializePrimitiveParam = ({
  allowReserved,
  name,
  value,
}: SerializePrimitiveParam) => {
  if (value === undefined || value === null) {
    return "";
  }

  if (typeof value === "object") {
    throw new Error(
      "Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.",
    );
  }

  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;
};

export const serializeObjectParam = ({
  allowReserved,
  explode,
  name,
  style,
  value,
  valueOnly,
}: SerializeOptions<ObjectSeparatorStyle> & {
  value: Record<string, unknown> | Date;
  valueOnly?: boolean;
}) => {
  if (value instanceof Date) {
    return valueOnly ? value.toISOString() : `${name}=${value.toISOString()}`;
  }

  if (style !== "deepObject" && !explode) {
    let values: string[] = [];
    Object.entries(value).forEach(([key, v]) => {
      values = [
        ...values,
        key,
        allowReserved ? (v as string) : encodeURIComponent(v as string),
      ];
    });
    const joinedValues = values.join(",");
    switch (style) {
      case "form":
        return `${name}=${joinedValues}`;
      case "label":
        return `.${joinedValues}`;
      case "matrix":
        return `;${name}=${joinedValues}`;
      default:
        return joinedValues;
    }
  }

  const separator = separatorObjectExplode(style);
  const joinedValues = Object.entries(value)
    .map(([key, v]) =>
      serializePrimitiveParam({
        allowReserved,
        name: style === "deepObject" ? `${name}[${key}]` : key,
        value: v as string,
      }),
    )
    .join(separator);
  return style === "label" || style === "matrix"
    ? separator + joinedValues
    : joinedValues;
};
</file>

<file path="./frontend/src/sdk/generated/core/types.ts">
import type { Auth, AuthToken } from "./auth";
import type {
  BodySerializer,
  QuerySerializer,
  QuerySerializerOptions,
} from "./bodySerializer";

export interface Client<
  RequestFn = never,
  Config = unknown,
  MethodFn = never,
  BuildUrlFn = never,
> {
  /**
   * Returns the final request URL.
   */
  buildUrl: BuildUrlFn;
  connect: MethodFn;
  delete: MethodFn;
  get: MethodFn;
  getConfig: () => Config;
  head: MethodFn;
  options: MethodFn;
  patch: MethodFn;
  post: MethodFn;
  put: MethodFn;
  request: RequestFn;
  setConfig: (config: Config) => Config;
  trace: MethodFn;
}

export interface Config {
  /**
   * Auth token or a function returning auth token. The resolved value will be
   * added to the request payload as defined by its `security` array.
   */
  auth?: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken;
  /**
   * A function for serializing request body parameter. By default,
   * {@link JSON.stringify()} will be used.
   */
  bodySerializer?: BodySerializer | null;
  /**
   * An object containing any HTTP headers that you want to pre-populate your
   * `Headers` object with.
   *
   * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}
   */
  headers?:
    | RequestInit["headers"]
    | Record<
        string,
        | string
        | number
        | boolean
        | (string | number | boolean)[]
        | null
        | undefined
        | unknown
      >;
  /**
   * The request method.
   *
   * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}
   */
  method?:
    | "CONNECT"
    | "DELETE"
    | "GET"
    | "HEAD"
    | "OPTIONS"
    | "PATCH"
    | "POST"
    | "PUT"
    | "TRACE";
  /**
   * A function for serializing request query parameters. By default, arrays
   * will be exploded in form style, objects will be exploded in deepObject
   * style, and reserved characters are percent-encoded.
   *
   * This method will have no effect if the native `paramsSerializer()` Axios
   * API function is used.
   *
   * {@link https://swagger.io/docs/specification/serialization/#query View examples}
   */
  querySerializer?: QuerySerializer | QuerySerializerOptions;
  /**
   * A function validating request data. This is useful if you want to ensure
   * the request conforms to the desired shape, so it can be safely sent to
   * the server.
   */
  requestValidator?: (data: unknown) => Promise<unknown>;
  /**
   * A function transforming response data before it's returned. This is useful
   * for post-processing data, e.g. converting ISO strings into Date objects.
   */
  responseTransformer?: (data: unknown) => Promise<unknown>;
  /**
   * A function validating response data. This is useful if you want to ensure
   * the response conforms to the desired shape, so it can be safely passed to
   * the transformers and returned to the user.
   */
  responseValidator?: (data: unknown) => Promise<unknown>;
}

type IsExactlyNeverOrNeverUndefined<T> = [T] extends [never]
  ? true
  : [T] extends [never | undefined]
    ? [undefined] extends [T]
      ? false
      : true
    : false;

export type OmitNever<T extends Record<string, unknown>> = {
  [K in keyof T as IsExactlyNeverOrNeverUndefined<T[K]> extends true
    ? never
    : K]: T[K];
};
</file>

<file path="./frontend/src/sdk/generated/client.gen.ts">
// This file is auto-generated by @hey-api/openapi-ts

import type { ClientOptions } from "./types.gen";
import {
  type Config,
  type ClientOptions as DefaultClientOptions,
  createClient,
  createConfig,
} from "./client";
import { createClientConfig } from "../runtime.client";

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 *
 * You may want to initialize your client this way instead of calling
 * `setConfig()`. This is useful for example if you're using Next.js
 * to ensure your client always has the correct values.
 */
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> =
  (
    override?: Config<DefaultClientOptions & T>,
  ) => Config<Required<DefaultClientOptions> & T>;

export const client = createClient(
  createClientConfig(
    createConfig<ClientOptions>({
      baseURL: "https://api.cashflowcasino.com",
      throwOnError: true,
    }),
  ),
);
</file>

<file path="./frontend/src/sdk/generated/index.ts">
// This file is auto-generated by @hey-api/openapi-ts
export * from "./types.gen";
export * from "./sdk.gen";
</file>

<file path="./frontend/src/sdk/generated/operator.gen.ts">
export type Operator = {
  id: string;
  name: string;
  operatorSecret: string;
  operatorAccess: string;
  callbackUrl: string;
  isActive: boolean;
  allowedIps: string[];
  description: string | null;
  productIds: string | null;
  balance: number;
  netRevenue: number;
  acceptedPayments: string[];
  ownerId: string | null;
  lastUsedAt: string | null;
  createdAt: string;
  updatedAt: string;
};
</file>

<file path="./frontend/src/sdk/generated/sdk.gen.ts">
// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "./client";
import type {
  PostApiAuthLoginData,
  PostApiAuthLoginResponses,
  PostApiAuthLoginErrors,
  PostApiAuthSignupData,
  PostApiAuthSignupResponses,
  PostApiAuthSignupErrors,
  PostApiAuthLogoutData,
  PostApiAuthLogoutResponses,
  PostApiAuthLogoutErrors,
  GetApiAuthMeData,
  GetApiAuthMeResponses,
  GetApiAuthMeErrors,
  GetApiData,
  GetApiResponses,
  PostApiUpdatesCheckData,
  PostApiUpdatesCheckResponses,
  PostApiUpdatesUploadData,
  PostApiUpdatesUploadResponses,
  PostApiUpdatesUploadErrors,
  GetApiUpdatesDownloadByFilenameData,
  GetApiUpdatesDownloadByFilenameResponses,
  GetApiUpdatesDownloadByFilenameErrors,
  GetApiUpdatesVersionsByAppIdByPlatformData,
  GetApiUpdatesVersionsByAppIdByPlatformResponses,
  GetApiUpdatesVersionsByAppIdByPlatformErrors,
  GetApiUsersData,
  GetApiUsersResponses,
  PostApiEnterGameData,
  PostApiEnterGameResponses,
  PostApiGamesData,
  PostApiGamesResponses,
  PostApiSetupGameData,
  PostApiSetupGameResponses,
  GetApiSpinpageData,
  GetApiSpinpageResponses,
  PostApiSpinData,
  PostApiSpinResponses,
  GetApiFavoriteGameData,
  GetApiFavoriteGameResponses,
  PostApiEndGameSessionData,
  PostApiEndGameSessionResponses,
  PostApiEndGameSessionErrors,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdResponses,
  DeleteApiUsersByIdErrors,
  GetApiUsersByIdData,
  GetApiUsersByIdResponses,
  GetApiUsersByIdErrors,
  PatchApiUsersByIdData,
  PatchApiUsersByIdResponses,
  PatchApiUsersByIdErrors,
  GetApiUsersByIdCheckData,
  GetApiUsersByIdCheckResponses,
  GetApiUsersByIdCheckErrors,
  PostApiUsersByIdVerifyEmailData,
  PostApiUsersByIdVerifyEmailResponses,
  GetApiUsersByIdInfoData,
  GetApiUsersByIdInfoResponses,
  GetApiUsersByIdInfoErrors,
  GetApiUsersByIdVipinfoData,
  GetApiUsersByIdVipinfoResponses,
  GetApiUserAmountData,
  GetApiUserAmountResponses,
  PostApiUserChangeData,
  PostApiUserChangeResponses,
  PostApiUserEmailData,
  PostApiUserEmailResponses,
  PostApiUserPasswordData,
  PostApiUserPasswordResponses,
  PostApiUserSuspendData,
  PostApiUserSuspendResponses,
  PostApiRedtigerGameSettingsData,
  PostApiRedtigerGameSettingsResponses,
  PostApiRedtigerGameSettingsErrors,
  PostApiRedtigerGameSpinData,
  PostApiRedtigerGameSpinResponses,
  PostApiRedtigerGameSpinErrors,
  GetApiGamesAllData,
  GetApiGamesAllResponses,
  GetApiGamesCategoriesData,
  GetApiGamesCategoriesResponses,
  GetApiGamesSearchData,
  GetApiGamesSearchResponses,
  GetApiUserGamesData,
  GetApiUserGamesResponses,
  PostApiUserGamesFavoriteData,
  PostApiUserGamesFavoriteResponses,
  GetApiUserGamesFavoritesData,
  GetApiUserGamesFavoritesResponses,
  PostApiGamesByIdEnterData,
  PostApiGamesByIdEnterResponses,
  PostApiGamesByIdEnterErrors,
  PostApiGamesLeaveData,
  PostApiGamesLeaveResponses,
  GetApiVipMeData,
  GetApiVipMeResponses,
  GetApiVipMeErrors,
  GetApiVipLevelsData,
  GetApiVipLevelsResponses,
  GetApiVipRanksData,
  GetApiVipRanksResponses,
  GetApiGamespinsTopwinsData,
  GetApiGamespinsTopwinsResponses,
  GetApiGamespinsTopwinsErrors,
  GetGs2cGeV3GameServiceData,
  GetGs2cGeV3GameServiceResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiAuthLogin = <ThrowOnError extends boolean = true>(
  options: Options<PostApiAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthLoginResponses,
    PostApiAuthLoginErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiAuthSignup = <ThrowOnError extends boolean = true>(
  options: Options<PostApiAuthSignupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthSignupResponses,
    PostApiAuthSignupErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/auth/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Logout current user
 */
export const postApiAuthLogout = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiAuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiAuthLogoutResponses,
    PostApiAuthLogoutErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/auth/logout",
    ...options,
  });
};

/**
 * Get current user session
 */
export const getApiAuthMe = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiAuthMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthMeResponses,
    GetApiAuthMeErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/auth/me",
    ...options,
  });
};

export const getApi = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/",
    ...options,
  });
};

export const postApiUpdatesCheck = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUpdatesCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUpdatesCheckResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/updates/check",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Upload a new application version (APK or OTA bundle)
 */
export const postApiUpdatesUpload = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiUpdatesUploadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiUpdatesUploadResponses,
    PostApiUpdatesUploadErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: "json",
    url: "/api/updates/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Download an update file (for local development only)
 */
export const getApiUpdatesDownloadByFilename = <
  ThrowOnError extends boolean = true,
>(
  options: Options<GetApiUpdatesDownloadByFilenameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUpdatesDownloadByFilenameResponses,
    GetApiUpdatesDownloadByFilenameErrors,
    ThrowOnError
  >({
    url: "/api/updates/download/{filename}",
    ...options,
  });
};

/**
 * List all available versions for an app and platform
 */
export const getApiUpdatesVersionsByAppIdByPlatform = <
  ThrowOnError extends boolean = true,
>(
  options: Options<GetApiUpdatesVersionsByAppIdByPlatformData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUpdatesVersionsByAppIdByPlatformResponses,
    GetApiUpdatesVersionsByAppIdByPlatformErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/updates/versions/{appId}/{platform}",
    ...options,
  });
};

export const getApiUsers = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUsersResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users",
    ...options,
  });
};

export const postApiEnterGame = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiEnterGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiEnterGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/enter/game",
    ...options,
  });
};

export const postApiGames = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiGamesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiGamesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/games",
    ...options,
  });
};

export const postApiSetupGame = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiSetupGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiSetupGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/setup/game",
    ...options,
  });
};

export const getApiSpinpage = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiSpinpageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiSpinpageResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/spinpage",
    ...options,
  });
};

export const postApiSpin = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiSpinData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiSpinResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/spin",
    ...options,
  });
};

export const getApiFavoriteGame = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiFavoriteGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiFavoriteGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/favorite/game",
    ...options,
  });
};

/**
 * End the current game session
 */
export const postApiEndGameSession = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiEndGameSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiEndGameSessionResponses,
    PostApiEndGameSessionErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/end-game-session",
    ...options,
  });
};

export const deleteApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<DeleteApiUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiUsersByIdResponses,
    DeleteApiUsersByIdErrors,
    ThrowOnError
  >({
    url: "/api/users/{id}",
    ...options,
  });
};

export const getApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdResponses,
    GetApiUsersByIdErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}",
    ...options,
  });
};

export const patchApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<PatchApiUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiUsersByIdResponses,
    PatchApiUsersByIdErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check if a user exists
 */
export const getApiUsersByIdCheck = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdCheckResponses,
    GetApiUsersByIdCheckErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}/check",
    ...options,
  });
};

/**
 * Send email verification
 */
export const postApiUsersByIdVerifyEmail = <
  ThrowOnError extends boolean = true,
>(
  options: Options<PostApiUsersByIdVerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUsersByIdVerifyEmailResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}/verify-email",
    ...options,
  });
};

/**
 * Get user info
 */
export const getApiUsersByIdInfo = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdInfoResponses,
    GetApiUsersByIdInfoErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}/info",
    ...options,
  });
};

/**
 * Get user VIP info
 */
export const getApiUsersByIdVipinfo = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdVipinfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdVipinfoResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}/vipinfo",
    ...options,
  });
};

export const getApiUserAmount = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUserAmountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserAmountResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/amount",
    ...options,
  });
};

export const postApiUserChange = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserChangeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserChangeResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/change",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiUserEmail = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserEmailResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiUserPassword = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserPasswordResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiUserSuspend = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserSuspendData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserSuspendResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/suspend",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get redtiger settings for a game
 */
export const postApiRedtigerGameSettings = <
  ThrowOnError extends boolean = true,
>(
  options?: Options<PostApiRedtigerGameSettingsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiRedtigerGameSettingsResponses,
    PostApiRedtigerGameSettingsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/redtiger/game/settings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Perform a spin in a redtiger game
 */
export const postApiRedtigerGameSpin = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiRedtigerGameSpinData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiRedtigerGameSpinResponses,
    PostApiRedtigerGameSpinErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/redtiger/game/spin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiGamesAll = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiGamesAllResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/games/all",
    ...options,
  });
};

export const getApiGamesCategories = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiGamesCategoriesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/games/categories",
    ...options,
  });
};

export const getApiGamesSearch = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesSearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiGamesSearchResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/games/search",
    ...options,
  });
};

export const getApiUserGames = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUserGamesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUserGamesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/games",
    ...options,
  });
};

export const postApiUserGamesFavorite = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiUserGamesFavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiUserGamesFavoriteResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/user/games/favorite",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiUserGamesFavorites = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUserGamesFavoritesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserGamesFavoritesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/games/favorites",
    ...options,
  });
};

export const postApiGamesByIdEnter = <ThrowOnError extends boolean = true>(
  options: Options<PostApiGamesByIdEnterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiGamesByIdEnterResponses,
    PostApiGamesByIdEnterErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/games/{id}/enter",
    ...options,
  });
};

export const postApiGamesLeave = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiGamesLeaveData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiGamesLeaveResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/games/leave",
    ...options,
  });
};

/**
 * Get the authenticated user VIP details
 */
export const getApiVipMe = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiVipMeResponses,
    GetApiVipMeErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/vip/me",
    ...options,
  });
};

/**
 * Get the configuration for all VIP levels
 */
export const getApiVipLevels = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipLevelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiVipLevelsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/vip/levels",
    ...options,
  });
};

/**
 * Get the configuration for all VIP ranks
 */
export const getApiVipRanks = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipRanksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiVipRanksResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/vip/ranks",
    ...options,
  });
};

export const getApiGamespinsTopwins = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamespinsTopwinsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiGamespinsTopwinsResponses,
    GetApiGamespinsTopwinsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/gamespins/topwins",
    ...options,
  });
};

export const getGs2cGeV3GameService = <ThrowOnError extends boolean = true>(
  options?: Options<GetGs2cGeV3GameServiceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGs2cGeV3GameServiceResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/gs2c/ge/v3/gameService/",
    ...options,
  });
};
</file>

<file path="./frontend/src/sdk/generated/types.gen.ts">
// This file is auto-generated by @hey-api/openapi-ts

export type User = {
  id: string;
  username: string;
  email: string | null;
  currentGameSessionDataId: string | null;
  currentAuthSessionDataId: string | null;
  avatar_url: string | null;
  role: string;
  isActive: boolean;
  lastLoginAt: string | null;
  totalXpGained: number;
  activeWalletId: string | null;
  vipInfoId: string | null;
  createdAt: string;
  updatedAt: string;
  deletedAt: string | null;
  lastSeen: string | null;
};

export type AuthSession = {
  id: string;
  userId: string;
  status: "ACTIVE" | "COMPLETED" | "EXPIRED" | "ABANDONED" | "TIMEOUT";
  ipAddress: string | null;
  userAgent: string | null;
  deviceId: string | null;
  createdAt: string;
  expiresAt: string | null;
  lastSeen: string;
};

export type GameSession = {
  id: string;
  authSessionId: string;
  userId: string;
  gameId: string | null;
  status: "ACTIVE" | "COMPLETED" | "EXPIRED" | "ABANDONED" | "TIMEOUT";
  totalWagered: number;
  totalWon: number;
  totalXpGained: number;
  rtp: string | null;
  duration: number;
  createdAt: string;
  endAt: string | null;
};

export type Wallet = {
  id: string;
  balance: number;
  paymentMethod: string;
  currency: string;
  isActive: boolean;
  isDefault: boolean;
  address: string | null;
  cashtag: string | null;
  userId: string;
  operatorId: string;
  lastUsedAt: string | null;
  createdAt: string;
  updatedAt: string;
};

export type VipInfo = {
  id: string;
  level: number;
  xp: number;
  totalXp: number;
  userId: string;
  currentRankid: number | null;
  createdAt: string;
  updatedAt: string;
};

export type Game = {
  id: string;
  name: string;
  title: string;
  developer: string;
  description?: string;
  category: string;
  tags: Array<string>;
  thumbnailUrl?: string;
  bannerUrl?: string;
  isActive?: boolean;
};

export type VipRank = {
  id: number;
  name: string;
  minXp: number;
  dailyBonusCoinPct: number;
  hourlyBonusCoinPct: number;
  purchaseBonusCoinPct: number;
  levelUpBonusCoinPct: number;
  hasConcierge: boolean;
  hasVipLoungeAccess: boolean;
  isInvitationOnly: boolean;
};

export type VipDetails = {
  vipInfo: VipInfo;
  vipRank: VipRank;
  xpForNextLevel: number;
};

export type VipLevel = {
  level: number;
  xpForNext: number;
};

export type GameSpin = {
  id: string;
  playerName?: string;
  gamesName?: string;
  spinData?: {
    [key: string]: unknown;
  };
  grossWinAmount: number;
  wagerAmount: number;
  spinNumber: number;
  playerAvatar?: string;
  currencyId?: string;
  sessionId: string;
  userId?: string;
  createdAt: string;
  updatedAt: string;
  occurredAt: string;
  sessionDataId?: string;
};

export type PostApiAuthLoginData = {
  /**
   * User credentials for login
   */
  body: {
    username?: string;
    password: string;
    uid?: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/login";
};

export type PostApiAuthLoginErrors = {
  /**
   * Bad Request
   */
  400: {
    message: string;
  };
};

export type PostApiAuthLoginError =
  PostApiAuthLoginErrors[keyof PostApiAuthLoginErrors];

export type PostApiAuthLoginResponses = {
  /**
   * The user object and sets an access token cookie.
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PostApiAuthLoginResponse =
  PostApiAuthLoginResponses[keyof PostApiAuthLoginResponses];

export type PostApiAuthSignupData = {
  /**
   * User credentials for signup
   */
  body: {
    username: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/signup";
};

export type PostApiAuthSignupErrors = {
  /**
   * Bad Request
   */
  400: {
    message: string;
  };
};

export type PostApiAuthSignupError =
  PostApiAuthSignupErrors[keyof PostApiAuthSignupErrors];

export type PostApiAuthSignupResponses = {
  /**
   * The created user object and sets an access token cookie.
   */
  201: {
    id: string;
    username: string;
    email: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PostApiAuthSignupResponse =
  PostApiAuthSignupResponses[keyof PostApiAuthSignupResponses];

export type PostApiAuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/logout";
};

export type PostApiAuthLogoutErrors = {
  /**
   * Unauthorized
   */
  401: {
    error: string;
  };
};

export type PostApiAuthLogoutError =
  PostApiAuthLogoutErrors[keyof PostApiAuthLogoutErrors];

export type PostApiAuthLogoutResponses = {
  /**
   * Logout successful
   */
  200: {
    message: string;
  };
};

export type PostApiAuthLogoutResponse =
  PostApiAuthLogoutResponses[keyof PostApiAuthLogoutResponses];

export type GetApiAuthMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/me";
};

export type GetApiAuthMeErrors = {
  /**
   * Invalid id error
   */
  401: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};

export type GetApiAuthMeError = GetApiAuthMeErrors[keyof GetApiAuthMeErrors];

export type GetApiAuthMeResponses = {
  /**
   * The current user session
   */
  200: {
    user: User;
    authSession: AuthSession;
    gameSession?: GameSession;
    wallet: Wallet;
    vipInfo: VipInfo;
  };
};

export type GetApiAuthMeResponse =
  GetApiAuthMeResponses[keyof GetApiAuthMeResponses];

export type GetApiData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/";
};

export type GetApiResponses = {
  /**
   * Cashino API Index
   */
  200: {
    message: string;
  };
};

export type GetApiResponse = GetApiResponses[keyof GetApiResponses];

export type PostApiUpdatesCheckData = {
  /**
   * The user to create
   */
  body: {
    currentVersion: string;
    platform: string;
    appId: string;
    updateType: "BINARY" | "OTA";
  };
  path?: never;
  query?: never;
  url: "/api/updates/check";
};

export type PostApiUpdatesCheckResponses = {
  /**
   * The updated user
   */
  200: {
    hasUpdate: boolean;
    version?: string;
    platform?: string;
    updateType?: "BINARY" | "OTA";
    downloadUrl?: string;
    changelog?: Array<string>;
    mandatory?: boolean;
    releaseDate?: string;
    fileSize?: number;
    checksum?: string;
  };
};

export type PostApiUpdatesCheckResponse =
  PostApiUpdatesCheckResponses[keyof PostApiUpdatesCheckResponses];

export type PostApiUpdatesUploadData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/api/updates/upload";
};

export type PostApiUpdatesUploadErrors = {
  /**
   * Bad Request
   */
  400: {
    error: string;
  };
};

export type PostApiUpdatesUploadError =
  PostApiUpdatesUploadErrors[keyof PostApiUpdatesUploadErrors];

export type PostApiUpdatesUploadResponses = {
  /**
   * Upload success response
   */
  200: {
    success: boolean;
    message: string;
    version?: {
      version: string;
      platform: string;
      updateType: "BINARY" | "OTA";
      downloadUrl: string;
      changelog: Array<string>;
      mandatory: boolean;
      releaseDate: string;
      fileSize: number;
      checksum: string;
    };
  };
};

export type PostApiUpdatesUploadResponse =
  PostApiUpdatesUploadResponses[keyof PostApiUpdatesUploadResponses];

export type GetApiUpdatesDownloadByFilenameData = {
  body?: never;
  path: {
    filename: string;
  };
  query?: never;
  url: "/api/updates/download/{filename}";
};

export type GetApiUpdatesDownloadByFilenameErrors = {
  /**
   * Not Found
   */
  404: {
    error: string;
  };
};

export type GetApiUpdatesDownloadByFilenameError =
  GetApiUpdatesDownloadByFilenameErrors[keyof GetApiUpdatesDownloadByFilenameErrors];

export type GetApiUpdatesDownloadByFilenameResponses = {
  /**
   * Application file (APK or ZIP)
   */
  200: unknown;
};

export type GetApiUpdatesVersionsByAppIdByPlatformData = {
  body?: never;
  path: {
    appId: string;
    platform: string;
  };
  query?: never;
  url: "/api/updates/versions/{appId}/{platform}";
};

export type GetApiUpdatesVersionsByAppIdByPlatformErrors = {
  /**
   * Bad Request
   */
  400: {
    error: string;
  };
};

export type GetApiUpdatesVersionsByAppIdByPlatformError =
  GetApiUpdatesVersionsByAppIdByPlatformErrors[keyof GetApiUpdatesVersionsByAppIdByPlatformErrors];

export type GetApiUpdatesVersionsByAppIdByPlatformResponses = {
  /**
   * List of versions
   */
  200: {
    appId: string;
    platform: string;
    versions: Array<{
      version: string;
      platform: string;
      updateType: "BINARY" | "OTA";
      downloadUrl: string;
      changelog: Array<string>;
      mandatory: boolean;
      releaseDate: string;
      fileSize: number;
      checksum: string;
    }>;
  };
};

export type GetApiUpdatesVersionsByAppIdByPlatformResponse =
  GetApiUpdatesVersionsByAppIdByPlatformResponses[keyof GetApiUpdatesVersionsByAppIdByPlatformResponses];

export type GetApiUsersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/users";
};

export type GetApiUsersResponses = {
  /**
   * The list of users
   */
  200: Array<{
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  }>;
};

export type GetApiUsersResponse =
  GetApiUsersResponses[keyof GetApiUsersResponses];

export type PostApiEnterGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/enter/game";
};

export type PostApiEnterGameResponses = {
  /**
   * Enter game
   */
  200: unknown;
};

export type PostApiGamesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games";
};

export type PostApiGamesResponses = {
  /**
   * User game
   */
  200: unknown;
};

export type PostApiSetupGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/setup/game";
};

export type PostApiSetupGameResponses = {
  /**
   * Favorite game
   */
  200: unknown;
};

export type GetApiSpinpageData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/spinpage";
};

export type GetApiSpinpageResponses = {
  /**
   * Spin page
   */
  200: unknown;
};

export type PostApiSpinData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/spin";
};

export type PostApiSpinResponses = {
  /**
   * Spin
   */
  200: unknown;
};

export type GetApiFavoriteGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/favorite/game";
};

export type GetApiFavoriteGameResponses = {
  /**
   * Favorite game list
   */
  200: unknown;
};

export type PostApiEndGameSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/end-game-session";
};

export type PostApiEndGameSessionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PostApiEndGameSessionResponses = {
  /**
   * Session ended response
   */
  200: {
    success: boolean;
    message: string;
  };
};

export type PostApiEndGameSessionResponse =
  PostApiEndGameSessionResponses[keyof PostApiEndGameSessionResponses];

export type DeleteApiUsersByIdData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};

export type DeleteApiUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
  /**
   * Invalid id error
   */
  422: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};

export type DeleteApiUsersByIdError =
  DeleteApiUsersByIdErrors[keyof DeleteApiUsersByIdErrors];

export type DeleteApiUsersByIdResponses = {
  /**
   * User deleted
   */
  204: void;
};

export type DeleteApiUsersByIdResponse =
  DeleteApiUsersByIdResponses[keyof DeleteApiUsersByIdResponses];

export type GetApiUsersByIdData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};

export type GetApiUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
  /**
   * Invalid id error
   */
  422: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};

export type GetApiUsersByIdError =
  GetApiUsersByIdErrors[keyof GetApiUsersByIdErrors];

export type GetApiUsersByIdResponses = {
  /**
   * The requested user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type GetApiUsersByIdResponse =
  GetApiUsersByIdResponses[keyof GetApiUsersByIdResponses];

export type PatchApiUsersByIdData = {
  /**
   * The user updates
   */
  body: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};

export type PatchApiUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type PatchApiUsersByIdError =
  PatchApiUsersByIdErrors[keyof PatchApiUsersByIdErrors];

export type PatchApiUsersByIdResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PatchApiUsersByIdResponse =
  PatchApiUsersByIdResponses[keyof PatchApiUsersByIdResponses];

export type GetApiUsersByIdCheckData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/check";
};

export type GetApiUsersByIdCheckErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type GetApiUsersByIdCheckError =
  GetApiUsersByIdCheckErrors[keyof GetApiUsersByIdCheckErrors];

export type GetApiUsersByIdCheckResponses = {
  /**
   * User status
   */
  200: {
    userCheck: boolean;
  };
};

export type GetApiUsersByIdCheckResponse =
  GetApiUsersByIdCheckResponses[keyof GetApiUsersByIdCheckResponses];

export type PostApiUsersByIdVerifyEmailData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/verify-email";
};

export type PostApiUsersByIdVerifyEmailResponses = {
  /**
   * Verification sent
   */
  200: {
    status: string;
    time: number;
  };
};

export type PostApiUsersByIdVerifyEmailResponse =
  PostApiUsersByIdVerifyEmailResponses[keyof PostApiUsersByIdVerifyEmailResponses];

export type GetApiUsersByIdInfoData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/info";
};

export type GetApiUsersByIdInfoErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type GetApiUsersByIdInfoError =
  GetApiUsersByIdInfoErrors[keyof GetApiUsersByIdInfoErrors];

export type GetApiUsersByIdInfoResponses = {
  /**
   * User info
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type GetApiUsersByIdInfoResponse =
  GetApiUsersByIdInfoResponses[keyof GetApiUsersByIdInfoResponses];

export type GetApiUsersByIdVipinfoData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/vipinfo";
};

export type GetApiUsersByIdVipinfoResponses = {
  /**
   * VIP info
   */
  200: {
    vipLevel: number | null;
  };
};

export type GetApiUsersByIdVipinfoResponse =
  GetApiUsersByIdVipinfoResponses[keyof GetApiUsersByIdVipinfoResponses];

export type GetApiUserAmountData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/amount";
};

export type GetApiUserAmountResponses = {
  /**
   * Get user amount
   */
  200: {
    amount: number;
    currency: {
      fiat: boolean;
      name: string;
      symbol: string;
      type: string;
    };
    withdraw: number;
    rate: number;
  };
};

export type GetApiUserAmountResponse =
  GetApiUserAmountResponses[keyof GetApiUserAmountResponses];

export type PostApiUserChangeData = {
  /**
   * The user info to update
   */
  body: {
    id: string;
    username: string;
    email?: string | null;
    passwordHash?: string | null;
    accessToken?: string | null;
    refreshToken?: string | null;
    accessTokenExpiresAt?: string | null;
    refreshTokenExpiresAt?: string | null;
    currentGameSessionDataId?: string | null;
    currentAuthSessionDataId?: string | null;
    avatar_url?: string | null;
    role?: string;
    isActive?: boolean;
    lastLoginAt?: string | null;
    totalXpGained: number;
    activeWalletId?: string | null;
    vipInfoId?: string | null;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string | null;
    lastSeen?: string | null;
  };
  path?: never;
  query?: never;
  url: "/api/user/change";
};

export type PostApiUserChangeResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PostApiUserChangeResponse =
  PostApiUserChangeResponses[keyof PostApiUserChangeResponses];

export type PostApiUserEmailData = {
  /**
   * The email to update
   */
  body: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/email";
};

export type PostApiUserEmailResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PostApiUserEmailResponse =
  PostApiUserEmailResponses[keyof PostApiUserEmailResponses];

export type PostApiUserPasswordData = {
  /**
   * The password to update
   */
  body: {
    now_password: string;
    new_password: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/password";
};

export type PostApiUserPasswordResponses = {
  /**
   * Password updated
   */
  200: {
    message: string;
  };
};

export type PostApiUserPasswordResponse =
  PostApiUserPasswordResponses[keyof PostApiUserPasswordResponses];

export type PostApiUserSuspendData = {
  /**
   * The suspension time
   */
  body: {
    time: number;
  };
  path?: never;
  query?: never;
  url: "/api/user/suspend";
};

export type PostApiUserSuspendResponses = {
  /**
   * User suspended
   */
  200: {
    message: string;
  };
};

export type PostApiUserSuspendResponse =
  PostApiUserSuspendResponses[keyof PostApiUserSuspendResponses];

export type PostApiRedtigerGameSettingsData = {
  body?: {
    gamesId: string;
    token?: string | null;
    userId: string;
    currency: string;
    language: string;
    mode: "real" | "demo" | "test";
    custom?: {
      siteId?: string;
      extras?: string;
    };
    userData?: {
      userId?: string | number;
      hash?: string;
      affiliate?: string | number;
      lang?: string | number;
      channel?: string | number;
      userType?: string;
      fingerprint?: string | number;
    };
  };
  path?: never;
  query?: never;
  url: "/api/redtiger/game/settings";
};

export type PostApiRedtigerGameSettingsErrors = {
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    error: {
      code: string;
      message: string;
    };
  };
};

export type PostApiRedtigerGameSettingsError =
  PostApiRedtigerGameSettingsErrors[keyof PostApiRedtigerGameSettingsErrors];

export type PostApiRedtigerGameSettingsResponses = {
  /**
   * Redtiger game settings
   */
  200: {
    success: boolean;
    result?: {
      user: {
        balance: {
          cash: string;
          freeBets?: string;
          bonus?: string;
        };
        canGamble: boolean;
        userId: number | string;
        sessionId: string;
        sessionNetPosition?: string;
        token: string;
        country?: string;
        currency?: {
          code: string;
          symbol: string;
        };
        stakes?: unknown;
        limits?: unknown;
        serverTime: string;
      };
      games?: {
        version?: string;
        gamesType?: string;
      };
      launcher?: {
        version?: string;
      };
      jackpots?: unknown;
    };
    error?: {
      code: string;
      message: string;
      details?: unknown;
    };
  };
};

export type PostApiRedtigerGameSettingsResponse =
  PostApiRedtigerGameSettingsResponses[keyof PostApiRedtigerGameSettingsResponses];

export type PostApiRedtigerGameSpinData = {
  body?: {
    token?: string;
    userId?: string;
    gamesId?: string;
    stake?: number | string;
    currency?: string;
    sessionId?: string;
    playMode?: "real" | "demo" | "test";
    actions?: Array<unknown>;
    custom?: {
      siteId?: string;
      extras?: string;
    };
    bonusId?: unknown;
    extras?: unknown;
    siteId?: string;
    userType?: string;
    lang?: string | number;
    fingerprint?: string | number;
    channel?: string | number;
    affiliate?: string | number;
    userData?: {
      userId?: string | number;
      hash?: string;
      affiliate?: string | number;
      lang?: string | number;
      channel?: string | number;
      userType?: string;
      fingerprint?: string | number;
    };
    roundId?: string | number;
    transactionId?: string | number;
  };
  path?: never;
  query?: never;
  url: "/api/redtiger/game/spin";
};

export type PostApiRedtigerGameSpinErrors = {
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    error: {
      code: string;
      message: string;
    };
  };
};

export type PostApiRedtigerGameSpinError =
  PostApiRedtigerGameSpinErrors[keyof PostApiRedtigerGameSpinErrors];

export type PostApiRedtigerGameSpinResponses = {
  /**
   * Redtiger spin result
   */
  200: {
    transactions: {
      roundId: number | string;
    };
    user: {
      balance: {
        cash: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
        freeBets?: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
        bonus?: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
      };
      userId: number | string;
      sessionId: string;
      sessionNetPosition?: string;
      token: string;
      serverTime: string;
      canGamble?: boolean;
    };
    games: {
      win: {
        instantWin?: string;
        lines?: string;
        total: string;
      };
      stake: string;
      multiplier?: number;
      winLines?: Array<unknown>;
      reelsBuffer?: Array<Array<Array<number>>>;
      xpBreakdown?: {
        baseXp: number;
        bonusXp: number;
        totalXp: number;
      };
    };
    jackpots?: unknown;
    bonusChance?: unknown;
  };
};

export type PostApiRedtigerGameSpinResponse =
  PostApiRedtigerGameSpinResponses[keyof PostApiRedtigerGameSpinResponses];

export type GetApiGamesAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/all";
};

export type GetApiGamesAllResponses = {
  /**
   * A list of all games
   */
  200: Array<Game>;
};

export type GetApiGamesAllResponse =
  GetApiGamesAllResponses[keyof GetApiGamesAllResponses];

export type GetApiGamesCategoriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/categories";
};

export type GetApiGamesCategoriesResponses = {
  /**
   * A list of game categories
   */
  200: Array<string>;
};

export type GetApiGamesCategoriesResponse =
  GetApiGamesCategoriesResponses[keyof GetApiGamesCategoriesResponses];

export type GetApiGamesSearchData = {
  body?: never;
  path?: never;
  query?: {
    game_categories_slug?: string;
    page?: string;
    limit?: string;
  };
  url: "/api/games/search";
};

export type GetApiGamesSearchResponses = {
  /**
   * A list of games matching the search criteria
   */
  200: {
    games: Array<{
      id: string;
      name: string;
      title: string;
      developer: string;
      description?: string;
      category: string;
      tags: Array<string>;
      thumbnailUrl?: string;
      bannerUrl?: string;
      isActive?: boolean;
    }>;
    total: number;
  };
};

export type GetApiGamesSearchResponse =
  GetApiGamesSearchResponses[keyof GetApiGamesSearchResponses];

export type GetApiUserGamesData = {
  body?: never;
  path?: never;
  query: {
    game_categories_slug: string;
    page?: string;
    limit?: string;
  };
  url: "/api/user/games";
};

export type GetApiUserGamesResponses = {
  /**
   * A list of games for the current user (e.g., favorites or history)
   */
  200: {
    games: Array<{
      id: string;
      name: string;
      title: string;
      developer: string;
      description?: string;
      category: string;
      tags: Array<string>;
      thumbnailUrl?: string;
      bannerUrl?: string;
      isActive?: boolean;
    }>;
    total: number;
  };
};

export type GetApiUserGamesResponse =
  GetApiUserGamesResponses[keyof GetApiUserGamesResponses];

export type PostApiUserGamesFavoriteData = {
  body?: {
    add_game?: string;
    del_game?: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/games/favorite";
};

export type PostApiUserGamesFavoriteResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type GetApiUserGamesFavoritesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/games/favorites";
};

export type GetApiUserGamesFavoritesResponses = {
  /**
   * A list of the user favorite game IDs
   */
  200: Array<string>;
};

export type GetApiUserGamesFavoritesResponse =
  GetApiUserGamesFavoritesResponses[keyof GetApiUserGamesFavoritesResponses];

export type PostApiGamesByIdEnterData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/games/{id}/enter";
};

export type PostApiGamesByIdEnterErrors = {
  /**
   * Not Found
   */
  404: {
    message: string;
  };
};

export type PostApiGamesByIdEnterError =
  PostApiGamesByIdEnterErrors[keyof PostApiGamesByIdEnterErrors];

export type PostApiGamesByIdEnterResponses = {
  /**
   * Game session details
   */
  200: {
    webUrl: string;
    gameConfig: {
      authToken: string;
      gameSessionId: string;
      userId: string;
      gameName: string;
      lang: string;
      currency: string;
      operator: string;
      provider: string;
      depositUrl: string;
      lobbyUrl: string;
      mode: string;
      rgsApiBase: string;
      cdn: string;
      baseCdn: string;
    };
  };
};

export type PostApiGamesByIdEnterResponse =
  PostApiGamesByIdEnterResponses[keyof PostApiGamesByIdEnterResponses];

export type PostApiGamesLeaveData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/leave";
};

export type PostApiGamesLeaveResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type GetApiVipMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/me";
};

export type GetApiVipMeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * VIP Info not found
   */
  404: unknown;
};

export type GetApiVipMeResponses = {
  /**
   * Returns the users VIP information, rank, and progress.
   */
  200: VipDetails;
};

export type GetApiVipMeResponse =
  GetApiVipMeResponses[keyof GetApiVipMeResponses];

export type GetApiVipLevelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/levels";
};

export type GetApiVipLevelsResponses = {
  /**
   * Returns the VIP level configuration table.
   */
  200: Array<VipLevel>;
};

export type GetApiVipLevelsResponse =
  GetApiVipLevelsResponses[keyof GetApiVipLevelsResponses];

export type GetApiVipRanksData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/ranks";
};

export type GetApiVipRanksResponses = {
  /**
   * Returns the VIP rank configuration table.
   */
  200: Array<VipRank>;
};

export type GetApiVipRanksResponse =
  GetApiVipRanksResponses[keyof GetApiVipRanksResponses];

export type GetApiGamespinsTopwinsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/gamespins/topwins";
};

export type GetApiGamespinsTopwinsErrors = {
  /**
   * Unauthorized
   */
  401: {
    message: string;
  };
};

export type GetApiGamespinsTopwinsError =
  GetApiGamespinsTopwinsErrors[keyof GetApiGamespinsTopwinsErrors];

export type GetApiGamespinsTopwinsResponses = {
  /**
   * A list of top winning game spins
   */
  200: Array<GameSpin>;
};

export type GetApiGamespinsTopwinsResponse =
  GetApiGamespinsTopwinsResponses[keyof GetApiGamespinsTopwinsResponses];

export type GetGs2cGeV3GameServiceData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/gs2c/ge/v3/gameService/";
};

export type GetGs2cGeV3GameServiceResponses = {
  /**
   * Cashino API Index
   */
  200: {
    message: string;
  };
};

export type GetGs2cGeV3GameServiceResponse =
  GetGs2cGeV3GameServiceResponses[keyof GetGs2cGeV3GameServiceResponses];

export type ClientOptions = {
  baseURL: "https://api.cashflowcasino.com" | (string & {});
};
</file>

<file path="./frontend/src/sdk/types/api.ts">
// This file is intentionally left blank.
// All types are now defined in the generated `sdk/generated/types.gen.ts` file.
</file>

<file path="./frontend/src/sdk/types/backend.d.ts">
// This file provides type definitions for the backend API
declare module '../../../backend/src/app' {
  import type { OpenAPIHono } from '@hono/zod-openapi';
  import type { AppBindings } from '../../../backend/src/lib/types';
  
  // Define the AppType based on the backend's app type
  export type AppType = OpenAPIHono<AppBindings>;
  
  // Export the app instance type
  export const app: AppType;
}
</file>

<file path="./frontend/src/sdk/api.ts">
// API Client with TypeScript support

// Core types
type ApiMethod<T = unknown> = {
    $get: (options?: RequestInit) => Promise<T>
    $post: (
        body?: unknown,
        options?: Omit<RequestInit, 'body' | 'method'>
    ) => Promise<T>
    $put: (
        body?: unknown,
        options?: Omit<RequestInit, 'body' | 'method'>
    ) => Promise<T>
    $delete: (options?: Omit<RequestInit, 'method'>) => Promise<T>
}

type ApiClient = {
    [key: string]: ApiMethod
}

// Helper to get auth token from the same source as the app store
const getAuthToken = (): string | null => {
    if (typeof window === 'undefined') return null
    try {
        // Prefer live token from Pinia store if available to avoid stale localStorage
        const at = useAuthStore().accessToken
        if (at && typeof at === 'string') {
            return at
        }
    } catch {
        // ignore if store not available yet
    }
    try {
        // Fallback: attempt a previously persisted token locations (kept for safety)
        const authData = localStorage.getItem('auth-store')
        if (authData) {
            const parsed = JSON.parse(authData)
            return parsed?.accessToken ?? null
        }
    } catch (e) {
        console.error('Failed to parse auth data from localStorage', e)
    }
    return null
}

// Handler for the API client proxy
const createApiHandler = (baseUrl: string) => {
    const fetchWithAuth = async <T>(
        input: RequestInfo | URL,
        init: RequestInit = {}
    ): Promise<T> => {
        // Pull token from localStorage fallback only; generated client handles pinia-based token.
        const token = getAuthToken()
        const headers = new Headers(init.headers)

        if (token) {
            headers.set('Authorization', `Bearer ${token}`)
        } else {
            headers.delete('Authorization')
        }
        // Temporary debug
         
        console.debug('[fetch][request]', typeof input === 'string' ? input : (input as URL).toString?.() ?? 'req', 'authHeader=', !!token, 'credentials=include')

        let body: BodyInit | null = null
        if (init.body) {
            if (
                typeof init.body === 'object' &&
                !(init.body instanceof FormData)
            ) {
                if (!headers.has('Content-Type')) {
                    headers.set('Content-Type', 'application/json')
                }
                body = JSON.stringify(init.body)
            } else {
                body = init.body as BodyInit
            }
        }

        const response = await fetch(input, {
            // Ensure cookie-backed sessions are sent for endpoints that require it
            credentials: 'include',
            ...init,
            headers,
            body,
        })

        if (!response.ok) {
            const error = await response.json().catch(() => ({
                message: 'API request failed',
            }))
            throw new Error(error.message || 'API request failed')
        }

        // Handle empty responses
        const contentType = response.headers.get('content-type')
        if (!contentType || !contentType.includes('application/json')) {
            return undefined as unknown as T
        }

        return response.json()
    }

    // Create a method handler for each endpoint
    const createMethodHandler = (endpoint: string): ApiMethod => ({
        $get: <T>(options: RequestInit = {}) =>
            fetchWithAuth<T>(endpoint, { ...options, method: 'GET' }),
        $post: <T>(
            body: unknown,
            options: Omit<RequestInit, 'body' | 'method'> = {}
        ) => {
            const requestBody = body !== undefined ? body : null
            return fetchWithAuth<T>(endpoint, {
                ...options,
                method: 'POST',
                body: requestBody as BodyInit | null,
            })
        },
        $put: <T>(
            body: unknown,
            options: Omit<RequestInit, 'body' | 'method'> = {}
        ) => {
            const requestBody = body !== undefined ? body : null
            return fetchWithAuth<T>(endpoint, {
                ...options,
                method: 'PUT',
                body: requestBody as BodyInit | null,
            })
        },
        $delete: <T>(options: Omit<RequestInit, 'method'> = {}) =>
            fetchWithAuth<T>(endpoint, { ...options, method: 'DELETE' }),
    })

    // Create a proxy that creates method handlers on demand
    const handler: ProxyHandler<ApiClient> = {
        get(_, prop: string): ApiMethod {
            if (typeof prop !== 'string') {
                throw new Error('API namespace must be a string')
            }
            const endpoint = `${baseUrl}/${prop}`
            return createMethodHandler(endpoint)
        },
    }

    return new Proxy({} as ApiClient, handler)
}

// Create and export API client instance
const api = createApiHandler(
    import.meta.env.VITE_API_BASE_URL || 'https://api.cashflowcasino.com'
)

export { api }
export type { InferResponseType } from 'hono/client'
</file>

<file path="./frontend/src/sdk/auth.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useAppStore } from '@/stores/app.store'
import { useAuthStore } from '@/stores/auth.store'
import { useGameStore } from '@/stores/game.store'
import { useGameSpinStore } from '@/stores/gamespin.store'
import { useVipStore } from '@/stores/vip.store'
import { useMutation } from '@tanstack/vue-query'
import { postApiAuthLogin } from './generated/sdk.gen'

type LoginRequest = {
    username: string
    password: string
}

type LoginResponse = {
    accessToken: string
    user: {
        id: string
        username: string
        email: string | null
    }
}

export function useLogin() {
    const authStore = useAuthStore()
    const appStore = useAppStore()
    const gameSpinStore = useGameSpinStore()

    const gameStore = useGameStore()
    const vipStore = useVipStore()

    return useMutation({
        mutationFn: async (
            credentials: LoginRequest
        ): Promise<LoginResponse> => {
            const response: any = await postApiAuthLogin({
                body: credentials,
            })
            if (!response?.ok) {
                const error = await response?.json()
                throw new Error(error.message || 'Login failed')
            }
            return response?.json()
        },
        onMutate: () => {
            appStore.showLoading()
        },
        onSuccess: async (data) => {
            console.log(data)
            if (data) {
                // Set the core auth data immediately
                authStore.accessToken = data.accessToken

                // Now, fetch supplemental user and game data concurrently
                await Promise.all([
                    authStore.getSession(),
                    gameStore.fetchAllGames(),
                    gameStore.fetchAllGameCategories(),
                    gameSpinStore.fetchTopWins(),
                    vipStore.fetchAllVipLevels(),
                ])
            }
        },
        onSettled: () => {
            appStore.hideLoading()
        },
        onError: (e) => {
            appStore.hideLoading()
            console.log(e)
        },
    })
}
</file>

<file path="./frontend/src/sdk/runtime.client.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
// import localforage from 'localforage'
import type { CreateClientConfig } from './generated/client.gen'
export const API_BASE_URL =
    import.meta.env.VITE_API_BASE_URL || 'https://api.cashflowcasino.com'

// const token = await localforage.getItem('auth')
export const createClientConfig: CreateClientConfig = (config: any) => ({
    ...config,
    // Ensure cookies are sent with all requests from the generated Axios client
    withCredentials: true,
    headers: {
        'Content-Type': 'application/json',
        // Authorization: `Bearer ${token}`,
        Accept: 'application/json',
    },
    auth: () =>
        useAuthStore().accessToken || '',
    baseURL: API_BASE_URL,
})
</file>

<file path="./frontend/src/sdk/types.ts">
// // User type definition
// export interface User {
//   id: string
//   username: string
//   email: string | null
//   currentGameSessionDataId: string | null
//   currentAuthSessionDataId: string | null
//   avatar: string | null
//   role: string
//   isActive: boolean
//   lastLoginAt: string | null
//   totalXpGained: number
//   activeWalletId: string | null
//   vipInfoId: string | null
//   createdAt: string
//   updatedAt: string
//   deletedAt: string | null
// }

// // VIP related types
// export interface VipInfo {
//   id: string
//   level: number
//   currentXp: number
//   xpToNextLevel: number
//   progress: number
//   userId: string
//   createdAt: string
//   updatedAt: string
// }

// export interface VipLevel {
//   level: number
//   minXp: number
//   maxXp: number
//   bonus: number
//   cashback: number
//   rakeback: number
//   withdrawalLimit: number
//   dailyBonus: number
//   weeklyBonus: number
//   monthlyBonus: number
//   birthdayBonus: number
//   anniversaryBonus: number
//   color: string
//   icon: string
//   createdAt: string
//   updatedAt: string
// }

// // Game related types
// export interface Game {
//   id: string
//   name: string
//   description: string
//   thumbnail: string
//   categoryId: string
//   isActive: boolean
//   minBet: number
//   maxBet: number
//   rtp: number
//   volatility: 'LOW' | 'MEDIUM' | 'HIGH'
//   tags: string[]
//   createdAt: string
//   updatedAt: string
// }

// export interface GameCategory {
//   id: string
//   name: string
//   description: string
//   icon: string
//   isActive: boolean
//   order: number
//   createdAt: string
//   updatedAt: string
// }

// // Wallet related types
// export interface Wallet {
//   id: string
//   balance: number
//   currency: string
//   isActive: boolean
//   userId: string
//   createdAt: string
//   updatedAt: string
// }

// // API Response type
// export interface ApiResponse<T = unknown> {
//   data?: T
//   error?: {
//     message: string
//     code?: string
//   }
// }

// // RPC Client types
// export interface LoginCredentials {
//   username: string
//   password: string
// }

// export interface RpcClient {
//   // Auth
//   login(credentials: LoginCredentials): Promise<ApiResponse<{ token: string }>>
//   getMe(): Promise<ApiResponse<{ user: User }>>

//   // VIP
//   getVipInfo(): Promise<ApiResponse<VipInfo>>
//   getVipLevels(): Promise<ApiResponse<VipLevel[]>>

//   // Games
//   getGames(): Promise<ApiResponse<Game[]>>
//   getGameCategories(): Promise<ApiResponse<GameCategory[]>>
//   enterGame(gameId: string): Promise<ApiResponse<{ url: string }>>

//   // Wallet
//   getWallet(): Promise<ApiResponse<Wallet>>

//   // Token management
//   setAuthToken(token: string | null): void
//   isAuthenticated(): boolean
//   logout(): void
// }
</file>

<file path="./frontend/src/services/GameLauncher.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/services/GameLauncher.ts

// --- Type Definitions ---
/*
window.addEventListener('load', () => {
  window.parent.postMessage({ type: 'clientReady' }, '*'); // Use a specific origin in production
});
*/
/**
 * Defines the structure for the launch options object.
 */
interface LaunchOptions {
    launch_url?: string
    target_element?: string
    launch_options?: {
        game_launcher_url?: string
        [key: string]: string | number | boolean | undefined
    }
    [key: string]: unknown
}

/**
 * Defines the options that can be passed to the GameLauncher constructor.
 */
interface GameLauncherConstructorOptions {
    onMessage?: (data: Record<string, unknown>) => void
    [key: string]: unknown
}

/**
 * @class GameLauncher
 * @description Manages the creation, loading, and communication for a game iframe.
 */
class GameLauncher {
    // --- Public and Private Properties ---
    public iframe: HTMLIFrameElement | null = null
    public targetContainer: HTMLElement

    private iframeAttributes: Record<string, string> = {
        frameBorder: '0',
        allow: 'fullscreen;  autoplay',
        scroll: 'false',
        height: '100%',
        width: '100%',
        style: 'border: none; z-index: 9991',
    }

    private targetOrigin: string = ''
    private onMessageCallback:
        | ((data: Record<string, unknown>) => void)
        | undefined
    private messageListener: ((event: MessageEvent) => void) | null = null
    private loadingIndicator: HTMLElement | null = null
    private launchOptions: LaunchOptions | null = null // Store launch options

    /**
     * Creates an instance of GameLauncher.
     * @param target The DOM element or its ID where the iframe will be injected.
     * @param options Configuration options including message callbacks and custom iframe attributes.
     */
    constructor(
        target: HTMLElement | string,
        options: GameLauncherConstructorOptions = {}
    ) {
        const { onMessage, ...customIframeAttributes } = options
        this.iframeAttributes = {
            ...this.iframeAttributes,
            ...(customIframeAttributes as Record<string, string>),
        }
        this.onMessageCallback = onMessage

        if (typeof target === 'string') {
            const element = document.getElementById(target)
            if (!element) {
                throw new Error(
                    `GameLauncher error: Could not find target container with ID "${target}".`
                )
            }
            this.targetContainer = element
        } else {
            this.targetContainer = target
        }
    }

    // --- Loading Indicator Methods ---

    /**
     * Injects the CSS for the loading spinner into the document's head.
     * @private
     */
    private injectLoaderStyles(): void {
        const styleId = 'game-launcher-loader-styles'
        if (document.getElementById(styleId)) return

        const style = document.createElement('style')
        style.id = styleId
        style.innerHTML = `
      .gl-loader-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: transparent;
        z-index: 9992;
      }
      .gl-loader-spinner {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: gl-spin 1s linear infinite;
      }
      @keyframes gl-spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    `
        document.head.appendChild(style)
    }

    /**
     * Displays the loading indicator over the target container.
     * @private
     */
    private showLoadingIndicator(): void {
        this.injectLoaderStyles()
        if (this.loadingIndicator) return

        this.loadingIndicator = document.createElement('div')
        this.loadingIndicator.className = 'gl-loader-container'
        this.loadingIndicator.innerHTML = `<div class="gl-loader-spinner"></div>`

        // Ensure the target container can host an absolutely positioned element
        if (getComputedStyle(this.targetContainer).position === 'static') {
            this.targetContainer.style.position = 'relative'
        }

        this.targetContainer.appendChild(this.loadingIndicator)
    }

    /**
     * Hides and removes the loading indicator.
     * @private
     */
    private hideLoadingIndicator(): void {
        if (this.loadingIndicator) {
            this.loadingIndicator.remove()
            this.loadingIndicator = null
        }
    }

    // --- Core Methods ---

    private createIframe(): HTMLIFrameElement {
        const iframe = document.createElement('iframe')
        for (const [key, value] of Object.entries(this.iframeAttributes)) {
            iframe.setAttribute(key, value)
        }
        return iframe
    }

    private buildUrl(options: LaunchOptions): URL {
        const gameLauncherUrl = options.launch_options?.game_launcher_url
        const launchUrl = options.launch_url

        if (!gameLauncherUrl && !launchUrl) {
            throw new Error(
                'GameLauncher error: game_launcher_url or launch_url must be set.'
            )
        }
        if (gameLauncherUrl && launchUrl) {
            throw new Error(
                'GameLauncher error: Both game_launcher_url and launch_url are set. Only one is allowed.'
            )
        }

        const urlString = gameLauncherUrl || launchUrl!
        const url = new URL(urlString, window.location.origin)
        this.targetOrigin = url.origin

        if (gameLauncherUrl) {
            const encodedOptions = btoa(
                unescape(encodeURIComponent(JSON.stringify(options)))
            )
            url.searchParams.append('options', encodedOptions)
        }
        return url
    }

    public sendMessage(message: Record<string, unknown>): void {
        if (this.iframe?.contentWindow) {
            // FIX: Convert the message to a plain object to remove Vue proxies,
            // which cannot be cloned for postMessage.
            const plainMessage = JSON.parse(JSON.stringify(message))
            this.iframe.contentWindow.postMessage(
                plainMessage,
                this.targetOrigin || '*'
            )
        } else {
            console.warn('GameLauncher: Iframe not available to send message.')
        }
    }

    private setupMessageListener(): void {
        this.messageListener = (event: MessageEvent) => {
            // Basic security checks
            if (event.source !== this.iframe?.contentWindow) {
                return
            }

            // When the loader is ready, send it the game config
            if (event.data === 'RTG_LOADER_READY') {
                this.hideLoadingIndicator()
                if (this.launchOptions && this.launchOptions.launch_options) {
                    this.sendMessage({
                        type: 'INIT_GAME',
                        config: this.launchOptions.launch_options,
                    })
                } else {
                    console.error(
                        'GameLauncher Error: Received ready signal, but no gameConfig is available.'
                    )
                }
            }

            // Forward all messages to the main callback
            this.onMessageCallback?.(event.data)
        }
        window.addEventListener('message', this.messageListener)
    }

    public destroy(): void {
        this.hideLoadingIndicator() // Ensure loader is removed on destroy
        if (this.messageListener) {
            window.removeEventListener('message', this.messageListener)
            this.messageListener = null
        }
        if (this.targetContainer) {
            this.targetContainer.innerHTML = ''
        }
        console.log('GameLauncher instance destroyed.')
    }

    public run(
        launchOptions: LaunchOptions | string,
        onSuccess?: () => void,
        onError: (error: Error) => void = (error) => {
            throw error
        }
    ): void {
        try {
            this.showLoadingIndicator() // Show loader at the start of the launch process

            let options: LaunchOptions
            if (typeof launchOptions === 'string') {
                options = JSON.parse(launchOptions)
            } else {
                options = launchOptions
            }

            this.launchOptions = options // Store the options

            if (!options.launch_url && !options.launch_options) {
                options = { launch_options: options as any }
            }

            const url = this.buildUrl(
                (options.launch_options as LaunchOptions) || options
            )

            if (!this.iframe) {
                this.iframe = this.createIframe()
            }
            this.iframe.src = url.toString()

            if (!this.targetContainer.contains(this.iframe)) {
                this.targetContainer.innerHTML = '' // Clear container before adding
                this.targetContainer.appendChild(this.iframe)
                this.targetContainer.appendChild(this.loadingIndicator!) // Re-append loader on top
            }

            this.setupMessageListener()
            onSuccess?.()
        } catch (error) {
            this.hideLoadingIndicator() // Hide loader on error
            onError(error as Error)
        }
    }

    public launch = this.run
}

export default GameLauncher
</file>

<file path="./frontend/src/services/websocket.service.ts">
import { useAuthStore } from '@/stores/auth.store'
import { useEventManager } from '@/composables/EventManager'
import type { WebSocketMessage } from '@/types/websocket'

class WebSocketService {
    private socket: WebSocket | null = null
    private gameSocket: WebSocket | null = null
    private reconnectAttempts = 0
    private maxReconnectAttempts = 5
    private reconnectDelay = 1000
    private eventManager = useEventManager()

    public async initConnection(): Promise<void> {
        const authStore = useAuthStore()
        if (!authStore.isAuthenticated || this.socket) return

        const wsUrl = this.buildWebSocketUrl('/ws/user')
        this.socket = new WebSocket(wsUrl)
        this.setupSocketHandlers(this.socket, 'main')
    }

    public initGameConnection(gameId: string): void {
        if (this.gameSocket) {
            this.gameSocket.close()
        }

        const wsUrl = this.buildWebSocketUrl(`/ws/game/${gameId}`)
        this.gameSocket = new WebSocket(wsUrl)
        this.setupSocketHandlers(this.gameSocket, 'game')
    }

    private setupSocketHandlers(
        socket: WebSocket,
        type: 'main' | 'game'
    ): void {
        socket.onopen = (): void => {
            console.log(`${type} WebSocket connected`)
            this.reconnectAttempts = 0
        }

        socket.onmessage = (event: MessageEvent): void => {
            try {
                const data = JSON.parse(event.data.toString())
                this.handleIncomingMessage(data)
            } catch (error) {
                console.error('Error parsing WebSocket message:', error)
            }
        }

        socket.onclose = (): void => {
            console.log(`${type} WebSocket disconnected`)
            this.handleReconnect(type)
        }

        socket.onerror = (error: Event): void => {
            console.error(`${type} WebSocket error:`, error)
        }
    }

    private handleIncomingMessage(data: unknown): void {
        try {
            if (!data || typeof data !== 'object') {
                console.warn(
                    'Received invalid WebSocket message: Not an object',
                    data
                )
                return
            }

            const message = data as WebSocketMessage

            // Validate message structure
            if (!message.type || !message.payload) {
                console.warn(
                    'Received invalid WebSocket message: Missing type or payload',
                    message
                )
                return
            }

            // Handle different message types
            switch (message.type) {
                case 'user:update':
                    this.eventManager.emit('user:updated', {data: message.payload, type: 'user', action: 'update'})
                    break
                case 'wallet:update':
                    this.eventManager.emit('wallet:updated', {data: message.payload, type: 'user', action: 'update'})
                    break
                case 'vip:update':
                    this.eventManager.emit('vip:updated', {data: message.payload, type: 'user', action: 'update'})
                    break
                case 'xp:gain':
                    this.eventManager.emit('xp:gain', {amount: message.payload.amount})
                    break          
                default:
                    console.warn(
                        `Unknown message type`,
                        message
                    )
            }
        } catch (error) {
            console.error('Error handling WebSocket message:', error, data)
        }
    }

    private handleReconnect(type: 'main' | 'game'): void {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.error('Max reconnection attempts reached')
            return
        }

        this.reconnectAttempts++
        const delay =
            this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1)

        setTimeout(
            () => {
                if (type === 'main') {
                    this.initConnection()
                }
            },
            Math.min(delay, 30000)
        )
    }

    private buildWebSocketUrl(path: string): string {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'
        const host =
            import.meta.env.VITE_API_URL?.replace(/^https?:\/\//, '') ||
            window.location.host
        const token = useAuthStore().accessToken
        return `${protocol}//${host}${path}?token=${token}`
    }

    public closeConnections(): void {
        if (this.socket) {
            this.socket.close()
            this.socket = null
        }
        if (this.gameSocket) {
            this.gameSocket.close()
            this.gameSocket = null
        }
    }

    /**
     * Check if the main WebSocket connection is active
     */
    public isConnected(): boolean {
        return this.socket !== null && this.socket.readyState === WebSocket.OPEN
    }
}

export const webSocketService = new WebSocketService()
</file>

<file path="./frontend/src/services/ws.notifications.ts">
import { useEventManager } from '@/composables/EventManager'
import type { WSMessage, EventMessage } from 'shared/ws/protocol'
import type { NotificationsEvents } from 'shared/ws/contracts'

/**
 * Narrow EventManager emit signature locally to satisfy ESLint without using any.
 * Update the type if your EventManager defines concrete keys for notifications.
 */
type NotificationBus = {
  emit: (event: 'notifications.push' | 'notifications.read', payload: unknown) => void
}

/**
 * Notifications WebSocket bridge with reconnection and heartbeat.
 * Emits:
 * - 'notification:push' with the NotificationItem
 * - 'notification:read' with the notificationId
 */
class NotificationsWsBridge {
  private get bus(): NotificationBus {
    return useEventManager() as unknown as NotificationBus
  }
  private socket: WebSocket | null = null
  private connected = false

  // Reconnection/backoff + heartbeat
  private reconnectAttempts = 0
  private reconnectTimer: number | null = null
  private keepAliveTimer: number | null = null
  private lastPongTs = 0
  private readonly keepAliveIntervalMs = 15000
  private readonly pongTimeoutMs = 12000
  private readonly maxReconnectDelayMs = 30000

  public isConnected(): boolean {
    return this.connected && !!this.socket && this.socket.readyState === WebSocket.OPEN
  }

  /** Emit helper with typed event keys to avoid 'any' and unknown keys */
  private emitPush(payload: NotificationsEvents['notifications.push']) {
    this.bus.emit('notifications.push', payload.notification)
  }
  private emitRead(payload: NotificationsEvents['notifications.read']) {
    this.bus.emit('notifications.read', payload.notificationId)
  }

  private scheduleReconnect(accessToken?: string) {
    if (this.reconnectTimer) return
    const base = Math.min(1000 * 2 ** this.reconnectAttempts, this.maxReconnectDelayMs)
    const jitter = Math.floor(Math.random() * 500)
    const delay = base + jitter
    this.reconnectTimer = window.setTimeout(() => {
      this.reconnectTimer = null
      this.reconnectAttempts++
      this.connect(accessToken)
    }, delay)
  }

  private startHeartbeat() {
    this.stopHeartbeat()
    this.lastPongTs = Date.now()
    this.keepAliveTimer = window.setInterval(() => {
      if (!this.socket || this.socket.readyState !== WebSocket.OPEN) return
      try {
        this.socket.send(JSON.stringify({ kind: 'ping', ts: Date.now() }))
      } catch {}
      if (Date.now() - this.lastPongTs > this.keepAliveIntervalMs + this.pongTimeoutMs) {
        try { this.socket?.close() } catch {}
      }
    }, this.keepAliveIntervalMs) as unknown as number
  }

  private stopHeartbeat() {
    if (this.keepAliveTimer) {
      clearInterval(this.keepAliveTimer)
      this.keepAliveTimer = null
    }
  }

  public connect(accessToken?: string): void {
    if (this.isConnected()) return

    try {
      const proto = location.protocol === 'https:' ? 'wss' : 'ws'
      const url = new URL(`${proto}://${location.host}/ws/notifications`)
      if (accessToken) {
        url.searchParams.set('token', accessToken)
      }

      const ws = new WebSocket(url.toString())

      ws.onopen = () => {
        this.connected = true
        this.socket = ws
        this.reconnectAttempts = 0
        this.lastPongTs = Date.now()
        this.startHeartbeat()
      }

      ws.onmessage = (evt) => {
        this.lastPongTs = Date.now()

        let msg: WSMessage | null = null
        try {
          msg = JSON.parse(typeof evt.data === 'string' ? evt.data : String(evt.data))
        } catch {
          return
        }
        if (!msg) return

        // Treat any inbound message as activity for heartbeat purposes
        this.lastPongTs = Date.now()

        if (msg.kind !== 'event') return

        const ev = msg as EventMessage<'notifications', keyof NotificationsEvents, NotificationsEvents[keyof NotificationsEvents]>

        switch (ev.event) {
          case 'notifications.push': {
            const payload = ev.payload as NotificationsEvents['notifications.push']
            this.emitPush(payload)
            break
          }
          case 'notifications.read': {
            const payload = ev.payload as NotificationsEvents['notifications.read']
            this.emitRead(payload)
            break
          }
          default:
            break
        }
      }

      ws.onclose = () => {
        this.connected = false
        this.socket = null
        this.stopHeartbeat()
        this.scheduleReconnect(accessToken)
      }

      ws.onerror = () => {
        // onclose handles reconnection
      }
    } catch {
      // swallow and let reconnection handle subsequent attempts
    }
  }

  public close(): void {
    try {
      if (this.reconnectTimer) {
        clearTimeout(this.reconnectTimer)
        this.reconnectTimer = null
      }
      this.stopHeartbeat()

      if (this.socket && this.socket.readyState === WebSocket.OPEN) {
        this.socket.close()
      }
    } finally {
      this.connected = false
      this.socket = null
    }
  }
}

export const notificationsWsBridge = new NotificationsWsBridge()
</file>

<file path="./frontend/src/services/ws.user.ts">
import { useEventManager } from '@/composables/EventManager'
import type { WSMessage, EventMessage, RpcMessage } from 'shared/ws/protocol'
import type { UserEvents } from 'shared/ws/contracts'
import type { ModelChangeEventFromServer } from '@/types/events'

/**
 * Map raw WS payload (Record) into the app's typed ModelChangeEventFromServer shape.
 * The backend currently sends plain snapshots/patches; we wrap them for the existing EventManager contract.
 */
function toModelChange(type: string, data: unknown): ModelChangeEventFromServer {
  return {
    type,
    action: 'update',
    data,
  } as ModelChangeEventFromServer
}

/**
 * Lightweight user-topic WebSocket bridge.
 * - Connects to /ws/user with current location origin
 * - Forwards typed events to the global EventManager:
 *   - user.updated: emits 'user:updated', 'wallet:updated', 'vip:updated' (patch-based)
 *   - user.snapshot: same as above but with snapshot payload
 *
 * The actual merging into Pinia stores is handled by useRealtimeUpdates composable.
 */
class UserWsBridge {
  private socket: WebSocket | null = null
  private connected = false

  // RPC state
  private inflight = new Map<string, {
    // Use TResult as unknown at storage boundary; cast on resolve to satisfy TS
    resolve: (value: unknown) => void
    reject: (reason?: unknown) => void
    timer: number
  }>()

  // Reconnection/backoff + heartbeat
  private reconnectAttempts = 0
  private reconnectTimer: number | null = null
  private keepAliveTimer: number | null = null
  private lastPongTs = 0
  private readonly keepAliveIntervalMs = 15000
  private readonly pongTimeoutMs = 12000
  private readonly maxReconnectDelayMs = 30000

  private nextId(): string {
    // lightweight correlation id
    return Math.random().toString(36).slice(2) + Date.now().toString(36)
  }

  private scheduleReconnect(accessToken?: string) {
    if (this.reconnectTimer) return
    // Exponential backoff with jitter
    const base = Math.min(1000 * 2 ** this.reconnectAttempts, this.maxReconnectDelayMs)
    const jitter = Math.floor(Math.random() * 500)
    const delay = base + jitter
    this.reconnectTimer = window.setTimeout(() => {
      this.reconnectTimer = null
      this.reconnectAttempts++
      this.connect(accessToken)
    }, delay)
  }

  private startHeartbeat() {
    this.stopHeartbeat()
    this.lastPongTs = Date.now()
    this.keepAliveTimer = window.setInterval(() => {
      if (!this.socket || this.socket.readyState !== WebSocket.OPEN) return
      try {
        // Use a lightweight ping frame. If server echoes message events only,
        // we still update lastPongTs on any inbound event below.
        this.socket.send(JSON.stringify({ kind: 'ping', ts: Date.now() }))
      } catch {}
      // If no inbound traffic for too long, force-close to trigger reconnect
      if (Date.now() - this.lastPongTs > this.keepAliveIntervalMs + this.pongTimeoutMs) {
        try { this.socket?.close() } catch {}
      }
    }, this.keepAliveIntervalMs) as unknown as number
  }

  private stopHeartbeat() {
    if (this.keepAliveTimer) {
      clearInterval(this.keepAliveTimer)
      this.keepAliveTimer = null
    }
  }

  public isConnected(): boolean {
    return this.connected && !!this.socket && this.socket.readyState === WebSocket.OPEN
  }

  public connect(accessToken?: string): void {
    if (this.isConnected()) return

    try {
      const proto = location.protocol === 'https:' ? 'wss' : 'ws'
      const url = new URL(`${proto}://${location.host}/ws/user`)
      if (accessToken) {
        url.searchParams.set('token', accessToken)
      }

      const ws = new WebSocket(url.toString())
      const eventManager = useEventManager()

      ws.onopen = () => {
        this.connected = true
        this.socket = ws
      }

      ws.onmessage = (evt) => {
        let msg: WSMessage | null = null
        try {
          msg = JSON.parse(typeof evt.data === 'string' ? evt.data : String(evt.data))
        } catch {
          return
        }
        if (!msg || msg.kind !== 'event') return

        const ev = msg as EventMessage<'user', keyof UserEvents, UserEvents[keyof UserEvents]>
        switch (ev.event) {
          case 'user.updated': {
            const payload = ev.payload as UserEvents['user.updated']
            if (payload.patch?.user) eventManager.emit('user:updated', toModelChange('user', payload.patch.user))
            if (payload.patch?.wallet) eventManager.emit('wallet:updated', toModelChange('wallet', payload.patch.wallet))
            if (payload.patch?.vipInfo) eventManager.emit('vip:updated', toModelChange('vip', payload.patch.vipInfo))
            break
          }
          case 'user.snapshot': {
            const payload = ev.payload as UserEvents['user.snapshot']
            if (payload.user) eventManager.emit('user:updated', toModelChange('user', payload.user))
            if (payload.wallet) eventManager.emit('wallet:updated', toModelChange('wallet', payload.wallet))
            if (payload.vipInfo) eventManager.emit('vip:updated', toModelChange('vip', payload.vipInfo))
            break
          }
          default:
            break
        }
      }

      ws.onclose = () => {
        this.connected = false
        this.socket = null
      }

      ws.onerror = () => {
        // handled by onclose
      }
    } catch {
      // swallow connection errors
    }
  }

  public close(): void {
    try {
      // cancel reconnection attempts
      if (this.reconnectTimer) {
        clearTimeout(this.reconnectTimer)
        this.reconnectTimer = null
      }

      // stop heartbeat
      this.stopHeartbeat()

      // reject all inflight RPCs
      for (const [, entry] of this.inflight) {
        clearTimeout(entry.timer)
        entry.reject({ code: 'CONNECTION_CLOSED', message: 'WebSocket closed' })
      }
      this.inflight.clear()

      if (this.socket && this.socket.readyState === WebSocket.OPEN) {
        this.socket.close()
      }
    } finally {
      this.connected = false
      this.socket = null
    }
  }

  /**
   * Send an RPC request over the user topic.
   */
  public rpc<TMethod extends string = string, TParams = unknown, TResult = unknown>(
    method: TMethod,
    params: TParams,
    timeoutMs: number = 8000
  ): Promise<TResult> {
    return new Promise<TResult>((resolve, reject) => {
      if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
        reject({ code: 'NOT_CONNECTED', message: 'WebSocket is not open' })
        return
      }
      const id = this.nextId()
      const payload: RpcMessage<'user', string, unknown> = {
        v: '1',
        kind: 'rpc',
        topic: 'user',
        method,
        params,
        id,
        ts: Date.now(),
      }
      const timer = window.setTimeout(() => {
        const inflight = this.inflight.get(id)
        if (inflight) {
          this.inflight.delete(id)
          reject({ code: 'TIMEOUT', message: `RPC ${method} timed out` })
        }
      }, timeoutMs)

      // Wrap resolve to 'unknown' to align with inflight map signature
      const wrappedResolve = (value: unknown) => resolve(value as TResult)
      this.inflight.set(id, { resolve: wrappedResolve as (value: unknown) => void, reject, timer })
      try {
        this.socket.send(JSON.stringify(payload))
      } catch (err) {
        clearTimeout(timer)
        this.inflight.delete(id)
        reject({ code: 'SEND_FAILED', message: 'Failed to send RPC', data: err })
      }
    })
  }

  /**
   * Convenience helper to fetch a fresh user snapshot.
   */
  public async getUser(): Promise<UserEvents['user.snapshot']> {
    const result = await this.rpc<'user.get', { userId?: string }, UserEvents['user.snapshot']>('user.get', {})
    return result
  }
}

export const userWsBridge = new UserWsBridge()
</file>

<file path="./frontend/src/stores/app.store.ts">
import { defineStore } from 'pinia'


export const useAppStore = defineStore('app', () => {
    const globalLoading = ref(false)

    function showLoading() {
        // console.log('showLoading called - stack:', new Error().stack)
        globalLoading.value = true
        // production: removed debug logs
    }

    function hideLoading() {
        globalLoading.value = false
        // production: removed debug logs
    }

    // removed debug helper for production

    return {
        globalLoading,
        showLoading,
        hideLoading,
    }
})
</file>

<file path="./frontend/src/stores/auth.store.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
import router from '@/router'
import {
    getApiAuthMe,
    postApiAuthLogin,
    postApiAuthSignup,
    type User,
} from '@/sdk/generated'
import { client } from '@/sdk/generated/client.gen'
import { webSocketService } from '@/services/websocket.service'
import { userWsBridge } from '@/services/ws.user'
import { notificationsWsBridge } from '@/services/ws.notifications'
import { pinia } from '@/stores'
import { defineStore } from 'pinia'
import { computed, ref } from 'vue'
import { useAppStore } from './app.store'
import { useDepositStore } from './deposit.store'
import { useGameStore } from './game.store'
import { useGameSpinStore } from './gamespin.store'
import { useNotificationStore } from './notification.store'
import { useVipStore } from './vip.store'

interface AuthTokens {
    accessToken: string
    /**
     * Optional refresh token used when third‑party cookies are blocked.
     * When present, we will send it in Authorization for /api/auth/refresh.
     */
    refreshToken?: string | null
}

export const useAuthStore = defineStore('auth', () => {
    const notificationStore = useNotificationStore()

    const currentUser = ref<User | null>(null)
    const accessToken = ref<string | null>(null)
    // Persist refresh token in sessionStorage to survive reloads but clear on browser close
    const refreshToken = ref<string | null>(null)
    const isLoading = ref(false)
    const error = ref<string | null>(null)
    const isSignUpMode = ref(false)
    // readiness flag to coordinate guards/UI bootstrap
    const authReady = ref(false)
    let interceptorId: number | null = null

    // Single-flight refresh tracking
    let isRefreshing = false
    let refreshPromise: Promise<string | null> | null = null
    const pendingRequests: Array<() => void> = []

    // Set tokens in state and (re)install interceptors
    const setTokens = async (tokens: AuthTokens) => {
        accessToken.value = tokens.accessToken
        // Capture optional refresh token if provided by backend (cookie-less fallback)
        if (typeof tokens.refreshToken === 'string' && tokens.refreshToken.length > 0) {
            refreshToken.value = tokens.refreshToken
            try {
                sessionStorage.setItem('cfc_refresh_token', tokens.refreshToken)
            } catch {}
        }

        if (interceptorId !== null) {
            client.instance.interceptors.request.eject(interceptorId)
            client.instance.interceptors.response.eject(interceptorId + 100000) // response id offset
        }

        // Request interceptor: attach Authorization
        const reqId = client.instance.interceptors.request.use((config) => {
            try {
                const url = config.url || ''
                const isAuthEndpoint =
                    url.includes('/api/auth/login') ||
                    url.includes('/api/auth/signup') ||
                    url.includes('/api/auth/refresh') ||
                    url.includes('/auth/login') ||
                    url.includes('/auth/signup') ||
                    url.includes('/auth/refresh')

                const at = accessToken.value || tokens.accessToken
                if (!isAuthEndpoint && at) {
                    config.headers.set('Authorization', `Bearer ${at}`)
                } else {
                    config.headers.delete?.('Authorization')
                }
                // ensure cookies are sent for refresh and same-site calls
                ;(config as any).withCredentials = true
            } catch (e) {
                console.debug('[axios][request] interceptor error', e)
            }
            return config
        })
        interceptorId = reqId

        // Response interceptor: single-flight 401 -> refresh -> retry
        client.instance.interceptors.response.use(
            (response) => response,
            async (error: any) => {
                const originalRequest = error?.config
                const status = error?.response?.status

                if (status === 401 && !originalRequest?._retry) {
                    originalRequest._retry = true

                    // Queue pending requests while refreshing
                    if (!isRefreshing) {
                        isRefreshing = true
                        refreshPromise = refreshAccessToken()
                            .catch(() => null)
                            .finally(() => {
                                isRefreshing = false
                            })
                    }

                    const newToken = await refreshPromise
                    if (newToken) {
                        originalRequest.headers['Authorization'] = `Bearer ${newToken}`
                        // drain queued resolvers
                        pendingRequests.splice(0).forEach((resolve) => resolve())
                        return client.instance(originalRequest)
                    }

                    // refresh failed
                    pendingRequests.splice(0).forEach((resolve) => resolve())
                    await clearAuth()
                    router.push('/login')
                    return Promise.reject(error)
                }

                return Promise.reject(error)
            }
        )
        // Keep reference to request interceptor only
        interceptorId = reqId
        console.log('Access token set.')
    }


    // Clear auth state
    const clearAuth = async () => {
        currentUser.value = null
        accessToken.value = null
        refreshToken.value = null
        try {
            sessionStorage.removeItem('cfc_refresh_token')
        } catch {}
        if (interceptorId !== null) {
            client.instance.interceptors.request.eject(interceptorId)
            // Best effort: response interceptor ejection paired
            try {
                client.instance.interceptors.response.eject(interceptorId + 100000)
            } catch {}
            interceptorId = null
        }
    }

    // Sign up a new user
    const signUp = async (credentials: {
        username: string
        password: string
    }) => {
        isLoading.value = true
        error.value = null

        try {
            const response = await postApiAuthSignup({
                body: {
                    username: credentials.username,
                    password: credentials.password,
                },
            })

            if (response.data) {
                const { accessToken: at } = response.data as any
                if (at) {
                    await setTokens({ accessToken: at })
                    // optional: currentUser is loaded by getSession
                    notificationStore.addNotification({
                        type: 'success',
                        message: 'Registration successful!',
                    })
                    await getSession()
                    return true
                }
            }
            return false
        } catch (err: any) {
            error.value = err.response?.data?.message || 'Registration failed'
            notificationStore.addNotification({
                type: 'error',
                message: error.value || 'An error occurred',
            })
            return false
        } finally {
            isLoading.value = false
        }
    }

    // Login user
    const login = async (credentials: {
        username: string
        password: string
    }) => {
        const appStore = useAppStore()
        const gameSpinStore = useGameSpinStore()
        const gameStore = useGameStore()
        const vipStore = useVipStore()
        try {
            appStore.showLoading()

            isLoading.value = true
            error.value = null

            const response = await postApiAuthLogin({
                body: {
                    username: credentials.username,
                    password: credentials.password,
                },
            })
            const responseData = response.data as any

            if (!responseData) {
                appStore.hideLoading()
                throw new Error('No data received from server')
            }
            if (responseData.error) {
                throw new Error(responseData.error.message || 'Login failed')
            }

            if (responseData.accessToken) {
                // Accept optional refreshToken from server for cookie-less fallback
                await setTokens({
                    accessToken: responseData.accessToken,
                    refreshToken: responseData.refreshToken ?? null,
                })
                try {
                    console.debug('[auth][login] tokens set; fetching bootstrap data...')
                    await Promise.all([
                        getSession(),
                        gameStore.fetchAllGames(),
                        gameSpinStore.fetchTopWins(),
                        vipStore.fetchAllVipLevels(),
                    ])
                    webSocketService.initConnection()

                    try {
                        router.push('/')
                    } catch (e) {
                        console.log(e)
                    }
                    appStore.hideLoading()

                    return responseData
                } catch (e) {
                    console.log(e)
                    appStore.hideLoading()
                    await clearAuth()
                    router.push('/login')
                }
            } else {
                throw new Error('Invalid response from server')
            }
        } catch (err: unknown) {
            const errorMessage =
                err instanceof Error ? err.message : 'Failed to login'
            error.value = errorMessage

            notificationStore.addNotification({
                type: 'error',
                message: errorMessage,
            })

            throw err
        } finally {
            isLoading.value = false
        }
    }

    // Get current session
    const getSession = async () => {
        const vipStore = useVipStore()
        const depositStore = useDepositStore()
        if (!accessToken.value) return null

        try {
            console.debug('[auth][getSession] requesting...')
            const response = await getApiAuthMe()
            console.debug('[auth][getSession] response ok=', !!response.data)
            if (response.data && response.data.wallet) {
                currentUser.value = response.data.user
                vipStore.setVipInfo(response.data.vipInfo)
                depositStore.setDepositInfo({
                    wallet: response.data.wallet as any,
                })
                return response.data
            }
            return null
        } catch (err: any) {
            console.debug('[auth][getSession] failed, attempting refresh', err?.message || err)
            // Try a one-time refresh if session fetch failed
            const newToken = await refreshAccessToken().catch(() => null)
            if (newToken) {
                try {
                    const response = await getApiAuthMe()
                    if (response.data && response.data.wallet) {
                        currentUser.value = response.data.user
                        vipStore.setVipInfo(response.data.vipInfo)
                        depositStore.setDepositInfo({
                            wallet: response.data.wallet as any,
                        })
                        return response.data
                    }
                } catch {
                    // fallthrough to clear
                }
            }
            await clearAuth()
            return err
        }
    }

    // Check if user is authenticated
    const isAuthenticated = computed(
        () => !!currentUser.value
    )

    // Toggle sign up mode
    const toggleSignUpMode = () => {
        isSignUpMode.value = !isSignUpMode.value
    }

    // Logout
    const logout = () => {
        const router = useRouter()
        try {
            webSocketService.closeConnections()
        } finally {
            userWsBridge.close()
            notificationsWsBridge.close()
        }
        clearAuth()
        router.push('/login')
    }

    // Initialize auth state
    // Initialize WebSocket connection
    const initWebSocket = (): void => {
        if (accessToken.value) {
            if (!webSocketService.isConnected()) {
                webSocketService.initConnection()
            }
            userWsBridge.connect(accessToken.value)
            notificationsWsBridge.connect(accessToken.value)
        }
    }

    // Close WebSocket connection
    const closeWebSocket = (): void => {
        try {
            webSocketService.closeConnections()
        } finally {
            userWsBridge.close()
            notificationsWsBridge.close()
        }
    }

    // Refresh the access token using the refresh cookie
    const refreshAccessToken = async (): Promise<string | null> => {
        // Step 1: try cookie-based refresh (works when third-party cookies allowed)
        try {
            const res = await client.instance.post('/api/auth/refresh', null, {
                withCredentials: true,
                headers: {
                    'Cache-Control': 'no-cache',
                    Pragma: 'no-cache',
                },
            })
            const at = res?.data?.accessToken as string | undefined
            if (at) {
                await setTokens({ accessToken: at })
                return at
            }
        } catch (e) {
            console.debug('[auth][refresh][cookie] failed', e)
        }

        // Step 2: fallback to Authorization: Bearer <refreshToken> when cookies are blocked
        try {
            const rt =
                refreshToken.value ||
                (() => {
                    try {
                        return sessionStorage.getItem('cfc_refresh_token')
                    } catch {
                        return null
                    }
                })()

            if (!rt) {
                return null
            }

            const res2 = await client.instance.post('/api/auth/refresh', null, {
                withCredentials: false,
                headers: {
                    Authorization: `Bearer ${rt}`,
                    'Cache-Control': 'no-cache',
                    Pragma: 'no-cache',
                },
            })
            const at2 = res2?.data?.accessToken as string | undefined
            if (at2) {
                await setTokens({ accessToken: at2 })
                return at2
            }
        } catch (e) {
            console.debug('[auth][refresh][auth-fallback] failed', e)
        }

        return null
    }

    // Initialize the store
    const init = async (): Promise<void> => {
        try {
            client.instance.defaults.withCredentials = true

            // Load refresh token from sessionStorage for fallback flow
            try {
                const rt = sessionStorage.getItem('cfc_refresh_token')
                if (rt) refreshToken.value = rt
            } catch {}

            // Attempt silent refresh to avoid weekly re-login
            const at = await refreshAccessToken()
            if (at) {
                await getSession()
                initWebSocket()
            }
        } catch (error) {
            console.error('Failed to initialize session:', error)
            await clearAuth()
        } finally {
            authReady.value = true
        }
    }


    // // Call init on store creation
    init()

    return {
        // State
        currentUser,
        accessToken,
        isLoading,
        error,
        isSignUpMode,
        authReady,

        // Getters
        isAuthenticated,

        // Actions
        setTokens,
        clearAuth,
        signUp,
        login,
        getSession,
        toggleSignUpMode,
        logout,
        initWebSocket,
        closeWebSocket,
        init,
    }
})
export function useAuthStoreOutside() {
    return useAuthStore(pinia)
}


// Import other stores
</file>

<file path="./frontend/src/stores/chat.store.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
import { defineStore } from 'pinia'
import { ref, reactive } from 'vue'
// import { useSocketStore } from './socket'
// import { useNotificationStore } from './notifications'
// import { useModalsStore } from './modals'

interface ChatMessages {
    data: any[] | null
    loading: boolean
}

export const useChatStore = defineStore('chat', () => {
    const lastMessage = ref<number | null>(null)
    const scroll = ref(true)
    const room = ref(localStorage.getItem('chatRoom') || 'en')
    const online = reactive({
        en: 0,
        tr: 0,
        de: 0,
        es: 0,
        beg: 0,
        whale: 0,
    })
    const messages = reactive<ChatMessages>({
        data: null,
        loading: false,
    })

    // const socketStore = useSocketStore()
    // const notificationsStore = useNotificationStore()
    // const modalsStore = useModalsStore()

    const isChatOpen = ref(false)

    function setChatOpenState(isOpen: boolean) {
        isChatOpen.value = isOpen
    }

    function setLastMessage() {
        lastMessage.value = new Date().getTime()
    }

    function setScroll(value: boolean) {
        scroll.value = value
    }

    function setRoom(newRoom: string) {
        if (room.value === newRoom) return
        room.value = newRoom
        localStorage.setItem('chatRoom', newRoom)
        // getMessages({ room: newRoom })
    }

    function setOnline(data: {
        en: number
        tr: number
        de: number
        es: number
        beg: number
        whale: number
    }) {
        Object.assign(online, data)
    }

    function setMessages(data: any[]) {
        messages.data = data
    }

    function addMessage(message: any) {
        if (!messages.data) messages.data = []
        messages.data.push(message)
        if (messages.data.length > 50 && scroll.value) {
            removeOverdueMessages()
        }
    }

    function removeMessage(messageId: string) {
        if (!messages.data) return
        const index = messages.data.findIndex((msg) => msg._id === messageId)
        if (index !== -1) {
            messages.data.splice(index, 1)
        }
    }

    function removeOverdueMessages() {
        if (messages.data) {
            messages.data.splice(0, messages.data.length - 50)
        }
    }

    function clearMessages() {
        messages.data = []
    }

    function setLoading(value: boolean) {
        messages.loading = value
    }

    function socketInit(data: any) {
        setOnline(data.online)
        // getMessages({ room: room.value })
    }

    function socketOnline(data: any) {
        setOnline(data.online)
    }

    function socketMessage(data: any) {
        addMessage(data.message)
    }

    function socketRemove(data: any) {
        removeMessage(data.messageId)
    }

    function socketClear() {
        clearMessages()
    }

    // function getMessages(data: { room: string }) {
    //     // if (!socketStore.general || messages.loading) return
    //     // setLoading(true)
    //     // socketStore.general.emit('getChatMessages', data, (res: any) => {
    //     //     if (res.success) {
    //     //         setScroll(true)
    //     //         setMessages(res.messages)
    //     //     }
    //     //     setLoading(false)
    //     // })
    // }

    // function sendMessage(data: any) {
    //     // if (!socketStore.general || socketStore.sendLoading) return
    //     // socketStore.setSendLoading('ChatMessage')
    //     // socketStore.general.emit('sendChatMessage', data, (res: any) => {
    //     //     if (!res.success) {
    //     //         notificationsStore.show(res.error)
    //     //     }
    //     //     setLastMessage()
    //     //     socketStore.setSendLoading(null)
    //     // })
    // }

    // function sendRemove(data: any) {
    //     // if (!socketStore.general || socketStore.sendLoading) return
    //     // socketStore.setSendLoading('ChatRemove')
    //     // socketStore.general.emit('sendChatRemove', data, (res: any) => {
    //     //     if (res.success) {
    //     //         modalsStore.setShow(null)
    //     //     } else {
    //     //         notificationsStore.show(res.error)
    //     //     }
    //     //     socketStore.setSendLoading(null)
    //     // })
    // }

    // function sendClear(data: any) {
    //     // if (!socketStore.general || socketStore.sendLoading) return
    //     // socketStore.setSendLoading('ChatClear')
    //     // socketStore.general.emit('sendChatClear', data, (res: any) => {
    //     //     if (!res.success) {
    //     //         notificationsStore.show(res.error)
    //     //     }
    //     //     socketStore.setSendLoading(null)
    //     // })
    // }

    // function sendLock(data: any) {
    //     // if (!socketStore.general || socketStore.sendLoading) return
    //     // socketStore.setSendLoading('ChatLock')
    //     // socketStore.general.emit('sendChatLock', data, (res: any) => {
    //     //     if (!res.success) {
    //     //         notificationsStore.show(res.error)
    //     //     }
    //     //     socketStore.setSendLoading(null)
    //     // })
    // }

    return {
        lastMessage,
        scroll,
        room,
        online,
        messages,
        isChatOpen,
        setChatOpenState,
        setLastMessage,
        setScroll,
        setRoom,
        setOnline,
        setMessages,
        addMessage,
        removeMessage,
        removeOverdueMessages,
        clearMessages,
        setLoading,
        socketInit,
        socketOnline,
        socketMessage,
        socketRemove,
        socketClear,
        // getMessages,
        // sendMessage,
        // sendRemove,
        // sendClear,
        // sendLock,
    }
})
</file>

<file path="./frontend/src/stores/deposit.store.ts">
import { defineStore } from 'pinia'
import { ref } from 'vue'
import { Operator } from '@/sdk/generated/operator.gen'
import { Wallet } from '@/sdk/generated'

// type Operator = InferResponseType<typeof api.operators.$get>[0]
// export type Wallet = InferResponseType<typeof api.me.$get>['wallet']

export const useDepositStore = defineStore('deposit', () => {
    // State
    const wallet = ref<Wallet>()
    const operator = ref<Operator>()

    // Actions
    function setDepositInfo(data: { wallet: Wallet; operator?: Operator }) {
        wallet.value = data.wallet
        operator.value = data.operator
    }

    function clearDepositInfo() {
        wallet.value = undefined
        operator.value = undefined
    }

    return {
        wallet,
        operator,
        setDepositInfo,
        clearDepositInfo,
    }
})
</file>

<file path="./frontend/src/stores/exception.ts">
// error handle function
export const handleException = (code: number): string => {
    switch (code) {
        case 0:
            return 'Error occurred'
        case 401:
            return 'The login account or password is incorrect'
        case 101004:
            return 'Credentials have expired. Please log in again'
        case 100000:
            return 'The provided data is invalid'
        case 100001:
            return 'Password does not meet the requirements'
        case 100002:
            return 'User account is locked'
        case 101001:
            return 'Login data is invalid'
        case 101002:
            return 'The login account or password is incorrect'
        case 101003:
            return 'Login account does not exist'
        case 102001:
            return 'Registration failed'
        case 102002:
            return 'Registration data is invalid'
        case 102003:
            return 'The account is already in use, please try another one'
        case 103001:
            return 'Invalid nickname format (invalid length or contains invalid characters)'
        case 103002:
            return 'Nickname cannot be the same as email'
        case 103003:
            return 'Invalid email format'
        case 103004:
            return 'Invalid phone number format'
        case 103005:
            return 'New password must be different from the current one'
        case 103006:
            return 'Current password is incorrect'
        case 103007:
            return 'New email cannot be the same as the current email'
        case 103008:
            return 'The information you are trying to update is already taken'
        case 103009:
            return 'Invalid avatar index'
        case 103010:
            return 'Invalid date of birth format'
        case 106001:
            return 'Depositor information not submitted'
        case 106002:
            return 'Duplicate depositor ID'
        case 106003:
            return 'Amount is outside the allowed range'
        case 106004:
            return 'Deposit failed'
        case 106005:
            return 'Invalid depositor ID format'
        case 106101:
            return 'Insufficient withdrawable amount'
        case 106202:
            return 'Deposit failed'
        case 107001:
            return 'VIP data error'
        case 107002:
            return 'VIP task error'
        case 107003:
            return 'Failed to claim VIP task'
        case 107004:
            return 'Failed to claim VIP reward'
        case 107005:
            return 'VIP reward already claimed'
        case 107006:
            return 'VIP task not found'
        case 107007:
            return 'VIP task reward already claimed'
        case 107008:
            return 'VIP task conditions not met'
        case 107009:
            return 'VIP check-in conditions not met'
        case 108001:
            return 'Invalid game ID'
        case 108002:
            return 'Invalid game pagination'
        case 108003:
            return 'Maximum page limit reached'
        case 108004:
            return 'Invalid game type'
        default:
            return 'An error occurred'
    }
}
</file>

<file path="./frontend/src/stores/game.store.ts">
import { defineStore } from 'pinia'
import { ref } from 'vue'
import { useMutation, useQueryClient } from '@tanstack/vue-query'
import { useDebounceFn } from '@vueuse/core'
import {
    getApiGamesAll,
    getApiGamesCategories,
    postApiGamesLeave,
    postApiUserGamesFavorite,
    postApiGamesByIdEnter,
    type PostApiGamesByIdEnterData,
    type Game,
    type PostApiGamesByIdEnterResponse,
} from '@/sdk/generated'
import { useAppStore } from './app.store'
import { useAuthStore } from './auth.store'

export const useGameStore = defineStore('game', () => {
    const appStore = useAppStore()
    const queryClient = useQueryClient()

    // State
    const games = ref<Game[]>([])
    const categories = ref<string[]>([]) // Changed from GameCategory[] to string[]
    const currentGame = ref<string | null>(null)
    const gameSession = ref<unknown>(null)
    const favorites = ref<string[]>([])
    const currentGameOptions = ref<PostApiGamesByIdEnterResponse | null>(null)
    // Actions
    async function fetchAllGames() {
        try {
            const response = await getApiGamesAll()
            if (response.data) {
                // Transform the response to match our Game type
                const uniqueGames = response.data.reduce<Game[]>(
                    (acc, game) => {
                        if (!acc.some((g) => g.id === game.id)) {
                            acc.push({
                                ...game,
                                // Ensure all required fields are present
                                category: game.category || 'slots',
                                tags: Array.isArray(game.tags) ? game.tags : [],
                            } as Game)
                        }
                        return acc
                    },
                    []
                )
                games.value = uniqueGames
            }
        } catch (error) {
            console.error('Failed to fetch games:', error)
            throw error // Re-throw to allow error handling in components
        }
    }
    async function fetchAllGameCategories() {
        try {
            const response = await getApiGamesCategories()
            if (response.data) {
                // Ensure categories is an array of strings
                categories.value = Array.isArray(response.data)
                    ? response.data.map(String)
                    : []
            }
        } catch (error) {
            console.error('Failed to fetch game categories:', error)
            throw error // Re-throw to allow error handling in components
        }
    }
    // Mutations
    // const enterGameMutation = useMutation({
    //   mutationFn: (spinParams: any) => postGamesByIdEnter({ path: { id: spinParams.id, userId: spinParams.userId } }),
    //   onMutate: () => appStore.showLoading(),
    //   onSuccess: (response) => {
    //     currentGame.value = response.data;
    //   },
    //   onSettled: () => appStore.hideLoading(),
    // });

    // ... (other mutations remain the same)

    const toggleFavoriteMutation = useMutation({
        mutationFn: (gameId: string) =>
            postApiUserGamesFavorite({ body: { add_game: gameId } }),
        onMutate: () => appStore.showLoading(),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['favoriteGames'] })
        },
        onSettled: () => appStore.hideLoading(),
    })

    const enterGame = useDebounceFn(
        async (id: string) => {
            const authStore = useAuthStore()
            const data: PostApiGamesByIdEnterData = {
                path: {
                    id,
                },
                url: '/api/games/{id}/enter',
            }

            if (currentGame.value === id) {
                console.log('Already in game:', id)
                return
            }

            try {
                const response = await postApiGamesByIdEnter(data)
                if (response.data) {
                    if (response.data.gameConfig && authStore.accessToken) {
                        response.data.gameConfig.authToken =
                            authStore.accessToken
                    }
                    currentGame.value = id
                    currentGameOptions.value = response.data
                    return response.data
                }
            } catch (error) {
                console.error('Error entering game:', error)
                throw error
            }
            // gameSession.value = await fetchGameSession(gameId, userId);
        },
        500,
        { maxWait: 5000 }
    )

    const leaveGame = async () => {
        const leaveGame = await postApiGamesLeave()
        console.log(leaveGame)
    }
    // const spin = (params: any) => spinMutation.mutate(params)
    const toggleFavorite = (gameId: string) =>
        toggleFavoriteMutation.mutate(gameId)

    return {
        games, // State
        categories, // State
        currentGame, // State
        gameSession, // State
        currentGameOptions,
        favorites,
        fetchAllGames, // Expose the new action
        fetchAllGameCategories,
        enterGame,
        leaveGame,
        // spin,
        toggleFavorite,
    }
})
</file>

<file path="./frontend/src/stores/gamespin.store.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
// /* eslint-disable @typescript-eslint/no-explicit-any */
import { defineStore } from 'pinia'
import { ref } from 'vue'
// import { handleException } from './exception'
// import { api } from '@/sdk/api'
// import type { InferResponseType } from 'hono/client'
// import { getGamesAll } from '@/sdk/generated'

import { GameSpin, getApiGamespinsTopwins } from '@/sdk/generated'

// type Game = InferResponseType<typeof api.games.all.$get>[0]

export const useGameSpinStore = defineStore('gameSpin', () => {
    //     // --- State ---
    // const spins = ref<Game[]>([])
    const topWins = ref<GameSpin[]>([])
    // const selectedSpin = ref<Game | null>(null)
    const isLoading = ref(false)
    const errMessage = ref('')

    //     // --- Actions ---

    //     /**
    //      * Fetches all game spins for the currently authenticated user.
    //      */
    //     async function dispatchGetUserSpins(): Promise<void> {
    //         isLoading.value = true
    //         errMessage.value = ''
    //         try {
    //             const { data, error } = await getGamesAll()
    //             if (error || !data) throw new Error('Failed to get user spins')
    //             spins.value = await data.json()
    //         } catch (error: any) {
    //             errMessage.value = handleException(error.code || 500)
    //             spins.value = []
    //         } finally {
    //             isLoading.value = false
    //         }
    //     }

    //     /**
    //      * Fetches the top 10 winning spins.
    //      */
    async function fetchTopWins(): Promise<void> {
        isLoading.value = true
        errMessage.value = ''
        try {
            const { data } = await getApiGamespinsTopwins()
            if (!data) throw new Error('Failed to get top wins')
            topWins.value = data
        } catch (error: any) {
            // Safe fallback without external dependency to avoid ReferenceError
            errMessage.value = error?.message || 'Failed to get top wins'
            topWins.value = []
        } finally {
            isLoading.value = false
        }
    }

    //     /**
    //      * Fetches a single game spin by its ID.
    //      * @param {string} id - The ID of the spin to fetch.
    //      */
    //     async function dispatchGetSpinById(id: string) {
    //         isLoading.value = true
    //         errMessage.value = ''

    //         try {
    //             const response = await getSpinById(id)

    //             if (!response.ok) {
    //                 throw new Error('Failed to get spin by id')
    //             }

    //             selectedSpin.value = await response.json()
    //         } catch (error: unknown) {
    //             const errorCode = (error as { code?: number })?.code || 500
    //             errMessage.value = handleException(errorCode)
    //         } finally {
    //             isLoading.value = false
    //         }
    //     }

    return {
        //         // State
        //         spins,
        topWins,
        //         selectedSpin,
        //         isLoading,
        //         errMessage,

        //         // Actions
        //         dispatchGetUserSpins,
        //         dispatchGetSpinById,
        fetchTopWins,
    }
})
</file>

<file path="./frontend/src/stores/index.ts">
import { createPinia } from 'pinia'
// import { createPersistedStatePlugin } from 'pinia-plugin-persistedstate-2'
import type { Plugin } from 'vue'
// import localforage from 'localforage'

export const pinia = createPinia()

export const plugin: Plugin = (app) => {
  // const installPersistedStatePlugin = createPersistedStatePlugin({
  //      storage: {
  //     getItem: async (key) => {
  //       return localforage.getItem(key)
  //     },
  //     setItem: async (key, value) => {
  //       return localforage.setItem(key, value)
  //     },
  //     removeItem: async (key) => {
  //       return localforage.removeItem(key)
  //     },
  //   },
  // })
  // pinia.use((context) => installPersistedStatePlugin(context))

  app.use(pinia)
}
</file>

<file path="./frontend/src/stores/notification.store.ts">
import { defineStore } from 'pinia'
import { ref } from 'vue'

type NotificationType = 'success' | 'error' | 'info' | 'warning'

interface Notification {
    id: string
    message: string
    type: NotificationType
    timeout?: number
    createdAt: number
}

export const useNotificationStore = defineStore('notification', () => {
    const notifications = ref<Notification[]>([])
    const defaultTimeout = 5000 // 5 seconds

    const addNotification = (notification: { type: NotificationType; message: string }, timeout: number = defaultTimeout) => {
        const id = Math.random().toString(36).substring(2, 9)
        const notificationObj: Notification = {
            id,
            message: notification.message,
            type: notification.type,
            timeout,
            createdAt: Date.now(),
        }

        notifications.value.push(notificationObj)

        if (timeout > 0) {
            setTimeout(() => {
                removeNotification(id)
            }, timeout)
        }

        return id
    }

    const removeNotification = (id: string) => {
        const index = notifications.value.findIndex((n) => n.id === id)
        if (index !== -1) {
            notifications.value.splice(index, 1)
        }
    }

    const clearAllNotifications = () => {
        notifications.value = []
    }

    // Helper methods for different notification types
    const success = (message: string, timeout?: number) =>
        addNotification({ type: 'success', message }, timeout)
    const error = (message: string, timeout?: number) =>
        addNotification({ type: 'error', message }, timeout)
    const info = (message: string, timeout?: number) =>
        addNotification({ type: 'info', message }, timeout)
    const warning = (message: string, timeout?: number) =>
        addNotification({ type: 'warning', message }, timeout)

    return {
        notifications,
        addNotification,
        removeNotification,
        clearAllNotifications,
        success,
        error,
        info,
        warning,
    }
})
</file>

<file path="./frontend/src/stores/vip.store.ts">
import { computed, ref } from 'vue'
// import { useEventManager } from '@/composables/EventManager'
import { defineStore } from 'pinia'
import {
    getApiVipLevels,
    getApiVipMe,
    type VipInfo as ApiVipInfo,
    type VipLevel as ApiVipLevel,
} from '@/sdk/generated'

type VipInfo = ApiVipInfo & { betExp?: number }
type VipLevel = ApiVipLevel & { betExp?: number }

export const useVipStore = defineStore(
    'vip',

    () => {
        const totalXp = ref<number>(0)
        const vipInfo = ref<VipInfo>({} as VipInfo) // Keeping type assertion as in original
        const getTotalXp = computed(() => totalXp.value || 0)
        // const eventManager = useEventManager() // Get an instance of the event manager

        const updateXp = (newTotalXp: number, xpGained: number) => {
            if (vipInfo.value) {
                vipInfo.value.betExp = newTotalXp
            }

            // Emit a global event that the PlayerAvatar component can listen to.
            // eventManager.emit('xp:gain', { xpGained })
            console.log(`VIP Store: Emitted xp:gain event with ${xpGained} XP.`)
        }

        const vipLevels = ref<VipLevel[]>([])

        const getVipInfo = computed(() => vipInfo.value)
        const getVipLevelsComputed = computed(() => vipLevels.value)
        const setVipInfo = (info: VipInfo) => {
            vipInfo.value = info
            if (info) {
                totalXp.value = info.betExp || 0 // Update totalXp based on vipInfo
            }
        }
        async function fetchAllVipLevels() {
            try {
                const response = await getApiVipLevels()
                if (response.data) {
                    vipLevels.value = response.data
                }
            } catch (error) {
                console.error('Failed to fetch VIP levels:', error)
                throw error
            }
        }

        async function fetchVipInfo() {
            try {
                const response = await getApiVipMe()
                if (response.data?.vipInfo) {
                    setVipInfo(response.data.vipInfo)
                }
                return response.data?.vipInfo
            } catch (error) {
                console.error('Failed to fetch VIP info:', error)
                throw error
            }
        }

        function getPercentOfCurrentLevel() {
            const currentVipInfo = vipInfo.value
            if (!currentVipInfo) {
                return undefined
            }

            const levelInfo = vipLevels.value.find(
                (level) => level.level === currentVipInfo.level
            )
            if (!levelInfo || !levelInfo.betExp) {
                return undefined
            }

            const currentExp = currentVipInfo.betExp ?? 0
            const requiredExp = levelInfo.betExp

            const percentage = Math.floor((currentExp / requiredExp) * 100)
            return [percentage, currentExp, requiredExp]
        }

        return {
            getPercentOfCurrentLevel,
            updateXp,
            fetchAllVipLevels,
            fetchVipInfo,
            getVipInfo,
            getTotalXp,
            setVipInfo,
            getVipLevels: getVipLevelsComputed,
        }
    }
)
</file>

<file path="./frontend/src/types/events.ts">
// PATH: frontend/src/types/events.ts
import { User, Wallet, VipInfo } from '@/sdk/generated'
import { Operator } from '@/sdk/generated/operator.gen'

/**
 * Defines the payload structure for the 'balance:update' event.
 */
export interface BalanceUpdatePayload {
  amount: number
}
export type ModelChangeEventFromServer = {
  type: string
  action: string
  data: Record<string, number>[] | Partial<User> | Partial<Operator> | Partial<Wallet> | Partial<VipInfo> 
}
export type AnimationEventFromServer = {
  type: string
  action: string
  data: Record<string, number>[] 
}
</file>

<file path="./frontend/src/types/websocket.d.ts">
// WebSocket message types
export type WebSocketMessage<T = unknown> = {
  type: string
  payload: T
  timestamp: number
}

// User update message
export type UserUpdateMessage = WebSocketMessage<{
  id: string
  username: string
  email?: string | null
  // Add other user fields as needed
}>

// Wallet update message
export type WalletUpdateMessage = WebSocketMessage<{
  balance: number
  currency: string
  // Add other wallet fields as needed
}>

// VIP info update message
export type VipUpdateMessage = WebSocketMessage<{
  level: number
  points: number
  // Add other VIP fields as needed
}>

// Game-specific message
export type GameUpdateMessage = WebSocketMessage<{
  gameId: string
  // Add game-specific fields
}>

// Union type for all possible WebSocket messages
export type WebSocketMessages =
  | UserUpdateMessage
  | WalletUpdateMessage
  | VipUpdateMessage
  | GameUpdateMessage

// Extend Window interface to include WebSocket types
declare global {
  interface WebSocket {
    onopen: ((this: WebSocket, ev: Event) => unknown) | null
    onclose: ((this: WebSocket, ev: CloseEvent) => unknown) | null
    onmessage: ((this: WebSocket, ev: MessageEvent) => unknown) | null
    onerror: ((this: WebSocket, ev: Event) => unknown) | null
    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void
    close(code?: number, reason?: string): void
    readonly readyState: number
    readonly url: string
  }

  const WebSocket: {
    prototype: WebSocket
    new (url: string | URL, protocols?: string | string[]): WebSocket
    readonly CONNECTING: 0
    readonly OPEN: 1
    readonly CLOSING: 2
    readonly CLOSED: 3
  }
}
</file>

<file path="./frontend/src/types/websocket.ts">
import type { User, Wallet, VipInfo } from '@/sdk/generated'

export type WebSocketMessage =
  | {
      type: 'user:update'
      payload: Partial<User>
    }
  | {
      type: 'wallet:update'
      payload: Partial<Wallet>
    }
  | {
      type: 'vip:update'
      payload: Partial<VipInfo>
    }
  | {
      type: 'xp:gain'
      payload: {amount: number}
    }
| {
      type: 'balance:gain'
      payload: {amount: number}
    }
</file>

<file path="./frontend/src/views/AboutView.vue">
<template>
  <div class="about">
    <h1>This is an about page</h1>
  </div>
</template>

<style>
@media (min-width: 1024px) {
  .about {
    min-height: 100vh;
    display: flex;
    align-items: center;
  }
}
</style>
</file>

<file path="./frontend/src/views/HomeView.vue">
<script setup lang="ts">
import { useAuthStore } from '@/stores/auth.store';
import { useGameStore } from '@/stores/game.store';
import { computed, onMounted, ref, watch, onUnmounted } from 'vue';
import { useEventManager } from '@/composables/EventManager'
import type { PreloadManifest } from '@/composables/useImagePreloader'

const eventBus = useEventManager()
const gameStore = useGameStore();
const gameSpinStore = useGameSpinStore();
const authStore = useAuthStore();
const settingsModal = ref(false);

const currentUser = computed(() => authStore.currentUser);
const gameActive = ref(false)

// Build above-the-fold asset manifest for HomeView.
// Keep this minimal: only assets that must be ready at first paint.
 function getHomeAboveTheFoldAssets(): PreloadManifest {
  return {
    images: [
      { url: '/images/games/tall-field.avif', critical: true },
      { url: '/images/games/featured.webp', critical: true },
      { url: '/images/games/hand-banner-black.png', critical: false },
    ],
    json: [
      // Add any Lottie JSON here if used above-the-fold:
      // { url: '/animations/intro.json', critical: true }
    ],
  }
}

// Optionally, if you have route-level gating elsewhere, you can export this for the root to consume.
defineExpose({ getHomeAboveTheFoldAssets })

watch(
  () => gameStore.games,
  (games) => {
    if (games.length > 0) {
      setTimeout(async () => {
        // const g = games.find(game => game.id === '13511');
        // await gameStore.enterGame(g.id,)
      }, 1000)
    }
  },
  { immediate: true }
);

const handleSettingsModal = (value: unknown) => {
  if (typeof value === 'boolean') {
    settingsModal.value = value
  }
}

eventBus.on('settingsModal', (value: unknown) => {
  settingsModal.value = value as boolean
})

onUnmounted(() => {
  eventBus.off('settingsModal', handleSettingsModal)
})

onMounted(async () => {
  if (gameStore.games.length === 0) {
    await gameStore.fetchAllGames();
    await gameSpinStore.fetchTopWins();
  }
});
</script>

<template>
  <main class="overflow-hidden">
    <Starfield class="star-overlay" />
    <div style="min-height: 80px"></div>
    <LiveWin />
    <GameCarousel />
    <FilterBar />
    <AdCarousel />

    <RtgGameLauncher v-if="currentUser && gameActive" :gameId="'atlantis'" :sessionId="currentUser.id" />
    <SettingsView v-if="currentUser && settingsModal" />
  </main>
</template>

<style scoped>
.background-container {
  position: relative;
  width: 100%;
  height: 100%;
}

.background-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.star-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  pointer-events: none;
}
</style>
</file>

<file path="./frontend/src/views/LoginView.vue">
<script setup lang="ts">
import LoginForm from '@/components/auth/LoginForm.vue'
import RegisterForm from '@/components/auth/RegisterForm.vue'
import Logo from '@/components/Logo.vue'
import { useAppStore } from '@/stores/app.store'
import { useAuthStore } from '@/stores/auth.store'
import { storeToRefs } from 'pinia'
import { onMounted } from 'vue'

const authStore = useAuthStore()
const appStore = useAppStore()

const {
  isSignUpMode,
  isLoading: isAuthLoading, // Auth store's loading state
  isAuthenticated,
} = storeToRefs(authStore)

// Ensure we navigate away if already authenticated (e.g., after successful login)
onMounted(() => {
  appStore.hideLoading()
  // Do NOT clear auth here; this caused post-login logout loops
  if (authStore.isSignUpMode === true) {
    authStore.toggleSignUpMode()
  }
  if (isAuthenticated.value) {

    console.debug('[login-view] already authenticated on mount, redirecting to /')
    // Push home using router import to avoid circular import issues at top-level
    import('@/router').then((m) => {
      m.default.push('/')
    })
  }
})
</script>
<template>
  <div class="min-h-screen bg-gray-900 flex items-center justify-center px-4 relative">
    <div v-if="!isAuthLoading && !isAuthenticated">
      <div class="login-view-container overflow-hidden">
        <Logo class="logo-main"></Logo>
        <div class="flex mt-4 justify-center items-center min-h-[20px] w-80 glow text-sm zIndex-1">
          <div :style="`color: ${!isSignUpMode ? 'white' : 'green'};`">Login</div>

          <input type="checkbox" id="switch" style="transform: scale(0.5)" @click="authStore.toggleSignUpMode" /><label
            style="transform: scale(0.5)" for="switch">Toggle</label>

          <div :style="`color: ${isSignUpMode ? 'white' : 'green'};`">Signup</div>
        </div>
        <RegisterForm v-if="isSignUpMode" class="zIndex-1" />
        <LoginForm v-else class="zIndex-1" />
      </div>
    </div>

    <div v-else class="text-white text-center">
      Loading authentication...
    </div>
  </div>

</template>
<style scoped>
input[type='checkbox'] {
  height: 0;
  width: 0;
  visibility: hidden;
}

label {
  cursor: pointer;
  text-indent: -9999px;
  width: 100px;
  height: 50px;
  background: #d19ae4;
  display: block;
  border-radius: 50px;
  position: relative;
}

label:after {
  content: '';
  position: absolute;
  top: 3px;
  left: 3px;
  width: 45px;
  height: 45px;
  background: #fff;
  border-radius: 90px;
  transition: 0.3s;
}

input:checked+label {
  background: #5b0091;
}

input:checked+label:after {
  left: calc(100% - 5px);
  transform: translateX(-100%);
}

label:active:after {
  width: 130px;
}

.auth-mode-toggle {
  /* CSS Variables for easy theming and consistent sizing */
  --toggle-track-width: 50px;
  --toggle-track-height: 26px;
  --knob-size: 20px;
  /* Horizontal padding within the track for the knob */
  --track-internal-padding: 3px;

  /* Colors */
  --track-bg-login: #b954f3;
  /* Tailwind gray-400 */
  --track-bg-signup: #4a90e2;
  /* Tailwind blue-400 */
  --knob-bg-color: white;
  --text-color-inactive: #718096;
  /* Tailwind gray-600 */
  --text-color-active: #b954f3;
  /* Tailwind gray-800 */
  --label-font-weight-inactive: 400;
  --label-font-weight-active: 600;
  --focus-ring-color: #b954f3;
  /* Blue-400 for focus outline */

  /* Transitions */
  --transition-duration: 0.3s;
  --transition-timing-function: ease-in-out;
  margin-bottom: 20px;
  height: 50px;
  display: inline-flex;
  /* Use inline-flex to allow other elements on the same line */
  align-items: center;
  gap: 8px;
  /* Space between labels and the switch visual */
  cursor: pointer;
  user-select: none;
  /* Prevents text selection when clicking */
  padding: 4px;
  /* Padding for focus ring visibility */
  border-radius: 18px;
  /* Rounded corners for the entire component for focus */
  outline: none;
  /* Remove default outline, we'll add a custom one */
}

.auth-mode-toggle:focus-visible {
  box-shadow: 0 0 0 2px var(--focus-ring-color);
}

.lab {
  font-size: 18px;
  font-weight: 700;
  transition:
    color var(--transition-duration) var(--transition-timing-function),
    font-weight var(--transition-duration) var(--transition-timing-function);
}

.login-label {
  color: var(--text-color-inactive);
  font-weight: var(--label-font-weight-inactive);
}

.auth-mode-toggle .login-label.active {
  color: var(--text-color-active);
  font-weight: var(--label-font-weight-active);
}

.signup-label {
  color: var(--text-color-inactive);
  font-weight: var(--label-font-weight-inactive);
}

.auth-mode-toggle .signup-label.active {
  color: var(--text-color-active);
  font-weight: var(--label-font-weight-active);
}

.switch-visual-container {
  position: relative;
  width: var(--toggle-track-width);
  height: var(--toggle-track-height);
}

.switch-track {
  width: 100%;
  height: 100%;
  background-color: var(--track-bg-login);
  border-radius: calc(var(--toggle-track-height) / 2);
  /* Pill shape */
  transition: background-color var(--transition-duration) var(--transition-timing-function);
}

/* Change track background when sign up is active */
.auth-mode-toggle.is-signup-active .switch-track {
  background-color: var(--track-bg-signup);
}

.switch-knob {
  position: absolute;
  top: calc((var(--toggle-track-height) - var(--knob-size)) / 2);
  left: var(--track-internal-padding);
  width: var(--knob-size);
  height: var(--knob-size);
  background-color: var(--knob-bg-color);
  border-radius: 50%;
  /* Circular knob */
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  transition: transform var(--transition-duration) var(--transition-timing-function);
}

/* Move knob to the right when sign up is active */
.auth-mode-toggle.is-signup-active .switch-knob {
  transform: translateX(calc(var(--toggle-track-width) - var(--knob-size) - (2 * var(--track-internal-padding))));
}

/* Scoped styles specific to LoginView */
.login-view-container {
  width: 100%;
  min-height: 100%;
  /* Ensure it takes full viewport height */
  margin-top: 0;
  display: flex;
  /* Use flex to center content */
  flex-direction: column;
  justify-content: start;
  /* Vertically center */
  align-items: center;
  /* Horizontally center */
  /* background-image: url('/src/assets/login-bg.jpg'); */
  /* Ensure path is correct if used */
  background-size: cover;
  /* Changed from contain for full coverage */
  background-position: center;
  /* Center the background */
  background-repeat: no-repeat;
  background-color: #021130;
  background-image: url('/images/starsbg.png');
  background-size: 120% 120%;
  background-origin: border-box;
  background-position: center;
  background-repeat: no-repeat;
  height: 100vh;
  padding: 20px;
  /* Add some padding for smaller screens */
  box-sizing: border-box;
}

.wrapper {
  /* Removed height: 100vh and width: 80vw to let content size itself within login-view-container */
  /* max-width: 520px; Already handled by parent */
  width: 100%;
  /* Take full width of the centered container */
  /* margin: auto; */
  display: flex;
  flex-direction: column;
  justify-content: start;
  /* Center flip card vertically if space allows */
  align-items: center;
  color: white;
  /* Assuming default text color is white based on original */
}

.logo-main {
  width: 70%;
  /* margin-top: 2rem; Vuetify mt-8 is usually 2rem */
  /* margin-bottom: 2rem; Add some space below logo */
}

.auth-error-message {
  background-color: rgba(255, 0, 0, 0.1);
  color: red;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 15px;
  border: 1px solid red;
  text-align: center;
  width: 100%;
  max-width: 420px;
  /* Match form width */
}

.loading-indicator {
  color: #fff;
  margin-bottom: 15px;
}

/* Flip card styles from the original component */
.switch {
  transform: translateY(0);
  /* Adjusted from -200px, let flexbox handle positioning */
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 30px;
  width: 50px;
  height: 20px;
  margin-top: 2rem;
  /* Add some margin above the switch */
  margin-bottom: 2rem;
}

.card-side::before {
  position: absolute;
  content: 'Log in';
  left: -70px;
  top: 0;
  width: 200px;
  text-decoration: underline;
  color: var(--font-color, #fefefe);
  /* Added fallback */
  font-weight: 600;
  /* content: "Log in"; ... etc. */
  z-index: 1;
  /* Above the card, below the slider */
}

.card-side::after {
  position: absolute;
  content: 'Sign up';
  left: 70px;
  top: 0;
  width: 200px;
  text-decoration: none;
  color: var(--font-color, #fefefe);
  /* Added fallback */
  font-weight: 600;
  position: absolute;
  /* content: "Sign up"; ... etc. */
  z-index: 1;
  /* Above the card, below the slider */
}

.toggle {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  box-sizing: border-box;
  border-radius: 5px;
  border: 2px solid var(--main-color);
  box-shadow: 4px 4px var(--main-color);
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var(--bg-color);
  transition: 0.3s;
  position: absolute;
  /* cursor: pointer; ... etc. */
  z-index: 2;
  /* Ensure slider is on top for interaction and visibility */
}

.slider:before {
  box-sizing: border-box;
  position: absolute;
  content: '';
  height: 20px;
  width: 20px;
  border: 2px solid var(--main-color);
  border-radius: 5px;
  left: -2px;
  bottom: 2px;
  background-color: var(--bg-color);
  box-shadow: 0 3px 0 var(--main-color);
  transition: 0.3s;
}

.toggle:checked+.slider {
  background-color: var(--input-focus);
}

.toggle:checked+.slider:before {
  transform: translateX(30px);
}

.toggle:checked~.card-side:before {
  text-decoration: none;
}

.toggle:checked~.card-side:after {
  text-decoration: underline;
}

/* Logic for toggle moved to JS for direct style manipulation for simplicity */
/* .toggle:checked + .slider { background-color: var(--input-focus, #2d8cf0); } */
/* .toggle:checked + .slider:before { transform: translateX(30px); } */
/* .toggle:checked ~ .card-side:before { text-decoration: none; } */
/* .toggle:checked ~ .card-side:after { text-decoration: underline; } */

.flip-card__inner {
  width: 320px;
  /* Take full width of its parent label */
  max-width: 420px;
  /* Max width for the form area */
  height: auto;
  /* Let content define height, was 350px */
  min-height: 380px;
  /* Ensure enough space for inputs */
  position: relative;
  background-color: transparent;
  perspective: 1000px;
  text-align: center;
  transition: transform 0.8s;
  transform-style: preserve-3d;
  margin-top: 16px;
  position: relative;
  /* This should already be present */
  z-index: 0;
}

.flip-card__front,
.flip-card__back {
  box-sizing: border-box;
  /* Added for better padding control */
  width: 100%;

  justify-content: center;
  align-items: center;
  /* max-width: 420px; /* Let parent control max-width */
  padding: 20px;
  /* Unified padding */
  position: absolute;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  /* Center form content */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  background: var(--bg-color, #1f2937);
  /* Slightly lighter dark for card */
  gap: 15px;
  /* Adjusted gap */
  border-radius: 8px;
  /* Softer radius */
  border: 1px solid var(--main-color, #b954f3);
  /* Thinner border */
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  /* Softer shadow */
}

.flip-card__back {
  transform: rotateY(180deg);
}

.flip-card__form {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  /* Adjusted gap */
  width: 100%;
  /* Form takes full width of card */
}

.title {
  margin-bottom: 15px;
  /* Adjusted margin */
  font-size: 24px;
  /* Slightly smaller */
  font-weight: 700;
  /* Adjusted weight */
  text-align: center;
  color: var(--font-color, #fefefe);
}

.flip-card__input {
  width: 100%;
  /* Full width inputs */
  /* max-width: 300px;  */
  height: 45px;
  /* Slightly taller */
  border-radius: 5px;
  border: 2px solid var(--main-color, #b954f3);
  background-color: var(--bg-color-input, #2c3748);
  /* Different input bg */
  box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.2);
  /* Inset shadow */
  font-size: 16px;
  font-weight: 500;
  color: var(--font-color, #fefefe);
  padding: 5px 15px;
  /* More padding */
  outline: none;
  transition: border-color 0.3s;
}

.flip-card__input::placeholder {
  color: var(--font-color-sub, #7e7e7e);
  opacity: 0.8;
}

.flip-card__input:focus {
  border-color: var(--input-focus, #2d8cf0);
  /* Use border-color for focus */
}

.flip-card__btn {
  margin-top: 15px;
  /* Adjusted margin */
  width: auto;
  /* Let content define width */
  min-width: 150px;
  /* Minimum width */
  padding: 10px 20px;
  /* Padding for button */
  height: 45px;
  border-radius: 5px;
  border: 2px solid var(--main-color, #b954f3);
  background-color: var(--main-color, #b954f3);
  /* Button bg same as border */
  box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
  /* Softer shadow */
  font-size: 16px;
  font-weight: 600;
  color: var(--font-color-btn, #fefefe);
  /* Ensure button text color is set */
  cursor: pointer;
  transition:
    background-color 0.3s,
    box-shadow 0.3s,
    transform 0.1s;
}

.flip-card__btn:hover {
  background-color: darken(var(--main-color, #b954f3), 10%);
  /* Darken on hover */
}

.flip-card__btn:active {
  box-shadow: 0px 0px var(--main-color, #b954f3);
  transform: translate(2px, 2px);
  /* Slightly less movement */
}

.flip-card__btn:disabled {
  background-color: #555;
  border-color: #444;
  color: #888;
  cursor: not-allowed;
  box-shadow: none;
  transform: none;
}

.social-login-divider {
  margin: 15px 0;
  color: var(--font-color-sub, #7e7e7e);
  text-align: center;
  width: 100%;
}

.google-signin-container {
  /* display: flex;
    min-width: 100%;
    min-height: 60px;
    justify-content: center;
    align-items: center; */
  /* width: 100%;
    height: 40%; */
  /* margin-top: 10px; */
}

/* CSS Variables for theming (optional, but good practice) */
:root {
  --input-focus: #4a90e2;
  /* Example: A lighter blue */
  --font-color: #e0e0e0;
  /* Light gray for text */
  --font-color-sub: #a0a0a0;
  /* Medium gray for subtext/placeholders */
  --bg-color: #1e2a3b;
  /* Dark blue-gray background */
  --bg-color-input: #2c3a4b;
  /* Slightly lighter for inputs */
  --main-color: #6c63ff;
  /* Example: A vibrant purple */
  --font-color-btn: #ffffff;
}
</style>
</file>

<file path="./frontend/src/views/RtgGame.vue">
<!-- eslint-disable @typescript-eslint/no-explicit-any -->
<template>
    <div v-if="!error && gameLaunchOptions" class="w-screen h-screen">
        <GameLoader :launch-options="gameLaunchOptions" />
    </div>
    <div v-else-if="error" class="text-white">
        <p>Failed to load game.</p>
    </div>
    <div v-else class="text-white">
        <p>Loading game...</p>
    </div>
</template>

<script setup lang="ts">
import GameLoader from '@/components/GameLoader.vue'
import { useGameStore } from '@/stores/game.store'
import { useRouteQuery } from '@vueuse/router'
import { onMounted, ref, computed } from 'vue'

interface GameLaunchOptions {
    launch_url: string;
    launch_options: {
        game_launcher_url: string;
        [key: string]: unknown;
    };
}

const gameName = useRouteQuery('gameName')
const gameStore = useGameStore()
const error = ref(!gameName.value)
const gameLaunchOptions = ref<GameLaunchOptions | null>(null)

const game = computed(() =>
    gameStore.games.find((g) => g.name === gameName.value)
)

onMounted(async () => {
    if (gameStore.games.length === 0) {
        await gameStore.fetchAllGames()
    }

    if (game.value) {
        try {
            const response = await gameStore.enterGame(game.value.id)
            if (response) {
                gameLaunchOptions.value = {
                    launch_url: response.webUrl,
                    launch_options: {
                        game_launcher_url: response.webUrl,
                        ...response.gameConfig,
                    },
                }
            }
        } catch (e) {
            console.error('Failed to enter game', e)
            error.value = true
        }
    } else {
        // Handle case where game is not found
        console.error(`Game with name ${gameName.value} not found.`)
        error.value = true
    }
})
</script>
</file>

<file path="./frontend/src/App.vue">
<script setup lang="ts">
import { computed, onMounted, ref } from 'vue'
import GlobalLoading from '@/components/GlobalLoading.vue'
import Header from '@/components/Header.vue'
import Footer from '@/components/Footer.vue'
import Notification from '@/components/common/Notification.vue'
import AnimationLayer from '@/components/AnimationLayer.vue'
import router from './router'
import { useAuthStore } from '@/stores/auth.store'
import { useImagePreloader, type PreloadManifest } from '@/composables/useImagePreloader'
import { SplashScreen } from '@capacitor/splash-screen'

// Root gate: do not show UI until critical Home assets are loaded (mobile-first)
const authStore = useAuthStore()
const preloader = useImagePreloader()

// Manifest builder for above-the-fold assets on initial route (Home by default).
// Keep minimal and only include images/JSON needed for first paint.
function getInitialManifest(): PreloadManifest {
  // Static UI chrome assets that may flash if not preloaded
  const chromeImages = [
    '/images/games/tall-field.avif',
    '/images/games/featured.webp',
    '/images/games/hand-banner-black.png',
  ]

  return {
    images: chromeImages.map((url) => ({ url, critical: false })),
    json: [], // Add Lottie JSON here if you have a global animation on first render
    fetches: [], // Add any warm fetches if absolutely needed
  }
}

const isLogin = computed(() => router.currentRoute.value.path === '/login')
const isAuthenticated = computed(() => !!authStore.isAuthenticated)

// Only show loader overlay while we are gating; respect login route to avoid double splash
const isGateReady = ref(false)
/**
 * Ensure GlobalLoading shows during the initial gate on refresh:
 * - showLoader drives GlobalLoading visibility via app store (see onMounted below).
 * - Keep loader on for all routes except /login to avoid double splash.
 */
const showLoader = computed(() => !isLogin.value && !isGateReady.value)

const showChrome = computed(() => {
  const user = authStore.currentUser
  const notInGame = !user || user.currentGameSessionDataId == null
  return isAuthenticated.value && notInGame && !isLogin.value && isGateReady.value
})

async function runPreloadGate() {
  // Record the time we enter the gate to enforce a minimum visible duration
  const gateStart = performance.now?.() ?? Date.now()
  try {
    // Ensure the global loading overlay engages during the preload gate
    const { useAppStore } = await import('@/stores/app.store')
    const appStore = useAppStore()
    appStore.globalLoading = true
    // Keep native splash visible while we preload
    await SplashScreen.show()

    // Initialize preloader with minimal chrome and route-level manifest
    await preloader.initialize(getInitialManifest())
    await preloader.waitForReady()
  } catch {
    // If critical assets fail, we still proceed to avoid hard-blocking; errors logged in composable
  } finally {
    // Enforce a minimum splash visibility of 1000ms
    const elapsed = (performance.now?.() ?? Date.now()) - gateStart
    const minMs = 1000
    if (elapsed < minMs) {
      await new Promise((r) => setTimeout(r, minMs - elapsed))
    }

    isGateReady.value = true

    // Hide the global loader once the gate is ready
    const { useAppStore: useAppStore2 } = await import('@/stores/app.store')
    const appStore2 = useAppStore2()
    appStore2.globalLoading = false
    // Allow CSS leave transition to run before hiding native splash
    await new Promise((r) => setTimeout(r, 320)) // match leave duration in GlobalLoading
    // Hide native splash when ready
    await SplashScreen.hide()
    // Remove any legacy CSS loaders
    document.body.classList.remove('loading-active')
  }
}

onMounted(() => {
  // Do not gate login route; hide splash immediately for login UX
  if (isLogin.value) {
    SplashScreen.hide().catch(() => {})
    document.body.classList.remove('loading-active')
    isGateReady.value = true
  } else {
    void runPreloadGate()
  }
})
</script>

<template>
  <component :is="AnimationLayer" v-if="AnimationLayer && isGateReady" />

  <!-- Global loading overlay while gating -->
  <component :is="GlobalLoading" v-if="showLoader" />

  <component :is="Header" v-if="showChrome" />
  <router-view v-if="isGateReady" />
  <component :is="Footer" v-if="showChrome" />

  <component :is="Notification" v-if="Notification && isGateReady" />
</template>
</file>

<file path="./frontend/src/auto-imports.d.ts">
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const EffectScope: typeof import('vue')['EffectScope']
  const acceptHMRUpdate: typeof import('pinia')['acceptHMRUpdate']
  const computed: typeof import('vue')['computed']
  const createApp: typeof import('vue')['createApp']
  const createPinia: typeof import('pinia')['createPinia']
  const customRef: typeof import('vue')['customRef']
  const defineAsyncComponent: typeof import('vue')['defineAsyncComponent']
  const defineComponent: typeof import('vue')['defineComponent']
  const defineStore: typeof import('pinia')['defineStore']
  const effectScope: typeof import('vue')['effectScope']
  const getActivePinia: typeof import('pinia')['getActivePinia']
  const getCurrentInstance: typeof import('vue')['getCurrentInstance']
  const getCurrentScope: typeof import('vue')['getCurrentScope']
  const h: typeof import('vue')['h']
  const handleException: typeof import('./stores/exception')['handleException']
  const inject: typeof import('vue')['inject']
  const isProxy: typeof import('vue')['isProxy']
  const isReactive: typeof import('vue')['isReactive']
  const isReadonly: typeof import('vue')['isReadonly']
  const isRef: typeof import('vue')['isRef']
  const mapActions: typeof import('pinia')['mapActions']
  const mapGetters: typeof import('pinia')['mapGetters']
  const mapState: typeof import('pinia')['mapState']
  const mapStores: typeof import('pinia')['mapStores']
  const mapWritableState: typeof import('pinia')['mapWritableState']
  const markRaw: typeof import('vue')['markRaw']
  const nextTick: typeof import('vue')['nextTick']
  const onActivated: typeof import('vue')['onActivated']
  const onBeforeMount: typeof import('vue')['onBeforeMount']
  const onBeforeRouteLeave: typeof import('vue-router')['onBeforeRouteLeave']
  const onBeforeRouteUpdate: typeof import('vue-router')['onBeforeRouteUpdate']
  const onBeforeUnmount: typeof import('vue')['onBeforeUnmount']
  const onBeforeUpdate: typeof import('vue')['onBeforeUpdate']
  const onDeactivated: typeof import('vue')['onDeactivated']
  const onErrorCaptured: typeof import('vue')['onErrorCaptured']
  const onMounted: typeof import('vue')['onMounted']
  const onRenderTracked: typeof import('vue')['onRenderTracked']
  const onRenderTriggered: typeof import('vue')['onRenderTriggered']
  const onScopeDispose: typeof import('vue')['onScopeDispose']
  const onServerPrefetch: typeof import('vue')['onServerPrefetch']
  const onUnmounted: typeof import('vue')['onUnmounted']
  const onUpdated: typeof import('vue')['onUpdated']
  const onWatcherCleanup: typeof import('vue')['onWatcherCleanup']
  const pinia: typeof import('./stores/index')['pinia']
  const plugin: typeof import('./stores/index')['plugin']
  const provide: typeof import('vue')['provide']
  const reactive: typeof import('vue')['reactive']
  const readonly: typeof import('vue')['readonly']
  const ref: typeof import('vue')['ref']
  const resolveComponent: typeof import('vue')['resolveComponent']
  const setActivePinia: typeof import('pinia')['setActivePinia']
  const setMapStoreSuffix: typeof import('pinia')['setMapStoreSuffix']
  const shallowReactive: typeof import('vue')['shallowReactive']
  const shallowReadonly: typeof import('vue')['shallowReadonly']
  const shallowRef: typeof import('vue')['shallowRef']
  const storeToRefs: typeof import('pinia')['storeToRefs']
  const toRaw: typeof import('vue')['toRaw']
  const toRef: typeof import('vue')['toRef']
  const toRefs: typeof import('vue')['toRefs']
  const toValue: typeof import('vue')['toValue']
  const triggerRef: typeof import('vue')['triggerRef']
  const unref: typeof import('vue')['unref']
  const useAnimationLayer: typeof import('./composables/useAnimationLayer')['useAnimationLayer']
  const useAppStore: typeof import('./stores/app.store')['useAppStore']
  const useAttrs: typeof import('vue')['useAttrs']
  const useAuthStore: typeof import('./stores/auth.store')['useAuthStore']
  const useAuthStoreOutside: typeof import('./stores/auth.store')['useAuthStoreOutside']
  const useChatStore: typeof import('./stores/chat.store')['useChatStore']
  const useCssModule: typeof import('vue')['useCssModule']
  const useCssVars: typeof import('vue')['useCssVars']
  const useDepositStore: typeof import('./stores/deposit.store')['useDepositStore']
  const useEventManager: typeof import('./composables/EventManager')['useEventManager']
  const useGameSpinStore: typeof import('./stores/gamespin.store')['useGameSpinStore']
  const useGameStore: typeof import('./stores/game.store')['useGameStore']
  const useId: typeof import('vue')['useId']
  const useImagePreloader: typeof import('./composables/useImagePreloader')['useImagePreloader']
  const useLink: typeof import('vue-router')['useLink']
  const useModel: typeof import('vue')['useModel']
  const useNotificationStore: typeof import('./stores/notification.store')['useNotificationStore']
  const useRealtimeUpdates: typeof import('./composables/useRealtimeUpdates')['useRealtimeUpdates']
  const useRoute: typeof import('vue-router')['useRoute']
  const useRouter: typeof import('vue-router')['useRouter']
  const useScreen: typeof import('./composables/useScreen')['useScreen']
  const useSlots: typeof import('vue')['useSlots']
  const useTemplateRef: typeof import('vue')['useTemplateRef']
  const useVipStore: typeof import('./stores/vip.store')['useVipStore']
  const watch: typeof import('vue')['watch']
  const watchEffect: typeof import('vue')['watchEffect']
  const watchPostEffect: typeof import('vue')['watchPostEffect']
  const watchSyncEffect: typeof import('vue')['watchSyncEffect']
}
// for type re-export
declare global {
  // @ts-ignore
  export type { Component, Slot, Slots, ComponentPublicInstance, ComputedRef, DirectiveBinding, ExtractDefaultPropTypes, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode, WritableComputedRef } from 'vue'
  import('vue')
  // @ts-ignore
  export type { Events, EventMessage, IEventManagerService } from './composables/EventManager'
  import('./composables/EventManager')
  // @ts-ignore
  export type { AnimationInstance } from './composables/useAnimationLayer'
  import('./composables/useAnimationLayer')
  // @ts-ignore
  export type { PreloadState, ImageAsset, JsonAsset, GenericAsset, PreloadManifest } from './composables/useImagePreloader'
  import('./composables/useImagePreloader')
}

// for vue template auto import
import { UnwrapRef } from 'vue'
declare module 'vue' {
  interface GlobalComponents {}
  interface ComponentCustomProperties {
    readonly EffectScope: UnwrapRef<typeof import('vue')['EffectScope']>
    readonly acceptHMRUpdate: UnwrapRef<typeof import('pinia')['acceptHMRUpdate']>
    readonly computed: UnwrapRef<typeof import('vue')['computed']>
    readonly createApp: UnwrapRef<typeof import('vue')['createApp']>
    readonly createPinia: UnwrapRef<typeof import('pinia')['createPinia']>
    readonly customRef: UnwrapRef<typeof import('vue')['customRef']>
    readonly defineAsyncComponent: UnwrapRef<typeof import('vue')['defineAsyncComponent']>
    readonly defineComponent: UnwrapRef<typeof import('vue')['defineComponent']>
    readonly defineStore: UnwrapRef<typeof import('pinia')['defineStore']>
    readonly effectScope: UnwrapRef<typeof import('vue')['effectScope']>
    readonly getActivePinia: UnwrapRef<typeof import('pinia')['getActivePinia']>
    readonly getCurrentInstance: UnwrapRef<typeof import('vue')['getCurrentInstance']>
    readonly getCurrentScope: UnwrapRef<typeof import('vue')['getCurrentScope']>
    readonly h: UnwrapRef<typeof import('vue')['h']>
    readonly handleException: UnwrapRef<typeof import('./stores/exception')['handleException']>
    readonly inject: UnwrapRef<typeof import('vue')['inject']>
    readonly isProxy: UnwrapRef<typeof import('vue')['isProxy']>
    readonly isReactive: UnwrapRef<typeof import('vue')['isReactive']>
    readonly isReadonly: UnwrapRef<typeof import('vue')['isReadonly']>
    readonly isRef: UnwrapRef<typeof import('vue')['isRef']>
    readonly mapActions: UnwrapRef<typeof import('pinia')['mapActions']>
    readonly mapGetters: UnwrapRef<typeof import('pinia')['mapGetters']>
    readonly mapState: UnwrapRef<typeof import('pinia')['mapState']>
    readonly mapStores: UnwrapRef<typeof import('pinia')['mapStores']>
    readonly mapWritableState: UnwrapRef<typeof import('pinia')['mapWritableState']>
    readonly markRaw: UnwrapRef<typeof import('vue')['markRaw']>
    readonly nextTick: UnwrapRef<typeof import('vue')['nextTick']>
    readonly onActivated: UnwrapRef<typeof import('vue')['onActivated']>
    readonly onBeforeMount: UnwrapRef<typeof import('vue')['onBeforeMount']>
    readonly onBeforeRouteLeave: UnwrapRef<typeof import('vue-router')['onBeforeRouteLeave']>
    readonly onBeforeRouteUpdate: UnwrapRef<typeof import('vue-router')['onBeforeRouteUpdate']>
    readonly onBeforeUnmount: UnwrapRef<typeof import('vue')['onBeforeUnmount']>
    readonly onBeforeUpdate: UnwrapRef<typeof import('vue')['onBeforeUpdate']>
    readonly onDeactivated: UnwrapRef<typeof import('vue')['onDeactivated']>
    readonly onErrorCaptured: UnwrapRef<typeof import('vue')['onErrorCaptured']>
    readonly onMounted: UnwrapRef<typeof import('vue')['onMounted']>
    readonly onRenderTracked: UnwrapRef<typeof import('vue')['onRenderTracked']>
    readonly onRenderTriggered: UnwrapRef<typeof import('vue')['onRenderTriggered']>
    readonly onScopeDispose: UnwrapRef<typeof import('vue')['onScopeDispose']>
    readonly onServerPrefetch: UnwrapRef<typeof import('vue')['onServerPrefetch']>
    readonly onUnmounted: UnwrapRef<typeof import('vue')['onUnmounted']>
    readonly onUpdated: UnwrapRef<typeof import('vue')['onUpdated']>
    readonly onWatcherCleanup: UnwrapRef<typeof import('vue')['onWatcherCleanup']>
    readonly pinia: UnwrapRef<typeof import('./stores/index')['pinia']>
    readonly plugin: UnwrapRef<typeof import('./stores/index')['plugin']>
    readonly provide: UnwrapRef<typeof import('vue')['provide']>
    readonly reactive: UnwrapRef<typeof import('vue')['reactive']>
    readonly readonly: UnwrapRef<typeof import('vue')['readonly']>
    readonly ref: UnwrapRef<typeof import('vue')['ref']>
    readonly resolveComponent: UnwrapRef<typeof import('vue')['resolveComponent']>
    readonly setActivePinia: UnwrapRef<typeof import('pinia')['setActivePinia']>
    readonly setMapStoreSuffix: UnwrapRef<typeof import('pinia')['setMapStoreSuffix']>
    readonly shallowReactive: UnwrapRef<typeof import('vue')['shallowReactive']>
    readonly shallowReadonly: UnwrapRef<typeof import('vue')['shallowReadonly']>
    readonly shallowRef: UnwrapRef<typeof import('vue')['shallowRef']>
    readonly storeToRefs: UnwrapRef<typeof import('pinia')['storeToRefs']>
    readonly toRaw: UnwrapRef<typeof import('vue')['toRaw']>
    readonly toRef: UnwrapRef<typeof import('vue')['toRef']>
    readonly toRefs: UnwrapRef<typeof import('vue')['toRefs']>
    readonly toValue: UnwrapRef<typeof import('vue')['toValue']>
    readonly triggerRef: UnwrapRef<typeof import('vue')['triggerRef']>
    readonly unref: UnwrapRef<typeof import('vue')['unref']>
    readonly useAnimationLayer: UnwrapRef<typeof import('./composables/useAnimationLayer')['useAnimationLayer']>
    readonly useAppStore: UnwrapRef<typeof import('./stores/app.store')['useAppStore']>
    readonly useAttrs: UnwrapRef<typeof import('vue')['useAttrs']>
    readonly useAuthStore: UnwrapRef<typeof import('./stores/auth.store')['useAuthStore']>
    readonly useAuthStoreOutside: UnwrapRef<typeof import('./stores/auth.store')['useAuthStoreOutside']>
    readonly useChatStore: UnwrapRef<typeof import('./stores/chat.store')['useChatStore']>
    readonly useCssModule: UnwrapRef<typeof import('vue')['useCssModule']>
    readonly useCssVars: UnwrapRef<typeof import('vue')['useCssVars']>
    readonly useDepositStore: UnwrapRef<typeof import('./stores/deposit.store')['useDepositStore']>
    readonly useEventManager: UnwrapRef<typeof import('./composables/EventManager')['useEventManager']>
    readonly useGameSpinStore: UnwrapRef<typeof import('./stores/gamespin.store')['useGameSpinStore']>
    readonly useGameStore: UnwrapRef<typeof import('./stores/game.store')['useGameStore']>
    readonly useId: UnwrapRef<typeof import('vue')['useId']>
    readonly useImagePreloader: UnwrapRef<typeof import('./composables/useImagePreloader')['useImagePreloader']>
    readonly useLink: UnwrapRef<typeof import('vue-router')['useLink']>
    readonly useModel: UnwrapRef<typeof import('vue')['useModel']>
    readonly useNotificationStore: UnwrapRef<typeof import('./stores/notification.store')['useNotificationStore']>
    readonly useRealtimeUpdates: UnwrapRef<typeof import('./composables/useRealtimeUpdates')['useRealtimeUpdates']>
    readonly useRoute: UnwrapRef<typeof import('vue-router')['useRoute']>
    readonly useRouter: UnwrapRef<typeof import('vue-router')['useRouter']>
    readonly useScreen: UnwrapRef<typeof import('./composables/useScreen')['useScreen']>
    readonly useSlots: UnwrapRef<typeof import('vue')['useSlots']>
    readonly useTemplateRef: UnwrapRef<typeof import('vue')['useTemplateRef']>
    readonly useVipStore: UnwrapRef<typeof import('./stores/vip.store')['useVipStore']>
    readonly watch: UnwrapRef<typeof import('vue')['watch']>
    readonly watchEffect: UnwrapRef<typeof import('vue')['watchEffect']>
    readonly watchPostEffect: UnwrapRef<typeof import('vue')['watchPostEffect']>
    readonly watchSyncEffect: UnwrapRef<typeof import('vue')['watchSyncEffect']>
  }
}
</file>

<file path="./frontend/src/components.d.ts">
/* eslint-disable */
// @ts-nocheck
// Generated by unplugin-vue-components
// Read more: https://github.com/vuejs/core/pull/3399
// biome-ignore lint: disable
export {}

/* prettier-ignore */
declare module 'vue' {
  export interface GlobalComponents {
    AdCarousel: typeof import('./components/AdCarousel.vue')['default']
    AnimatedCircularProgressBar: typeof import('./components/ui/animated-circular-progressbar/AnimatedCircularProgressBar.vue')['default']
    AnimationLayer: typeof import('./components/AnimationLayer.vue')['default']
    AuroraText: typeof import('./components/AuroraText.vue')['default']
    AuthPanel: typeof import('./components/auth/AuthPanel.vue')['default']
    ChatMessage: typeof import('./components/chat/ChatMessage.vue')['default']
    ChatMessageList: typeof import('./components/chat/ChatMessageList.vue')['default']
    ChatPanel: typeof import('./components/chat/ChatPanel.vue')['default']
    CloseButton: typeof import('./components/CloseButton.vue')['default']
    CPanel: typeof import('./components/chat/CPanel.vue')['default']
    FilterBar: typeof import('./components/FilterBar.vue')['default']
    FlickeringGrid: typeof import('./components/ui/flickering-grid/FlickeringGrid.vue')['default']
    Footer: typeof import('./components/Footer.vue')['default']
    FormCheckRadio: typeof import('./components/FormCheckRadio.vue')['default']
    FormCheckRadioGroup: typeof import('./components/FormCheckRadioGroup.vue')['default']
    GameCard: typeof import('./components/GameCard.vue')['default']
    GameCarousel: typeof import('./components/GameCarousel.vue')['default']
    GameLoader: typeof import('./components/GameLoader.vue')['default']
    GlassButton: typeof import('./components/GlassButton.vue')['default']
    GlobalLoading: typeof import('./components/GlobalLoading.vue')['default']
    Header: typeof import('./components/Header.vue')['default']
    HelloWorld: typeof import('./components/HelloWorld.vue')['default']
    IconCommunity: typeof import('./components/icons/IconCommunity.vue')['default']
    IconDocumentation: typeof import('./components/icons/IconDocumentation.vue')['default']
    IconEcosystem: typeof import('./components/icons/IconEcosystem.vue')['default']
    IconSupport: typeof import('./components/icons/IconSupport.vue')['default']
    IconTooling: typeof import('./components/icons/IconTooling.vue')['default']
    LiveWin: typeof import('./components/LiveWin.vue')['default']
    LiveWinItem: typeof import('./components/LiveWinItem.vue')['default']
    Loading: typeof import('./components/Loading.vue')['default']
    LoginForm: typeof import('./components/auth/LoginForm.vue')['default']
    Logo: typeof import('./components/Logo.vue')['default']
    MessageList: typeof import('./components/chat/MessageList.vue')['default']
    Notification: typeof import('./components/common/Notification.vue')['default']
    OverlayLayer: typeof import('./components/OverlayLayer.vue')['default']
    PlayerAvatar: typeof import('./components/PlayerAvatar.vue')['default']
    RegisterForm: typeof import('./components/auth/RegisterForm.vue')['default']
    RouterLink: typeof import('vue-router')['RouterLink']
    RouterView: typeof import('vue-router')['RouterView']
    RtgGameLauncher: typeof import('./components/RtgGameLauncher.vue')['default']
    RtgGameLoader: typeof import('./components/RtgGameLoader.vue')['default']
    SettingsButton: typeof import('./components/ui/SettingsButton.vue')['default']
    SettingsView: typeof import('./components/SettingsView.vue')['default']
    SparklesSprite: typeof import('./components/SparklesSprite.vue')['default']
    SpriteAnimator: typeof import('./components/SpriteAnimator.vue')['default']
    StarBurst: typeof import('./components/StarBurst.vue')['default']
    Starfield: typeof import('./components/Starfield.vue')['default']
  }
}
</file>

<file path="./frontend/src/declarations.d.ts">
declare module '*.png';
declare module '*.json';

interface Window {
  com: {
    casino: {
      cdn?: string;
      baseCdn?: string;
      barsPath?: string;
      bridgePath?: string;
      bridge?: {
        init: (config: Record<string, unknown>) => void;
      };
    };
  };
}
</file>

<file path="./frontend/src/image-preload-list.ts">
export const imageUrls = [
  '/images/logo_small_animated.webp',
  '/images/animated_logo.gif',
  '/images/starsbg.png',
  // '/images/button-on.png',
  // '/images/button-dead.png',
  // '/images/shop/gems.png',
  // '/images/shop/coins.png',
  '/images/layout/money_backing.png',
  '/images/layout/home.png',
  '/images/layout/settings.avif',
  // Top bar background exists as /images/layout/topback.png? If not present, comment or provide valid path.
  // '/images/layout/topback.png',
  // Replace invalid src/ asset paths with public/ images that exist
  // '/src/assets/anim/leadernew.png',
  // '/src/assets/anim/logo_shine.png',
  // '/src/assets/anim/vault.png',
  // '/src/assets/anim/wheel.png',
  // '/src/assets/anim/rewards.png',
  '/images/loading.svg'
]
</file>

<file path="./frontend/src/main.ts">
/**
 * Progressive bootstrap: Mount after core plugins (Pinia + Router) are installed,
 * but keep other plugins lazy to avoid blocking UI.
 */
import { createApp } from 'vue'
import App from './App.vue'

const start = async () => {
  const app = createApp(App)

  // Install Pinia and Router BEFORE mounting so components using stores can render
  let piniaInstalled = false
  try {
    const [{ plugin: piniaPlugin }, { default: router }] = await Promise.all([
      import('./stores'),
      import('./router'),
    ])
    app.use(piniaPlugin)
    app.use(router)
    piniaInstalled = true
  } catch (e) {
    console.error('Failed to install core plugins (pinia/router):', e)
  }

  // Set GlobalLoading splash flag BEFORE mounting (ensures overlay is visible on hard refresh)
  try {
    if (piniaInstalled) {
      const { useAppStore } = await import('./stores/app.store')
      const appStore = useAppStore()
      appStore.globalLoading = true
    }
  } catch (e) {
    console.error('Failed to prime global loading flag before mount:', e)
  }

  // Mount ASAP after core plugins
  app.mount('#app')
  // @ts-expect-error diag
  window.__app_mounted = true

  // Lazy install non-core plugins
  try {
    const [{ createHead }, { VueQueryPlugin }] = await Promise.all([
      import('@vueuse/head'),
      import('@tanstack/vue-query'),
    ])
    try {
      app.use(createHead())
    } catch (e) {
      console.error('head plugin failed', e)
    }
    try {
      app.use(VueQueryPlugin)
    } catch (e) {
      console.error('vue-query plugin failed', e)
    }
  } catch (e) {
    console.error('Deferred non-core plugin setup failed', e)
  }

  // Kick off auth initialization non-blocking
  try {
    const { useAuthStore } = await import('./stores/auth.store')
    const authStore = useAuthStore()
    authStore.init().catch((e: unknown) => console.error('auth init error', e))
  } catch (e) {
    console.error('auth store init wiring failed', e)
  }
}

start()

// Import styles last to avoid CSS loader blocking
import '@fortawesome/fontawesome-free/css/all.min.css'
import './assets/main.css'
</file>

<file path="./frontend/src/shims-vue.d.ts">
/* eslint-disable */
declare module '*.vue' {
    import type { DefineComponent } from 'vue'
    const component: DefineComponent<{}, {}, any>
    export default component
}

declare module '*.png' {
    const value: string
    export default value
}

declare module '*.jpg' {
    const value: string
    export default value
}

declare module '*.jpeg' {
    const value: string
    export default value
}

declare module '*.svg' {
    const value: string
    export default value
}
</file>

<file path="./frontend/src/vite-env.d.ts">
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_API_BASE_URL: string
  // Add other environment variables here as needed
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
</file>

<file path="./frontend/capacitor.config.ts">
import type { CapacitorConfig } from '@capacitor/cli'
import pkg from './package.json'

const config: CapacitorConfig = {
  appId: 'com.cashflowcasino.app',
  appName: 'CashflowCasino',
  webDir: 'dist',
  plugins: {
    PushNotifications: {
      presentationOptions: [
        'badge',
        'sound',
        'alert',
      ],
    },
    SplashScreen: {
      launchAutoHide: false,
      androidScaleType: 'CENTER_CROP',
    },
    CapacitorUpdater: {
      version: pkg.version,
    },
  },
  android: {
    webContentsDebuggingEnabled: true,
  },
}

export default config
</file>

<file path="./frontend/components.json">
{
  "$schema": "https://shadcn-vue.com/schema.json",
  "style": "new-york",
  "typescript": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/assets/main.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "composables": "@/composables",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="./frontend/env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="./frontend/openapi-ts.config.ts">
import { defineConfig } from '@hey-api/openapi-ts'

export default defineConfig({
    input: 'https://api.cashflowcasino.com/doc',
    output: {
        lint: 'eslint',
        format: 'prettier',
        path: 'src/sdk/generated',
    },
    plugins: [
        {
            name: '@hey-api/client-axios',
            throwOnError: true,
            runtimeConfigPath: './src/sdk/runtime.client.ts',
        },
        {
            name: '@hey-api/sdk',
        },
    ],
})
</file>

<file path="./frontend/package.json">
{
  "name": "@monorepo/frontend",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "buildx": "run-p typecheck \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "typecheck": "vue-tsc --build",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix",
    "codegen": "openapi-ts --input http://localhost:9999/doc --output src/sdk/generated --client @hey-api/client-axios",
    "cap": "capacitor",
    "capacitor-assets": "bunx @capacitor/assets generate --assetPath assets --iconBackgroundColor '#111827' --iconBackgroundColorDark '#111827' --splashBackgroundColor '#111827' --splashBackgroundColorDark '#111827' --logoSplashScale 0.3",
    "mobile": "vite build --mode mobile && cap copy",
    "build": "vite build",
    "sync:android": "cap sync android",
    "dev-mobile": "BRANCH=development vite build --mode mobile && cap copy",
    "dev-build": "BRANCH=development vite build",
    "dev-serve": "BRANCH=development vite",
    "dev-android": "cap sync && cap run android",
    "size": "bunx vite-bundle-visualizer --open true -o /tmp/visual/serve.json && bunx serve /tmp/visual"
  },
  "dependencies": {
    "@capacitor/android": "^7.4.2",
    "@capacitor/app-launcher": "^7.0.1",
    "@capacitor/network": "^7.0.1",
    "@capacitor/push-notifications": "^7.0.1",
    "@capacitor/splash-screen": "^7.0.1",
    "@capacitor/status-bar": "^7.0.1",
    "@capawesome/capacitor-screen-orientation": "^7.0.1",
    "@capgo/capacitor-native-biometric": "^7.1.7",
    "@capgo/capacitor-screen-recorder": "7.1.9",
    "@capgo/capacitor-updater": "^7.6.0",
    "@fortawesome/fontawesome-free": "^7.0.0",
    "@hey-api/client-axios": "^0.9.1",
    "@tanstack/vue-query": "^5.83.0",
    "@vueuse/core": "^13.5.0",
    "@vueuse/head": "^2.0.0",
    "@vueuse/integrations": "^13.5.0",
    "@vueuse/motion": "^3.0.3",
    "@vueuse/router": "^13.5.0",
    "embla-carousel": "^8.6.0",
    "embla-carousel-autoplay": "^8.6.0",
    "embla-carousel-vue": "^8.6.0",
    "jwt-decode": "^4.0.0",
    "localforage": "^1.10.0",
    "lucide-vue-next": "^0.525.0",
    "motion-v": "^1.5.0",
    "pinia": "^3.0.3",
    "pinia-plugin-persistedstate-2": "^2.0.30",
    "universal-cookie": "^8.0.1",
    "vue": "^3.5.17",
    "vue-router": "^4.5.1"
  },
  "devDependencies": {
    "@capacitor/cli": "^7.4.2",
    "@capacitor/core": "^7.4.2",
    "@capgo/cli": "^7.13.0",
    "@hey-api/openapi-ts": "^0.79.2",
    "@inspira-ui/plugins": "^0.0.1",
    "@rushstack/eslint-patch": "^1.10.3",
    "@tailwindcss/postcss": "^4.1.11",
    "@tailwindcss/vite": "^4.1.11",
    "@tsconfig/node22": "^22.0.2",
    "@types/node": "^24.1.0",
    "@vitejs/plugin-vue": "^6.0.0",
    "@vue/eslint-config-prettier": "^9.0.0",
    "@vue/eslint-config-typescript": "^13.0.0",
    "@vue/tsconfig": "^0.7.0",
    "autoprefixer": "^10.4.21",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "eslint": "^9.8.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-vue": "^9.27.0",
    "npm-run-all2": "^8.0.4",
    "postcss": "^8.5.6",
    "prettier": "^3.3.3",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.11",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.3.5",
    "typescript": "~5.8.0",
    "unplugin-auto-import": "^19.3.0",
    "unplugin-vue-components": "^28.8.0",
    "vite": "^7.0.0",
    "vite-plugin-vue-devtools": "^7.7.7",
    "vue-tsc": "^2.2.10"
  }
}
</file>

<file path="./frontend/tsconfig.json">
{
  "extends": "../tsconfig.base.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue", "../shared/**/*"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "module": "esnext",
    "moduleResolution": "node",
    "target": "esnext",
    "useDefineForClassFields": true,
    "strict": true,
    "jsx": "preserve",
    "sourceMap": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"],
    "skipLibCheck": true,
    "noEmit": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "shared/*": ["../shared/*"]
    }
  },
  "outDir": "frontend/dist"
}
</file>

<file path="./frontend/vite.config.ts">
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import vueDevTools from 'vite-plugin-vue-devtools'
import AutoImport from 'unplugin-auto-import/vite'
import Components from 'unplugin-vue-components/vite'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
    plugins: [
        vue(),
        tailwindcss(),
        vueDevTools(),
        AutoImport({
            imports: ['vue', 'vue-router', 'pinia', ],
            dirs: ['src/stores', 'src/composables','/localforage/dist'],
            dts: 'src/auto-imports.d.ts',
            vueTemplate: true,
        }),
        Components({
            dirs: ['src/components'],
            dts: 'src/components.d.ts',
        }),
    ],
    resolve: {
        alias: {
            '@': fileURLToPath(new URL('./src', import.meta.url)),
        },
    },
    build: {
        outDir: 'dist',

        // Other build options...
    },
    server:{
        allowedHosts: ['app.cashflowcasino.com',]

    }
})
</file>

<file path="./shared/ws/contracts.ts">
// Shared contracts defining per-topic events and RPC shapes

import type { EventMessage, RpcMessage } from 'shared/ws/protocol'

/**
* Represents a partial user update patch delivered over WebSocket.
* Prefer small targeted patches to reduce payload size.
*/
export type UserPatch = {
 user?: Record<string, unknown>
 wallet?: Record<string, unknown>
 vipInfo?: Record<string, unknown>
}

/**
* User topic events:
* - 'user.updated' for patch-based updates
* - 'user.snapshot' for a full snapshot
*/
export type UserEvents = {
 'user.updated': { userId: string; patch: UserPatch; ts: number }
 'user.snapshot': {
   userId: string
   user?: Record<string, unknown>
   wallet?: Record<string, unknown>
   vipInfo?: Record<string, unknown>
   ts: number
 }
}

// RPC map for user topic (extend later as needed)
export type UserRpc = {
 'user.get': { userId?: string }
}
export type UserRpcResults = {
 'user.get': {
   userId: string
   user?: Record<string, unknown>
   wallet?: Record<string, unknown>
   vipInfo?: Record<string, unknown>
   ts: number
 }
}

/**
* Notifications topic events:
* - 'notifications.push' for an incoming notification
* - 'notifications.read' when a notification is marked read
* Extend with more events as needed (bulk read, clear, etc.)
*/
export type NotificationItem = {
 id: string
 title: string
 message: string
 createdAt: string
 read?: boolean
}
export type NotificationsEvents = {
 'notifications.push': { userId: string; notification: NotificationItem; ts: number }
 'notifications.read': { userId: string; notificationId: string; ts: number }
}
export type NotificationsRpc = {
 'notifications.list': { limit?: number }
}
export type NotificationsRpcResults = {
 'notifications.list': { items: NotificationItem[]; ts: number }
}

/**
* Chat topic events:
* - 'chat.message' for a new chat message broadcast
* - 'chat.joined' / 'chat.left' for presence updates
*/
export type ChatMessage = {
 id: string
 userId: string
 username?: string
 text: string
 createdAt: string
}
export type ChatEvents = {
 'chat.message': { room: string; message: ChatMessage; ts: number }
 'chat.joined': { room: string; userId: string; username?: string; ts: number }
 'chat.left': { room: string; userId: string; username?: string; ts: number }
}
export type ChatRpc = {
 'chat.send': { room: string; text: string }
 'chat.history': { room: string; limit?: number }
}
export type ChatRpcResults = {
 'chat.send': { ok: true; id: string; ts: number }
 'chat.history': { room: string; messages: ChatMessage[]; ts: number }
}

/**
* Blackjack topic events (skeleton):
* - 'blackjack.state' for table/game state updates
* - 'blackjack.action' acknowledgement
*/
export type BlackjackState = Record<string, unknown>
export type BlackjackEvents = {
 'blackjack.state': { tableId: string; state: BlackjackState; ts: number }
 'blackjack.action': { tableId: string; userId: string; action: string; ts: number }
}
export type BlackjackRpc = {
 'blackjack.join': { tableId: string }
 'blackjack.hit': { tableId: string }
 'blackjack.stand': { tableId: string }
}
export type BlackjackRpcResults = {
 'blackjack.join': { ok: true; tableId: string; ts: number }
 'blackjack.hit': { ok: true; tableId: string; ts: number }
 'blackjack.stand': { ok: true; tableId: string; ts: number }
}

// Aggregate topic contracts for convenience
export type TopicEvents = {
 user: UserEvents
 notifications: NotificationsEvents
 chat: ChatEvents
 blackjack: BlackjackEvents
}

export type TopicRpc = {
 user: UserRpc
 notifications: NotificationsRpc
 chat: ChatRpc
 blackjack: BlackjackRpc
}

export type TopicRpcResults = {
 user: UserRpcResults
 notifications: NotificationsRpcResults
 chat: ChatRpcResults
 blackjack: BlackjackRpcResults
}

// Type helpers for envelopes
export type UserEventEnvelope<K extends keyof UserEvents> = EventMessage<'user', K, UserEvents[K]>
export type UserRpcEnvelope<K extends keyof UserRpc> = RpcMessage<'user', K, UserRpc[K]>

// Notifications helpers
export type NotificationsEventEnvelope<K extends keyof NotificationsEvents> =
 EventMessage<'notifications', K, NotificationsEvents[K]>
export type NotificationsRpcEnvelope<K extends keyof NotificationsRpc> =
 RpcMessage<'notifications', K, NotificationsRpc[K]>

// Chat helpers
export type ChatEventEnvelope<K extends keyof ChatEvents> =
 EventMessage<'chat', K, ChatEvents[K]>
export type ChatRpcEnvelope<K extends keyof ChatRpc> =
 RpcMessage<'chat', K, ChatRpc[K]>

// Blackjack helpers
export type BlackjackEventEnvelope<K extends keyof BlackjackEvents> =
 EventMessage<'blackjack', K, BlackjackEvents[K]>
export type BlackjackRpcEnvelope<K extends keyof BlackjackRpc> =
 RpcMessage<'blackjack', K, BlackjackRpc[K]>
</file>

<file path="./shared/ws/envelope.ts">
// Helpers to build typed WS envelopes

import type {
  CorrelationId,
  EventMessage,
  RpcErrorMessage,
  RpcMessage,
  RpcResultMessage,
  Topic,
  WSVersion,
} from 'shared/ws/protocol'

export const VERSION: WSVersion = '1'

export function eventEnvelope<TTopic extends Topic, TEvent extends string, TPayload>(
  topic: TTopic,
  event: TEvent,
  payload: TPayload,
  ts: number = Date.now()
): EventMessage<TTopic, TEvent, TPayload> {
  return {
    v: VERSION,
    kind: 'event',
    topic,
    event,
    payload,
    ts,
  }
}

export function rpcEnvelope<TTopic extends Topic, TMethod extends string, TParams>(
  topic: TTopic,
  method: TMethod,
  params: TParams,
  id: CorrelationId,
  ts: number = Date.now()
): RpcMessage<TTopic, TMethod, TParams> {
  return {
    v: VERSION,
    kind: 'rpc',
    topic,
    method,
    params,
    id,
    ts,
  }
}

export function rpcResultEnvelope<TResult>(
  id: CorrelationId,
  result: TResult,
  ts: number = Date.now()
): RpcResultMessage<TResult> {
  return {
    v: VERSION,
    kind: 'rpc_result',
    id,
    result,
    ts,
  }
}

export function rpcErrorEnvelope(
  id: CorrelationId,
  error: { code: string; message: string; data?: unknown },
  ts: number = Date.now()
): RpcErrorMessage {
  return {
    v: VERSION,
    kind: 'rpc_error',
    id,
    error,
    ts,
  }
}
</file>

<file path="./shared/ws/protocol.ts">
// Shared WebSocket protocol: versioned, fully-typed envelopes for events and RPC

export type WSVersion = '1'
export type WSEventKind = 'event' | 'rpc' | 'rpc_result' | 'rpc_error'
export type CorrelationId = string

// Topic names supported by backend. Extend as new topics are added.
export type Topic = 'user' | 'chat' | 'notifications' | 'blackjack' | 'proxy'

// Generic event envelope
export type EventMessage<
  TTopic extends Topic = Topic,
  TEvent extends string = string,
  TPayload = unknown
> = {
  v: WSVersion
  kind: 'event'
  topic: TTopic
  event: TEvent
  payload: TPayload
  ts?: number
}

// Generic RPC request envelope
export type RpcMessage<
  TTopic extends Topic = Topic,
  TMethod extends string = string,
  TParams = unknown
> = {
  v: WSVersion
  kind: 'rpc'
  topic: TTopic
  method: TMethod
  params: TParams
  id: CorrelationId
  ts?: number
}

// Generic RPC success result envelope
export type RpcResultMessage<TResult = unknown> = {
  v: WSVersion
  kind: 'rpc_result'
  id: CorrelationId
  result: TResult
  ts?: number
}

// Generic RPC error envelope
export type RpcErrorMessage = {
  v: WSVersion
  kind: 'rpc_error'
  id: CorrelationId
  error: {
    code: string
    message: string
    data?: unknown
  }
  ts?: number
}

// Discriminated union of all message types
export type WSMessage =
  | EventMessage<any, any, any>
  | RpcMessage<any, any, any>
  | RpcResultMessage<any>
  | RpcErrorMessage
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./frontend" },
    { "path": "./backend" }
  ],
  "compilerOptions": {
    "composite": true
  }
}
</file>

<file path="GEMINI.md">
# Gemini Agent Configuration: Project HOY777

This document provides instructions for the Gemini agent. Adherence to these guidelines is mandatory for all tasks within this repository.

## 1. Core Directives & Behavior

Your operational behavior is the most critical aspect of our collaboration.

- **Clarity is Paramount:** Your primary directive is to seek clarity. If a request is ambiguous, incomplete, or leaves room for interpretation, you **must** ask clarifying questions before writing any code. Do not proceed with assumptions.

- **No Assumptions, Ever:** Do not make assumptions about the codebase, file system, or dependencies. If you need to know the contents of a file, read it. If you need to know if a library is installed, check `package.json`. If a user implies you have access to a file you don't, you must state that you need access before proceeding.

- **Technical Partnership:** I expect you to be more than a code generator. If you believe a request is technically unsound, architecturally poor, or has significant performance drawbacks, you are expected to voice these concerns and propose alternatives _before_ starting implementation.

- **Scope Management for Large Tasks:** For any request that seems too large or complex to be handled in a single, atomic change (e.g., "build a new chat feature"), you must not attempt it directly. Instead, you must:
    1.  State that the request is too large for a single step.
    2.  Propose a clear, phased implementation plan with incremental steps.
    3.  Wait for my approval on the plan before beginning work on the first step.

## 2. Code Quality & Standards

- **Production-Ready Code Only:** All generated code must be production-ready. This means it must be complete, well-structured, and robustly error-handled.
- **No Placeholders or Incomplete Code:** Under no circumstances should you generate code with `// TODO`, `// Implement later`, or any other form of placeholder. Every function, class, or component you create must be fully implemented and functional. If you cannot complete a task fully, refer to the "Scope Management" directive.

## 3. Technical Stack & Conventions

- **Runtime & Package Manager:** This project uses **Bun** exclusively.
    - Use `bun install` for installing dependencies.
    - Use `bun run <script>` for executing scripts from `package.json`.
    - Use `bun <command>` for all runtime operations.

- **Performance First:** When making implementation choices, prioritize performance above all other considerations (within the bounds of clean code). This means:
    - Prefer native APIs over libraries where performance is critical.
    - Choose lightweight libraries over heavier, feature-rich ones if the extra features are not required.
    - Write efficient algorithms and be mindful of data structures.

- **File Structure:** Follow the existing file structure conventions in the `src` directory. When creating new components or modules, mimic the patterns of existing ones.

## 4. Project Commands

These are the standard commands for this project. Use them as needed.

| Command       | Description                               |
| ------------- | ----------------------------------------- |
| `bun install` | Install all project dependencies.         |
| `bun dev`     | Start the local development server.       |
| `bun test`    | Run the project's test suite.             |
| `bun lint`    | Run the linter to check for style issues. |
| `bun build`   | Create a production-ready build.          |

## 5. Project Guildlines

- use frontend/src/sdk/generated/sdk.gen.ts for api calls
- do not use 'any' as a type
- use frontend/src/stores/auth.store.ts for auth state management and tracking the current user
- use frontend/src/stores/notification.store.ts for notification state managment
- always check frontend/src/sdk/generated for types before creating one
- if any changes to the backend routes are made, run `bunx @hey-api/openapi-ts -f ./openapi-ts.config.ts` when inside the fronted to update the fronted sdk
</file>

<file path="package.json">
{
  "name": "hono-open-api-starter-monorepo",
  "private": true,
  "workspaces": [
    "backend",
    "frontend"
  ],
  "scripts": {
    "dev": "concurrently --names \"FRONTEND,BACKEND\" --prefix-colors \"blue,magenta\" \"bun --cwd frontend dev\" \"bun --cwd backend dev\"",
    "start": "bun --cwd backend start",
    "build": "bun --cwd backend build && bun --cwd frontend build",
    "format": "bun --cwd backend format && bun --cwd frontend format",
    "test": "bun --cwd backend test && bun --cwd frontend test",
    "lint": "bun --cwd backend lint",
    "lint:fix": "bun --cwd backend lint:fix",
    "lint:all": "bun --cwd backend lint && bun --cwd frontend lint",
    "typecheck": "bun --cwd backend typecheck",
    "typecheck:all": "bun --cwd backend typecheck && bun --cwd frontend typecheck",
    "seed": "bun --cwd backend seed",
    "studio": "bun --cwd backend studio",
    "generate": "bun --cwd backend generate",
    "push": "bun --cwd backend push",
    "codegen": "bunx @hey-api/openapi-ts -f ./openapi-ts.config.ts"
  },
  "devDependencies": {
    "@types/node": "^24.1.0",
    "bun-types": "^1.2.19",
    "concurrently": "^8.2.2"
  },
  "dependencies": {
    "@fortawesome/fontawesome-free": "^7.0.0",
    "@heroicons/vue": "^2.2.0",
    "gsap": "^3.13.0",
    "rclone.js": "^0.6.6"
  }
}
</file>

</files>
