This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
assets/
  anim/
    avatar_xp.json
    fireBlue.json
    leadernew.json
    logo_shine.json
    part0.json
    part1.json
    part2.json
    rewards.json
    small_logo.json
    vault.json
    wheel.json
  logo.svg
  main.css
components/
  auth/
    AuthPanel.vue
    LoginForm.vue
    RegisterForm.vue
  chat/
    ChatMessage.vue
    ChatMessageList.vue
    ChatPanel.vue
    CPanel.vue
    MessageList.vue
    types.d.ts
    types.ts
  common/
    Notification.vue
  icons/
    IconCommunity.vue
    IconDocumentation.vue
    IconEcosystem.vue
    IconSupport.vue
    IconTooling.vue
  ui/
    animated-circular-progressbar/
      AnimatedCircularProgressBar.vue
      index.ts
    flickering-grid/
      FlickeringGrid.vue
      index.d.ts
      index.ts
    SettingsButton.vue
  AdCarousel.vue
  AnimationLayer.vue
  AuroraText.vue
  CloseButton.vue
  Footer.vue
  FormCheckRadio.vue
  FormCheckRadioGroup.vue
  GameCarousel.vue
  GameLoader.vue
  GlassButton.vue
  GlobalLoading.vue
  Header.vue
  HelloWorld.vue
  LiveWin.vue
  LiveWinItem.vue
  Loading.vue
  Logo.vue
  OverlayLayer.vue
  PlayerAvatar.vue
  RtgGameLauncher.vue
  RtgGameLoader.vue
  SettingsView.vue
  SparklesSprite.vue
  SpriteAnimator.vue
  StarBurst.vue
  Starfield.vue
composables/
  EventManager.ts
  useAnimationLayer.ts
  useImagePreloader.ts
  useRealtimeUpdates.ts
  useScreen.ts
db/
  migrations/
    meta/
      _journal.json
      0000_snapshot.json
    0000_complete_thanos.sql
    0001_create_enums.sql
  schema/
    blackjack.ts
    core.ts
    enums.ts
    index.ts
    relations.bak.ts
    relations.ts
    rtg.ts
    schema.bak.ts
    schema.ts
    types.ts
    zod.ts
  index.ts
  schema-transformer.ts
lib/
  cache.ts
  configure-open-api.ts
  constants.ts
  create-app.ts
  disconnect.manager.ts
  gameplay.ts
  jackpot.ts
  session.manager.ts
  types.ts
  utils.d.ts
  utils.ts
  websocket.service.ts
middlewares/
  auth.middleware.ts
  pino-logger.ts
  session.middleware.ts
router/
  index.ts
  interface.ts
routes/
  auth/
    auth.controller.ts
    auth.index.ts
    auth.router.ts
    auth.service.ts
  blackjack/
    utils/
      blackjack.utils.ts
      fair.ts
      message.schema.ts
      setting.ts
      socket.ts
      user.ts
    blackjack.handler.ts
    blackjack.schema.ts
    blackjack.service.ts
    types.ts
  common/
    notifications.handler.ts
  games/
    games.controller.ts
    games.router.ts
    games.service.ts
  gamespins/
    gamespins.controller.ts
    gamespins.router.ts
  operator/
    operator.controller.ts
    operator.router.ts
    operator.service.ts
  recordings/
    recordings.controller.ts
    recordings.router.ts
    recordings.service.ts
  redtiger/
    data.ts
    redtiger.controller.ts
    redtiger.router.ts
    redtiger.service.ts
  tasks/
    tasks.handlers.ts
    tasks.index.ts
    tasks.routes.ts
  updates/
    updates.controller.ts
    updates.router.ts
    updates.service.ts
  user/
    user.controller.ts
    user.handler.ts
    user.router.ts
    user.service.ts
  vip/
    vip.config.ts
    vip.controller.ts
    vip.router.ts
    vip.service.ts
  wallet/
    wallet.controller.ts
    wallet.router.ts
    wallet.service.ts
  websocket/
    chat.handler.ts
    proxy.handler.ts
    proxy.router.ts
    proxy.service.ts
    websocket.handler.ts
    websocket.router.ts
  gameService.route.ts
  index.route.ts
sdk/
  generated/
    client/
      client.ts
      index.ts
      types.ts
      utils.ts
    core/
      auth.ts
      bodySerializer.ts
      params.ts
      pathSerializer.ts
      types.ts
    client.gen.ts
    index.ts
    sdk.gen.ts
    types.gen.ts
  types/
    api.ts
    backend.d.ts
  api.ts
  auth.ts
  runtime.client.ts
  types.ts
seeds/
  json/
    games2.json
    products.json
  games.ts
  gamespins.ts
  operator.ts
  products.ts
  reset.ts
  users.ts
  vip.ts
services/
  GameLauncher.ts
  websocket.service.ts
stores/
  app.store.ts
  auth.store.ts
  chat.store.ts
  deposit.store.ts
  exception.ts
  game.store.ts
  gamespin.store.ts
  index.ts
  notification.store.ts
  vip.store.ts
types/
  events.ts
  websocket.d.ts
  websocket.ts
utils/
  crypto.js
  crypto.test.ts
  misc.utils.ts
  nanoid.ts
views/
  AboutView.vue
  HomeView.vue
  LoginView.vue
  RtgGame.vue
app.ts
App.vue
auto-imports.d.ts
bot.ts
components.d.ts
db-test.ts
declarations.d.ts
download-launchers.mjs
env.ts
generate-manifest.mjs
image-preload-list.ts
index.ts
key.txt
lzw.ts
main.ts
manual-decrypt.ts
message.txt
parse-games.js
parser.js
seed.ts
shims-vue.d.ts
vite-env.d.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="db/migrations/meta/_journal.json">
{
  "version": "6",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "6",
      "when": 1721853530586,
      "tag": "0001_create_enums",
      "breakpoints": true
    }
  ]
}
</file>

<file path="db/migrations/meta/0000_snapshot.json">
{
  "id": "06761f9c-aa31-4710-8594-58a7c37de456",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.auth_sessions": {
      "name": "auth_sessions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "session_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'ACTIVE'"
        },
        "ip_address": {
          "name": "ip_address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_agent": {
          "name": "user_agent",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "device_id": {
          "name": "device_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "last_seen": {
          "name": "last_seen",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "auth_session_user_idx": {
          "name": "auth_session_user_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "auth_session_status_idx": {
          "name": "auth_session_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "auth_sessions_user_id_users_id_fk": {
          "name": "auth_sessions_user_id_users_id_fk",
          "tableFrom": "auth_sessions",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.favorite_games": {
      "name": "favorite_games",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "favorite_games_user_id_users_id_fk": {
          "name": "favorite_games_user_id_users_id_fk",
          "tableFrom": "favorite_games",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "favorite_games_game_id_games_id_fk": {
          "name": "favorite_games_game_id_games_id_fk",
          "tableFrom": "favorite_games",
          "tableTo": "games",
          "columnsFrom": [
            "game_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.games": {
      "name": "games",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "goldsvet_data": {
          "name": "goldsvet_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "category": {
          "name": "category",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "tags": {
          "name": "tags",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "thumbnail_url": {
          "name": "thumbnail_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "banner_url": {
          "name": "banner_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "provider_name": {
          "name": "provider_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "provider_id": {
          "name": "provider_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "total_wagered": {
          "name": "total_wagered",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "total_won": {
          "name": "total_won",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "target_rtp": {
          "name": "target_rtp",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "is_featured": {
          "name": "is_featured",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "tournament_directives": {
          "name": "tournament_directives",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "games_operator_fkey": {
          "name": "games_operator_fkey",
          "tableFrom": "games",
          "tableTo": "operators",
          "columnsFrom": [
            "operator_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.game_history": {
      "name": "game_history",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "game_history_user_id_users_id_fk": {
          "name": "game_history_user_id_users_id_fk",
          "tableFrom": "game_history",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "game_history_game_id_games_id_fk": {
          "name": "game_history_game_id_games_id_fk",
          "tableFrom": "game_history",
          "tableTo": "games",
          "columnsFrom": [
            "game_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.game_sessions": {
      "name": "game_sessions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "auth_session_id": {
          "name": "auth_session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "session_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'ACTIVE'"
        },
        "total_wagered": {
          "name": "total_wagered",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "total_won": {
          "name": "total_won",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "total_xp_gained": {
          "name": "total_xp_gained",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "rtp": {
          "name": "rtp",
          "type": "numeric(5, 2)",
          "primaryKey": false,
          "notNull": false
        },
        "duration": {
          "name": "duration",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "end_at": {
          "name": "end_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "game_session_auth_session_idx": {
          "name": "game_session_auth_session_idx",
          "columns": [
            {
              "expression": "auth_session_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "game_session_user_idx": {
          "name": "game_session_user_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "game_sessions_auth_session_id_auth_sessions_id_fk": {
          "name": "game_sessions_auth_session_id_auth_sessions_id_fk",
          "tableFrom": "game_sessions",
          "tableTo": "auth_sessions",
          "columnsFrom": [
            "auth_session_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "game_sessions_user_id_users_id_fk": {
          "name": "game_sessions_user_id_users_id_fk",
          "tableFrom": "game_sessions",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.game_spins": {
      "name": "game_spins",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "player_name": {
          "name": "player_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "game_name": {
          "name": "game_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "spin_data": {
          "name": "spin_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "gross_win_amount": {
          "name": "gross_win_amount",
          "type": "double precision",
          "primaryKey": false,
          "notNull": true
        },
        "wager_amount": {
          "name": "wager_amount",
          "type": "double precision",
          "primaryKey": false,
          "notNull": true
        },
        "spin_number": {
          "name": "spin_number",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "player_avatar": {
          "name": "player_avatar",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "currency_id": {
          "name": "currency_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "occurred_at": {
          "name": "occurred_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true
        },
        "sessionDataId": {
          "name": "sessionDataId",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.in_active_wallets": {
      "name": "in_active_wallets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "balance": {
          "name": "balance",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "payment_method": {
          "name": "payment_method",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'INSTORE_CASH'"
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "cashtag": {
          "name": "cashtag",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_used_at": {
          "name": "last_used_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "in_active_wallets_address_unique": {
          "name": "in_active_wallets_address_unique",
          "nullsNotDistinct": false,
          "columns": [
            "address"
          ]
        },
        "in_active_wallets_cashtag_unique": {
          "name": "in_active_wallets_cashtag_unique",
          "nullsNotDistinct": false,
          "columns": [
            "cashtag"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jackpots": {
      "name": "jackpots",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "current_amount_coins": {
          "name": "current_amount_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "seed_amount_coins": {
          "name": "seed_amount_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "minimum_bet_coins": {
          "name": "minimum_bet_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 1
        },
        "contribution_rate_basis_points": {
          "name": "contribution_rate_basis_points",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "probability_per_million": {
          "name": "probability_per_million",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "minimum_time_between_wins_minutes": {
          "name": "minimum_time_between_wins_minutes",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "last_won_at": {
          "name": "last_won_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "last_won_by": {
          "name": "last_won_by",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "jackpots_lastWinner_fkey": {
          "name": "jackpots_lastWinner_fkey",
          "tableFrom": "jackpots",
          "tableTo": "users",
          "columnsFrom": [
            "last_won_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jackpot_contributions": {
      "name": "jackpot_contributions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "jackpot_id": {
          "name": "jackpot_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "game_spin_id": {
          "name": "game_spin_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "contribution_amount_coins": {
          "name": "contribution_amount_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "JackpotContribution_jackpotId_gameSpinId_key": {
          "name": "JackpotContribution_jackpotId_gameSpinId_key",
          "columns": [
            {
              "expression": "jackpot_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "game_spin_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "jackpot_contributions_gameSpin_fkey": {
          "name": "jackpot_contributions_gameSpin_fkey",
          "tableFrom": "jackpot_contributions",
          "tableTo": "game_spins",
          "columnsFrom": [
            "game_spin_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "jackpot_contributions_jackpot_fkey": {
          "name": "jackpot_contributions_jackpot_fkey",
          "tableFrom": "jackpot_contributions",
          "tableTo": "jackpots",
          "columnsFrom": [
            "jackpot_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.jackpot_wins": {
      "name": "jackpot_wins",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "jackpot_id": {
          "name": "jackpot_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "winner_id": {
          "name": "winner_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "win_amount_coins": {
          "name": "win_amount_coins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "game_spin_id": {
          "name": "game_spin_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "transaction_id": {
          "name": "transaction_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "session_data_id": {
          "name": "session_data_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "jackpot_wins_gameSpin_fkey": {
          "name": "jackpot_wins_gameSpin_fkey",
          "tableFrom": "jackpot_wins",
          "tableTo": "game_spins",
          "columnsFrom": [
            "game_spin_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "jackpot_wins_jackpot_fkey": {
          "name": "jackpot_wins_jackpot_fkey",
          "tableFrom": "jackpot_wins",
          "tableTo": "jackpots",
          "columnsFrom": [
            "jackpot_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "jackpot_wins_winner_fkey": {
          "name": "jackpot_wins_winner_fkey",
          "tableFrom": "jackpot_wins",
          "tableTo": "users",
          "columnsFrom": [
            "winner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "jackpot_wins_game_spin_id_unique": {
          "name": "jackpot_wins_game_spin_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "game_spin_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.operators": {
      "name": "operators",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "operator_secret": {
          "name": "operator_secret",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "operator_access": {
          "name": "operator_access",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "callback_url": {
          "name": "callback_url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "allowed_ips": {
          "name": "allowed_ips",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "balance": {
          "name": "balance",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "net-revenue": {
          "name": "net-revenue",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "accepted_payments": {
          "name": "accepted_payments",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "owner_id": {
          "name": "owner_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "last_used_at": {
          "name": "last_used_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "operators_name_unique": {
          "name": "operators_name_unique",
          "nullsNotDistinct": false,
          "columns": [
            "name"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.products": {
      "name": "products",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'default'"
        },
        "product_type": {
          "name": "product_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'bundle'"
        },
        "bonus_total_in_credits": {
          "name": "bonus_total_in_credits",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "price_in_cents": {
          "name": "price_in_cents",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "amount_to_receive_in_credits": {
          "name": "amount_to_receive_in_credits",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "best_value": {
          "name": "best_value",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "discount_in_cents": {
          "name": "discount_in_cents",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_spins": {
          "name": "bonus_spins",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "is_promo": {
          "name": "is_promo",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "total_discount_in_cents": {
          "name": "total_discount_in_cents",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "products_operator_fkey": {
          "name": "products_operator_fkey",
          "tableFrom": "products",
          "tableTo": "operators",
          "columnsFrom": [
            "operator_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tournament_participants": {
      "name": "tournament_participants",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "tournament_id": {
          "name": "tournament_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "score": {
          "name": "score",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "rank": {
          "name": "rank",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "joined_at": {
          "name": "joined_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "tournament_participants_user_id_users_id_fk": {
          "name": "tournament_participants_user_id_users_id_fk",
          "tableFrom": "tournament_participants",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.transactions": {
      "name": "transactions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "processed_at": {
          "name": "processed_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "wallet_id": {
          "name": "wallet_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'PENDING'"
        },
        "amount": {
          "name": "amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "net_amount": {
          "name": "net_amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "fee_amount": {
          "name": "fee_amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "product_id": {
          "name": "product_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "payment_method": {
          "name": "payment_method",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "balance_before": {
          "name": "balance_before",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "balance_after": {
          "name": "balance_after",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "bonus_balance_before": {
          "name": "bonus_balance_before",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "bonus_balance_after": {
          "name": "bonus_balance_after",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "bonus_amount": {
          "name": "bonus_amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "wagering_requirement": {
          "name": "wagering_requirement",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "wagering_progress": {
          "name": "wagering_progress",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "provider": {
          "name": "provider",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "provider_tx_id": {
          "name": "provider_tx_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "related_game_id": {
          "name": "related_game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "related_round_id": {
          "name": "related_round_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "transactions_product_fkey": {
          "name": "transactions_product_fkey",
          "tableFrom": "transactions",
          "tableTo": "products",
          "columnsFrom": [
            "product_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "cascade"
        },
        "transactions_wallet_fkey": {
          "name": "transactions_wallet_fkey",
          "tableFrom": "transactions",
          "tableTo": "wallets",
          "columnsFrom": [
            "wallet_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "username": {
          "name": "username",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "password_hash": {
          "name": "password_hash",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "access_token": {
          "name": "access_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "refresh_token": {
          "name": "refresh_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "access_token_expires_at": {
          "name": "access_token_expires_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "refresh_token_expires_at": {
          "name": "refresh_token_expires_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "current_game_session_data_id": {
          "name": "current_game_session_data_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "current_auth_session_data_id": {
          "name": "current_auth_session_data_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "'avatar-01'"
        },
        "role": {
          "name": "role",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USER'"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "last_login_at": {
          "name": "last_login_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "total_xp_gained": {
          "name": "total_xp_gained",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "active_wallet_id": {
          "name": "active_wallet_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "vip_info_id": {
          "name": "vip_info_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "users_username_unique": {
          "name": "users_username_unique",
          "nullsNotDistinct": false,
          "columns": [
            "username"
          ]
        },
        "users_email_unique": {
          "name": "users_email_unique",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        },
        "users_current_game_session_data_id_unique": {
          "name": "users_current_game_session_data_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "current_game_session_data_id"
          ]
        },
        "users_current_auth_session_data_id_unique": {
          "name": "users_current_auth_session_data_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "current_auth_session_data_id"
          ]
        },
        "users_active_wallet_id_unique": {
          "name": "users_active_wallet_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "active_wallet_id"
          ]
        },
        "users_vip_info_id_unique": {
          "name": "users_vip_info_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "vip_info_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.vip_info": {
      "name": "vip_info",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "level": {
          "name": "level",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 1
        },
        "xp": {
          "name": "xp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "totalXp": {
          "name": "totalXp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "currentRankid": {
          "name": "currentRankid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "vip_info_user_fkey": {
          "name": "vip_info_user_fkey",
          "tableFrom": "vip_info",
          "tableTo": "users",
          "columnsFrom": [
            "userId"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "vip_info_currentRank_fkey": {
          "name": "vip_info_currentRank_fkey",
          "tableFrom": "vip_info",
          "tableTo": "VipRank",
          "columnsFrom": [
            "currentRankid"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "vip_info_userId_unique": {
          "name": "vip_info_userId_unique",
          "nullsNotDistinct": false,
          "columns": [
            "userId"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.VipLevel": {
      "name": "VipLevel",
      "schema": "",
      "columns": {
        "level": {
          "name": "level",
          "type": "integer",
          "primaryKey": true,
          "notNull": true
        },
        "xpForNext": {
          "name": "xpForNext",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.vip_level_up_history": {
      "name": "vip_level_up_history",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "previous_level": {
          "name": "previous_level",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "new_level": {
          "name": "new_level",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "timestamp": {
          "name": "timestamp",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "vip_info_id": {
          "name": "vip_info_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "vip_level_up_history_vipInfo_fkey": {
          "name": "vip_level_up_history_vipInfo_fkey",
          "tableFrom": "vip_level_up_history",
          "tableTo": "vip_info",
          "columnsFrom": [
            "vip_info_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.VipRank": {
      "name": "VipRank",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "minXp": {
          "name": "minXp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "dailyBonusCoinPct": {
          "name": "dailyBonusCoinPct",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "hourlyBonusCoinPct": {
          "name": "hourlyBonusCoinPct",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "purchaseBonusCoinPct": {
          "name": "purchaseBonusCoinPct",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "levelUpBonusCoinPct": {
          "name": "levelUpBonusCoinPct",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "hasConcierge": {
          "name": "hasConcierge",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "hasVipLoungeAccess": {
          "name": "hasVipLoungeAccess",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "isInvitationOnly": {
          "name": "isInvitationOnly",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "VipRank_name_unique": {
          "name": "VipRank_name_unique",
          "nullsNotDistinct": false,
          "columns": [
            "name"
          ]
        },
        "VipRank_minXp_unique": {
          "name": "VipRank_minXp_unique",
          "nullsNotDistinct": false,
          "columns": [
            "minXp"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.wallets": {
      "name": "wallets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "balance": {
          "name": "balance",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "payment_method": {
          "name": "payment_method",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'INSTORE_CASH'"
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "cashtag": {
          "name": "cashtag",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "operator_id": {
          "name": "operator_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "last_used_at": {
          "name": "last_used_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp (3)",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "wallets_user_id_users_id_fk": {
          "name": "wallets_user_id_users_id_fk",
          "tableFrom": "wallets",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "wallets_address_unique": {
          "name": "wallets_address_unique",
          "nullsNotDistinct": false,
          "columns": [
            "address"
          ]
        },
        "wallets_cashtag_unique": {
          "name": "wallets_cashtag_unique",
          "nullsNotDistinct": false,
          "columns": [
            "cashtag"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.app_versions": {
      "name": "app_versions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "app_id": {
          "name": "app_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "version": {
          "name": "version",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "platform": {
          "name": "platform",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "update_type": {
          "name": "update_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "download_url": {
          "name": "download_url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "changelog": {
          "name": "changelog",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "mandatory": {
          "name": "mandatory",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "release_date": {
          "name": "release_date",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "file_size": {
          "name": "file_size",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "checksum": {
          "name": "checksum",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "version_unique_idx": {
          "name": "version_unique_idx",
          "nullsNotDistinct": false,
          "columns": [
            "app_id",
            "platform",
            "version"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_request_custom_data": {
      "name": "rtg_settings_request_custom_data",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "site_id": {
          "name": "site_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "extras": {
          "name": "extras",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_request_custom_data_request_id_rtg_settings_requests_id_fk": {
          "name": "rtg_settings_request_custom_data_request_id_rtg_settings_requests_id_fk",
          "tableFrom": "rtg_settings_request_custom_data",
          "tableTo": "rtg_settings_requests",
          "columnsFrom": [
            "request_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_request_user_data": {
      "name": "rtg_settings_request_user_data",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "hash": {
          "name": "hash",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "affiliate": {
          "name": "affiliate",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "lang": {
          "name": "lang",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "channel": {
          "name": "channel",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_type": {
          "name": "user_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "fingerprint": {
          "name": "fingerprint",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_request_user_data_request_id_rtg_settings_requests_id_fk": {
          "name": "rtg_settings_request_user_data_request_id_rtg_settings_requests_id_fk",
          "tableFrom": "rtg_settings_request_user_data",
          "tableTo": "rtg_settings_requests",
          "columnsFrom": [
            "request_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_requests": {
      "name": "rtg_settings_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "play_mode": {
          "name": "play_mode",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_result_game": {
      "name": "rtg_settings_result_game",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "settings_result_id": {
          "name": "settings_result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "cols": {
          "name": "cols",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "rows": {
          "name": "rows",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "version": {
          "name": "version",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "rtp_default": {
          "name": "rtp_default",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "volatility_index": {
          "name": "volatility_index",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "max_multiplier": {
          "name": "max_multiplier",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "game_type": {
          "name": "game_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "has_state": {
          "name": "has_state",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_result_game_settings_result_id_rtg_settings_results_id_fk": {
          "name": "rtg_settings_result_game_settings_result_id_rtg_settings_results_id_fk",
          "tableFrom": "rtg_settings_result_game",
          "tableTo": "rtg_settings_results",
          "columnsFrom": [
            "settings_result_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_result_user": {
      "name": "rtg_settings_result_user",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "settings_result_id": {
          "name": "settings_result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "casino": {
          "name": "casino",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "can_gamble": {
          "name": "can_gamble",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "last_win": {
          "name": "last_win",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "server_time": {
          "name": "server_time",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_result_user_settings_result_id_rtg_settings_results_id_fk": {
          "name": "rtg_settings_result_user_settings_result_id_rtg_settings_results_id_fk",
          "tableFrom": "rtg_settings_result_user",
          "tableTo": "rtg_settings_results",
          "columnsFrom": [
            "settings_result_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_result_user_balance": {
      "name": "rtg_settings_result_user_balance",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "settings_result_user_id": {
          "name": "settings_result_user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "cash": {
          "name": "cash",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "free_bets": {
          "name": "free_bets",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "session_cash": {
          "name": "session_cash",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "session_free_bets": {
          "name": "session_free_bets",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "bonus": {
          "name": "bonus",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_settings_result_user_balance_settings_result_user_id_rtg_settings_result_user_id_fk": {
          "name": "rtg_settings_result_user_balance_settings_result_user_id_rtg_settings_result_user_id_fk",
          "tableFrom": "rtg_settings_result_user_balance",
          "tableTo": "rtg_settings_result_user",
          "columnsFrom": [
            "settings_result_user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_settings_results": {
      "name": "rtg_settings_results",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "success": {
          "name": "success",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_request_custom_data": {
      "name": "rtg_spin_request_custom_data",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "site_id": {
          "name": "site_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "extras": {
          "name": "extras",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_request_custom_data_request_id_rtg_spin_requests_id_fk": {
          "name": "rtg_spin_request_custom_data_request_id_rtg_spin_requests_id_fk",
          "tableFrom": "rtg_spin_request_custom_data",
          "tableTo": "rtg_spin_requests",
          "columnsFrom": [
            "request_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_request_user_data": {
      "name": "rtg_spin_request_user_data",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "request_id": {
          "name": "request_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "affiliate": {
          "name": "affiliate",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "lang": {
          "name": "lang",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "channel": {
          "name": "channel",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_type": {
          "name": "user_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "fingerprint": {
          "name": "fingerprint",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_request_user_data_request_id_rtg_spin_requests_id_fk": {
          "name": "rtg_spin_request_user_data_request_id_rtg_spin_requests_id_fk",
          "tableFrom": "rtg_spin_request_user_data",
          "tableTo": "rtg_spin_requests",
          "columnsFrom": [
            "request_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_requests": {
      "name": "rtg_spin_requests",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "play_mode": {
          "name": "play_mode",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "stake": {
          "name": "stake",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_id": {
          "name": "bonus_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "extras": {
          "name": "extras",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "game_mode": {
          "name": "game_mode",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_result_game": {
      "name": "rtg_spin_result_game",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "spin_result_id": {
          "name": "spin_result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "stake": {
          "name": "stake",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "multiplier": {
          "name": "multiplier",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "has_state": {
          "name": "has_state",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_result_game_spin_result_id_rtg_spin_results_id_fk": {
          "name": "rtg_spin_result_game_spin_result_id_rtg_spin_results_id_fk",
          "tableFrom": "rtg_spin_result_game",
          "tableTo": "rtg_spin_results",
          "columnsFrom": [
            "spin_result_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_result_game_win": {
      "name": "rtg_spin_result_game_win",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "spin_result_game_id": {
          "name": "spin_result_game_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "lines": {
          "name": "lines",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "total": {
          "name": "total",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_result_game_win_spin_result_game_id_rtg_spin_result_game_id_fk": {
          "name": "rtg_spin_result_game_win_spin_result_game_id_rtg_spin_result_game_id_fk",
          "tableFrom": "rtg_spin_result_game_win",
          "tableTo": "rtg_spin_result_game",
          "columnsFrom": [
            "spin_result_game_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_result_user": {
      "name": "rtg_spin_result_user",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "spin_result_id": {
          "name": "spin_result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "can_gamble": {
          "name": "can_gamble",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "session_id": {
          "name": "session_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "session_net_position": {
          "name": "session_net_position",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "server_time": {
          "name": "server_time",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_result_user_spin_result_id_rtg_spin_results_id_fk": {
          "name": "rtg_spin_result_user_spin_result_id_rtg_spin_results_id_fk",
          "tableFrom": "rtg_spin_result_user",
          "tableTo": "rtg_spin_results",
          "columnsFrom": [
            "spin_result_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_result_user_balance": {
      "name": "rtg_spin_result_user_balance",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "spin_result_user_id": {
          "name": "spin_result_user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "cash_at_start": {
          "name": "cash_at_start",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "cash_after_bet": {
          "name": "cash_after_bet",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "cash_at_end": {
          "name": "cash_at_end",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "free_bets_at_start": {
          "name": "free_bets_at_start",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "free_bets_after_bet": {
          "name": "free_bets_after_bet",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "free_bets_at_end": {
          "name": "free_bets_at_end",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_at_start": {
          "name": "bonus_at_start",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_after_bet": {
          "name": "bonus_after_bet",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        },
        "bonus_at_end": {
          "name": "bonus_at_end",
          "type": "numeric",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "rtg_spin_result_user_balance_spin_result_user_id_rtg_spin_result_user_id_fk": {
          "name": "rtg_spin_result_user_balance_spin_result_user_id_rtg_spin_result_user_id_fk",
          "tableFrom": "rtg_spin_result_user_balance",
          "tableTo": "rtg_spin_result_user",
          "columnsFrom": [
            "spin_result_user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtg_spin_results": {
      "name": "rtg_spin_results",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "success": {
          "name": "success",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "error_code": {
          "name": "error_code",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tasks": {
      "name": "tasks",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "done": {
          "name": "done",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.game_categories": {
      "name": "game_categories",
      "schema": "public",
      "values": [
        "slots",
        "fish",
        "table",
        "live",
        "poker",
        "lottery",
        "virtual",
        "other"
      ]
    },
    "public.GameProviderName": {
      "name": "GameProviderName",
      "schema": "public",
      "values": [
        "pragmaticplay",
        "evoplay",
        "netent",
        "playngo",
        "relaxgaming",
        "hacksaw",
        "bgaming",
        "spribe",
        "internal",
        "redtiger",
        "netgame",
        "bigfishgames",
        "cqnine",
        "nolimit",
        "kickass"
      ]
    },
    "public.PaymentMethod": {
      "name": "PaymentMethod",
      "schema": "public",
      "values": [
        "INSTORE_CASH",
        "INSTORE_CARD",
        "CASH_APP"
      ]
    },
    "public.Permission": {
      "name": "Permission",
      "schema": "public",
      "values": [
        "read",
        "write",
        "upload",
        "manage_users",
        "manage_settings",
        "launch_game"
      ]
    },
    "public.Role": {
      "name": "Role",
      "schema": "public",
      "values": [
        "USER",
        "ADMIN",
        "VIP",
        "MODERATOR",
        "SYSTEM",
        "OWNER",
        "MEMBER",
        "OPERATOR",
        "SUPPORT_AGENT"
      ]
    },
    "public.SessionStatus": {
      "name": "SessionStatus",
      "schema": "public",
      "values": [
        "ACTIVE",
        "COMPLETED",
        "ABANDONED",
        "TIMEOUT"
      ]
    },
    "public.TournamentStatus": {
      "name": "TournamentStatus",
      "schema": "public",
      "values": [
        "PENDING",
        "ACTIVE",
        "COMPLETED",
        "CANCELLED"
      ]
    },
    "public.TransactionStatus": {
      "name": "TransactionStatus",
      "schema": "public",
      "values": [
        "PENDING",
        "PROCESSING",
        "COMPLETED",
        "FAILED",
        "CANCELLED",
        "REFUNDED",
        "EXPIRED",
        "REJECTED",
        "REQUIRES_ACTION",
        "ON_HOLD"
      ]
    },
    "public.TypeOfJackpot": {
      "name": "TypeOfJackpot",
      "schema": "public",
      "values": [
        "MINOR",
        "MAJOR",
        "GRAND"
      ]
    },
    "public.TypeOfTransaction": {
      "name": "TypeOfTransaction",
      "schema": "public",
      "values": [
        "DEPOSIT",
        "WITHDRAWAL",
        "BET",
        "WIN",
        "TRANSFER_SENT",
        "TRANSFER_RECEIVED",
        "SYSTEM_ADJUSTMENT_CREDIT",
        "SYSTEM_ADJUSTMENT_DEBIT",
        "TOURNAMENT_BUYIN",
        "TOURNAMENT_PRIZE",
        "AFFILIATE_COMMISSION",
        "REFUND",
        "FEE",
        "BONUS_AWARD",
        "BET_PLACE",
        "BET_WIN",
        "BET_LOSE",
        "BET_REFUND",
        "BONUS_WAGER",
        "BONUS_CONVERT",
        "BONUS_EXPIRED",
        "XP_AWARD",
        "ADJUSTMENT_ADD",
        "ADJUSTMENT_SUB",
        "INTERNAL_TRANSFER",
        "PRODUCT_PURCHASE",
        "REBATE_PAYOUT",
        "JACKPOT_WIN",
        "JACKPOT_CONTRIBUTION"
      ]
    },
    "public.UpdateType": {
      "name": "UpdateType",
      "schema": "public",
      "values": [
        "BINARY",
        "OTA"
      ]
    },
    "public.UserRole": {
      "name": "UserRole",
      "schema": "public",
      "values": [
        "USER",
        "ADMIN",
        "MODERATOR",
        "SUPPORT",
        "BOT",
        "SYSTEM"
      ]
    },
    "public.session_status": {
      "name": "session_status",
      "schema": "public",
      "values": [
        "ACTIVE",
        "COMPLETED",
        "EXPIRED"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}
</file>

<file path="db/migrations/0000_complete_thanos.sql">
CREATE TYPE "public"."game_categories" AS ENUM('slots', 'fish', 'table', 'live', 'poker', 'lottery', 'virtual', 'other');
CREATE TYPE "public"."GameProviderName" AS ENUM('pragmaticplay', 'evoplay', 'netent', 'playngo', 'relaxgaming', 'hacksaw', 'bgaming', 'spribe', 'internal', 'redtiger', 'netgame', 'bigfishgames', 'cqnine', 'nolimit', 'kickass');
CREATE TYPE "public"."PaymentMethod" AS ENUM('INSTORE_CASH', 'INSTORE_CARD', 'CASH_APP');
CREATE TYPE "public"."Permission" AS ENUM('read', 'write', 'upload', 'manage_users', 'manage_settings', 'launch_game');
CREATE TYPE "public"."Role" AS ENUM('USER', 'ADMIN', 'VIP', 'MODERATOR', 'SYSTEM', 'OWNER', 'MEMBER', 'OPERATOR', 'SUPPORT_AGENT');
CREATE TYPE "public"."SessionStatus" AS ENUM('ACTIVE', 'COMPLETED', 'ABANDONED', 'TIMEOUT');
CREATE TYPE "public"."TournamentStatus" AS ENUM('PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED');
CREATE TYPE "public"."TransactionStatus" AS ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'EXPIRED', 'REJECTED', 'REQUIRES_ACTION', 'ON_HOLD');
CREATE TYPE "public"."TypeOfJackpot" AS ENUM('MINOR', 'MAJOR', 'GRAND');
CREATE TYPE "public"."TypeOfTransaction" AS ENUM('DEPOSIT', 'WITHDRAWAL', 'BET', 'WIN', 'TRANSFER_SENT', 'TRANSFER_RECEIVED', 'SYSTEM_ADJUSTMENT_CREDIT', 'SYSTEM_ADJUSTMENT_DEBIT', 'TOURNAMENT_BUYIN', 'TOURNAMENT_PRIZE', 'AFFILIATE_COMMISSION', 'REFUND', 'FEE', 'BONUS_AWARD', 'BET_PLACE', 'BET_WIN', 'BET_LOSE', 'BET_REFUND', 'BONUS_WAGER', 'BONUS_CONVERT', 'BONUS_EXPIRED', 'XP_AWARD', 'ADJUSTMENT_ADD', 'ADJUSTMENT_SUB', 'INTERNAL_TRANSFER', 'PRODUCT_PURCHASE', 'REBATE_PAYOUT', 'JACKPOT_WIN', 'JACKPOT_CONTRIBUTION');
CREATE TYPE "public"."UpdateType" AS ENUM('BINARY', 'OTA');
CREATE TYPE "public"."UserRole" AS ENUM('USER', 'ADMIN', 'MODERATOR', 'SUPPORT', 'BOT', 'SYSTEM');
CREATE TYPE "public"."session_status" AS ENUM('ACTIVE', 'COMPLETED', 'EXPIRED');
CREATE TABLE "auth_sessions" (
	"id" varchar PRIMARY KEY NOT NULL,
	"user_id" text NOT NULL,
	"status" "session_status" DEFAULT 'ACTIVE' NOT NULL,
	"ip_address" text,
	"user_agent" text,
	"device_id" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"expires_at" timestamp with time zone,
	"last_seen" timestamp with time zone DEFAULT now() NOT NULL
);
CREATE TABLE "favorite_games" (
	"id" varchar PRIMARY KEY NOT NULL,
	"user_id" text NOT NULL,
	"game_id" text NOT NULL
);
CREATE TABLE "games" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"title" text NOT NULL,
	"goldsvet_data" jsonb,
	"description" text,
	"category" text NOT NULL,
	"tags" text[] NOT NULL,
	"thumbnail_url" text,
	"banner_url" text,
	"provider_name" text NOT NULL,
	"provider_id" text,
	"total_wagered" integer NOT NULL,
	"total_won" integer NOT NULL,
	"target_rtp" integer,
	"is_featured" boolean NOT NULL,
	"is_active" boolean DEFAULT true NOT NULL,
	"operator_id" text,
	"tournament_directives" jsonb,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL
);
CREATE TABLE "game_history" (
	"id" varchar PRIMARY KEY NOT NULL,
	"user_id" text NOT NULL,
	"game_id" text NOT NULL,
	"created_at" timestamp (3) DEFAULT now() NOT NULL
);
CREATE TABLE "game_sessions" (
	"id" varchar PRIMARY KEY NOT NULL,
	"auth_session_id" text NOT NULL,
	"user_id" text NOT NULL,
	"game_id" text,
	"status" "session_status" DEFAULT 'ACTIVE' NOT NULL,
	"total_wagered" integer DEFAULT 0 NOT NULL,
	"total_won" integer DEFAULT 0 NOT NULL,
	"total_xp_gained" integer DEFAULT 0 NOT NULL,
	"rtp" numeric(5, 2),
	"duration" integer DEFAULT 0 NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"end_at" timestamp with time zone
);
CREATE TABLE "game_spins" (
	"id" varchar PRIMARY KEY NOT NULL,
	"player_name" text,
	"game_name" text,
	"game_id" text,
	"spin_data" jsonb,
	"gross_win_amount" double precision NOT NULL,
	"wager_amount" double precision NOT NULL,
	"spin_number" integer NOT NULL,
	"player_avatar" text,
	"currency_id" text,
	"session_id" text NOT NULL,
	"user_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	"occurred_at" timestamp (3) NOT NULL,
	"sessionDataId" text
);
CREATE TABLE "in_active_wallets" (
	"id" varchar PRIMARY KEY NOT NULL,
	"balance" integer NOT NULL,
	"payment_method" text DEFAULT 'INSTORE_CASH' NOT NULL,
	"currency" text DEFAULT 'USD' NOT NULL,
	"is_active" boolean NOT NULL,
	"is_default" boolean NOT NULL,
	"address" text,
	"cashtag" text,
	"user_id" text,
	"operator_id" text NOT NULL,
	"last_used_at" timestamp (3),
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	CONSTRAINT "in_active_wallets_address_unique" UNIQUE("address"),
	CONSTRAINT "in_active_wallets_cashtag_unique" UNIQUE("cashtag")
);
CREATE TABLE "jackpots" (
	"id" varchar PRIMARY KEY NOT NULL,
	"type" text NOT NULL,
	"current_amount_coins" integer NOT NULL,
	"seed_amount_coins" integer NOT NULL,
	"minimum_bet_coins" integer DEFAULT 1 NOT NULL,
	"contribution_rate_basis_points" integer NOT NULL,
	"probability_per_million" integer NOT NULL,
	"minimum_time_between_wins_minutes" integer NOT NULL,
	"last_won_at" timestamp (3),
	"last_won_by" text,
	"is_active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL
);
CREATE TABLE "jackpot_contributions" (
	"id" varchar PRIMARY KEY NOT NULL,
	"jackpot_id" text NOT NULL,
	"user_id" text,
	"game_spin_id" text NOT NULL,
	"contribution_amount_coins" integer NOT NULL,
	"created_at" timestamp (3) DEFAULT now() NOT NULL
);
CREATE TABLE "jackpot_wins" (
	"id" varchar PRIMARY KEY NOT NULL,
	"jackpot_id" text NOT NULL,
	"winner_id" text NOT NULL,
	"win_amount_coins" integer NOT NULL,
	"game_spin_id" text NOT NULL,
	"transaction_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"session_data_id" text,
	CONSTRAINT "jackpot_wins_game_spin_id_unique" UNIQUE("game_spin_id")
);
CREATE TABLE "operators" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"operator_secret" text NOT NULL,
	"operator_access" text NOT NULL,
	"callback_url" text NOT NULL,
	"is_active" boolean DEFAULT true NOT NULL,
	"allowed_ips" text[] NOT NULL,
	"description" text,
	"balance" integer NOT NULL,
	"net-revenue" integer NOT NULL,
	"accepted_payments" text[] NOT NULL,
	"owner_id" text,
	"last_used_at" timestamp (3),
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	CONSTRAINT "operators_name_unique" UNIQUE("name")
);
CREATE TABLE "products" (
	"id" varchar PRIMARY KEY NOT NULL,
	"title" text DEFAULT 'default' NOT NULL,
	"product_type" text DEFAULT 'bundle' NOT NULL,
	"bonus_total_in_credits" integer NOT NULL,
	"is_active" boolean,
	"price_in_cents" integer NOT NULL,
	"amount_to_receive_in_credits" integer NOT NULL,
	"best_value" integer NOT NULL,
	"discount_in_cents" integer NOT NULL,
	"bonus_spins" integer NOT NULL,
	"is_promo" boolean,
	"total_discount_in_cents" integer NOT NULL,
	"operator_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL
);
CREATE TABLE "tournament_participants" (
	"id" varchar PRIMARY KEY NOT NULL,
	"tournament_id" text NOT NULL,
	"user_id" text NOT NULL,
	"score" integer NOT NULL,
	"rank" integer,
	"joined_at" timestamp (3) DEFAULT now() NOT NULL
);
CREATE TABLE "transactions" (
	"id" varchar PRIMARY KEY NOT NULL,
	"processed_at" timestamp (3),
	"wallet_id" text,
	"type" text NOT NULL,
	"status" text DEFAULT 'PENDING' NOT NULL,
	"amount" integer NOT NULL,
	"net_amount" integer,
	"fee_amount" integer,
	"product_id" text,
	"payment_method" text,
	"balance_before" integer,
	"balance_after" integer,
	"bonus_balance_before" integer,
	"bonus_balance_after" integer,
	"bonus_amount" integer,
	"wagering_requirement" integer,
	"wagering_progress" integer,
	"description" text,
	"provider" text,
	"provider_tx_id" text,
	"related_game_id" text,
	"related_round_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	"operator_id" text,
	"user_id" text
);
CREATE TABLE "users" (
	"id" varchar PRIMARY KEY NOT NULL,
	"username" text NOT NULL,
	"email" text,
	"password_hash" text,
	"access_token" text,
	"refresh_token" text,
	"access_token_expires_at" timestamp (3),
	"refresh_token_expires_at" timestamp (3),
	"current_game_session_data_id" text,
	"current_auth_session_data_id" text,
	"avatar_url" text DEFAULT 'avatar-01',
	"role" text DEFAULT 'USER' NOT NULL,
	"is_active" boolean DEFAULT true NOT NULL,
	"last_login_at" timestamp (3),
	"total_xp_gained" integer NOT NULL,
	"active_wallet_id" text,
	"vip_info_id" text,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	"deleted_at" timestamp (3),
	CONSTRAINT "users_username_unique" UNIQUE("username"),
	CONSTRAINT "users_email_unique" UNIQUE("email"),
	CONSTRAINT "users_current_game_session_data_id_unique" UNIQUE("current_game_session_data_id"),
	CONSTRAINT "users_current_auth_session_data_id_unique" UNIQUE("current_auth_session_data_id"),
	CONSTRAINT "users_active_wallet_id_unique" UNIQUE("active_wallet_id"),
	CONSTRAINT "users_vip_info_id_unique" UNIQUE("vip_info_id")
);
CREATE TABLE "vip_info" (
	"id" varchar PRIMARY KEY NOT NULL,
	"level" integer DEFAULT 1 NOT NULL,
	"xp" integer NOT NULL,
	"totalXp" integer NOT NULL,
	"userId" text NOT NULL,
	"currentRankid" integer,
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	CONSTRAINT "vip_info_userId_unique" UNIQUE("userId")
);
CREATE TABLE "VipLevel" (
	"level" integer PRIMARY KEY NOT NULL,
	"xpForNext" integer NOT NULL
);
CREATE TABLE "vip_level_up_history" (
	"id" varchar PRIMARY KEY NOT NULL,
	"previous_level" integer NOT NULL,
	"new_level" integer NOT NULL,
	"timestamp" timestamp (3) DEFAULT now() NOT NULL,
	"vip_info_id" text NOT NULL
);
CREATE TABLE "VipRank" (
	"id" integer PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"minXp" integer NOT NULL,
	"dailyBonusCoinPct" integer NOT NULL,
	"hourlyBonusCoinPct" integer NOT NULL,
	"purchaseBonusCoinPct" integer NOT NULL,
	"levelUpBonusCoinPct" integer NOT NULL,
	"hasConcierge" boolean NOT NULL,
	"hasVipLoungeAccess" boolean NOT NULL,
	"isInvitationOnly" boolean NOT NULL,
	CONSTRAINT "VipRank_name_unique" UNIQUE("name"),
	CONSTRAINT "VipRank_minXp_unique" UNIQUE("minXp")
);
CREATE TABLE "wallets" (
	"id" varchar PRIMARY KEY NOT NULL,
	"balance" integer NOT NULL,
	"payment_method" text DEFAULT 'INSTORE_CASH' NOT NULL,
	"currency" text DEFAULT 'USD' NOT NULL,
	"is_active" boolean DEFAULT true NOT NULL,
	"is_default" boolean NOT NULL,
	"address" text,
	"cashtag" text,
	"user_id" text NOT NULL,
	"operator_id" text NOT NULL,
	"last_used_at" timestamp (3),
	"created_at" timestamp (3) DEFAULT now() NOT NULL,
	"updated_at" timestamp (3) DEFAULT now() NOT NULL,
	CONSTRAINT "wallets_address_unique" UNIQUE("address"),
	CONSTRAINT "wallets_cashtag_unique" UNIQUE("cashtag")
);
CREATE TABLE "app_versions" (
	"id" serial PRIMARY KEY NOT NULL,
	"app_id" text NOT NULL,
	"version" text NOT NULL,
	"platform" text NOT NULL,
	"update_type" text NOT NULL,
	"download_url" text NOT NULL,
	"changelog" text[] NOT NULL,
	"mandatory" boolean DEFAULT false NOT NULL,
	"release_date" timestamp with time zone NOT NULL,
	"file_size" integer NOT NULL,
	"checksum" text NOT NULL,
	CONSTRAINT "version_unique_idx" UNIQUE("app_id","platform","version")
);
CREATE TABLE "rtg_settings_request_custom_data" (
	"id" varchar PRIMARY KEY NOT NULL,
	"request_id" text NOT NULL,
	"site_id" text NOT NULL,
	"extras" text NOT NULL
);
CREATE TABLE "rtg_settings_request_user_data" (
	"id" varchar PRIMARY KEY NOT NULL,
	"request_id" text NOT NULL,
	"user_id" text NOT NULL,
	"hash" text NOT NULL,
	"affiliate" text NOT NULL,
	"lang" text NOT NULL,
	"channel" text NOT NULL,
	"user_type" text NOT NULL,
	"fingerprint" text NOT NULL
);
CREATE TABLE "rtg_settings_requests" (
	"id" varchar PRIMARY KEY NOT NULL,
	"token" text,
	"session_id" text NOT NULL,
	"play_mode" text NOT NULL,
	"game_id" text NOT NULL,
	"created_at" timestamp DEFAULT now()
);
CREATE TABLE "rtg_settings_result_game" (
	"id" varchar PRIMARY KEY NOT NULL,
	"settings_result_id" text NOT NULL,
	"cols" integer NOT NULL,
	"rows" integer NOT NULL,
	"version" text NOT NULL,
	"rtp_default" numeric NOT NULL,
	"volatility_index" numeric NOT NULL,
	"max_multiplier" numeric NOT NULL,
	"game_type" text NOT NULL,
	"has_state" boolean NOT NULL
);
CREATE TABLE "rtg_settings_result_user" (
	"id" varchar PRIMARY KEY NOT NULL,
	"settings_result_id" text NOT NULL,
	"user_id" integer NOT NULL,
	"country" text NOT NULL,
	"casino" text NOT NULL,
	"token" text NOT NULL,
	"session_id" text NOT NULL,
	"can_gamble" boolean NOT NULL,
	"last_win" numeric NOT NULL,
	"server_time" timestamp NOT NULL
);
CREATE TABLE "rtg_settings_result_user_balance" (
	"id" varchar PRIMARY KEY NOT NULL,
	"settings_result_user_id" varchar NOT NULL,
	"cash" numeric NOT NULL,
	"free_bets" numeric NOT NULL,
	"session_cash" numeric NOT NULL,
	"session_free_bets" numeric NOT NULL,
	"bonus" numeric NOT NULL
);
CREATE TABLE "rtg_settings_results" (
	"id" varchar PRIMARY KEY NOT NULL,
	"success" boolean NOT NULL,
	"created_at" timestamp DEFAULT now()
);
CREATE TABLE "rtg_spin_request_custom_data" (
	"id" varchar PRIMARY KEY NOT NULL,
	"request_id" text NOT NULL,
	"site_id" text NOT NULL,
	"extras" text NOT NULL
);
CREATE TABLE "rtg_spin_request_user_data" (
	"id" varchar PRIMARY KEY NOT NULL,
	"request_id" text NOT NULL,
	"user_id" integer NOT NULL,
	"affiliate" text NOT NULL,
	"lang" text NOT NULL,
	"channel" text NOT NULL,
	"user_type" text NOT NULL,
	"fingerprint" text NOT NULL
);
CREATE TABLE "rtg_spin_requests" (
	"id" varchar PRIMARY KEY NOT NULL,
	"token" text NOT NULL,
	"session_id" text NOT NULL,
	"play_mode" text NOT NULL,
	"game_id" text NOT NULL,
	"stake" integer NOT NULL,
	"bonus_id" text,
	"extras" text,
	"game_mode" integer NOT NULL,
	"created_at" timestamp DEFAULT now()
);
CREATE TABLE "rtg_spin_result_game" (
	"id" varchar PRIMARY KEY NOT NULL,
	"spin_result_id" text NOT NULL,
	"stake" numeric NOT NULL,
	"multiplier" integer NOT NULL,
	"has_state" boolean NOT NULL
);
CREATE TABLE "rtg_spin_result_game_win" (
	"id" varchar PRIMARY KEY NOT NULL,
	"spin_result_game_id" varchar NOT NULL,
	"lines" numeric NOT NULL,
	"total" numeric NOT NULL
);
CREATE TABLE "rtg_spin_result_user" (
	"id" varchar PRIMARY KEY NOT NULL,
	"spin_result_id" text NOT NULL,
	"can_gamble" boolean NOT NULL,
	"user_id" integer NOT NULL,
	"session_id" text NOT NULL,
	"session_net_position" numeric NOT NULL,
	"token" text NOT NULL,
	"server_time" timestamp NOT NULL
);
CREATE TABLE "rtg_spin_result_user_balance" (
	"id" varchar PRIMARY KEY NOT NULL,
	"spin_result_user_id" varchar NOT NULL,
	"cash_at_start" numeric NOT NULL,
	"cash_after_bet" numeric NOT NULL,
	"cash_at_end" numeric NOT NULL,
	"free_bets_at_start" numeric NOT NULL,
	"free_bets_after_bet" numeric NOT NULL,
	"free_bets_at_end" numeric NOT NULL,
	"bonus_at_start" numeric NOT NULL,
	"bonus_after_bet" numeric NOT NULL,
	"bonus_at_end" numeric NOT NULL
);
CREATE TABLE "rtg_spin_results" (
	"id" varchar PRIMARY KEY NOT NULL,
	"success" boolean NOT NULL,
	"error_code" integer,
	"created_at" timestamp DEFAULT now()
);
CREATE TABLE "tasks" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"done" boolean DEFAULT false NOT NULL,
	"created_at" timestamp,
	"updated_at" timestamp
);
ALTER TABLE "auth_sessions" ADD CONSTRAINT "auth_sessions_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "favorite_games" ADD CONSTRAINT "favorite_games_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "favorite_games" ADD CONSTRAINT "favorite_games_game_id_games_id_fk" FOREIGN KEY ("game_id") REFERENCES "public"."games"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "games" ADD CONSTRAINT "games_operator_fkey" FOREIGN KEY ("operator_id") REFERENCES "public"."operators"("id") ON DELETE set null ON UPDATE cascade;
ALTER TABLE "game_history" ADD CONSTRAINT "game_history_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "game_history" ADD CONSTRAINT "game_history_game_id_games_id_fk" FOREIGN KEY ("game_id") REFERENCES "public"."games"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "game_sessions" ADD CONSTRAINT "game_sessions_auth_session_id_auth_sessions_id_fk" FOREIGN KEY ("auth_session_id") REFERENCES "public"."auth_sessions"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "game_sessions" ADD CONSTRAINT "game_sessions_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "jackpots" ADD CONSTRAINT "jackpots_lastWinner_fkey" FOREIGN KEY ("last_won_by") REFERENCES "public"."users"("id") ON DELETE set null ON UPDATE cascade;
ALTER TABLE "jackpot_contributions" ADD CONSTRAINT "jackpot_contributions_gameSpin_fkey" FOREIGN KEY ("game_spin_id") REFERENCES "public"."game_spins"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "jackpot_contributions" ADD CONSTRAINT "jackpot_contributions_jackpot_fkey" FOREIGN KEY ("jackpot_id") REFERENCES "public"."jackpots"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "jackpot_wins" ADD CONSTRAINT "jackpot_wins_gameSpin_fkey" FOREIGN KEY ("game_spin_id") REFERENCES "public"."game_spins"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "jackpot_wins" ADD CONSTRAINT "jackpot_wins_jackpot_fkey" FOREIGN KEY ("jackpot_id") REFERENCES "public"."jackpots"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "jackpot_wins" ADD CONSTRAINT "jackpot_wins_winner_fkey" FOREIGN KEY ("winner_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "products" ADD CONSTRAINT "products_operator_fkey" FOREIGN KEY ("operator_id") REFERENCES "public"."operators"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "tournament_participants" ADD CONSTRAINT "tournament_participants_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "transactions" ADD CONSTRAINT "transactions_product_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE set null ON UPDATE cascade;
ALTER TABLE "transactions" ADD CONSTRAINT "transactions_wallet_fkey" FOREIGN KEY ("wallet_id") REFERENCES "public"."wallets"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "vip_info" ADD CONSTRAINT "vip_info_user_fkey" FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "vip_info" ADD CONSTRAINT "vip_info_currentRank_fkey" FOREIGN KEY ("currentRankid") REFERENCES "public"."VipRank"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "vip_level_up_history" ADD CONSTRAINT "vip_level_up_history_vipInfo_fkey" FOREIGN KEY ("vip_info_id") REFERENCES "public"."vip_info"("id") ON DELETE cascade ON UPDATE cascade;
ALTER TABLE "wallets" ADD CONSTRAINT "wallets_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "rtg_settings_request_custom_data" ADD CONSTRAINT "rtg_settings_request_custom_data_request_id_rtg_settings_requests_id_fk" FOREIGN KEY ("request_id") REFERENCES "public"."rtg_settings_requests"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_settings_request_user_data" ADD CONSTRAINT "rtg_settings_request_user_data_request_id_rtg_settings_requests_id_fk" FOREIGN KEY ("request_id") REFERENCES "public"."rtg_settings_requests"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_settings_result_game" ADD CONSTRAINT "rtg_settings_result_game_settings_result_id_rtg_settings_results_id_fk" FOREIGN KEY ("settings_result_id") REFERENCES "public"."rtg_settings_results"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_settings_result_user" ADD CONSTRAINT "rtg_settings_result_user_settings_result_id_rtg_settings_results_id_fk" FOREIGN KEY ("settings_result_id") REFERENCES "public"."rtg_settings_results"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_settings_result_user_balance" ADD CONSTRAINT "rtg_settings_result_user_balance_settings_result_user_id_rtg_settings_result_user_id_fk" FOREIGN KEY ("settings_result_user_id") REFERENCES "public"."rtg_settings_result_user"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_spin_request_custom_data" ADD CONSTRAINT "rtg_spin_request_custom_data_request_id_rtg_spin_requests_id_fk" FOREIGN KEY ("request_id") REFERENCES "public"."rtg_spin_requests"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_spin_request_user_data" ADD CONSTRAINT "rtg_spin_request_user_data_request_id_rtg_spin_requests_id_fk" FOREIGN KEY ("request_id") REFERENCES "public"."rtg_spin_requests"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_spin_result_game" ADD CONSTRAINT "rtg_spin_result_game_spin_result_id_rtg_spin_results_id_fk" FOREIGN KEY ("spin_result_id") REFERENCES "public"."rtg_spin_results"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_spin_result_game_win" ADD CONSTRAINT "rtg_spin_result_game_win_spin_result_game_id_rtg_spin_result_game_id_fk" FOREIGN KEY ("spin_result_game_id") REFERENCES "public"."rtg_spin_result_game"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_spin_result_user" ADD CONSTRAINT "rtg_spin_result_user_spin_result_id_rtg_spin_results_id_fk" FOREIGN KEY ("spin_result_id") REFERENCES "public"."rtg_spin_results"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "rtg_spin_result_user_balance" ADD CONSTRAINT "rtg_spin_result_user_balance_spin_result_user_id_rtg_spin_result_user_id_fk" FOREIGN KEY ("spin_result_user_id") REFERENCES "public"."rtg_spin_result_user"("id") ON DELETE no action ON UPDATE no action;
CREATE INDEX "auth_session_user_idx" ON "auth_sessions" USING btree ("user_id","created_at");
CREATE INDEX "auth_session_status_idx" ON "auth_sessions" USING btree ("status");
CREATE INDEX "game_session_auth_session_idx" ON "game_sessions" USING btree ("auth_session_id");
CREATE INDEX "game_session_user_idx" ON "game_sessions" USING btree ("user_id");
CREATE UNIQUE INDEX "JackpotContribution_jackpotId_gameSpinId_key" ON "jackpot_contributions" USING btree ("jackpot_id","game_spin_id");
</file>

<file path="db/migrations/0001_create_enums.sql">
CREATE TYPE "game_categories" AS ENUM ('slots', 'fish', 'table', 'live', 'poker', 'lottery', 'virtual', 'other');
CREATE TYPE "TournamentStatus" AS ENUM ('PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED');
CREATE TYPE "UserRole" AS ENUM ('USER', 'ADMIN', 'MODERATOR', 'SUPPORT', 'BOT', 'SYSTEM');
CREATE TYPE "SessionStatus" AS ENUM ('ACTIVE', 'COMPLETED', 'ABANDONED', 'TIMEOUT');
CREATE TYPE "TypeOfJackpot" AS ENUM ('MINOR', 'MAJOR', 'GRAND');
CREATE TYPE "PaymentMethod" AS ENUM ('INSTORE_CASH', 'INSTORE_CARD', 'CASH_APP');
CREATE TYPE "TypeOfTransaction" AS ENUM ('DEPOSIT', 'WITHDRAWAL', 'BET', 'WIN', 'TRANSFER_SENT', 'TRANSFER_RECEIVED', 'SYSTEM_ADJUSTMENT_CREDIT', 'SYSTEM_ADJUSTMENT_DEBIT', 'TOURNAMENT_BUYIN', 'TOURNAMENT_PRIZE', 'AFFILIATE_COMMISSION', 'REFUND', 'FEE', 'BONUS_AWARD', 'BET_PLACE', 'BET_WIN', 'BET_LOSE', 'BET_REFUND', 'BONUS_WAGER', 'BONUS_CONVERT', 'BONUS_EXPIRED', 'XP_AWARD', 'ADJUSTMENT_ADD', 'ADJUSTMENT_SUB', 'INTERNAL_TRANSFER', 'PRODUCT_PURCHASE', 'REBATE_PAYOUT', 'JACKPOT_WIN', 'JACKPOT_CONTRIBUTION');
CREATE TYPE "TransactionStatus" AS ENUM ('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'EXPIRED', 'REJECTED', 'REQUIRES_ACTION', 'ON_HOLD');
CREATE TYPE "Role" AS ENUM ('USER', 'ADMIN', 'VIP', 'MODERATOR', 'SYSTEM', 'OWNER', 'MEMBER', 'OPERATOR', 'SUPPORT_AGENT');
CREATE TYPE "GameProviderName" AS ENUM ('PRAGMATICPLAY', 'EVOPLAY', 'NETENT', 'PLAYNGO', 'RELAXGAMING', 'HACKSAW', 'BGAMING', 'SPRIBE', 'INTERNAL', 'REDTIGER', 'NETGAME', 'BIGFISHGAMES', 'CQNINE', 'NOLIMIT', 'KICKASS');
CREATE TYPE "Permission" AS ENUM ('read', 'write', 'upload', 'manage_users', 'manage_settings', 'launch_game');
CREATE TYPE "UpdateType" AS ENUM ('BINARY', 'OTA');
</file>

<file path="db/schema/blackjack.ts">
import {
    integer,
    jsonb,
    pgTable,
    text,
    timestamp,
    varchar,
} from 'drizzle-orm/pg-core'
import { nanoid } from '../../utils/nanoid'
import { users } from './schema'
</file>

<file path="db/schema/core.ts">
import {
    boolean,
    decimal,
    doublePrecision,
    foreignKey,
    index,
    integer,
    jsonb,
    pgTable,
    serial,
    text,
    timestamp,
    unique,
    uniqueIndex,
    varchar,
} from 'drizzle-orm/pg-core'
import { nanoid } from '../../utils/nanoid'
import { sessionStatusEnum } from './enums'
</file>

<file path="db/schema/enums.ts">
import { pgEnum } from 'drizzle-orm/pg-core'
</file>

<file path="db/schema/index.ts">

</file>

<file path="db/schema/relations.bak.ts">
import { relations } from 'drizzle-orm'
import { AuthSession, Game, GameSession, GameSpin, Jackpot, JackpotContribution, JackpotWin, Operator, Product, Transaction, User, VipInfo, VipLevelUpHistory, VipRank, Wallet } from './core'
</file>

<file path="db/schema/relations.ts">
import { relations } from 'drizzle-orm/relations'
import { authSessions, blackjackBets, blackjackGames, favoriteGames, gameHistory, games, gameSessions, gameSpins, inActiveWallets, jackpotContributions, jackpots, jackpotWins, operators, products, rtgSettingsRequestCustomData, rtgSettingsRequests, rtgSettingsRequestUserData, rtgSettingsResponses, rtgSpinRequestCustomData, rtgSpinRequests, rtgSpinRequestUserData, rtgSpinResults, tournamentParticipants, transactions, users, vipInfo, vipLevelUpHistory, vipRank, wallets } from './schema'
</file>

<file path="db/schema/rtg.ts">
import { boolean, decimal, integer, pgTable, text, timestamp, varchar } from 'drizzle-orm/pg-core'
import { nanoid } from '../../utils/nanoid'
</file>

<file path="db/schema/schema.bak.ts">
import {
    pgTable,
    index,
    foreignKey,
    varchar,
    text,
    integer,
    numeric,
    timestamp,
    jsonb,
    doublePrecision,
    unique,
    boolean,
    serial,
    json,
    uniqueIndex,
    pgEnum,
} from 'drizzle-orm/pg-core'
</file>

<file path="db/schema/schema.ts">
import { boolean, doublePrecision, foreignKey, index, integer, json, jsonb, numeric, pgEnum, pgTable, serial, text, timestamp, unique, uniqueIndex, varchar } from 'drizzle-orm/pg-core'
</file>

<file path="db/schema/types.ts">
import type { InferInsertModel, InferSelectModel } from 'drizzle-orm'
import type {
    rtgSettingsRequestCustomData,
    rtgSettingsRequests,
    rtgSettingsRequestUserData,
    rtgSettingsResultGame,
    rtgSettingsResults,
    rtgSettingsResultUser,
    rtgSettingsResultUserBalance,
    rtgSpinRequestCustomData,
    rtgSpinRequests,
    rtgSpinRequestUserData,
    rtgSpinResultGame,
    rtgSpinResultGameWin,
    rtgSpinResults,
    rtgSpinResultUser,
    rtgSpinResultUserBalance,
} from './rtg'
import type {
    appVersions,
    authSessions,
    games,
    gameSessions,
    gameSpins,
    inActiveWallets,
    jackpotContributions,
    jackpots,
    jackpotWins,
    operators,
    products,
    transactions,
    users,
    vipInfo,
    vipLevel,
    vipLevelUpHistory,
    vipRank,
    wallets,
} from './schema'
export type OperatorType = InferSelectModel<typeof operators>
export type WalletType = InferSelectModel<typeof wallets>
export type UserType = InferSelectModel<typeof users>
export type GameType = InferSelectModel<typeof games>
export type GameSpinType = InferSelectModel<typeof gameSpins>
export type InActiveWalletType = InferSelectModel<typeof inActiveWallets>
export type ProductType = InferSelectModel<typeof products>
export type TransactionType = InferSelectModel<typeof transactions>
export type VipRankType = InferSelectModel<typeof vipRank>
export type VipLevelType = InferSelectModel<typeof vipLevel>
export type VipInfoType = InferSelectModel<typeof vipInfo>
export type VipLevelUpHistoryType = InferSelectModel<typeof vipLevelUpHistory>
export type JackpotType = InferSelectModel<typeof jackpots>
export type JackpotContributionType = InferSelectModel<
    typeof jackpotContributions
>
export type JackpotWinType = InferSelectModel<typeof jackpotWins>
export type AuthSessionType = InferSelectModel<typeof authSessions>
export type GameSessionType = InferSelectModel<typeof gameSessions>
export type SelectRtgSettingsRequest = InferSelectModel<
    typeof rtgSettingsRequests
>
export type SelectRtgSettingsRequestusersData = InferSelectModel<
    typeof rtgSettingsRequestUserData
>
export type SelectRtgSettingsRequestCustomData = InferSelectModel<
    typeof rtgSettingsRequestCustomData
>
export type SelectRtgSpinRequest = InferSelectModel<typeof rtgSpinRequests>
export type SelectRtgSpinRequestusersData = InferSelectModel<
    typeof rtgSpinRequestUserData
>
export type SelectRtgSpinRequestCustomData = InferSelectModel<
    typeof rtgSpinRequestCustomData
>
export type SelectRtgSettingsResult = InferSelectModel<
    typeof rtgSettingsResults
>
export type SelectRtgSettingsResultusers = InferSelectModel<
    typeof rtgSettingsResultUser
>
export type SelectRtgSettingsResultusersBalance = InferSelectModel<
    typeof rtgSettingsResultUserBalance
>
export type SelectRtgSettingsResultgames = InferSelectModel<
    typeof rtgSettingsResultGame
>
export type SelectRtgSpinResult = InferSelectModel<typeof rtgSpinResults>
export type SelectRtgSpinResultusers = InferSelectModel<typeof rtgSpinResultUser>
export type SelectRtgSpinResultusersBalance = InferSelectModel<
    typeof rtgSpinResultUserBalance
>
export type SelectRtgSpinResultgames = InferSelectModel<typeof rtgSpinResultGame>
export type SelectRtgSpinResultgamesWin = InferSelectModel<
    typeof rtgSpinResultGameWin
>
export type AppVersion = InferSelectModel<typeof appVersions>
export type Newoperators = InferInsertModel<typeof operators>
export type Newwallets = InferInsertModel<typeof wallets>
export type Newusers = InferInsertModel<typeof users>
export type Newgames = InferInsertModel<typeof games>
export type NewgameSpins = InferInsertModel<typeof gameSpins>
export type NewinActiveWallets = InferInsertModel<typeof inActiveWallets>
export type Newproducts = InferInsertModel<typeof products>
export type Newtransactions = InferInsertModel<typeof transactions>
export type NewvipRank = InferInsertModel<typeof vipRank>
export type NewvipLevel = InferInsertModel<typeof vipLevel>
export type NewvipInfo = InferInsertModel<typeof vipInfo>
export type NewvipLevelUpHistory = InferInsertModel<typeof vipLevelUpHistory>
export type Newjackpots = InferInsertModel<typeof jackpots>
export type NewjackpotContributions = InferInsertModel<
    typeof jackpotContributions
>
export type NewjackpotWins = InferInsertModel<typeof jackpotWins>
export type NewauthSessions = InferInsertModel<typeof authSessions>
export type NewgamesSession = InferInsertModel<typeof gameSessions>
export type InsertRtgSettingsRequest = InferInsertModel<
    typeof rtgSettingsRequests
>
export type InsertRtgSpinRequest = InferInsertModel<typeof rtgSpinRequests>
export type InsertRtgSettingsResult = InferInsertModel<
    typeof rtgSettingsResults
>
export type InsertRtgSettingsResultgames = InferInsertModel<
    typeof rtgSettingsResultGame
>
export type InsertRtgSpinResult = InferInsertModel<typeof rtgSpinResults>
export type UserWithRelations = UserType & {
    activeWallet?: WalletType | null
    vipInfo: VipInfoType | null
    jackpotWins: JackpotWinType[]
    lastjackpotsWon: JackpotType[]
}
export type gamesWithRelations = GameType & {
    operator?: OperatorType | null
}
export type gameSpinsWithRelations = GameSpinType & {
    jackpotContributions: JackpotContributionType[]
    jackpotWins: JackpotWinType[]
}
export type operatorsWithRelations = OperatorType & {
    games: GameType[]
    products: ProductType[]
    wallets: WalletType[]
}
export type walletsWithRelations = WalletType & {
    operator: OperatorType
    transactions: TransactionType[]
    user: UserType[]
}
export type transactionsWithRelations = TransactionType & {
    jackpotWins: JackpotWinType[]
    product?: ProductType | null
    wallet?: WalletType | null
}
export type productsWithRelations = ProductType & {
    operator?: OperatorType | null
    transactions: TransactionType[]
}
export type vipRankWithRelations = VipRankType & {
    vipInfo: VipInfoType[]
}
export type vipInfoWithRelations = VipInfoType & {
    user: UserType
    history: VipLevelUpHistoryType[]
    currentRank?: VipRankType | null
}
export type vipLevelUpHistoryWithRelations = VipLevelUpHistoryType & {
    vipInfo: VipInfoType
}
export type jackpotsWithRelations = JackpotType & {
    contributions: JackpotContributionType[]
    wins: JackpotWinType[]
    lastWinner?: UserType | null
}
export type jackpotContributionsWithRelations = JackpotContributionType & {
    gameSpin: GameSpinType
    jackpot: JackpotType
}
export type jackpotWinsWithRelations = JackpotWinType & {
    gameSpin: GameSpinType
    jackpot: JackpotType
    transaction?: TransactionType | null
    winner: UserType
}
export type RtgSettingsRequestWithRelations = SelectRtgSettingsRequest & {
    userData?: SelectRtgSettingsRequestusersData
    customData?: SelectRtgSettingsRequestCustomData
}
export type RtgSpinRequestWithRelations = SelectRtgSpinRequest & {
    userData?: SelectRtgSpinRequestusersData
    customData?: SelectRtgSpinRequestCustomData
}
export type RtgSettingsResultusersWithRelations = SelectRtgSettingsResultusers & {
    balance?: SelectRtgSettingsResultusersBalance
}
export type RtgSpinResultusersWithRelations = SelectRtgSpinResultusers & {
    balance?: SelectRtgSpinResultusersBalance
}
export type RtgSpinResultgamesWithRelations = SelectRtgSpinResultgames & {
    win?: SelectRtgSpinResultgamesWin
}
</file>

<file path="db/schema/zod.ts">
import { createInsertSchema, createSelectSchema } from 'drizzle-zod'
import z from 'zod'
import { authSessions, blackjackBets, blackjackGames, blackjackMessage, games, gameSessions, gameSpins, operators, products, tasks, updateType, users, vipInfo, vipLevel, vipRank, wallets } from './schema'
</file>

<file path="db/index.ts">
import { SQL } from 'bun'
import { drizzle } from 'drizzle-orm/bun-sql'
import env from '../env'
</file>

<file path="db/schema-transformer.ts">
import type { z } from 'zod'
⋮----
interface OpenAPIMetadata {
    description?: string;
    example?: unknown;
    format?: string;
}
export function withOpenAPIMetadata<T extends z.ZodTypeAny>(
    schema: T,
    metadata: OpenAPIMetadata,
): T
export function getOpenAPIMetadata(
    schema: z.ZodTypeAny,
): OpenAPIMetadata | undefined
export function transformSchemaForOpenAPI<T extends z.ZodTypeAny>(
    schema: T,
    config: OpenAPIMetadata = {},
): T &
</file>

<file path="lib/cache.ts">
import { createStorage, prefixStorage } from 'unstorage'
import chalk from 'chalk'
import type { AuthSessionType, GameSessionType, GameSpinType } from '#/db/schema'
⋮----
interface ReplayEntry { usedAt: number; expiresAt: number }
⋮----
export async function getAuthSessionFromCache(
    authSessionId: string
): Promise<AuthSessionType | null>
export async function saveAuthSessionToCache(
    session: AuthSessionType
): Promise<void>
export async function deleteAuthSessionFromCache(
    authSessionId: string
): Promise<void>
export async function getGameSessionFromCache(
    sessionId: string
): Promise<GameSessionType | null>
export async function saveGameSessionToCache(
    session: GameSessionType
): Promise<void>
export async function deleteGameSessionFromCache(
    sessionId: string
): Promise<void>
export async function getSpinsFromCache(
    sessionId: string
): Promise<GameSpinType[]>
export async function addSpinToCache(
    sessionId: string,
    spin: GameSpinType
): Promise<void>
export async function deleteSpinsFromCache(sessionId: string): Promise<void>
export async function markPrevRefreshJtiUsed(
    jti: string,
    ttlSeconds: number
): Promise<void>
export async function isPrevRefreshJtiUsed(jti: string): Promise<boolean>
</file>

<file path="lib/configure-open-api.ts">
import { Scalar } from '@scalar/hono-api-reference'
import type { AppOpenAPI } from './types'
import packageJSON from '../../package.json'
export default function configureOpenAPI(app: AppOpenAPI)
</file>

<file path="lib/constants.ts">
import { createMessageObjectSchema } from 'stoker/openapi/schemas'
</file>

<file path="lib/create-app.ts">
import { OpenAPIHono } from '@hono/zod-openapi'
import { HTTPException } from 'hono/http-exception'
import { notFound } from 'stoker/middlewares'
import { defaultHook } from 'stoker/openapi'
import { z } from 'zod'
import type { AppBindings, AppOpenAPI } from './types'
export function createRouter()
export default function createApp()
export function createTestApp(router: AppOpenAPI)
</file>

<file path="lib/disconnect.manager.ts">
import chalk from 'chalk'
import { SessionManager } from './session.manager'
⋮----
export class GracefulDisconnectManager
⋮----
static start(userId: string): void
static cancel(userId: string): void
</file>

<file path="lib/gameplay.ts">
import type {
    GameSessionType,
    GameSpinType,
    NewgameSpins,
    UserWithRelations,
} from '#/db/schema'
import { addSpinToCache, saveGameSessionToCache } from '#/lib/cache'
import {
    addXpTousers,
    calculateXpForWagerAndWins,
} from '#/routes/vip/vip.service'
import chalk from 'chalk'
import type { Context } from 'hono'
export interface SpinParams {
    totalSpinWinnings: number
    wagerAmount: number
}
export interface SpinStats {
    totalSpinWinnings: number
    wagerAmount: number
}
export async function handleGameSpin(
    c: Context,
    spinInput: NewgameSpins,
    spinParams: SpinParams
): Promise<GameSpinType>
export async function updateGameSessionStats(
    c: Context,
    spinStats: SpinStats
): Promise<void>
</file>

<file path="lib/jackpot.ts">
import chalk from 'chalk'
import { and, desc, eq, inArray } from 'drizzle-orm'
import type {
    JackpotContributionType,
    JackpotType,
    JackpotWinType,
    Newjackpots,
} from '#/db/schema'
import db from '#/db'
import {
    gameSpins,
    jackpotContributions,
    jackpots,
    jackpotWins,
    transactions,
    wallets,
} from '#/db/schema'
import { coinsToDollars } from '#/utils/misc.utils'
import { nanoid } from '#/utils/nanoid'
import { triggerUserUpdate } from './websocket.service'
export function dollarsToCoins(dollars: number): number
export function calculateContribution(
    wagerCoins: number,
    contributionRateBasisPoints: number
): number
export enum JackpotTypeEnum {
    MINOR = 'MINOR',
    MAJOR = 'MAJOR',
    GRAND = 'GRAND',
}
⋮----
export function getEligibleJackpots(wagerCoins: number): JackpotTypeEnum[]
export function generateRandomSeedAmount(baseSeedCoins: number): number
export function canWinJackpot(
    lastWonAt: string | null,
    minimumTimeBetweenWinsMinutes: number
): boolean
export function checkJackpotWin(probabilityPerMillion: number): boolean
export async function findManyJackpot(): Promise<JackpotType[]>
export async function createJackpot(data: Newjackpots): Promise<JackpotType>
export async function findJackpotById(
    id: string
): Promise<JackpotType | undefined>
export async function updateJackpot(
    id: string,
    data: Partial<Newjackpots>
): Promise<JackpotType>
export async function deleteJackpot(id: string): Promise<JackpotType>
export async function initializeJackpots(): Promise<void>
export interface AsyncJackpotProcessingRequest {
    gameSpinId: string
    userId: string
    wagerAmountCoins: number
    gameCategory: string
}
export async function processJackpots(
    request: AsyncJackpotProcessingRequest
)
export async function getJackpotStats()
export type RecentJackpotWin = Awaited<
    ReturnType<typeof getRecentJackpotWins>
>[number]
export async function getRecentJackpotWins(limit: number = 10)
export async function getUserJackpotContributions(
    userId: string,
    limit: number = 50
)
export async function getUserJackpotWins(
    userId: string
): Promise<JackpotWinType[]>
export async function getJackpotById(id: string)
interface JackpotWinParams {
    userId: string
    gameId: string
    amount: number
    jackpotType: string
    walletId: string
}
export async function handleJackpotWin({
    userId,
    gameId,
    amount,
    jackpotType,
    walletId,
}: JackpotWinParams)
</file>

<file path="lib/session.manager.ts">
import type { Context } from 'hono'
import chalk from 'chalk'
import { and, eq } from 'drizzle-orm'
import type { AuthSessionType, GameSessionType, UserType } from '#/db/schema'
import db from '#/db'
import { authSessions, games, gameSessions, gameSpins, users } from '#/db/schema'
import {
    deleteAuthSessionFromCache,
    deleteGameSessionFromCache,
    deleteSpinsFromCache,
    getAuthSessionFromCache,
    getGameSessionFromCache,
    getSpinsFromCache,
    saveAuthSessionToCache,
    saveGameSessionToCache,
} from '#/lib/cache'
import { triggerUserUpdate } from '#/lib/websocket.service'
import { nanoid } from '#/utils/nanoid'
⋮----
export class SessionManager
⋮----
static async startAuthSession(user: UserType): Promise<AuthSessionType>
static async endAuthSession(
        authSessionId: string,
        userId: string
): Promise<void>
static async endAllUserSessions(userId: string): Promise<void>
static async getAuthSession(
        sessionId: string
): Promise<AuthSessionType | null>
static async startGameSession(
        c: Context,
        gameName: string
): Promise<GameSessionType>
static async endCurrentGameSession(userId: string): Promise<void>
static async getGameSession(
        sessionId: string
): Promise<GameSessionType | null>
static async handleIdleSession(c: Context): Promise<void>
</file>

<file path="lib/types.ts">
import type { AuthSessionType, GameSessionType, OperatorType, UserType, VipInfoType, WalletType } from '#/db'
import type { OpenAPIHono, RouteConfig, RouteHandler } from '@hono/zod-openapi'
import type { Schema } from 'hono'
import type { PinoLogger } from 'hono-pino'
export interface AppBindings {
    Variables: {
        logger: PinoLogger;
        user: UserType,
        authSession: AuthSessionType
        gameSession: GameSessionType
        wallet: WalletType
        vipInfo: VipInfoType
        operator: OperatorType
    };
};
export type AppOpenAPI<S extends Schema = {}> = OpenAPIHono<AppBindings, S>
export type AppRouteHandler<R extends RouteConfig> = RouteHandler<R, AppBindings>
</file>

<file path="lib/websocket.service.ts">
import { eq } from 'drizzle-orm'
import db from '#/db'
import { vipInfo, wallets } from '#/db/schema'
import { server } from '#/index'
interface NotificationPayload {
    title: string;
    message: string;
    timestamp: string;
}
export function sendNotificationToUser(userId: string, payload: Omit<NotificationPayload, 'timestamp'>)
export async function triggerUserUpdate(userId: string)
</file>

<file path="middlewares/auth.middleware.ts">
import chalk from 'chalk'
import { and, eq } from 'drizzle-orm'
import type { Context, Next } from 'hono'
import { getCookie } from 'hono/cookie'
⋮----
import db from '#/db'
import { authSessions, users } from '#/db/schema'
import env from '#/env'
function extractToken(c: Context): string | null
function isCompactJws(token: string | undefined | null): boolean
export async function authMiddleware(c: Context, next: Next)
</file>

<file path="middlewares/pino-logger.ts">
import { pinoLogger as logger } from 'hono-pino'
import pino from 'pino'
import pretty from 'pino-pretty'
import env from '#/env'
export function pinoLogger()
</file>

<file path="middlewares/session.middleware.ts">
import type { Context, Next } from 'hono'
import chalk from 'chalk'
import { SessionManager } from '#/lib/session.manager'
export async function sessionMiddleware(c: Context, next: Next)
</file>

<file path="routes/auth/auth.controller.ts">
import type { Context } from 'hono'
import { getCookie, setCookie } from 'hono/cookie'
⋮----
import db from '#/db'
import type { Newusers, UserType } from '#/db/schema'
import { userResponseSchema, authSessions } from '#/db/schema'
import { users } from '#/db/schema/schema'
import env from '#/env'
import { SessionManager } from '#/lib/session.manager'
import type { AppRouteHandler } from '#/lib/types'
import { and, eq } from 'drizzle-orm'
⋮----
import type { LoginRoute, SessionRoute, SignUpRoute } from './auth.router'
⋮----
function resolveCookieDomain(host: string | undefined): string | undefined
⋮----
export const login: AppRouteHandler<LoginRoute> = async (c) =>
export const signup: AppRouteHandler<SignUpRoute> = async (c) =>
⋮----
// 15-minute access token (header-only)
⋮----
export const session: AppRouteHandler<SessionRoute> = async (c) =>
⋮----
const normalizeDate = (v: unknown) =>
⋮----
export async function logout(c: Context): Promise<any>
export async function refresh(c: Context)
</file>

<file path="routes/auth/auth.index.ts">
import { createRouter } from '#/lib/create-app'
</file>

<file path="routes/auth/auth.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
⋮----
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'
import { createErrorSchema, createMessageObjectSchema, } from 'stoker/openapi/schemas'
import {
    selectAuthSessionSchema,
    selectGameSession,
    selectVipInfoSchema,
    selectWalletSchema,
    userResponseSchema,
} from '#/db/schema'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { sessionMiddleware } from '#/middlewares/session.middleware'
import { badRequestSchema } from '#/lib/constants'
⋮----
export type LoginRoute = typeof login
export type SignUpRoute = typeof signup
export type SessionRoute = typeof sessionRoute
export type RefreshRoute = typeof refreshRoute
</file>

<file path="routes/auth/auth.service.ts">
import { eq } from 'drizzle-orm'
⋮----
import db from '#/db'
import type { AuthSessionType, Newusers, UserType } from '#/db/schema'
import { users } from '#/db/schema'
import env from '#/env'
import { SessionManager } from '#/lib/session.manager'
import { nanoid } from '#/utils/nanoid'
⋮----
type LoginResult = { accessToken: string; user: UserType } | { error: string }
type SignupResult = { accessToken: string; user: UserType } | { error: string }
export async function login(
    username?: string,
    password?: string,
    uid?: string
): Promise<LoginResult>
export async function logout(
    authSession: AuthSessionType,
    userId: string
): Promise<void>
export async function signup(
    username: string,
    password: string
): Promise<SignupResult>
</file>

<file path="routes/blackjack/utils/blackjack.utils.ts">
import crypto from 'node:crypto'
import Chance from 'chance'
import type { BlackjackTable, Player } from '../types'
import type { UserWithRelations } from '#/db/schema'
interface Card {
    rank: string;
    suit: string;
}
export function blackjackCheckSendJoinData(data: any): void
export function blackjackCheckSendJoinTable(data: any, user: UserWithRelations, blackjackTable: BlackjackTable | undefined): void
export function blackjackCheckSendJoinUser(user: UserWithRelations, blackjackTable: BlackjackTable): void
export function blackjackCheckSendBetData(data: any): void
export function blackjackCheckSendBetTable(blackjackTable: BlackjackTable | undefined): void
export function blackjackCheckSendBetBets(bets: any[]): void
export function blackjackCheckSendBetSeat(bet: any, user: UserWithRelations, blackjackTable: BlackjackTable, blackjackSeat: Player | undefined): void
export function blackjackCheckSendBetUser(user: UserWithRelations, amount: number): void
export function blackjackCheckSendClearData(data: any): void
export function blackjackCheckSendClearTable(table: BlackjackTable | undefined): void
export function blackjackCheckSendClearSeat(table: BlackjackTable, seats: Player[]): void
export function blackjackCheckSendInsuranceData(data: any): void
export function blackjackCheckSendInsuranceTable(table: BlackjackTable | undefined): void
export function blackjackCheckSendInsuranceSeat(table: BlackjackTable, seat: Player | undefined): void
export function blackjackCheckSendInsuranceUser(data: any, user: UserWithRelations, cost: number): void
export function blackjackCheckSendHitData(data: any): void
export function blackjackCheckSendHitTable(table: BlackjackTable | undefined): void
export function blackjackCheckSendHitSeat(user: UserWithRelations, table: BlackjackTable, seat: Player | undefined): void
export function blackjackCheckSendStandData(data: any): void
export function blackjackCheckSendStandTable(table: BlackjackTable | undefined): void
export function blackjackCheckSendStandSeat(user: UserWithRelations, table: BlackjackTable, seat: Player | undefined): void
export function blackjackCheckSendSplitData(data: any): void
export function blackjackCheckSendSplitTable(table: BlackjackTable | undefined): void
export function blackjackCheckSendSplitSeat(user: UserWithRelations, table: BlackjackTable, seat: Player | undefined): void
export function blackjackCheckSendSplitUser(user: UserWithRelations, seat: Player): void
export function blackjackCheckSendDoubleData(data: any): void
export function blackjackCheckSendDoubleTable(table: BlackjackTable | undefined): void
export function blackjackCheckSendDoubleSeat(user: UserWithRelations, table: BlackjackTable, seat: Player | undefined): void
export function blackjackCheckSendDoubleUser(user: UserWithRelations, seat: Player): void
⋮----
export function blackjackGenerateDeck(): Card[]
export function blackjackShuffleDeck(deck: Card[], combinedSeed: string): Card[]
export function blackjackGetCardsValue(cards: Card[]): number
export function blackjackCheckCardsSoftSeventeen(cards: Card[]): boolean
export function blackjackGetBetAmountMin(type: string): number
export function blackjackGetBetAmountMax(type: string): number
export function blackjackGetBetAmount(amount: any): number
export function blackjackTableListSanitize(tables: BlackjackTable[]): any[]
export function blackjackTableSanitize(table: BlackjackTable): any
</file>

<file path="routes/blackjack/utils/fair.ts">
import fetch from 'node-fetch'
interface FairData {
    success: boolean;
    data: any;
}
export function fairGetData(): Promise<FairData>
</file>

<file path="routes/blackjack/utils/message.schema.ts">
import type { ZodObject, ZodRawShape, ZodTypeAny } from "zod";
import { z } from "zod";
⋮----
export type ErrorCode = z.infer<typeof ErrorCode>;
export function messageSchema<T extends string>(
  messageType: T,
): ZodObject<
export function messageSchema<
  T extends string,
  P extends Record<string, ZodTypeAny> | ZodTypeAny,
>(
  messageType: T,
  payload: P,
): ZodObject<
export function messageSchema<T extends string, M extends ZodRawShape>(
  messageType: T,
  payload: undefined,
  meta: ZodObject<M>,
): ZodObject<
export function messageSchema<
  T extends string,
  P extends Record<string, ZodTypeAny> | ZodTypeAny,
  M extends ZodRawShape,
>(
  messageType: T,
  payload: P,
  meta: ZodObject<M>,
): ZodObject<
export function messageSchema<
  T extends string,
  P extends Record<string, ZodTypeAny> | ZodTypeAny | undefined = undefined,
  M extends ZodRawShape = Record<string, never>,
>(
  messageType: T,
  payload?: P,
  meta?: ZodObject<M>,
): ZodObject<any>
</file>

<file path="routes/blackjack/utils/setting.ts">
interface Setting {
    id: number;
}
⋮----
export async function settingInitDatabase(): Promise<void>
export function settingCheck(): void
export function settingGet(): Setting | null
</file>

<file path="routes/blackjack/utils/socket.ts">
import type { UserWithRelations } from '#/db/schema'
interface SocketActiveConnections {
  [key: string]: string[]
}
⋮----
export function socketCheckUserData(
  user: UserWithRelations | null,
  checkAuth: boolean
): void
export function socketAddConnectionLimit(
  room: string,
  identifier: string
): void
export function socketRemoveConnectionLimit(
  _room: string,
  _identifier: string
): void
export function socketCheckAntiSpam(_identifier: string): Promise<void>
export function socketRemoveAntiSpam(identifier: string): void
</file>

<file path="routes/blackjack/utils/user.ts">
import type { UserWithRelations } from '#/db/schema'
interface Rakeback {
    name: string | null;
    percentage: number;
}
export function generalUserGetRakeback(user: UserWithRelations): Rakeback
</file>

<file path="routes/blackjack/blackjack.handler.ts">
import db from '#/db'
import type { UserWithRelations } from '#/db/schema'
import { users } from '#/db/schema'
import type { ServerWebSocket } from 'bun'
import { eq } from 'drizzle-orm'
import type { WebSocketData } from '../websocket/websocket.handler'
import {
    BetMessage,
    ClearMessage,
    DoubleMessage,
    HitMessage,
    InsuranceMessage,
    JoinMessage,
    SplitMessage,
    StandMessage,
} from './blackjack.schema'
import {
    blackjackGetData,
    blackjackSendBetSocket,
    blackjackSendClearSocket,
    blackjackSendDoubleSocket,
    blackjackSendHitSocket,
    blackjackSendInsuranceSocket,
    blackjackSendJoinSocket,
    blackjackSendSplitSocket,
    blackjackSendStandSocket,
} from './blackjack.service'
import { settingCheck } from './utils/setting'
import {
    socketAddConnectionLimit,
    socketCheckAntiSpam,
    socketCheckUserData,
    socketRemoveAntiSpam,
    socketRemoveConnectionLimit,
} from './utils/socket'
async function handleMessage(
    ws: ServerWebSocket<WebSocketData>,
    msg: any,
    controllerFunction: any
)
⋮----
open(ws: ServerWebSocket<WebSocketData>)
message(ws: ServerWebSocket<WebSocketData>, message: string | Buffer)
close(ws: ServerWebSocket<WebSocketData>)
</file>

<file path="routes/blackjack/blackjack.schema.ts">
import { z } from "zod";
import { messageSchema } from './utils/message.schema'
</file>

<file path="routes/blackjack/blackjack.service.ts">
import db from '#/db'
import type { UserWithRelations } from '#/db/schema'
import { blackjackBets, users } from '#/db/schema'
import { nanoid } from '#/utils/nanoid'
import type { ServerWebSocket } from 'bun'
import { eq } from 'drizzle-orm'
import { TableUpdateMessage, UserUpdateMessage } from './blackjack.schema'
import type { BetPayload, BlackjackTable, JoinPayload } from './types'
import {
    blackjackCheckSendBetBets,
    blackjackCheckSendBetData,
    blackjackCheckSendBetSeat,
    blackjackCheckSendBetTable,
    blackjackCheckSendBetUser,
    blackjackCheckSendJoinData,
    blackjackCheckSendJoinTable,
    blackjackCheckSendJoinUser,
    blackjackGetBetAmount,
    blackjackTableListSanitize,
    blackjackTableSanitize,
} from './utils/blackjack.utils'
import { socketRemoveAntiSpam } from './utils/socket'
import { generalUserGetRakeback } from './utils/user'
⋮----
export function blackjackGetData()
export async function blackjackSendJoinSocket(
    ws: ServerWebSocket<any>,
    payload: JoinPayload
)
export async function blackjackSendBetSocket(
    user: UserWithRelations,
    payload: BetPayload
)
export async function blackjackSendClearSocket()
export async function blackjackSendInsuranceSocket()
export async function blackjackSendHitSocket()
export async function blackjackSendStandSocket()
export async function blackjackSendSplitSocket()
export async function blackjackSendDoubleSocket()
function blackjackGameCountdown()
</file>

<file path="routes/blackjack/types.ts">
export interface ClientMessage<T = unknown> {
    event: string;
    payload: T;
    requestId?: string;
}
export interface ServerResponse<T = unknown> {
    event: 'response';
    requestId: string;
    payload: T | null;
    error: { message: string } | null;
}
export interface ServerBroadcast<T = unknown> {
    event: string;
    payload: T;
}
export interface BlackjackWebSocketContext {
    id: string;
    username: string;
    rank: string;
}
export interface JoinPayload {
    table: number;
    seat: number;
}
export interface BetPayload {
    table: number;
    bets: {
        seat: number;
        amount: {
            main: number;
            sideLeft: number;
            sideRight: number;
        };
    }[];
}
export interface BlackjackTable {
    table: number;
    game: any;
    players: Player[];
    playersPos: number | 'all' | null;
}
export interface Player {
    seat: number;
    user: any;
    bet: any;
}
</file>

<file path="routes/common/notifications.handler.ts">
open(ws)
close(ws)
message(message)
</file>

<file path="routes/games/games.controller.ts">
import type { Context } from 'hono'
import type { AuthSessionType, UserType } from '#/db/schema'
⋮----
export async function getGameCategories(c: Context)
export async function getAllGames(c: Context)
export async function searchGames(c: Context)
export async function getUserGames(c: Context)
export async function favoriteGame(c: Context)
export async function getFavoriteGames(c: Context)
export async function enterGame(c: Context)
export async function leaveGame(c: Context)
export async function getGameHistory(c: Context)
export async function topWins(c: Context)
</file>

<file path="routes/games/games.router.ts">
import { gameResponseSchema } from '#/db/schema'
import { notFoundSchema } from '#/lib/constants'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { sessionMiddleware } from '#/middlewares/session.middleware'
import { createRoute, z } from '@hono/zod-openapi'
</file>

<file path="routes/games/games.service.ts">
import { and, desc, eq, inArray, sql } from 'drizzle-orm'
import type { Context } from 'hono'
import { GameCategory, games, favoriteGames, gameHistory } from '#/db/schema'
import db from '#/db'
import { nanoid } from '#/utils/nanoid'
import type { AuthSessionType, UserType } from '#/db/schema'
import { SessionManager } from '#/lib/session.manager'
export function findGameCategories()
export async function findAllGames()
export async function searchGames(params: {
    game_categories_slug?: string
    page: number
    limit: number
})
export async function findUserGames(
    userId: string,
    params: { game_categories_slug: string; page: number; limit: number }
)
export async function addFavoriteGame(userId: string, gameId: string)
export async function removeFavoriteGame(userId: string, gameId: string)
export async function findFavoriteGames(userId: string): Promise<string[]>
export async function enterGame(
    c: Context,
    user: UserType,
    authSession: AuthSessionType,
    gameId: string,
    token: string
)
export async function leaveGame(authSessionId: string)
export async function findGameHistory(userId: string)
export async function findTopWins()
</file>

<file path="routes/gamespins/gamespins.controller.ts">
import db from '#/db'
import { gameSpins } from '#/db/schema'
import { desc, gt } from 'drizzle-orm'
import type { Context } from 'hono'
export async function getTopWins(c: Context)
</file>

<file path="routes/gamespins/gamespins.router.ts">
import { gameSpinResponseSchema } from '#/db'
import { notFoundSchema } from '#/lib/constants'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { createRoute } from '@hono/zod-openapi'
⋮----
import { z } from 'zod'
</file>

<file path="routes/operator/operator.controller.ts">
import type { Context } from 'hono'
import type { OperatorType } from '#/db'
⋮----
export async function getOperators(c: Context)
export async function getOperatorProducts(c: Context)
</file>

<file path="routes/operator/operator.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
import { selectOperatorSchema, productResponseSchema } from '#/db'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
</file>

<file path="routes/operator/operator.service.ts">
import { eq } from 'drizzle-orm'
import db from '#/db'
import { products } from '#/db/schema'
export async function getOperators()
export async function getProductsByOperatorId(operatorId: string)
</file>

<file path="routes/recordings/recordings.controller.ts">
import type { Context } from 'hono'
import { recordingsService } from './recordings.service'
⋮----
async uploadRecording(c: Context)
</file>

<file path="routes/recordings/recordings.router.ts">
import { Hono } from 'hono'
import { recordingsController } from './recordings.controller'
</file>

<file path="routes/recordings/recordings.service.ts">
import fs from 'node:fs/promises'
import path from 'node:path'
import { Buffer } from 'node:buffer'
⋮----
async saveRecording(file: File, sessionId: string)
</file>

<file path="routes/redtiger/data.ts">

</file>

<file path="routes/redtiger/redtiger.controller.ts">
import type { Context } from 'hono'
import chalk from 'chalk'
import type { UserWithRelations } from '#/db/schema'
import {
    rtgSettingsRequestDtoSchema,
    rtgSpinRequestDtoSchema,
} from '#/db/schema'
import { SessionManager } from '#/lib/session.manager'
import { createRedtigerSettings, createRedtigerSpin } from './redtiger.service'
</file>

<file path="routes/redtiger/redtiger.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
import {
    rtgSettingsRequestDtoSchema,
    rtgSettingsResponseDtoSchema,
    rtgSpinRequestDtoSchema,
    rtgSpinResultSchema,
} from '#/db/schema'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { sessionMiddleware } from '#/middlewares/session.middleware'
import { redtigerController } from './redtiger.controller'
</file>

<file path="routes/redtiger/redtiger.service.ts">
import type { Context } from 'hono'
import type { z } from 'zod'
import chalk from 'chalk'
import { and, eq, inArray } from 'drizzle-orm'
import type {
    GameSessionType,
    JackpotType,
    providerSpinResponseDataSchema,
    rtgSettingsRequestDtoSchema,
    rtgSettingsResponseDtoSchema,
    rtgSpinRequestDtoSchema,
    rtgSpinResponseDtoSchema,
    UserWithRelations,
} from '#/db/schema'
import db from '#/db'
import { jackpots } from '#/db/schema'
import { updateGameSessionStats } from '#/lib/gameplay'
⋮----
import { sendNotificationToUser } from '#/lib/websocket.service'
import {
    addXpTousers,
    calculateXpForWagerAndWins,
} from '#/routes/vip/vip.service'
import { creditTowallets, debitFromwallets } from '#/routes/wallet/wallet.service'
import { coinsToDollars, dollarsToCoins } from '#/utils/misc.utils'
import { atlantis_settings, atlantis_spin } from './data'
import { getGameSessionFromCache } from '#/lib/cache'
type ProviderSpinResponseData = z.infer<typeof providerSpinResponseDataSchema>
type RTGSettingsRequestDto = z.infer<typeof rtgSettingsRequestDtoSchema>
type RTGSettingsResponseDto = z.infer<typeof rtgSettingsResponseDtoSchema>
type RTGSpinRequestDto = z.infer<typeof rtgSpinRequestDtoSchema>
type RTGSpinResponseDto = z.infer<typeof rtgSpinResponseDtoSchema>
⋮----
export async function createRedtigerSettings(
    user: UserWithRelations,
    gameName: string,
    authSessionId: string,
    data: RTGSettingsRequestDto
): Promise<RTGSettingsResponseDto | null>
export async function createRedtigerSpin(
    c: Context,
    data: RTGSpinRequestDto
): Promise<RTGSpinResponseDto>
async function enhanceRTGResponseWithJackpots(
    originalResponse: ProviderSpinResponseData,
    jackpotResult: {
        contributions: {
            jackpotType: string
            contributionAmountCoins: number
        }[]
        jackpotWin: {
            id: string
            jackpotType: string
            winAmountCoins: number
        } | null
    }
): Promise<ProviderSpinResponseData>
</file>

<file path="routes/tasks/tasks.handlers.ts">
import { eq } from 'drizzle-orm'
⋮----
import type { AppRouteHandler } from '#/lib/types'
import db from '#/db'
import { tasks } from '#/db/schema'
import { ZOD_ERROR_CODES, ZOD_ERROR_MESSAGES } from '#/lib/constants'
import type {
    CreateRoute,
    GetOneRoute,
    ListRoute,
    PatchRoute,
    RemoveRoute,
} from './tasks.routes'
import { nanoid } from '#/utils/nanoid'
export const list: AppRouteHandler<ListRoute> = async (c) =>
export const create: AppRouteHandler<CreateRoute> = async (c) =>
export const getOne: AppRouteHandler<GetOneRoute> = async (c) =>
⋮----
where(
            fields: { id: any },
            operators: { eq: (arg0: any, arg1: any) => any }
)
⋮----
export const patch: AppRouteHandler<PatchRoute> = async (c) =>
export const remove: AppRouteHandler<RemoveRoute> = async (c) =>
</file>

<file path="routes/tasks/tasks.index.ts">
import { createRouter } from '#/lib/create-app'
</file>

<file path="routes/tasks/tasks.routes.ts">
import { createRoute, z } from '@hono/zod-openapi'
⋮----
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'
import { createErrorSchema, IdParamsSchema } from 'stoker/openapi/schemas'
import { insertTasksSchema, patchTasksSchema, selectTasksSchema } from '#/db/schema'
import { notFoundSchema } from '#/lib/constants'
⋮----
export type ListRoute = typeof list
export type CreateRoute = typeof create
export type GetOneRoute = typeof getOne
export type PatchRoute = typeof patch
export type RemoveRoute = typeof remove
</file>

<file path="routes/updates/updates.controller.ts">
import type { Context } from 'hono'
⋮----
import { z } from 'zod'
import type { AppVersion } from '#/db'
import {
    AppVersionSchema,
    CheckUpdateRequestSchema,
    updateTypeSchema,
} from '#/db/schema/zod'
import env from '#/env'
⋮----
export async function handleCheckUpdate(c: Context)
export async function handleUploadUpdate(c: Context)
export async function handleDownloadLocalUpdate(c: Context)
export async function handleListVersions(c: Context)
</file>

<file path="routes/updates/updates.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
⋮----
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'
import {
    CheckUpdateRequestSchema,
    CheckUpdateResponseSchema,
    ErrorSchema,
    ListVersionsResponseSchema,
    SuccessResponseSchema,
} from '#/db/schema'
import { createRouter } from '../../lib/create-app'
import {
    handleCheckUpdate,
    handleDownloadLocalUpdate,
    handleListVersions,
    handleUploadUpdate,
} from './updates.controller'
</file>

<file path="routes/updates/updates.service.ts">
import chalk from 'chalk'
import { existsSync } from 'node:fs'
import { mkdir, readFile, unlink, writeFile } from 'node:fs/promises'
import { tmpdir } from 'node:os'
import { join } from 'node:path'
import rclone from 'rclone.js'
import type { AppVersion } from '#/db'
import env from '#/env'
⋮----
export async function loadMetadata(): Promise<any>
export async function saveMetadata(metadata: any): Promise<void>
function compareVersions(v1: string, v2: string): number
export function getLatestVersion(
    versions: AppVersion[],
    type: any
): AppVersion | null
function getFileExtension(type: any): string
function generateR2Key(
    appId: string,
    platform: string,
    type: any,
    version: string
): string
export function generateDownloadUrl(
    appId: string,
    platform: string,
    type: any,
    version: string
): string
⋮----
return `/api/updates/download/${filename}` // Local download URL
⋮----
export async function saveUpdateFile(
    file: File,
    appId: string,
    platform: string,
    type: any,
    version: string
): Promise<
⋮----
// 1. Write file to a temporary local path
⋮----
// 2. Define the destination for rclone
⋮----
// 3. Use rclone to copy the file to the R2 remote
⋮----
// 4. Clean up the temporary file from the server
⋮----
// Save locally for development
⋮----
export async function getLocalFile(
    filename: string
): Promise<
</file>

<file path="routes/user/user.controller.ts">
import type { Context } from 'hono'
import { SessionManager } from '#/lib/session.manager'
⋮----
export async function listUser(c: Context)
export async function createUser(c: Context)
export async function getUserById(c: Context)
export async function updateUser(c: Context)
export async function deleteUser(c: Context)
export async function checkUser(c: Context)
export async function verifyEmail(c: Context)
export async function getInfo(c: Context)
export async function getVipInfo(c: Context)
export async function getUserAmount(c: Context)
export async function updateUserInfo(c: Context)
export async function updateEmail(c: Context)
export async function updatePassword(c: Context)
export async function suspendUser(c: Context)
export async function enterGame(c: Context)
export async function userGame(c: Context)
export async function favoriteGame(c: Context)
export async function spinPage(c: Context)
export async function spin(c: Context)
export async function favoriteGameList(c: Context)
export async function startSession(c: Context)
export async function endSession(c: Context)
</file>

<file path="routes/user/user.handler.ts">
import type { ServerWebSocket } from 'bun'
import { GracefulDisconnectManager } from '#/lib/disconnect.manager'
import type { WebSocketData } from '../websocket/websocket.handler'
⋮----
open(ws: ServerWebSocket<WebSocketData>)
message()
close(ws: ServerWebSocket<WebSocketData>)
</file>

<file path="routes/user/user.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
⋮----
import { jsonContent, jsonContentRequired } from 'stoker/openapi/helpers'
import { createErrorSchema, IdParamsSchema } from 'stoker/openapi/schemas'
import { createRouter } from '#/lib/create-app'
import {
    insertUserSchema,
    selectUserSchema,
} from '../../db/schema'
import { notFoundSchema } from '../../lib/constants'
</file>

<file path="routes/user/user.service.ts">
import type { z } from '@hono/zod-openapi'
import type { createInsertSchema } from 'drizzle-zod'
import { eq } from 'drizzle-orm'
import db from '#/db'
import { users } from '#/db/schema'
import type {
    Newusers,
} from '../../db/schema'
export async function findManyUser()
export async function createUser(data: z.infer<ReturnType<typeof createInsertSchema>>)
export async function findUserById(id: string)
export async function updateUser(id: string, data: Partial<Newusers>)
export async function deleteUser(id: string)
export async function checkUser(userId: string)
export async function sendEmailVerification(userId: string)
export async function getUserInfo(userId: string)
export async function getVipInfo(userId: string)
export async function getUserAmount()
export async function updateUserInfo(data: Newusers)
export async function updateEmail(data: {
    email: string;
    password: string;
})
export async function updatePassword(data: {
    now_password: string;
    new_password: string;
})
export async function suspendUser(data:
export async function enterGame()
export async function userGame()
export async function favoriteGame()
export async function spinPage()
export async function spin()
export async function favoriteGameList()
</file>

<file path="routes/vip/vip.config.ts">
export interface LevelBenefit {
    id: string;
    name: string;
    description: string;
    type: 'monetary' | 'item' | 'perk';
    value?: number | string;
    currencyId?: string;
}
export interface CycleRewardConfig {
    type: 'daily' | 'weekly' | 'monthly';
    rewardName: string;
    description: string;
    amount?: number;
    currencyId?: string;
    items?: { itemId: string; quantity: number }[];
}
export interface SignInReward {
    day: number;
    description: string;
    amount?: number;
    currencyId?: string;
    xp?: number;
}
export interface LevelConfig {
    level: number;
    name: string;
    xpRequired: number;
    xpMultiplier: number;
    cumulativeXpToReach: number;
    cashbackPercentage: number;
    prioritySupport: boolean;
    initialSpecialBonuses?: number;
    benefits: LevelBenefit[];
    dailyBonusMultiplier: number;
    levelUpRewards?: Array<{
        id: string;
        type: string;
        description: string;
        amount?: number;
        currencyId?: string;
        metaData?: Record<string, any>;
    }>;
    dailyCycleReward?: CycleRewardConfig;
    weeklyCycleReward?: CycleRewardConfig;
    monthlyCycleReward?: CycleRewardConfig;
}
⋮----
export function getVipLevelConfiguration(level: number): Readonly<LevelConfig> | undefined
export function getAllVipLevelConfigurations(): Readonly<LevelConfig[]>
export function getVipLevelByTotalXp(totalXp: number): Readonly<LevelConfig>
</file>

<file path="routes/vip/vip.controller.ts">
import type { Context } from 'hono'
⋮----
export async function getMyVipDetails(c: Context)
export async function getVipLevels(c: Context)
export async function getVipRanks(c: Context)
</file>

<file path="routes/vip/vip.router.ts">
import { createRoute, z } from '@hono/zod-openapi'
import {
    selectVipLevelSchema,
    selectVipRankSchema,
    vipInfoResponseSchema,
} from '#/db'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
</file>

<file path="routes/vip/vip.service.ts">
import type { ExtractTablesWithRelations } from 'drizzle-orm'
import type { BunSQLQueryResultHKT } from 'drizzle-orm/bun-sql'
import type { PgTransaction } from 'drizzle-orm/pg-core'
import { eq } from 'drizzle-orm'
import type { VipInfoType, VipRankType, } from '#/db'
import db, { users, vipInfo, vipRank } from '#/db'
⋮----
import { triggerUserUpdate } from '#/lib/websocket.service'
import { nanoid } from 'nanoid'
import { getAllVipLevelConfigurations, getVipLevelByTotalXp, getVipLevelConfiguration } from './vip.config'
type Transaction = PgTransaction<BunSQLQueryResultHKT, typeof schema, ExtractTablesWithRelations<typeof schema>>
export interface XpCalculationResult {
    xpGained: number;
    newTotalXp: number;
    newCurrentLevelXp: number;
    levelChanged: boolean;
    newLevel: number;
    oldLevel: number;
}
interface VipDetails {
    info: VipInfoType;
    rank: VipRankType;
    xpForNextLevel: number;
}
⋮----
export async function getAllvipLevels()
export async function getAllvipRanks()
export async function getVipDetailsForusers(userId: string): Promise<VipDetails | null>
export function calculateXpForWagerAndWins(
    wagerAmount: number,
    winAmount: number,
    vipInfo: VipInfoType
):
export async function addXpTousers(userId: string, xpAmount: number): Promise<XpCalculationResult | null>
async function createDefaultvipInfo(userId: string, tx: Transaction): Promise<VipInfoType>
async function applyLevelUpBenefits(userId: string, newLevel: number, _tx: Transaction): Promise<void>
</file>

<file path="routes/wallet/wallet.controller.ts">
import type { Context } from 'hono'
import { creditTowallets, debitFromwallets } from './wallet.service'
export async function handleUpdateBalance(c: Context)
</file>

<file path="routes/wallet/wallet.router.ts">
import { createRoute } from '@hono/zod-openapi'
import { walletResponseSchema } from '#/db'
import { createRouter } from '#/lib/create-app'
import { authMiddleware } from '#/middlewares/auth.middleware'
import { sessionMiddleware } from '#/middlewares/session.middleware'
</file>

<file path="routes/wallet/wallet.service.ts">
import { eq } from 'drizzle-orm'
import db from '#/db'
import { transactions, users, wallets } from '#/db/schema'
import { triggerUserUpdate } from '#/lib/websocket.service'
import { nanoid } from 'nanoid'
export async function debitFromwallets(userId: string, amountToDebit: number, description: string): Promise<void>
export async function creditTowallets(userId: string, amountToCredit: number, description: string): Promise<void>
</file>

<file path="routes/websocket/chat.handler.ts">
import type { ServerWebSocket } from 'bun'
import type { Buffer } from 'node:buffer'
import type { WebSocketData } from './websocket.handler'
⋮----
open(ws: ServerWebSocket<WebSocketData>)
message(ws: ServerWebSocket<WebSocketData>, message: string | Buffer)
close(ws: ServerWebSocket<WebSocketData>)
</file>

<file path="routes/websocket/proxy.handler.ts">
import type { Buffer } from 'node:buffer'
import chalk from 'chalk'
function lzw_decode(s: string): string
⋮----
open(ws: any)
message(ws: any, msg: Buffer)
close(ws: any)
error(ws: any, error: Error)
</file>

<file path="routes/websocket/proxy.router.ts">
import { Hono } from 'hono'
import { GameProxyService } from './proxy.service'
</file>

<file path="routes/websocket/proxy.service.ts">
import chalk from 'chalk'
⋮----
async forwardRequest(body: any): Promise<any>
</file>

<file path="routes/websocket/websocket.handler.ts">
import type { ServerWebSocket } from 'bun'
import type { Buffer } from 'node:buffer'
import type { AuthSessionType, UserType } from '#/db/schema'
import { chatHandler } from './chat.handler'
import { notificationsHandler } from '../common/notifications.handler'
import { userHandler } from '../user/user.handler'
import { blackjackHandler } from '../blackjack/blackjack.handler'
import { proxyHandler } from './proxy.handler'
⋮----
export interface WebSocketData {
    user: UserType
    authSession: AuthSessionType
    topic: keyof typeof topicHandlers
}
⋮----
open(ws: ServerWebSocket<WebSocketData>)
message(ws: ServerWebSocket<WebSocketData>, message: string | Buffer)
close(ws: ServerWebSocket<WebSocketData>, code: number, reason: string)
</file>

<file path="routes/websocket/websocket.router.ts">
import { createRouter } from '#/lib/create-app'
</file>

<file path="routes/gameService.route.ts">
import { createRoute } from '@hono/zod-openapi'
⋮----
import { jsonContent } from 'stoker/openapi/helpers'
import { createMessageObjectSchema } from 'stoker/openapi/schemas'
import { createRouter } from '#/lib/create-app'
</file>

<file path="routes/index.route.ts">
import { createRoute } from '@hono/zod-openapi'
⋮----
import { jsonContent } from 'stoker/openapi/helpers'
import { createMessageObjectSchema } from 'stoker/openapi/schemas'
import { createRouter } from '#/lib/create-app'
</file>

<file path="utils/crypto.js">
function hexStringToByteArray(hexString) {
⋮----
const high = HEX_CHARS.indexOf(hexString[i])
const low = HEX_CHARS.indexOf(hexString[i + 1])
bytes.push((high << 4) | low)
⋮----
function byteArrayToHexString(byteArray) {
⋮----
byteArray.forEach(byte => {
hexChars.push(HEX_CHARS.charAt((byte >> 4) & 0x0F))
hexChars.push(HEX_CHARS.charAt(byte & 0x0F))
⋮----
return hexChars.join('')
⋮----
/**
 * Converts a UTF-8 string into an array of bytes.
 * Handles URI encoding to correctly represent multi-byte characters.
 * @param {string} str - The string to convert.
 * @returns {number[]} An array of bytes.
 */
function stringToByteArray(str) {
const uriEncoded = encodeURIComponent(str)
⋮----
const high = HEX_CHARS.indexOf(uriEncoded[i + 1].toLowerCase())
const low = HEX_CHARS.indexOf(uriEncoded[i + 2].toLowerCase())
⋮----
bytes.push(char.charCodeAt(0))
⋮----
/**
 * Converts an array of bytes into a UTF-8 string.
 * @param {number[]} byteArray - The array of bytes to convert.
 * @returns {string} The resulting UTF-8 string.
 */
function byteArrayToString(byteArray) {
⋮----
uriEncoded += `%${HEX_CHARS.charAt((byte >> 4) & 0x0F)}${HEX_CHARS.charAt(byte & 0x0F)}`
⋮----
return decodeURIComponent(uriEncoded)
⋮----
function rc4(key, data) {
⋮----
result.push(charCode ^ keyStreamChar)
⋮----
encrypt(key, plaintext) {
const keyBytes = stringToByteArray(key)
const plaintextBytes = stringToByteArray(plaintext)
const encryptedBytes = rc4(keyBytes, plaintextBytes)
return byteArrayToHexString(encryptedBytes)
⋮----
decrypt(key, ciphertext) {
⋮----
const ciphertextBytes = hexStringToByteArray(ciphertext)
const decryptedBytes = rc4(keyBytes, ciphertextBytes)
return byteArrayToString(decryptedBytes)
</file>

<file path="utils/crypto.test.ts">
import { describe, it, expect } from 'vitest';
import crypto from './crypto.js';
</file>

<file path="utils/misc.utils.ts">
export function toDecimal(value: number | null): number | null
export function toNumber(value: number | null): number | null
export function decimalToNumber(value: number | null): number | null
export function numberToDecimal(value: number | null): number | null
export function isDecimal(rtp: unknown): rtp is number
export const coinsToDollars = (coins: number): number
export const dollarsToCoins = (dollars: number): number
export const toCents = (amount: number): number
export const fromCents = (amountInCents: number): number
</file>

<file path="utils/nanoid.ts">
import { customAlphabet } from 'nanoid'
</file>

<file path="app.ts">
import configureOpenAPI from '#/lib/configure-open-api'
import createApp from '#/lib/create-app'
import auth from '#/routes/auth/auth.router'
import game from '#/routes/games/games.router'
import gameService from '#/routes/gameService.route'
import gameSpin from '#/routes/gamespins/gamespins.router'
import index from '#/routes/index.route'
import redtiger from '#/routes/redtiger/redtiger.router'
import updates from '#/routes/updates/updates.router'
import users from '#/routes/user/user.router'
import vip from '#/routes/vip/vip.router'
import { serveStatic } from 'hono/bun'
import { cors } from 'hono/cors'
⋮----
// Apply CORS headers reflecting the incoming allowed origin
⋮----
export type AppType = (typeof routes)[number]
</file>

<file path="env.ts">
import { z } from 'zod'
⋮----
export type Env = z.infer<typeof EnvSchema>
</file>

<file path="index.ts">
import type { Server, ServerWebSocket, WebSocketHandler } from 'bun'
import chalk from 'chalk'
import { and, eq } from 'drizzle-orm'
⋮----
import app from './app'
import db from './db'
import { authSessions, users } from './db/schema'
import env from './env'
import { decrypt, lzwDecode, rc42, rc4Api, s } from './lzw'
import { websocketHandler } from './routes/websocket/websocket.handler'
⋮----
async fetch(req, server)
⋮----
error()
⋮----
interface WebSocketContext {
    backendSocket: WebSocket;
    messageQueue: (string | Uint8Array)[];
    nolimitSessionKey: string
    id: string
}
⋮----
open(ws: ServerWebSocket<WebSocketContext>)
message(ws: ServerWebSocket<WebSocketContext>, message: string | Uint8Array)
close(ws: ServerWebSocket<WebSocketContext>)
⋮----
fetch(req: Request, server: Server): Response | undefined
</file>

<file path="lzw.ts">
export function lzwDecode(t)
function n(t)
function i(t, e)
export function decrypt(t, s)
</file>

<file path="seeds/json/games2.json">
[
  {
    "id": "13505",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "AncientDiscoRTG",
    "title": "Ancient Disco",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13512",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BassBossRTG",
    "title": "Bass Boss",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13514",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BlazingClustersRTG",
    "title": "Blazing Clusters",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13503",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "CashOrNothingRTG",
    "title": "Cash Or Nothing",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13518",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BugsysBarRTG",
    "title": "Bugsys Bar",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13517",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BountyRaid2RTG",
    "title": "Bounty Raid2",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13516",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BloodSuckersMegaWaysRTG",
    "title": "Blood Suckers",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13515",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "BlobstersClusterbusterRTG",
    "title": "Blobsters Clusterbuster",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13523",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "CirqueDeLaFortuneRTG",
    "title": "Cirque De LaFortune",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13522",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ChristmasMultihopsRTG",
    "title": "Christmas Multihops",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13521",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ChristmasMorningRTG",
    "title": "Christmas Morning",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13520",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "CashOrNothingRTG",
    "title": "Cash Or Nothing",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13527",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DiceDiceDiceRTG",
    "title": "Dice Dice Dice",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13528",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DivineWaysRTG",
    "title": "Divine Ways",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13526",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DesertLegendsSpinsRTG",
    "title": "Desert Legends Spins",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13525",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "6",
    "name": "CloverCrazeRTG",
    "title": "Clover Craze",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13531",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DragonsMirrorRTG",
    "title": "Dragons Mirror",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13532",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DynamiteRichesRTG",
    "title": "Dynamite Riches",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13533",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "EasyGoldRTG",
    "title": "Easy Gold",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13534",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "EmeraldDiamondRTG",
    "title": "Emerald Diamond",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13539",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GemsInfernoMegaWaysRTG",
    "title": "Gems Inferno",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13536",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "FaFaBabiesRTG",
    "title": "FaFa Babies",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13535",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "EuropeanRouletteRTG",
    "title": "European Roulette",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13537",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "FlodderRTG",
    "title": "Flodder",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13542",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GodOfWealthRTG",
    "title": "God Of Wealth",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13544",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GonzitasQuestRTG",
    "title": "Gonzitas Quest",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13540",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GetTheGoldInfinireelsRTG",
    "title": "Get TheGold",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13543",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GodsOfTroyRTG",
    "title": "Gods Of Troy",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13547",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "LastChanceSaloonRTG",
    "title": "LastChance Saloon",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13545",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "HappyApplesRTG",
    "title": "Happy Apples",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13548",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "LeprechaunsMagicRTG",
    "title": "Leprechauns Magic",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13546",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "JingleBellsRTG",
    "title": "Jingle Bells",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13554",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "PeggySweetsRTG",
    "title": "Peggy Sweets",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13550",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "LuckyEasterRTG",
    "title": "Lucky Easter",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13551",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "MagicGateRTG",
    "title": "Magic Gate",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13552",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "MonstersUnchainedRTG",
    "title": "Monsters Unchained",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13557",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ReelKingMegaRTG",
    "title": "Reel King",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13555",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "PersianFortuneRTG",
    "title": "Persian Fortune",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13556",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "RedDiamondRTG",
    "title": "Red Diamond",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13558",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SantaSpinsRTG",
    "title": "SantaSpins",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13562",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SpookyCarnivalRTG",
    "title": "SpookyCarnival",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13560",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SirensRichesRTG",
    "title": "SirensRiches",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13561",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SnowWildAndThe7FeaturesRTG",
    "title": "SnowWildAndThe7Features",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13563",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "Stage888RTG",
    "title": "Stage888",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13567",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SugarliciousEveryWayRTG",
    "title": "SugarliciousEveryWay",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13568",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SumoSpinsRTG",
    "title": "SumoSpins",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13565",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SteamSquadRTG",
    "title": "SteamSquad",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13566",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SugarMonsterRTG",
    "title": "SugarMonster",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13574",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "YearRoundRichesClusterbusterRTG",
    "title": "YearRoundRichesClusterbuster",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13573",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "WantedWildzExtremeRTG",
    "title": "WantedWildzExtreme",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13571",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "VaultCrackerMegaWaysRTG",
    "title": "VaultCrackerMegaWays",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13570",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "TreasureMineRTG",
    "title": "TreasureMine",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "12147",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "SpaceCatKA",
    "title": "Space Cat",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1053",
    "bids": "299",
    "statIn": "59.8000",
    "statOut": "47.4000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2021-09-08 03:00:25",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "9",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13239",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "SpaceCatKA",
    "title": "Space Cat",
    "shopId": "3",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1053",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2022-08-29 16:03:55",
    "updated_at": "2022-08-29 16:03:55",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13238",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "GoldenDragonKA",
    "title": "Golden Dragon",
    "shopId": "3",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1052",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2022-08-29 16:03:55",
    "updated_at": "2022-08-29 16:03:55",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13226",
    "developer": "cqnine",
    "type": "1",
    "vipLevel": "5",
    "name": "ParadiseCQ9",
    "title": "Paradise",
    "shopId": "3",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1040",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2022-08-29 16:03:55",
    "updated_at": "2022-08-29 16:03:55",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "12134",
    "developer": "cqnine",
    "type": "1",
    "vipLevel": "5",
    "name": "ParadiseCQ9",
    "title": "Paradise",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1040",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2021-09-08 03:00:25",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "7",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "11040",
    "developer": "cqnine",
    "type": "1",
    "vipLevel": "5",
    "name": "ParadiseCQ9",
    "title": "Paradise",
    "shopId": "0",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1040",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:11",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13589",
    "developer": "nolimit", "provider":"nolimit",
    "type": "slots",
    "vipLevel": "0",
    "name": "FireInTheHole2NLC",
    "title": "Fire In The Hole 2",
    "shopId": "1",
    "jpgId": "",
    "label": "1",
    "device": "",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "",
    "category_temp": "1",
    "original_id": "",
    "bids": "",
    "statIn": "",
    "statOut": "",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "8",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13591",
    "developer": "nolimit", "provider":"nolimit",
    "type": "slots",
    "vipLevel": "0",
    "name": "TheCryptNLC",
    "title": "The Crypt",
    "shopId": "1",
    "jpgId": "",
    "label": "1",
    "device": "",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "",
    "category_temp": "1",
    "original_id": "",
    "bids": "",
    "statIn": "",
    "statOut": "",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "8",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13590",
    "developer": "nolimit", "provider":"nolimit",
    "type": "slots",
    "vipLevel": "0",
    "name": "LandOfTheFreeNLC",
    "title": "Land of the Free",
    "shopId": "1",
    "jpgId": "",
    "label": "1",
    "device": "",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "",
    "category_temp": "1",
    "original_id": "",
    "bids": "",
    "statIn": "",
    "statOut": "",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "7",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "11052",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "GoldenDragonKA",
    "title": "Golden Dragon",
    "shopId": "0",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1052",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:11",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13588",
    "developer": "nolimit", "provider":"nolimit",
    "type": "slots",
    "vipLevel": "0",
    "name": "SanQuentinNLC",
    "title": "San Quentin",
    "shopId": "1",
    "jpgId": "",
    "label": "1",
    "device": "",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "",
    "category_temp": "1",
    "original_id": "",
    "bids": "",
    "statIn": "",
    "statOut": "",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "6",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "11053",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "SpaceCatKA",
    "title": "Space Cat",
    "shopId": "0",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1053",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:11",
    "standard_rtp": "1",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "12146",
    "developer": "kickass", "provider":"kickass",
    "type": "1",
    "vipLevel": "5",
    "name": "GoldenDragonKA",
    "title": "Golden Dragon",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "2",
    "gamebank": "fish",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "4",
    "cask": "1",
    "advanced": "1",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "1052",
    "bids": "1033",
    "statIn": "9213.0200",
    "statOut": "4410.4000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2021-09-08 03:00:25",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "true",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13564",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "StarsLuckRTG",
    "title": "StarsLuck",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13529",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DoggyRichesMegaWaysRTG",
    "title": "DoggyRichesMegaWays",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13572",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ViralSpiralRTG",
    "title": "ViralSpiral",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13569",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "TheWildHatterRTG",
    "title": "TheWildHatter",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13530",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "DragonsFireMegaWaysRTG",
    "title": "DragonsFireMegaWays",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13559",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "SeaBoatAdventureRTG",
    "title": "SeaBoatAdventure",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13553",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "NightmareFamilyMegaWaysRTG",
    "title": "NightmareFamilyMegaWays",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13549",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "LondonTubeRTG",
    "title": "LondonTube",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13541",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "GigaBlastRTG",
    "title": "GigaBlast",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13511",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "AtlantisRTG",
    "title": "Atlantis",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13538",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "FortuneFestRTG",
    "title": "FortuneFest",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13524",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "ClashOfTheBeastsRTG",
    "title": "ClashOfTheBeasts",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "13519",
    "developer": "redtiger", "provider":"redtiger",
    "type": "slots",
    "vipLevel": "5",
    "name": "CaseClosedRTG",
    "title": "CaseClosed",
    "shopId": "1",
    "jpgId": "0",
    "label": "1",
    "device": "1",
    "gamebank": "slots",
    "lines_percent_config_spin": "1",
    "lines_percent_config_spin_bonus": "1",
    "lines_percent_config_bonus": "1",
    "lines_percent_config_bonus_bonus": "1",
    "rezerv": "",
    "cask": "1",
    "advanced": "1",
    "bet": "1",
    "scalemode": "1",
    "slotviewstate": "1",
    "view": "",
    "denomination": "1.00",
    "category_temp": "1",
    "original_id": "",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2020-01-30 00:00:00",
    "standard_rtp": "1",
    "active": "true",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "",
    "rtpStatIn": "",
    "rtpStatOut": ""
  },
  {
    "id": "1070",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "HitInVegasNG",
    "title": "Hit In Vegas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1070",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1071",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "FortuneCashNG",
    "title": "Fortune Cash",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1071",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1072",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CleosHeartNG",
    "title": "Cleos Heart",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1072",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1073",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Jungle2NG",
    "title": "Jungle 2",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1073",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1074",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BananasNG",
    "title": "Bananas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1074",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1075",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileNG",
    "title": "Book Of Nile",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1075",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1076",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "ZenZenCashNG",
    "title": "Zen Zen Cash",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1076",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1077",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "WildBuffaloNG",
    "title": "Wild Buffalo",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1077",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1078",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CrazyScientistNG",
    "title": "Crazy Scientist",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1078",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1079",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "FrostyFruitsNG",
    "title": "Frosty Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1080",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CloverStonesNG",
    "title": "Clover Stones",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1081",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "MMALegendsNG",
    "title": "MMA Legends",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1082",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "JackpotSevensNG",
    "title": "Jackpot Sevens",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1083",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "WolfReelsNG",
    "title": "Wolf Reels",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1084",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "MagicTreeNG",
    "title": "Magic Tree",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1085",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "SpaceRocksNG",
    "title": "Space Rocks",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1086",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Royal40FruitsNG",
    "title": "Royal 40 Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1087",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "DiscoFruitsNG",
    "title": "Disco Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1088",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "AfricanKingNG",
    "title": "African King",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1089",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "QuickCashFruitsNG",
    "title": "Quick Cash Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1090",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileRevengeNG",
    "title": "Book Of Nile Revenge",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1091",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileLostChapterNG",
    "title": "Book Of NileLost Chapter",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1092",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Royal20FruitsNG",
    "title": "Royal 20 Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1093",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "RedHotChilli7sNG",
    "title": "Red Hot Chilli 7s",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1094",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "GoldenFruitsNG",
    "title": "Golden Fruits",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2162",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "HitInVegasNG",
    "title": "Hit In Vegas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1648125946;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1648126007;s:7:\\\"payload\\\";i:188;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1070",
    "bids": "82",
    "statIn": "697.2000",
    "statOut": "41.1800",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-23 13:47:40",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2163",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "FortuneCashNG",
    "title": "Fortune Cash",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1071",
    "bids": "84",
    "statIn": "375.4000",
    "statOut": "82.3700",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-23 13:47:14",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2164",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CleosHeartNG",
    "title": "Cleos Heart",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1072",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-01-28 05:19:19",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2165",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Jungle2NG",
    "title": "Jungle 2",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1073",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2021-10-24 21:53:02",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2166",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BananasNG",
    "title": "Bananas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1074",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-01-16 15:33:17",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2167",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileNG",
    "title": "Book Of Nile",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1647675708;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1647675949;s:7:\\\"payload\\\";i:198;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1075",
    "bids": "88",
    "statIn": "366.8000",
    "statOut": "143.1000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-18 08:45:49",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2168",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "ZenZenCashNG",
    "title": "Zen Zen Cash",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645875786;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645875803;s:7:\\\"payload\\\";i:198;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1076",
    "bids": "28",
    "statIn": "9.6000",
    "statOut": "2.2400",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-02-25 12:43:24",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2169",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "WildBuffaloNG",
    "title": "Wild Buffalo",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1077",
    "bids": "166",
    "statIn": "602.0000",
    "statOut": "142.8000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-01 09:12:09",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2170",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CrazyScientistNG",
    "title": "Crazy Scientist",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1648126090;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1648126157;s:7:\\\"payload\\\";i:185;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1078",
    "bids": "28",
    "statIn": "2000.6000",
    "statOut": "64.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-23 13:49:17",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2171",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "FrostyFruitsNG",
    "title": "Frosty Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1079",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-03 11:08:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2172",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "CloverStonesNG",
    "title": "Clover Stones",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1080",
    "bids": "2",
    "statIn": "2.0000",
    "statOut": "1.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-23 13:47:08",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2173",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "MMALegendsNG",
    "title": "MMA Legends",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1081",
    "bids": "4",
    "statIn": "1.9000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-03 11:14:01",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2174",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "JackpotSevensNG",
    "title": "Jackpot Sevens",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1082",
    "bids": "148",
    "statIn": "937.4000",
    "statOut": "133.6000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-14 14:56:07",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2175",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "WolfReelsNG",
    "title": "Wolf Reels",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1083",
    "bids": "9",
    "statIn": "3.6000",
    "statOut": "1.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-24 23:29:07",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2176",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "MagicTreeNG",
    "title": "Magic Tree",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1648222596;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1648222634;s:7:\\\"payload\\\";i:191;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1084",
    "bids": "11",
    "statIn": "3.3000",
    "statOut": "0.1400",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-24 16:37:15",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2177",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "SpaceRocksNG",
    "title": "Space Rocks",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1085",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2021-10-24 21:08:55",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2178",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Royal40FruitsNG",
    "title": "Royal 40 Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1086",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-01-11 10:15:03",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2179",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "DiscoFruitsNG",
    "title": "Disco Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1087",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2021-10-24 21:12:02",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2180",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "AfricanKingNG",
    "title": "African King",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1648247474;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1648247481;s:7:\\\"payload\\\";i:197;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1088",
    "bids": "3",
    "statIn": "0.9000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-24 23:31:24",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2181",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "QuickCashFruitsNG",
    "title": "Quick Cash Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645779336;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645779412;s:7:\\\"payload\\\";i:173;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1089",
    "bids": "344",
    "statIn": "936.2000",
    "statOut": "556.4800",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-02-24 09:56:52",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2182",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileRevengeNG",
    "title": "Book Of Nile Revenge",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1090",
    "bids": "1",
    "statIn": "2.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-04 17:19:07",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2183",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "BookOfNileLostChapterNG",
    "title": "Book Of NileLost Chapter",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1091",
    "bids": "50",
    "statIn": "141.2000",
    "statOut": "54.4000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-23 13:47:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2184",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "Royal20FruitsNG",
    "title": "Royal 20 Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1092",
    "bids": "22",
    "statIn": "9.2000",
    "statOut": "2.6000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-02-14 22:41:50",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2185",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "RedHotChilli7sNG",
    "title": "Red Hot Chilli 7s",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1093",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2021-09-08 03:00:26",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2186",
    "developer": "netgame", "provider":"netgame",
    "type": "",
    "vipLevel": "",
    "name": "GoldenFruitsNG",
    "title": "Golden Fruits",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1094",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:26",
    "updated_at": "2022-03-05 03:25:05",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "647",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "SpaceWarsNET",
    "title": "Space Wars",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "647",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "648",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "WildWaterNET",
    "title": "Wild Water",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "648",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-26 17:03:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "649",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "StarBurstNET",
    "title": "Star Burst",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "649",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "650",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FlowersNET",
    "title": "Flowers",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "650",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "651",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FlowersChristmasNET",
    "title": "Flowers Christmas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20, 1.00, 5.00, 10.00, 20.00",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "12,35",
    "original_id": "651",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2022-03-03 11:38:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "652",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "DazzleMeNET",
    "title": "Dazzle Me",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "652",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "653",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FruitShopChristmasNET",
    "title": "Fruit Shop Christmas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "653",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "654",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FruitShopNET",
    "title": "Fruit Shop",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "654",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "655",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GoBananasNET",
    "title": "Go Bananas",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "655",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "656",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "LightsNET",
    "title": "Lights",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "656",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "876",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FortuneRangersNET",
    "title": "Fortune Rangers",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "876",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "877",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "CreatureFromTheBlackLagoonNET",
    "title": "Creature From The Black Lagoon",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "877",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "878",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "WingsOfRichesNET",
    "title": "Wings Of Riches",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "878",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-26 17:03:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "879",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "ReelRush2NET",
    "title": "Reel Rush 2",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "879",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "880",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "TheWolfsBaneNET",
    "title": "The Wolfs Bane",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "880",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "881",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GrandSpinnSuperpotNET",
    "title": "Grand Spinn Superpot",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "881",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "882",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "TurnYourFortuneNET",
    "title": "Turn Your Fortune",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "882",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "883",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "JumanjiNET",
    "title": "Jumanji",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "883",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "884",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "NarcosNET",
    "title": "Narcos",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "884",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "885",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "VikingsNET",
    "title": "Vikings",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "885",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1006",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "SantaVSRudolphNET",
    "title": "Santa vs Rudolph",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1006",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1007",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GoldenGrimoireNET",
    "title": "Golden Grimoire",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1007",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1008",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "HalloweenJackNET",
    "title": "Halloween Jack",
    "shopId": "0",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1008",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2020-01-30 00:00:00",
    "updated_at": "2021-01-18 15:58:10",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1741",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "SpaceWarsNET",
    "title": "Space Wars",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "647",
    "bids": "3",
    "statIn": "1.2000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-02-16 21:02:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1742",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "WildWaterNET",
    "title": "Wild Water",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "648",
    "bids": "12",
    "statIn": "2.4000",
    "statOut": "1.0300",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-02-16 19:31:36",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1743",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "StarBurstNET",
    "title": "Star Burst",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "649",
    "bids": "1",
    "statIn": "0.1000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-02-16 21:00:37",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1744",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FlowersNET",
    "title": "Flowers",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "650",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-10-24 21:57:05",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1745",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FlowersChristmasNET",
    "title": "Flowers Christmas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20, 1.00, 5.00, 10.00, 20.00",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "12,35",
    "original_id": "651",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-03-03 11:38:48",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1746",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "DazzleMeNET",
    "title": "Dazzle Me",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1644962507;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1644962507;s:7:\\\"payload\\\";i:199;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "652",
    "bids": "1",
    "statIn": "0.2000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2022-02-14 23:01:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1747",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FruitShopChristmasNET",
    "title": "Fruit Shop Christmas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "653",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-09-08 03:00:23",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1748",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FruitShopNET",
    "title": "Fruit Shop",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "654",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-09-08 03:00:23",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1749",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GoBananasNET",
    "title": "Go Bananas",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "655",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-10-24 21:57:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1750",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "LightsNET",
    "title": "Lights",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "656",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:23",
    "updated_at": "2021-09-08 03:00:23",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1970",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "FortuneRangersNET",
    "title": "Fortune Rangers",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "876",
    "bids": "1",
    "statIn": "0.2000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-18 16:53:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1971",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "CreatureFromTheBlackLagoonNET",
    "title": "Creature From The Black Lagoon",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1644962297;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1644962297;s:7:\\\"payload\\\";i:199;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "877",
    "bids": "5",
    "statIn": "30.4000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-14 22:58:17",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1972",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "WingsOfRichesNET",
    "title": "Wings Of Riches",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "878",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 18:09:53",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1973",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "ReelRush2NET",
    "title": "Reel Rush 2",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "879",
    "bids": "2",
    "statIn": "0.4000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 19:38:14",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1974",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "TheWolfsBaneNET",
    "title": "The Wolfs Bane",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1647475294;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1647476107;s:7:\\\"payload\\\";i:0;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "880",
    "bids": "225",
    "statIn": "27617.5000",
    "statOut": "8.8000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-03-16 01:15:34",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1975",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GrandSpinnSuperpotNET",
    "title": "Grand Spinn Superpot",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645170136;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645170180;s:7:\\\"payload\\\";i:178;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "881",
    "bids": "22",
    "statIn": "0.4400",
    "statOut": "0.0600",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-17 08:43:00",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1976",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "TurnYourFortuneNET",
    "title": "Turn Your Fortune",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "882",
    "bids": "7",
    "statIn": "1.4000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 21:00:29",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1977",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "JumanjiNET",
    "title": "Jumanji",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "883",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 18:22:46",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1978",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "NarcosNET",
    "title": "Narcos",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "884",
    "bids": "0",
    "statIn": "0.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-14 22:59:52",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "1979",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "VikingsNET",
    "title": "Vikings",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645072659;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645072697;s:7:\\\"payload\\\";i:194;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "885",
    "bids": "19",
    "statIn": "4.2000",
    "statOut": "0.1600",
    "created_at": "2021-09-08 03:00:24",
    "updated_at": "2022-02-16 05:38:17",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2100",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "SantaVSRudolphNET",
    "title": "Santa vs Rudolph",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1006",
    "bids": "2",
    "statIn": "2.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-30 15:30:18",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2101",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "GoldenGrimoireNET",
    "title": "Golden Grimoire",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:2:{s:12:\\\"SpinWinLimit\\\";a:2:{s:8:\\\"timelife\\\";i:1645030529;s:7:\\\"payload\\\";i:0;}s:15:\\\"RtpControlCount\\\";a:2:{s:8:\\\"timelife\\\";i:1645030547;s:7:\\\"payload\\\";i:197;}}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1007",
    "bids": "3",
    "statIn": "3.0000",
    "statOut": "0.0000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-02-15 17:55:47",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  },
  {
    "id": "2102",
    "developer": "netent", "provider":"netent",
    "type": "",
    "vipLevel": "",
    "name": "HalloweenJackNET",
    "title": "Halloween Jack",
    "shopId": "1",
    "jpgId": "0",
    "label": "",
    "device": "2",
    "gamebank": "slots",
    "lines_percent_config_spin": "{\\\"line1\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_spin_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"15\\\",\\\"82_88\\\":\\\"9\\\",\\\"90_96\\\":\\\"7\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"12\\\",\\\"82_88\\\":\\\"8\\\",\\\"90_96\\\":\\\"6\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"10\\\",\\\"82_88\\\":\\\"7\\\",\\\"90_96\\\":\\\"5\\\"}}",
    "lines_percent_config_bonus": "{\\\"line1\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "lines_percent_config_bonus_bonus": "{\\\"line1_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line3_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line5_bonus\\\":{\\\"74_80\\\":\\\"100\\\",\\\"82_88\\\":\\\"50\\\",\\\"90_96\\\":\\\"40\\\"},\\\"line7_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line9_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"},\\\"line10_bonus\\\":{\\\"74_80\\\":\\\"50\\\",\\\"82_88\\\":\\\"40\\\",\\\"90_96\\\":\\\"30\\\"}}",
    "rezerv": "4",
    "cask": "",
    "advanced": "a:0:{}",
    "bet": "0.01, 0.02, 0.05, 0.10, 0.20",
    "scalemode": "",
    "slotviewstate": "",
    "view": "1",
    "denomination": "1.00",
    "category_temp": "",
    "original_id": "1008",
    "bids": "14",
    "statIn": "6.0000",
    "statOut": "0.1000",
    "created_at": "2021-09-08 03:00:25",
    "updated_at": "2022-03-16 00:00:39",
    "standard_rtp": "",
    "active": "false",
    "isFeatured": "false",
    "popularity": "1",
    "current_rtp": "0.0000",
    "rtpStatIn": "0.0000",
    "rtpStatOut": "0.0000"
  }
]
</file>

<file path="seeds/json/products.json">
[
  {
    "title": "Package One",
    "productType": "DEPOSIT_PACKAGE",
    "amountToReceiveInCents": 500,
    "totalDiscountInCents": 300,
    "bonusSpins": 1,
    "isPromo": false,
    "description": "blah blah ",
    "url": "https://nnzmufhldbsvvztlrrau.supabase.co/storage/v1/object/public/products/gems1.png",
    "priceInCents": 200
  },
  {
    "title": "Package Two",
    "productType": "DEPOSIT_PACKAGE",
    "amountToReceiveInCents": 1000,
    "totalDiscountInCents": 500,
    "bonusSpins": 2,
    "isPromo": false,
    "description": "blah blah ",
    "url": "https://nnzmufhldbsvvztlrrau.supabase.co/storage/v1/object/public/products/gems1.png",
    "priceInCents": 500
  },
  {
    "title": "Package Three",
    "productType": "DEPOSIT_PACKAGE",
    "amountToReceiveInCents": 1500,
    "totalDiscountInCents": 500,
    "bonusSpins": 3,
    "isPromo": false,
    "description": "blah blah ",
    "url": "https://nnzmufhldbsvvztlrrau.supabase.co/storage/v1/object/public/products/gems1.png",
    "priceInCents": 1000
  },
  {
    "title": "Package Four",
    "productType": "DEPOSIT_PACKAGE",
    "amountToReceiveInCents": 2000,
    "totalDiscountInCents": 500,
    "bonusSpins": 5,
    "isPromo": false,
    "description": "blah blah ",
    "url": "https://nnzmufhldbsvvztlrrau.supabase.co/storage/v1/object/public/products/gems1.png",
    "priceInCents": 1500
  }
]
</file>

<file path="seeds/games.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";
⋮----
import { Game as gamesTable } from "../../src/db/schema";
interface RawGame {
  id: string;
  developer: string;
  provider?: string;
  type: string;
  name: string;
  title: string;
  gamebank: string;
  statIn?: string;
  statOut?: string;
  [key: string]: any;
}
export async function seedGames(db: NodePgDatabase<typeof schema>)
</file>

<file path="seeds/gamespins.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";
import { rand, randFloat, randNumber, randPastDate } from "@ngneat/falso";
⋮----
import { AuthSession, Game, GameSession, GameSpin } from "../../src/db/schema";
export async function seedGameSpins(db: NodePgDatabase<typeof schema>)
</file>

<file path="seeds/operator.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";
⋮----
export async function seedOperator(db: NodePgDatabase<typeof schema>)
</file>

<file path="seeds/products.ts">
import { NodePgDatabase } from 'drizzle-orm/node-postgres'
⋮----
import productsData from './json/products.json'
export async function seedProducts(
  db: NodePgDatabase<typeof schema>,
  operatorId: string
)
</file>

<file path="seeds/reset.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";
import { sql } from "drizzle-orm";
⋮----
export async function resetDatabase(db: NodePgDatabase<typeof schema>)
</file>

<file path="seeds/users.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";
import {
  randNumber,
  randPassword,
  randPastDate,
  randUserName,
} from "@ngneat/falso";
import { eq } from "drizzle-orm";
⋮----
export async function seedUsers(
  db: NodePgDatabase<typeof schema>,
  count: number,
  operatorId: string,
)
export async function seedHardcodedUser(
  db: NodePgDatabase<typeof schema>,
  operatorId: string,
)
</file>

<file path="seeds/vip.ts">
import type { NodePgDatabase } from "drizzle-orm/node-postgres";
⋮----
import { VipLevel } from "../../src/db/schema";
⋮----
export async function seedVipLevels(db: NodePgDatabase<typeof schema>)
</file>

<file path="bot.ts">
import { randomUUID } from 'crypto'
import { WebSocket } from 'ws'
⋮----
interface UserStats {
    wallet: {
        initialBalance: number
        finalBalance: number
        difference: number
    }
    vipInfo: {
        initialLevel: number
        finalLevel: number
        initialXp: number
        finalXp: number
        xpEarned: number
        bonusXpEarned: number
    }
    spins: {
        total: number
        totalWagered: number
        totalWon: number
        netResult: number
    }
}
interface SpinResult {
    success: boolean
    winAmount: number
    balance: number
    xpEarned: number
    error?: string
    sessionExpired?: boolean
}
interface GameSession {
    token: string
    sessionId: string
    fingerprint: string
    userId: string
    gameId: string
    startTime: Date
    spins: Array<{
        spinId: string
        wager: number
        winAmount: number
        xpEarned: number
        timestamp: Date
    }>
}
async function fetchWithTimeout(
    url: string,
    options: RequestInit,
    timeout = 5000
)
async function createNewGameSession(): Promise<GameSession>
⋮----
async function runBot()
⋮----
// Track user stats
⋮----
// 1. Login to get the initial access token
⋮----
async function saveSpinData()
async function ensureValidSession(): Promise<GameSession>
</file>

<file path="db-test.ts">
import { eq } from "drizzle-orm";
import db from "../src/db";
import { users } from "../src/db/schema";
async function testDbConnection()
</file>

<file path="download-launchers.mjs">
// Helper to get __dirname in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
⋮----
/**
 * Creates a delay for a specified number of milliseconds.
 * @param {number} ms The number of milliseconds to wait.
 */
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
⋮----
// Path to games.json, assuming the script is in a `scripts` folder at the project root
const projectRoot = path.resolve(__dirname, '..');
const gamesJsonPath = path.join(projectRoot,  'data', 'games.json');
const outputDir = path.join(projectRoot,  'data', 'launchers');
⋮----
/**
 * Sanitizes a string to be used as a filename.
 * @param {string} name The string to sanitize.
 * @returns {string} The sanitized filename.
 */
const sanitizeFilename = (name) => {
⋮----
.replace(/™|®|&/g, '') // Remove special characters that are common in game titles
.replace(/[^a-z0-9\s-]/gi, '') // Remove remaining non-alphanumeric characters except spaces and hyphens
.trim() // Trim whitespace from ends
.replace(/\s+/g, '-') // Replace spaces with hyphens
.toLowerCase(); // Convert to lowercase
⋮----
/**
 * Downloads the launcher HTML for a single game.
 * @param {object} game The game object from games.json.
 */
async function downloadLauncher(game) {
⋮----
console.log(`No launcher_link for: ${game.name}. Skipping.`);
⋮----
const response = await fetch(game.launcher_link);
⋮----
console.error(`Failed to download from ${game.launcher_link}. Status: ${response.status} ${response.statusText}`);
⋮----
const rawHtml = await response.text();
const filename = `${sanitizeFilename(game.name)}.html`;
const outputPath = path.join(outputDir, filename);
⋮----
// Extract only the content within the <body> tag to avoid style conflicts when injected.
const bodyContentMatch = rawHtml.match(/<body[^>]*>([\s\S]*)<\/body>/i);
const contentToSave = bodyContentMatch ? bodyContentMatch[1].trim() : rawHtml;
⋮----
await fs.writeFile(outputPath, contentToSave);
console.log(`   -> Saved: ${filename}`);
⋮----
console.error(`   -> Error for ${game.name}:`, error.message);
⋮----
/**
 * Main function to read games.json and trigger downloads.
 */
async function main() {
⋮----
await fs.mkdir(outputDir, { recursive: true });
console.log(`Launchers will be saved in: ${outputDir}`);
⋮----
const gamesData = await fs.readFile(gamesJsonPath, 'utf-8');
const games = JSON.parse(gamesData);
⋮----
const gamesWithLaunchers = games.filter((game) => game.launcher_link);
console.log(`Found ${gamesWithLaunchers.length} games with launcher links out of ${games.length} total games. Starting downloads...`);
⋮----
// Process downloads sequentially with a delay to avoid being rate-limited.
⋮----
console.log(`(${count}/${gamesWithLaunchers.length}) Downloading: ${game.name}`);
await downloadLauncher(game);
await delay(250); // 250ms delay between each download
⋮----
console.log('All launcher downloads have been processed.');
⋮----
console.error('An error occurred during the script execution:', error);
⋮----
console.error(`Could not find games.json at ${gamesJsonPath}. Make sure the path is correct.`);
⋮----
main();
</file>

<file path="generate-manifest.mjs">
const launchersDir = path.resolve(process.cwd(), 'backend/data/launchers');
const gamesJsonPath = path.resolve(process.cwd(), 'backend/data/games.json');
const manifestPath = path.resolve(process.cwd(), 'frontend/public/games/redtiger/games-manifest.json');
⋮----
async function generateManifest() {
⋮----
const gamesData = JSON.parse(await fs.readFile(gamesJsonPath, 'utf-8'));
const launcherFiles = await fs.readdir(launchersDir);
⋮----
if (path.extname(file) === '.html') {
const id = path.basename(file, '.html');
const filePath = path.join(launchersDir, file);
const content = await fs.readFile(filePath, 'utf-8');
⋮----
const gameIdMatch = content.match(/gameId:\s*'([^']+)'/);
const gameAppIdMatch = content.match(/gameAppId:\s*'([^']+)'/);
const hasGambleMatch = content.match(/hasGamble:\s*(true|false)/);
⋮----
const gameInfo = gamesData.find(g => g.launcher_link?.endsWith(gameAppId) || g.launcher_link?.endsWith(gameId));
⋮----
games.push({
⋮----
name: gameInfo ? gameInfo.name : id.replace(/-/g, ' '),
⋮----
await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2));
console.log(`Manifest generated at ${manifestPath}`);
⋮----
console.error('Error generating manifest:', error);
⋮----
generateManifest();
</file>

<file path="key.txt">
38a5236d026377c0951d73c7299457447a1ce14ae306c237031ac1722967b32f915ac8e3730ab2e4fbe13aca22ac7894d5105766a33da37e9f349ba71c5ff4a25cfb9b0b125491b120d61d306856eed2b68def448f31abc8f4ee1cc7492e31b57b8ca3fd4ad3a6289565410aca3c51981379557cdea5e6262c8e7535ed958cd61664ab6de598b487fe8798036fa365dd9aaa172aa591db14c6989a40f6876bbc1f026bd849b6feb1bc55687a5dd8e10ae5b5190811a666c20656f8a6c14c19100b95800db4952be19e51b928b2bc59c9ac9a3ac79299adbab131901d845e927f8d3a8417cfae0614532741c8afcd8a0a97bf319abef751b1f4a0b53dd1a35f38da17bd240ce159e48fe6871b3eb764abe76f3d34a86c79b73eda0aad03e73cc1a87422d0429ed187885f122d6e9083cd2784f60c758a9bce270660a874b3f6c2dd3fb21d35ae1850061358b4288809d2f60b52e50446971e2cebf23a21e22f61bce64da3f60baa32f2dd115a32f917ceb001e6388b
</file>

<file path="manual-decrypt.ts">
import { rc4Api } from '../src/lzw';
import fs from 'fs';
import path from 'path';
const lzwDecode =  (t) =>
⋮----
// 1. Read the key and message from files.
⋮----
// 2. Decrypt the raw message from the server.
⋮----
// 3. Decompress the decrypted data using LZW.
⋮----
// 4. As a final verification, let's parse the JSON.
</file>

<file path="message.txt">
lzw:{"messagă":[],"replayBaseUrlĉ"https://ďđē.nolimitcįy.com/"čgaĂCĬentConfiguratińĉĀĻmbleGļeRoundľoėIŁervalHŚrsĉ24čshowNetPşįōnĉfŦėčopţŋorĜHOMEPAGE_PUBLICĹ"ĪĬĮtWinnţsEnaœedĉtruečŽstSpƞƣƥŔƨ:ƪƬĺŗřśŝlşeštţťě:90čautoPĒySŵŌngū:ĀǍǏħyAlǁwƧƩƫƭ"ǜƁǒƾŜǙ[1ǋ25,5ǋǰǱǵ,Ƿ0ČǨǎǪēRequiďsSǝLşsLĭįżžǧtŉnOffAǿǞOnBńuǙŽlė}ůűwSĭuĒǅdMaxȫmPēŚtǥƻ"őŘŚŜŞŠŢŤŦTyƂĜDAYSƗhidŘĠȑȤǧőƦǄoȟnȡǠǢǤƹǦȧŲRĠWŋţmarkɓſ"crɆǏCŉďncyRȬĈɠȺboşȮBŵȋckƧȂeȤɭǧŰŲŖĂVơźšGȅʖɏeȹǧɿʁƧʃtɝŲɟƺʍȨȰxƝnProbƥiĬtyɦǅrɩɫʌčbʊŲȉaʇʪȂưricŌŎ:ȣɮjŉisdˆˈnNŗɈEFAULTƗexƪaƲƞʢǣƸʥƀƂŊǏrGʭupĜNOƔMITC˷YƗɖŔFifʳ˿́ǟǡʣ˧ɡāƞȳˣnTĭʚ:ǋāȱšaˇivĲšMƞǎɼ̓feŋŉeBuyƵƦ̈ɾʀưʟŵEˠŊřwǙ˨ɯǁʆǔğƞǘŏ"ʎwʛǌ̆ȩǕ̾ʺ"ȡeǔĄź̏Ă͎͊͂s͐̐UŜţʌȦǨ̘ń̍ʛ͝ȼšfòˑsǞ˕͒:"˿ď š The ŨŔ 2ƗɩxMȬŌđi͛:6ǵ0̓;΀l΂Ŀrʬʮʰʲyĉ17ΉἸvīŋʱĲĜǰ.0 (̲ƪeĂ)"͝cɵŀɸ̀ĵɐĜUSDƗsyŒīĜ$ Ɨʼͦď͢črɒǚ́̾Ŕĉ0.9607Ʈ̣Ȕȇ̀BOOSTED_BE˝ω͖Ǘό̒Ϗϑ9͝FREESPIN_LEVEL_1̀ϥgϧώϐǰϬϮϰϲϴ϶ϸϺͼϤϋ̑Ё634ЄϯϱϳϵϷϹ_3ϽЎύϩ33͝GUARANϝϞ_DWЦFНϦЏϩ42͝LUCKYЬЧWбϿгЂж}ͣƽȾd̲ƳɱšDēǙǊφ̣ΔCͶʆ̀wƞn̾Ǚ0̢̤͝ďʠ͊ʼtLevʊǙĀѥΡΣ0ρʄѨѪĉ["ώ2Ѱčώ4Ѻѷ.ϑƗώ8Ѿ1ѯƗ҆ѹ҈ҀѾ2҇čҎѽƗҎ҄Ɨ3.Ҋčҗҁč4ҏ"5ҟ6ҟ8ҟ΢Ή҈ҞҨč1ҥҫ"ŭҟ3ҎүѽҢώү҄ҦΉ҇ǽaťʱƶ̦ѲѩʋĊѿҙѿҒѻҌ҂.ҕҬҦҘ҅ӍҐҟґҍӏѾҗӉқѾҪѾҡүңҹһҦӠ҈ҮҍӨҚҴӟҸѾϑҤӰ҈ҼҨǽśҿaӁƦʠѧӅǮ]џϕ̥ӾѳӆĀϭЕЇИЊϻѵӈѾѼԒӕѿӐ"҆ү҉ӔҜҰӗ.ӋԞԗӜӛԕӬҠҢҤӦԚԧҭӗԧҳҟҶӣӴčҺԚӶѰǽԊІЗЉКЌѶѸԔԡώԝ҃ӔԚӓҋԝӮғԠәԣՋҚԦҟӢӱԪԸӧҦӪғ԰ՎҝԵ"ӲҹբǷҽčԼЖЈЙϺМӇՃӎՅԕՈҋՊӉ҆ՍԟԡҔԥӝՕү՗ƗӤѾ՝ҬզԭֆҰ՟ԲբդօզԹ"ǽФЦШЪϟЭЯԐձӌճՇӚնӔոԕՠԞռ֡ՔտԝԧւčքƗ֊ҧ҅։ԯҲ֦ԳӱբԷ҅֒ǽикмDо֜ՓӊԔ֠ԗԙ֣ԜәүӘՏՒ֫ӟՖԩӥ՚Ԭ՜ֶүԱҵ֎ֻ֑ӴǽϙϛϝϟϡϣՂ׆ԓӎ׉Չ׌Ռ׎ә֨גԥ֬וӣՙֽ՛Ԛ֊ұלָןӳһע͝ŦɞdFԄďɅƂǮ"ϙNζϠU˻čפϜЫרƗEXTЧ_իƗGAMƓƏFIFTмةثؖ"ؤئ϶_ϳTOϠOؒɌč˳˵˷_WϳNERɌҾ͆Ƨʐe؊ѡɼѶؘצϠϢƗؚّϢ_X_ROWؼ"؝؟AءЇƗժԌԿϺϼؗغؓBؕ٦ЅիԍՀٱԋԾխЛأإا_خجپتجٻسƏضظؑζأХЧЩϯ֙ЮRаč׀лнAпؽ˴I˶Tفكمهͅ؈ٍϖӃt؏ٖקٔթٲ٨ٹ٫ͯڮٸԎͼڭٷլԎМč֕ڍ֘Ьڑړ"ڕׂׄو؈ًMoɐԁƼͭĀκμlVŦƬѫ"Mϼωկ1ǳ"4ĉѽč5ĉ҄֯Ζǵ͝MЌĀۜ̓۠:۝ۣۡ̓6ĉ75зۭۚĉ6ҝۥ۳۱۾գĉ3ўčMկۼǉۿ۱2܁܆ۧ:۩ڔ۬"կ۞۰ϓҠΖŮ܄:ǲ۪۰܋8܍11܁ǲܒѽз܊ܗۡ܍܃ۤ܎ܒ2ж܈ܳ܋ܛ۰ǰܩ۵܅۹ڔܣܯ:ܞ۰ܲΖ܏ܟ21зܹ݄݆۽܁1݊۶ܠўԃَ̧y͑ăʠ۔lƬѵĀƤͭڲڸٴ٪Ɨʳɇͮ٧ϳƗadˑ˓ɄɆُǽp˅c̑ΘȦݤ˖ݮڳڹٵčݬ̑ݧԽNݱݳŹńݶ؎ѵݹݻ̑ѹ܇ހݦݯބծݫݷĜޚތݴźސݸčݺˆ̑ϑޗƘށرڌ֗ڏۀ֛ކޞނڸޡގƤl؍ޥ"ާݼ܅ުݿެݦۄڗڙ"އޟރ޸ݵ޻ݷۍ޾ޔΖ۸߃ݥވڪٓ˝޴ݭؐϚؙګߛǨލߎ޼ߑ޿ޕ.۹ǽˏ˃ˬ͍tɧ͊ďѴĊѶۙƗLڶۃۤؗAٕ߿čθČ߷߽ۘ۠ࠂ߈θࠂƗࠃ,ѶLڱٟLڻؐࠁ"DXࠍ֓ࠏۘࠕMࠆߺࠀࠣࠌࠄۃڱ۫Ɨ߸߾ࠛࠥࠝࠔࠪڱࠑٟ࠭࠘ࠃҾcήmȬɧdǬdʪύčmۋވ˳RMALƗƠˠۊδͮࡇࡉࡋčwĖڥԅ̨Ѥ̮ʂŵ͊fߴͪƞȍéࡂ߉o߱l̍sǑēɟ̓ۑɿ࡫izُǯǺࡹܨࡻࠄࡻࡺࡺࡽࡿࡾ1ࢁࢃࢀࠏࢆࢃࢅࢂǺ]ǽďࡄѩdSλࡳǮ[ɛǡ,࢙l࢛Ȭ࢚࢝࢜࢞࢜ࠄࢡࢦ࢟ࢢࢠࢨࢤࠏࢧࢣࢫࢰࢯǡࢥࢱࢪࢲࢶࢸࢴࢷࢩࢼࢮlࢺࢸࢽࢵࢩࢎࡃ΁i΃΅ܨɯoƞݠۖѵ[ǋ࣓,ࣔǼࠏ࣒ࣖࣕࣚࣗࣛࣞࣜࣙࣖࠄࣣ࣡ࣛࣟࣥӸpgŊɐŃݡmŻĊˋƭࣳ,ࣵࣳ࠸࠺࠼ȮFS࠿ࡁ̒ࡕяWńTࡩŦ࠿ࡧςƅٌࡡƳnsAďa࣑ࢾࣂࢻࢬ࢘ࣃखࢾࣀगࣁझࢭछणࢷञजतࢿढघनࣄǽscŋʶŃśȸँ"ࡠeăए࡭ǒࡰݙڦѫ͝࢐ӻћǗFߴ࡬ऊŦaɷɼĀطTࡊϠࡊШCEΡΚ҇͝ʯĒ्क़Ιҟ̋व"oɬčɏĜaz0tĪxzoq-Ѿ˟ŶऽrKeΕͮa4f77Žc3f3d193949141С2b35c9c5dŭ4bѹf0ݲdरআbcѽbচfdȘ2c8ࡥ3bѰ}
</file>

<file path="parse-games.js">
function parseGamesFromHtml(inputPath, outputPath) {
⋮----
const html = fs.readFileSync(inputPath, 'utf-8');
const $ = cheerio.load(html);
⋮----
$('.game-card').each((index, element) => {
const gameCard = $(element);
const name = gameCard.find('.game-card_title_text').text().trim();
const image = gameCard.find('.game-card__image').attr('src');
const launcher_link = gameCard.find('.play-demo_link a').attr('href');
⋮----
games.push(gameData);
⋮----
const jsonData = JSON.stringify(games, null, 2);
fs.writeFileSync(outputPath, jsonData, 'utf-8');
console.log(`✅ Successfully parsed ${games.length} games and saved to ${outputPath}`);
⋮----
console.error(`Error processing file at ${inputPath}:`, error);
⋮----
const outputDir = path.join(__dirname, '..', 'data');
if (!fs.existsSync(outputDir)) {
fs.mkdirSync(outputDir, { recursive: true });
⋮----
const outputFilePath = path.join(outputDir, 'games.json');
parseGamesFromHtml(inputFilePath, outputFilePath);
</file>

<file path="parser.js">
function parseGamesFromHtml(inputPath, outputPath) {
⋮----
const html = fs.readFileSync(inputPath, 'utf-8');
const $ = cheerio.load(html);
games.push(gameData);
⋮----
const jsonData = JSON.stringify(games, null, 2);
fs.writeFileSync(outputPath, jsonData, 'utf-8');
console.log(`✅ Successfully parsed ${games.length} games and saved to ${outputPath}`);
} catch (error) {
console.error(`Error processing file at ${inputPath}:`, error);
⋮----
const outputDir = path.join(__dirname, '..', 'data');
if (!fs.existsSync(outputDir)) {
fs.mkdirSync(outputDir, { recursive: true });
⋮----
const outputFilePath = path.join(outputDir, 'games.json');
parseGamesFromHtml(inputFilePath, outputFilePath);
</file>

<file path="seed.ts">
import chalk from "chalk";
import dotenv from 'dotenv';
⋮----
import db from "../src/db";
import { seedGames } from "./seeds/games";
import { seedGameSpins } from "./seeds/gamespins";
import { seedOperator } from "./seeds/operator";
import { seedProducts } from "./seeds/products";
import { resetDatabase } from "./seeds/reset";
import { seedHardcodedUser, seedUsers } from "./seeds/users";
import { seedVipLevels } from "./seeds/vip";
⋮----
async function main()
</file>

<file path="assets/anim/avatar_xp.json">
{
  "frames": [

    {
      "filename": "FX_Sym_Win_00000.jpg",
      "frame": { "x": 1, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00001.jpg",
      "frame": { "x": 1, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00002.jpg",
      "frame": { "x": 1, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00003.jpg",
      "frame": { "x": 1, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00004.jpg",
      "frame": { "x": 1, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00005.jpg",
      "frame": { "x": 93, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00006.jpg",
      "frame": { "x": 185, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00007.jpg",
      "frame": { "x": 277, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00008.jpg",
      "frame": { "x": 369, "y": 1, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00009.jpg",
      "frame": { "x": 93, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00010.jpg",
      "frame": { "x": 93, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00011.jpg",
      "frame": { "x": 93, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00012.jpg",
      "frame": { "x": 93, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00013.jpg",
      "frame": { "x": 185, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00014.jpg",
      "frame": { "x": 277, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00015.jpg",
      "frame": { "x": 369, "y": 93, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00016.jpg",
      "frame": { "x": 185, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00017.jpg",
      "frame": { "x": 185, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00018.jpg",
      "frame": { "x": 185, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00019.jpg",
      "frame": { "x": 277, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00020.jpg",
      "frame": { "x": 369, "y": 185, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00021.jpg",
      "frame": { "x": 277, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00022.jpg",
      "frame": { "x": 277, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00023.jpg",
      "frame": { "x": 369, "y": 277, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    },
    {
      "filename": "FX_Sym_Win_00026.jpg",
      "frame": { "x": 369, "y": 369, "w": 90, "h": 90 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 90, "h": 90 },
      "sourceSize": { "w": 90, "h": 90 }
    }
  ],
  "meta": {
    "app": "https://www.codeandweb.com/texturepacker",
    "version": "1.0",
    "image": "avatar_xp.png",
    "format": "RGBA8888",
    "size": { "w": 460, "h": 460 },
    "scale": "0.5",
    "smartupdate": "$TexturePacker:SmartUpdate:b50fba8a4fee6b1f579ef4c16ef7857f:a5c0e1812a01acf3c65da25789d792c4:0b6a5c7eba8d1f172ef74690c1905054$"
  }
}
</file>

<file path="assets/anim/fireBlue.json">
{
    "frames": {
        "Logo 7 instance 10000": {
            "frame": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10001": {
            "frame": {
                "x": 0,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10002": {
            "frame": {
                "x": 0,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10003": {
            "frame": {
                "x": 0,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10004": {
            "frame": {
                "x": 0,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10005": {
            "frame": {
                "x": 0,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10006": {
            "frame": {
                "x": 83,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10007": {
            "frame": {
                "x": 83,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10008": {
            "frame": {
                "x": 83,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10009": {
            "frame": {
                "x": 83,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10010": {
            "frame": {
                "x": 83,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10011": {
            "frame": {
                "x": 83,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10012": {
            "frame": {
                "x": 166,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10013": {
            "frame": {
                "x": 166,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10014": {
            "frame": {
                "x": 166,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10015": {
            "frame": {
                "x": 166,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10016": {
            "frame": {
                "x": 166,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10017": {
            "frame": {
                "x": 166,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10018": {
            "frame": {
                "x": 249,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10019": {
            "frame": {
                "x": 249,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10020": {
            "frame": {
                "x": 249,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10021": {
            "frame": {
                "x": 249,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10022": {
            "frame": {
                "x": 249,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10023": {
            "frame": {
                "x": 249,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10024": {
            "frame": {
                "x": 332,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10025": {
            "frame": {
                "x": 332,
                "y": 82,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10026": {
            "frame": {
                "x": 332,
                "y": 164,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10027": {
            "frame": {
                "x": 332,
                "y": 246,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10028": {
            "frame": {
                "x": 332,
                "y": 328,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        },
        "Logo 7 instance 10029": {
            "frame": {
                "x": 332,
                "y": 410,
                "w": 83,
                "h": 82
            },
            "rotated": false,
            "trimmed": false,
            "spriteSourceSize": {
                "x": 0,
                "y": 0,
                "w": 83,
                "h": 82
            },
            "sourceSize": {
                "w": 83,
                "h": 82
            }
        }
    },
    "meta": {
        "app": "Adobe Animate",
        "version": "20.5.1.31044",
        "image": "fireBlue.png",
        "format": "RGBA8888",
        "size": {
            "w": 512,
            "h": 512
        },
        "scale": "1"
    }
}
</file>

<file path="assets/anim/leadernew.json">
{
  "frames": [

    {
      "filename": "leaderboard-0.png",
      "frame": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-1.png",
      "frame": { "x": 65, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-2.png",
      "frame": { "x": 130, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-3.png",
      "frame": { "x": 195, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-4.png",
      "frame": { "x": 260, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-5.png",
      "frame": { "x": 325, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-6.png",
      "frame": { "x": 390, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-7.png",
      "frame": { "x": 455, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-8.png",
      "frame": { "x": 520, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-9.png",
      "frame": { "x": 585, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-10.png",
      "frame": { "x": 650, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-11.png",
      "frame": { "x": 715, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-12.png",
      "frame": { "x": 780, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-13.png",
      "frame": { "x": 845, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-14.png",
      "frame": { "x": 910, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-15.png",
      "frame": { "x": 975, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-16.png",
      "frame": { "x": 1040, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-17.png",
      "frame": { "x": 1105, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-18.png",
      "frame": { "x": 1170, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-19.png",
      "frame": { "x": 1235, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-20.png",
      "frame": { "x": 1300, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-21.png",
      "frame": { "x": 1365, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-22.png",
      "frame": { "x": 1430, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-23.png",
      "frame": { "x": 1495, "y": 0, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-24.png",
      "frame": { "x": 0, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-25.png",
      "frame": { "x": 65, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-26.png",
      "frame": { "x": 130, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-27.png",
      "frame": { "x": 195, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-28.png",
      "frame": { "x": 260, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-29.png",
      "frame": { "x": 325, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-30.png",
      "frame": { "x": 390, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-31.png",
      "frame": { "x": 455, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-32.png",
      "frame": { "x": 520, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-33.png",
      "frame": { "x": 585, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-34.png",
      "frame": { "x": 650, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-35.png",
      "frame": { "x": 715, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-36.png",
      "frame": { "x": 780, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-37.png",
      "frame": { "x": 845, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-38.png",
      "frame": { "x": 910, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-39.png",
      "frame": { "x": 975, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-40.png",
      "frame": { "x": 1040, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-41.png",
      "frame": { "x": 1105, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-42.png",
      "frame": { "x": 1170, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-43.png",
      "frame": { "x": 1235, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-44.png",
      "frame": { "x": 1300, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-45.png",
      "frame": { "x": 1365, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-46.png",
      "frame": { "x": 1430, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    },
    {
      "filename": "leaderboard-47.png",
      "frame": { "x": 1495, "y": 69, "w": 65, "h": 69 },
      "rotated": false,
      "trimmed": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 65, "h": 69 },
      "sourceSize": { "w": 65, "h": 69 }
    }
  ],
  "meta": {
    "app": "https://www.codeandweb.com/texturepacker",
    "version": "1.0",
    "image": "/tmp/sprites/leadernew.png",
    "format": "RGBA8888",
    "size": { "w": 1560, "h": 138 },
    "scale": "0.75",
    "smartupdate": "$TexturePacker:SmartUpdate:be3bfbc1359df1f6a2692e10cbbfaedb:c6367f6f1c6c9ceacd3c1a5b7223969b:d7fe8b6cdaa71fb7129620343088dc0c$"
  }
}
</file>

<file path="assets/anim/logo_shine.json">
{"frames": [

{
	"filename": "frame_00_delay-0.04s.gif",
	"frame": {"x":1,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_01_delay-0.04s.gif",
	"frame": {"x":83,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_02_delay-0.04s.gif",
	"frame": {"x":165,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_03_delay-0.04s.gif",
	"frame": {"x":247,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_04_delay-0.04s.gif",
	"frame": {"x":329,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_05_delay-0.04s.gif",
	"frame": {"x":411,"y":1,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_06_delay-0.04s.gif",
	"frame": {"x":1,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_07_delay-0.04s.gif",
	"frame": {"x":83,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_08_delay-0.04s.gif",
	"frame": {"x":165,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_09_delay-0.04s.gif",
	"frame": {"x":247,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_10_delay-0.04s.gif",
	"frame": {"x":329,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_11_delay-0.04s.gif",
	"frame": {"x":411,"y":54,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_12_delay-0.04s.gif",
	"frame": {"x":1,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_13_delay-0.04s.gif",
	"frame": {"x":1,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_14_delay-0.04s.gif",
	"frame": {"x":1,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_15_delay-0.04s.gif",
	"frame": {"x":1,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_16_delay-0.04s.gif",
	"frame": {"x":1,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_17_delay-0.04s.gif",
	"frame": {"x":1,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_18_delay-0.04s.gif",
	"frame": {"x":1,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_19_delay-0.04s.gif",
	"frame": {"x":83,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_20_delay-0.04s.gif",
	"frame": {"x":165,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_21_delay-0.04s.gif",
	"frame": {"x":247,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_22_delay-0.04s.gif",
	"frame": {"x":329,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_23_delay-0.04s.gif",
	"frame": {"x":411,"y":107,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_24_delay-0.04s.gif",
	"frame": {"x":83,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_25_delay-0.04s.gif",
	"frame": {"x":83,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_26_delay-0.04s.gif",
	"frame": {"x":83,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_27_delay-0.04s.gif",
	"frame": {"x":83,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_28_delay-0.04s.gif",
	"frame": {"x":83,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_29_delay-0.04s.gif",
	"frame": {"x":83,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_30_delay-0.04s.gif",
	"frame": {"x":165,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_31_delay-0.04s.gif",
	"frame": {"x":247,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_32_delay-0.04s.gif",
	"frame": {"x":329,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_33_delay-0.04s.gif",
	"frame": {"x":411,"y":160,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_34_delay-0.04s.gif",
	"frame": {"x":165,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_35_delay-0.04s.gif",
	"frame": {"x":247,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_36_delay-0.04s.gif",
	"frame": {"x":329,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_37_delay-0.04s.gif",
	"frame": {"x":411,"y":213,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_38_delay-0.04s.gif",
	"frame": {"x":165,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_39_delay-0.04s.gif",
	"frame": {"x":165,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_40_delay-0.04s.gif",
	"frame": {"x":165,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_41_delay-0.04s.gif",
	"frame": {"x":165,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_42_delay-0.04s.gif",
	"frame": {"x":247,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_43_delay-0.04s.gif",
	"frame": {"x":329,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_44_delay-0.04s.gif",
	"frame": {"x":411,"y":266,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_45_delay-0.04s.gif",
	"frame": {"x":247,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_46_delay-0.04s.gif",
	"frame": {"x":247,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_47_delay-0.04s.gif",
	"frame": {"x":247,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_48_delay-0.04s.gif",
	"frame": {"x":329,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_49_delay-0.04s.gif",
	"frame": {"x":411,"y":319,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_50_delay-0.04s.gif",
	"frame": {"x":329,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_51_delay-0.04s.gif",
	"frame": {"x":411,"y":372,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_52_delay-0.04s.gif",
	"frame": {"x":329,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
},
{
	"filename": "frame_53_delay-0.04s.gif",
	"frame": {"x":411,"y":425,"w":80,"h":51},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":80,"h":51},
	"sourceSize": {"w":80,"h":51}
}],
"meta": {
	"app": "https://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "logo_shine.png",
	"format": "RGBA8888",
	"size": {"w":492,"h":477},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:3ef8692086ae53baaa67d8bdbd71f45d:0b9d1251883753c15a7ea46cc0404421:cd3d03c84f9a6d39a7b389d1d35eedef$"
}
}
</file>

<file path="assets/anim/part0.json">
{
  "frames": {

    "All 47 instance 10000":
{
  "frame": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10001":
{
  "frame": { "x": 0, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10002":
{
  "frame": { "x": 0, "y": 188, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10003":
{
  "frame": { "x": 0, "y": 282, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10004":
{
  "frame": { "x": 0, "y": 376, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10005":
{
  "frame": { "x": 94, "y": 0, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10006":
{
  "frame": { "x": 94, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10007":
{
  "frame": { "x": 94, "y": 188, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10008":
{
  "frame": { "x": 94, "y": 282, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10009":
{
  "frame": { "x": 94, "y": 376, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10010":
{
  "frame": { "x": 188, "y": 0, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10011":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10012":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10013":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10014":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10015":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10016":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10017":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10018":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10019":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10020":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10021":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10022":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10023":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
},
    "All 47 instance 10024":
{
  "frame": { "x": 188, "y": 94, "w": 94, "h": 94 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 94, "h": 94 },
  "sourceSize": { "w": 94, "h": 94 }
}
  },
  "meta": {
    "app": "Adobe Animate",
    "version": "20.5.1.31044",
    "image": "part0.png",
    "format": "RGBA8888",
    "size": { "w": 512, "h": 512 },
    "scale": "1"
  }
}
</file>

<file path="assets/anim/part1.json">
{
  "frames": {

    "Slots 51 instance 10000":
{
  "frame": { "x": 0, "y": 878, "w": 112, "h": 85 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 3, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10001":
{
  "frame": { "x": 112, "y": 878, "w": 112, "h": 85 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 3, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10002":
{
  "frame": { "x": 0, "y": 792, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10003":
{
  "frame": { "x": 112, "y": 792, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10004":
{
  "frame": { "x": 114, "y": 176, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10005":
{
  "frame": { "x": 114, "y": 262, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10006":
{
  "frame": { "x": 0, "y": 620, "w": 113, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10007":
{
  "frame": { "x": 113, "y": 620, "w": 113, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10008":
{
  "frame": { "x": 226, "y": 703, "w": 113, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10009":
{
  "frame": { "x": 226, "y": 616, "w": 113, "h": 87 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10010":
{
  "frame": { "x": 0, "y": 532, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10011":
{
  "frame": { "x": 113, "y": 532, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10012":
{
  "frame": { "x": 114, "y": 0, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10013":
{
  "frame": { "x": 114, "y": 88, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10014":
{
  "frame": { "x": 226, "y": 176, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10015":
{
  "frame": { "x": 227, "y": 0, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10016":
{
  "frame": { "x": 0, "y": 268, "w": 114, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10017":
{
  "frame": { "x": 0, "y": 356, "w": 114, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10018":
{
  "frame": { "x": 0, "y": 90, "w": 114, "h": 89 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10019":
{
  "frame": { "x": 0, "y": 0, "w": 114, "h": 90 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10020":
{
  "frame": { "x": 0, "y": 179, "w": 114, "h": 89 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10021":
{
  "frame": { "x": 0, "y": 356, "w": 114, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10022":
{
  "frame": { "x": 0, "y": 444, "w": 114, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10023":
{
  "frame": { "x": 227, "y": 88, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10024":
{
  "frame": { "x": 226, "y": 264, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10025":
{
  "frame": { "x": 114, "y": 88, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10026":
{
  "frame": { "x": 114, "y": 0, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10027":
{
  "frame": { "x": 226, "y": 352, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10028":
{
  "frame": { "x": 226, "y": 440, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10029":
{
  "frame": { "x": 226, "y": 528, "w": 113, "h": 88 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 1, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10030":
{
  "frame": { "x": 0, "y": 706, "w": 113, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10031":
{
  "frame": { "x": 113, "y": 706, "w": 113, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10032":
{
  "frame": { "x": 226, "y": 789, "w": 113, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 1, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10033":
{
  "frame": { "x": 114, "y": 348, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10034":
{
  "frame": { "x": 114, "y": 262, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10035":
{
  "frame": { "x": 114, "y": 434, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10036":
{
  "frame": { "x": 112, "y": 792, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10037":
{
  "frame": { "x": 224, "y": 875, "w": 112, "h": 86 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 2, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10038":
{
  "frame": { "x": 112, "y": 878, "w": 112, "h": 85 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 3, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
},
    "Slots 51 instance 10039":
{
  "frame": { "x": 0, "y": 878, "w": 112, "h": 85 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 2, "y": 3, "w": 114, "h": 90 },
  "sourceSize": { "w": 114, "h": 90 }
}
  },
  "meta": {
    "app": "Adobe Animate",
    "version": "20.5.1.31044",
    "image": "part1.png",
    "format": "RGBA8888",
    "size": { "w": 512, "h": 1024 },
    "scale": "1"
  }
}
</file>

<file path="assets/anim/part2.json">
{
  "frames": {

    "Fish 54 instance 10000":
{
  "frame": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10001":
{
  "frame": { "x": 116, "y": 0, "w": 116, "h": 103 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10002":
{
  "frame": { "x": 232, "y": 0, "w": 116, "h": 103 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10003":
{
  "frame": { "x": 116, "y": 103, "w": 116, "h": 102 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10004":
{
  "frame": { "x": 232, "y": 103, "w": 116, "h": 102 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10005":
{
  "frame": { "x": 232, "y": 205, "w": 116, "h": 101 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10006":
{
  "frame": { "x": 348, "y": 205, "w": 116, "h": 101 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10007":
{
  "frame": { "x": 0, "y": 206, "w": 116, "h": 101 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10008":
{
  "frame": { "x": 116, "y": 307, "w": 116, "h": 100 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10009":
{
  "frame": { "x": 116, "y": 407, "w": 116, "h": 100 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10010":
{
  "frame": { "x": 116, "y": 407, "w": 116, "h": 100 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10011":
{
  "frame": { "x": 232, "y": 306, "w": 116, "h": 101 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10012":
{
  "frame": { "x": 348, "y": 306, "w": 116, "h": 101 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10013":
{
  "frame": { "x": 0, "y": 307, "w": 116, "h": 101 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10014":
{
  "frame": { "x": 348, "y": 103, "w": 116, "h": 102 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10015":
{
  "frame": { "x": 232, "y": 205, "w": 116, "h": 101 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10016":
{
  "frame": { "x": 116, "y": 205, "w": 116, "h": 102 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10017":
{
  "frame": { "x": 348, "y": 0, "w": 116, "h": 103 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10018":
{
  "frame": { "x": 0, "y": 103, "w": 116, "h": 103 },
  "rotated": false,
  "trimmed": true,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
},
    "Fish 54 instance 10019":
{
  "frame": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "rotated": false,
  "trimmed": false,
  "spriteSourceSize": { "x": 0, "y": 0, "w": 116, "h": 103 },
  "sourceSize": { "w": 116, "h": 103 }
}
  },
  "meta": {
    "app": "Adobe Animate",
    "version": "20.5.1.31044",
    "image": "part2.png",
    "format": "RGBA8888",
    "size": { "w": 512, "h": 512 },
    "scale": "1"
  }
}
</file>

<file path="assets/anim/rewards.json">
{"frames": [

{
	"filename": "GiftCenterAnimation_0000.png",
	"frame": {"x":233,"y":526,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0001.png",
	"frame": {"x":233,"y":526,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0002.png",
	"frame": {"x":233,"y":526,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0003.png",
	"frame": {"x":349,"y":527,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0004.png",
	"frame": {"x":349,"y":527,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0005.png",
	"frame": {"x":349,"y":527,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0006.png",
	"frame": {"x":1,"y":431,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0007.png",
	"frame": {"x":1,"y":431,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0008.png",
	"frame": {"x":1,"y":431,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0009.png",
	"frame": {"x":349,"y":329,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0010.png",
	"frame": {"x":349,"y":329,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0011.png",
	"frame": {"x":349,"y":329,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0012.png",
	"frame": {"x":117,"y":326,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0013.png",
	"frame": {"x":117,"y":326,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0014.png",
	"frame": {"x":117,"y":326,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0015.png",
	"frame": {"x":1,"y":331,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0016.png",
	"frame": {"x":1,"y":331,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0017.png",
	"frame": {"x":1,"y":331,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0018.png",
	"frame": {"x":117,"y":426,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0019.png",
	"frame": {"x":117,"y":426,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0020.png",
	"frame": {"x":117,"y":426,"w":114,"h":98},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":12,"w":114,"h":98},
	"sourceSize": {"w":114,"h":98}
},
{
	"filename": "GiftCenterAnimation_0021.png",
	"frame": {"x":233,"y":427,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0022.png",
	"frame": {"x":233,"y":427,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0023.png",
	"frame": {"x":233,"y":427,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0024.png",
	"frame": {"x":233,"y":624,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0025.png",
	"frame": {"x":233,"y":624,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0026.png",
	"frame": {"x":233,"y":624,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0027.png",
	"frame": {"x":117,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0028.png",
	"frame": {"x":117,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0029.png",
	"frame": {"x":117,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0030.png",
	"frame": {"x":1,"y":629,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0031.png",
	"frame": {"x":1,"y":629,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0032.png",
	"frame": {"x":1,"y":629,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0033.png",
	"frame": {"x":349,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0034.png",
	"frame": {"x":349,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0035.png",
	"frame": {"x":349,"y":625,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0036.png",
	"frame": {"x":233,"y":722,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0037.png",
	"frame": {"x":233,"y":722,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0038.png",
	"frame": {"x":233,"y":722,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0039.png",
	"frame": {"x":349,"y":428,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0040.png",
	"frame": {"x":349,"y":428,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0041.png",
	"frame": {"x":349,"y":428,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0042.png",
	"frame": {"x":117,"y":526,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0043.png",
	"frame": {"x":117,"y":526,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0044.png",
	"frame": {"x":117,"y":526,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0045.png",
	"frame": {"x":1,"y":530,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0046.png",
	"frame": {"x":1,"y":530,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0047.png",
	"frame": {"x":1,"y":530,"w":114,"h":97},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":13,"w":114,"h":97},
	"sourceSize": {"w":114,"h":97}
},
{
	"filename": "GiftCenterAnimation_0048.png",
	"frame": {"x":117,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0049.png",
	"frame": {"x":117,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0050.png",
	"frame": {"x":117,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0051.png",
	"frame": {"x":233,"y":325,"w":114,"h":100},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":10,"w":114,"h":100},
	"sourceSize": {"w":114,"h":100}
},
{
	"filename": "GiftCenterAnimation_0052.png",
	"frame": {"x":233,"y":325,"w":114,"h":100},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":10,"w":114,"h":100},
	"sourceSize": {"w":114,"h":100}
},
{
	"filename": "GiftCenterAnimation_0053.png",
	"frame": {"x":233,"y":325,"w":114,"h":100},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":10,"w":114,"h":100},
	"sourceSize": {"w":114,"h":100}
},
{
	"filename": "GiftCenterAnimation_0054.png",
	"frame": {"x":349,"y":226,"w":114,"h":101},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":9,"w":114,"h":101},
	"sourceSize": {"w":114,"h":101}
},
{
	"filename": "GiftCenterAnimation_0055.png",
	"frame": {"x":349,"y":226,"w":114,"h":101},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":9,"w":114,"h":101},
	"sourceSize": {"w":114,"h":101}
},
{
	"filename": "GiftCenterAnimation_0056.png",
	"frame": {"x":349,"y":226,"w":114,"h":101},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":9,"w":114,"h":101},
	"sourceSize": {"w":114,"h":101}
},
{
	"filename": "GiftCenterAnimation_0057.png",
	"frame": {"x":117,"y":113,"w":116,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":7,"y":6,"w":116,"h":104},
	"sourceSize": {"w":116,"h":104}
},
{
	"filename": "GiftCenterAnimation_0058.png",
	"frame": {"x":117,"y":113,"w":116,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":7,"y":6,"w":116,"h":104},
	"sourceSize": {"w":116,"h":104}
},
{
	"filename": "GiftCenterAnimation_0059.png",
	"frame": {"x":117,"y":113,"w":116,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":7,"y":6,"w":116,"h":104},
	"sourceSize": {"w":116,"h":104}
},
{
	"filename": "GiftCenterAnimation_0060.png",
	"frame": {"x":233,"y":219,"w":114,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":6,"w":114,"h":104},
	"sourceSize": {"w":114,"h":104}
},
{
	"filename": "GiftCenterAnimation_0061.png",
	"frame": {"x":233,"y":219,"w":114,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":6,"w":114,"h":104},
	"sourceSize": {"w":114,"h":104}
},
{
	"filename": "GiftCenterAnimation_0062.png",
	"frame": {"x":233,"y":219,"w":114,"h":104},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":6,"w":114,"h":104},
	"sourceSize": {"w":114,"h":104}
},
{
	"filename": "GiftCenterAnimation_0063.png",
	"frame": {"x":117,"y":219,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0064.png",
	"frame": {"x":117,"y":219,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0065.png",
	"frame": {"x":117,"y":219,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0066.png",
	"frame": {"x":351,"y":118,"w":114,"h":106},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":4,"w":114,"h":106},
	"sourceSize": {"w":114,"h":106}
},
{
	"filename": "GiftCenterAnimation_0067.png",
	"frame": {"x":351,"y":118,"w":114,"h":106},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":4,"w":114,"h":106},
	"sourceSize": {"w":114,"h":106}
},
{
	"filename": "GiftCenterAnimation_0068.png",
	"frame": {"x":351,"y":118,"w":114,"h":106},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":4,"w":114,"h":106},
	"sourceSize": {"w":114,"h":106}
},
{
	"filename": "GiftCenterAnimation_0069.png",
	"frame": {"x":235,"y":1,"w":115,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0070.png",
	"frame": {"x":235,"y":1,"w":115,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0071.png",
	"frame": {"x":235,"y":1,"w":115,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0072.png",
	"frame": {"x":352,"y":1,"w":115,"h":107},
	"rotated": true,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0073.png",
	"frame": {"x":352,"y":1,"w":115,"h":107},
	"rotated": true,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0074.png",
	"frame": {"x":352,"y":1,"w":115,"h":107},
	"rotated": true,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":115,"h":107},
	"sourceSize": {"w":115,"h":107}
},
{
	"filename": "GiftCenterAnimation_0075.png",
	"frame": {"x":1,"y":1,"w":116,"h":109},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":1,"w":116,"h":109},
	"sourceSize": {"w":116,"h":109}
},
{
	"filename": "GiftCenterAnimation_0076.png",
	"frame": {"x":1,"y":1,"w":116,"h":109},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":1,"w":116,"h":109},
	"sourceSize": {"w":116,"h":109}
},
{
	"filename": "GiftCenterAnimation_0077.png",
	"frame": {"x":1,"y":1,"w":116,"h":109},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":1,"w":116,"h":109},
	"sourceSize": {"w":116,"h":109}
},
{
	"filename": "GiftCenterAnimation_0078.png",
	"frame": {"x":119,"y":1,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0079.png",
	"frame": {"x":119,"y":1,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0080.png",
	"frame": {"x":119,"y":1,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0081.png",
	"frame": {"x":1,"y":112,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0082.png",
	"frame": {"x":1,"y":112,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0083.png",
	"frame": {"x":1,"y":112,"w":114,"h":110},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":0,"w":114,"h":110},
	"sourceSize": {"w":114,"h":110}
},
{
	"filename": "GiftCenterAnimation_0084.png",
	"frame": {"x":235,"y":110,"w":114,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":114,"h":107},
	"sourceSize": {"w":114,"h":107}
},
{
	"filename": "GiftCenterAnimation_0085.png",
	"frame": {"x":235,"y":110,"w":114,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":114,"h":107},
	"sourceSize": {"w":114,"h":107}
},
{
	"filename": "GiftCenterAnimation_0086.png",
	"frame": {"x":235,"y":110,"w":114,"h":107},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":3,"w":114,"h":107},
	"sourceSize": {"w":114,"h":107}
},
{
	"filename": "GiftCenterAnimation_0087.png",
	"frame": {"x":1,"y":224,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0088.png",
	"frame": {"x":1,"y":224,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0089.png",
	"frame": {"x":1,"y":224,"w":114,"h":105},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":5,"w":114,"h":105},
	"sourceSize": {"w":114,"h":105}
},
{
	"filename": "GiftCenterAnimation_0090.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0091.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0092.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0093.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0094.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
},
{
	"filename": "GiftCenterAnimation_0095.png",
	"frame": {"x":349,"y":723,"w":114,"h":96},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":9,"y":14,"w":114,"h":96},
	"sourceSize": {"w":114,"h":96}
}],
"meta": {
	"app": "https://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "rewards.png",
	"format": "RGBA8888",
	"size": {"w":466,"h":820},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:9613dd134119f93046d5096446cbdc03:2880d321d04270c3db51e855c997aa71:4e549fd5f25429ef5063a975f7080ca0$"
}
}
</file>

<file path="assets/anim/small_logo.json">
{"frames": [

{
	"filename": "tile000.webp",
	"frame": {"x":6,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile001.webp",
	"frame": {"x":163,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile002.webp",
	"frame": {"x":320,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile003.webp",
	"frame": {"x":477,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile004.webp",
	"frame": {"x":634,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile005.webp",
	"frame": {"x":791,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile006.webp",
	"frame": {"x":948,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile007.webp",
	"frame": {"x":1105,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile008.webp",
	"frame": {"x":1262,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile009.webp",
	"frame": {"x":1419,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile010.webp",
	"frame": {"x":1576,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile011.webp",
	"frame": {"x":1733,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile012.webp",
	"frame": {"x":1890,"y":1,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile013.webp",
	"frame": {"x":1,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile014.webp",
	"frame": {"x":158,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile015.webp",
	"frame": {"x":315,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile016.webp",
	"frame": {"x":472,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile017.webp",
	"frame": {"x":629,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile018.webp",
	"frame": {"x":786,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile019.webp",
	"frame": {"x":943,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile020.webp",
	"frame": {"x":1100,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile021.webp",
	"frame": {"x":1257,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile022.webp",
	"frame": {"x":1414,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile023.webp",
	"frame": {"x":1571,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile024.webp",
	"frame": {"x":1728,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile025.webp",
	"frame": {"x":1885,"y":156,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile026.webp",
	"frame": {"x":1,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile027.webp",
	"frame": {"x":158,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile028.webp",
	"frame": {"x":315,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile029.webp",
	"frame": {"x":472,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile030.webp",
	"frame": {"x":629,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile031.webp",
	"frame": {"x":786,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile032.webp",
	"frame": {"x":943,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile033.webp",
	"frame": {"x":1100,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile034.webp",
	"frame": {"x":1257,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile035.webp",
	"frame": {"x":1414,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile036.webp",
	"frame": {"x":1571,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile037.webp",
	"frame": {"x":1728,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile038.webp",
	"frame": {"x":1885,"y":311,"w":155,"h":153},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":155,"h":153},
	"sourceSize": {"w":155,"h":153}
},
{
	"filename": "tile039.webp",
	"frame": {"x":1,"y":1,"w":3,"h":3},
	"rotated": false,
	"trimmed": true,
	"spriteSourceSize": {"x":0,"y":0,"w":3,"h":3},
	"sourceSize": {"w":155,"h":153}
}],
"meta": {
	"app": "https://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "small_logo.png",
	"format": "RGBA8888",
	"size": {"w":2046,"h":465},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:498e5d81c4a21b96910857e6c142ea81:5bbe115d024cc0c00d92884d0a126eb1:6706f3c77aeab101369574e31c8311af$"
}
}
</file>

<file path="assets/anim/vault.json">
{
  "frames": [
    {
      "filename": "vaultIcon-0001",
      "frame": { "x": 2, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0002",
      "frame": { "x": 132, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0003",
      "frame": { "x": 2, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0004",
      "frame": { "x": 2, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0005",
      "frame": { "x": 132, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0006",
      "frame": { "x": 262, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0007",
      "frame": { "x": 2, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0008",
      "frame": { "x": 132, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0009",
      "frame": { "x": 132, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0010",
      "frame": { "x": 262, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0011",
      "frame": { "x": 392, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0012",
      "frame": { "x": 2, "y": 132, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0013",
      "frame": { "x": 132, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0014",
      "frame": { "x": 262, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0015",
      "frame": { "x": 392, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0016",
      "frame": { "x": 522, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0017",
      "frame": { "x": 2, "y": 2, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0018",
      "frame": { "x": 132, "y": 132, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0019",
      "frame": { "x": 262, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0020",
      "frame": { "x": 392, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0021",
      "frame": { "x": 522, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0022",
      "frame": { "x": 652, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0023",
      "frame": { "x": 132, "y": 2, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0024",
      "frame": { "x": 262, "y": 132, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0025",
      "frame": { "x": 392, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0026",
      "frame": { "x": 522, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0027",
      "frame": { "x": 652, "y": 522, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0028",
      "frame": { "x": 262, "y": 2, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0029",
      "frame": { "x": 392, "y": 132, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0030",
      "frame": { "x": 522, "y": 262, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0031",
      "frame": { "x": 652, "y": 392, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0032",
      "frame": { "x": 392, "y": 2, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    },
    {
      "filename": "vaultIcon-0033",
      "frame": { "x": 2, "y": 652, "w": 128, "h": 128 },
      "rotated": false,
      "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 },
      "sourceSize": { "w": 128, "h": 128 }
    }
  ]
}
</file>

<file path="assets/anim/wheel.json">
{"frames": [

{
	"filename": "wheel-0.png",
	"frame": {"x":1,"y":1,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-1.png",
	"frame": {"x":1,"y":158,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-2.png",
	"frame": {"x":1,"y":472,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-3.png",
	"frame": {"x":1,"y":629,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-4.png",
	"frame": {"x":1,"y":786,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-5.png",
	"frame": {"x":1,"y":943,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-6.png",
	"frame": {"x":1,"y":1100,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-7.png",
	"frame": {"x":1,"y":1257,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-8.png",
	"frame": {"x":1,"y":1414,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-9.png",
	"frame": {"x":1,"y":1571,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
},
{
	"filename": "wheel-10.png",
	"frame": {"x":1,"y":315,"w":228,"h":125},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":228,"h":125},
	"sourceSize": {"w":228,"h":125}
}],
"meta": {
	"app": "https://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "wheel.png",
	"format": "RGBA8888",
	"size": {"w":230,"h":1727},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:20bfc979d3a611190a89dd49b7050afc:5fe153dc0bcdc49794c71d5ac5b8d812:8a3f0e13418c7922d5e92446500fa75c$"
}
}
</file>

<file path="assets/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 261.76 226.69"><path d="M161.096.001l-30.225 52.351L100.647.001H-.005l130.877 226.688L261.749.001z" fill="#41b883"/><path d="M161.096.001l-30.225 52.351L100.647.001H52.346l78.526 136.01L209.398.001z" fill="#34495e"/></svg>
</file>

<file path="assets/main.css">
:root {
.dark {
@theme inline {
@layer base {
⋮----
* {
body {
⋮----
html {
html.dark {
html.light {
@font-face {
</file>

<file path="components/auth/AuthPanel.vue">
<template>
  <div ref="target" class="animate__animated animate__flipInY overflow-hidden" style="
      border-radius: 20px;
      padding: 10px;
      width: 100vw;
      height: 100vh;
      align-items: center;
      justify-content: center;
      z-index: 99999999;
      overflow: hidden;
    ">
    <div class="left-0 top-0 flex flex-col items-center justify-start overflow-y-hidden" style="
        width: 90vw;
        margin: auto;
        overflow: hidden;
        padding: 20px;
        height: 60vh;
        background-repeat: no-repeat;
        border-image: url('/images/common/cell-2.png') 20 20 20 20 fill / 20px 20px 20px 20px;
        padding: 20px 20px 20px 20px;
        max-width: 480px;
        z-index: 99999999;
        background-repeat: no-repeat;
        background-size: 100% 100%;
      ">
      <div class="mt-3 flex w-full flex-row items-center justify-center" style="
          margin: auto;
          max-width: 480px;
          margin-top: 4px;
          align-items: center;
          justify-content: center;
          margin-bottom: 0px;
          padding: 10px;
          background-color: transparent;
        ">
        <div class="pt-0" style="font-size: 50px">
          <AuroraText>{{ title }}</AuroraText>
        </div>
      </div>
      <slot />
    </div>
  </div>
</template>
⋮----
<AuroraText>{{ title }}</AuroraText>
⋮----
<script setup>
const props = defineProps({
  title: {
    type: String,
    default: '',
  },
  closePressed: {
    type: Boolean,
    default: false,
  },
})
onMounted(() => {
})
</script>
<style scoped>
@import url('https:
.glowing-element-container {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 60vh;
  width: 100vw;
  overflow: hidden;
  font-family: 'Inter', sans-serif;
}
.element-bg {
  background-color: #1f0137;
}
.glowing-element-body {
  position: relative;
  overflow: visible;
  box-shadow:
    0 0 0 2px #ffff,
    0 0 7px 2px rgba(224, 176, 255, 0.9),
    0 0 15px 2px rgba(200, 140, 255, 0.7),
    0 0 30px 3px rgba(180, 120, 240, 0.5);
}
.glowing-element-body::before {
  content: '';
  /* Necessary for pseudo-elements to be generated */
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  /*
    IMPORTANT: Replace this URL with the actual path to your uploaded image.
    Using a placeholder for now.
  */
  background-image: url('/images/common/neon-coin-sm.png');
  transform: rotate(-40deg);
  background-repeat: repeat;
  opacity: 0.06;
  z-index: 0;
  border-radius: inherit;
}
.glowing-title-box {
  box-shadow:
    0 0 0 2px #e0b0ff,
    0 0 5px 2px rgba(224, 176, 255, 0.9),
    0 0 10px 2px rgba(200, 140, 255, 0.7),
    0 0 20px 3px rgba(180, 120, 240, 0.5);
  z-index: 10;
}
&::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: url('/images/common/neon-coin-sm.png');
  background-size: 100px;
  background-repeat: repeat;
  opacity: 0.3;
  z-index: 1;
  pointer-events: none;
  transform: rotate(-40deg);
  border-radius: inherit;
}
:deep(.content) {
  position: relative;
  z-index: 2;
}
</style>
</file>

<file path="components/auth/LoginForm.vue">
<script setup lang="ts">
import { storeToRefs } from 'pinia';
import { onMounted, reactive, ref } from 'vue';
import AuthPanel from './AuthPanel.vue'
const authStore = useAuthStore()
const {
    isLoading: isAuthLoading,
    isAuthenticated,
} = storeToRefs(authStore)
const formData = reactive({
    email: 'asdf@cashflow.com',
    password: 'asdfasdf',
    confirmPassword: 'asdfasdf',
    username: 'asdf',
})
const showError = ref<boolean>(false)
const showPassword = ref<boolean>(false)
const handleLogin = async () => {
    await authStore.login({
        username: formData.username,
        password: formData.password,
    })
}
onMounted(() => {
    if (isAuthenticated.value) {
        console.log('Already authenticated, redirecting from LoginView.')
    }
})
</script>
<template>
    <AuthPanel title="Login">
        <form class="flip-card__form text-white flex mx-4 px-4 mt-5 overflow-hidden" @submit.prevent="handleLogin">
            <label for="username" class="sr-only">Username</label>
            <input id="username" v-model="formData.username" type="text" name="username" inputmode="text"
                autocomplete="username" placeholder="Username" required class="flip-card__input"
                :disabled="isAuthLoading || showError" />
            <label for="current-password" class="sr-only">Password</label>
            <div class="password-field">
                <input id="current-password" v-model="formData.password" :type="showPassword ? 'text' : 'password'"
                    name="current-password" placeholder="Password" required autocomplete="current-password"
                    class="flip-card__input pr-10" :disabled="isAuthLoading || showError"
                    aria-describedby="toggle-password-visibility" />
                <button id="toggle-password-visibility" type="button" class="toggle-password-btn"
                    :aria-pressed="showPassword" :aria-label="showPassword ? 'Hide password' : 'Show password'"
                    :title="showPassword ? 'Hide password' : 'Show password'" @click="showPassword = !showPassword">
                    <span aria-hidden="true" class="eye-icon">
                        <svg v-if="!showPassword" xmlns="http://www.w3.org/2000/svg" width="18" height="18"
                            viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round">
                            <path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7-11-7-11-7z"></path>
                            <circle cx="12" cy="12" r="3"></circle>
                        </svg>
                        <svg v-else xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
                            fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                            stroke-linejoin="round">
                            <path d="M17.94 17.94A10.94 10.94 0 0 1 12 20c-7 0-11-8-11-8a21.77 21.77 0 0 1 5.06-6.06">
                            </path>
                            <path d="M1 1l22 22"></path>
                            <path d="M9.88 9.88A3 3 0 0 0 12 15a3 3 0 0 0 2.12-.88"></path>
                            <path d="M14.12 14.12L9.88 9.88"></path>
                        </svg>
                    </span>
                </button>
            </div>
            <GlassButton type="submit" class="flip-card__btn mt-3" :disabled="isAuthLoading || showError"
                @click="handleLogin">
                Let's Go!
            </GlassButton>
        </form>
        <div class="flex flex-col">
            <div class="w-full flex justify-center glow">
                <div class="flex mt-12"></div>
            </div>
            <div id="googleSignInButtonContainer" class="google-signin-container flex mt-2 mx-3 px-3 justify-center">
            </div>
        </div>
    </AuthPanel>
</template>
</file>

<file path="components/auth/RegisterForm.vue">
<script setup lang="ts">
import { ref, reactive } from 'vue'
import { storeToRefs } from 'pinia'
import AuthPanel from './AuthPanel.vue'
import { useAuthStore } from '@/stores/auth.store'
import { useNotificationStore } from '@/stores/notification.store'
const authStore = useAuthStore()
const notificationStore = useNotificationStore()
const { isLoading } = storeToRefs(authStore)
const showError = ref<boolean>(false)
const formData = reactive({
  email: '',
  password: '',
  confirmPassword: '',
  username: ''
})
const handleSignUp = async () => {
  if (!formData.password || !formData.username) {
    notificationStore.addNotification({
      type: 'error',
      message: 'Please fill in all required fields for sign up.'
    })
    return
  }
  if (formData.password !== formData.confirmPassword) {
    notificationStore.addNotification({
      type: 'error',
      message: 'Passwords do not match.'
    })
    return
  }
  try {
    const success = await authStore.signUp({
      username: formData.username,
      password: formData.password
    })
    if (success) {
      authStore.toggleSignUpMode()
      formData.username = ''
      formData.password = ''
      formData.confirmPassword = ''
    }
  } catch (error) {
    console.error('Registration failed:', error)
    showError.value = true
    setTimeout(() => {
      showError.value = false
    }, 2000)
  }
}
const toggleSignIn = () => {
  authStore.toggleSignUpMode()
}
</script>
<template>
  <AuthPanel title="Register" class="relative">
    <div class="flip-card__form flex mx-4 px-4 flex-col mt-5 overflow-hidden">
      <div class="flip-card__form-container">
        <div class="flip-card__form-group">
          <label for="username" class="flip-card__label">Username</label>
          <input id="username" v-model="formData.username" type="text" class="flip-card__input"
            placeholder="Enter your username" :disabled="isLoading" />
        </div>
        <div class="flip-card__form-group">
          <label for="email" class="flip-card__label">Email (Optional)</label>
          <input id="email" v-model="formData.email" type="email" class="flip-card__input"
            placeholder="Enter your email" :disabled="isLoading" />
        </div>
        <div class="flip-card__form-group">
          <label for="password" class="flip-card__label">Password</label>
          <input id="password" v-model="formData.password" type="password" class="flip-card__input"
            placeholder="Enter your password" :disabled="isLoading" />
        </div>
        <div class="flip-card__form-group">
          <label for="confirmPassword" class="flip-card__label">Confirm Password</label>
          <input id="confirmPassword" v-model="formData.confirmPassword" type="password" class="flip-card__input"
            placeholder="Confirm your password" :disabled="isLoading" />
        </div>
      </div>
      <div class="flex flex-col items-center mt-6">
        <button class="flip-card__button flip-card__button--primary w-full" :disabled="isLoading" @click="handleSignUp">
          <span v-if="isLoading" class="flex items-center justify-center">
            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none"
              viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
              </path>
            </svg>
            Processing...
          </span>
          <span v-else>Sign Up</span>
        </button>
        <div class="mt-4 text-center">
          <span class="text-sm text-gray-400">Already have an account? </span>
          <button class="text-sm font-medium text-primary-400 hover:text-primary-300 transition-colors"
            :disabled="isLoading" @click="toggleSignIn">
            Sign In
          </button>
        </div>
      </div>
    </div>
  </AuthPanel>
</template>
</file>

<file path="components/chat/ChatMessage.vue">
<template>
  <div ref="messageRoot" class="message" :class="messageType === 'sent' ? 'message-sent' : 'message-received'">
    <div class="avatar-container">
      <img :src="user.avatar" class="avatar" alt="User Avatar" />
      <div v-if="messageType === 'received'" class="status-indicator"
        :class="user.online ? 'status-online' : 'status-offline'"></div>
    </div>
    <div class="message-content">
      <div class="message-header">
        <div class="message-name">{{ user.name }}</div>
        <div class="message-time">{{ message.time }}</div>
      </div>
      <div class="message-bubble">
        <slot>
          {{ message.text }}
        </slot>
      </div>
    </div>
  </div>
</template>
⋮----
<div class="message-name">{{ user.name }}</div>
<div class="message-time">{{ message.time }}</div>
⋮----
{{ message.text }}
⋮----
<script setup lang="ts">
import { ref, onMounted, computed, type PropType } from 'vue';
import { gsap } from 'gsap';
import type { Message, User } from './types';
const props = defineProps({
  message: {
    type: Object as PropType<Message>,
    required: true,
  },
  user: {
    type: Object as PropType<User>,
    required: true,
  },
  animate: {
    type: Boolean,
    default: true
  }
});
const messageRoot = ref<HTMLDivElement | null>(null);
const messageType = computed(() => (props.user.name === 'You' ? 'sent' : 'received'));
onMounted(() => {
  if (messageRoot.value && props.animate) {
    gsap.set(messageRoot.value, { opacity: 0, y: 50, scale: 0.9 });
    gsap.to(messageRoot.value, {
      duration: 0.5,
      opacity: 1,
      y: 0,
      scale: 1,
      ease: 'power2.out',
    });
  } else if (messageRoot.value) {
    gsap.set(messageRoot.value, { opacity: 1 });
  }
});
</script>
<style scoped>
.message {
  display: flex;
  align-items: flex-end;
  gap: 0.4rem;
}
.message-content {
  display: grid;
  max-width: calc(100% - 3rem);
  font-size: 1rem;
}
.message-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 0.15rem;
  margin-bottom: 0.20rem;
}
.message-name {
  font-size: 0.75rem;
  color: #d1d5db;
  font-weight: 500;
}
.message-time {
  font-size: 0.65rem;
  color: #9ca3af;
}
.message-bubble {
  padding: 0.4rem 1rem;
  border-radius: 1rem;
  word-wrap: break-word;
}
.avatar-container {
  position: relative;
  width: 2.5rem;
  height: 2.5rem;
  flex-shrink: 0;
}
.avatar {
  width: 100%;
  height: 100%;
  border-radius: 9999px;
  object-fit: cover;
}
.status-indicator {
  position: absolute;
  top: 0;
  right: 0;
  width: 0.65rem;
  height: 0.65rem;
  border-radius: 9999px;
  border: 2px solid #160025;
}
.status-online {
  background-color: #22c55e;
}
.status-offline {
  background-color: #6b7280;
}
.message-sent {
  flex-direction: row-reverse;
}
.message-sent .message-content {
  align-items: flex-end;
}
.message-sent .message-bubble {
  background-color: #3b82f6;
  border-bottom-right-radius: 0.25rem;
}
.message-sent .status-indicator {
  display: none;
}
.message-received .message-content {
  align-items: flex-start;
}
.message-received .message-bubble {
  background-color: #4b5563;
  border-bottom-left-radius: 0.25rem;
}
</style>
</file>

<file path="components/chat/ChatMessageList.vue">
<template>
  <div ref="messageListEl" class="message-list flex-grow p-4 space-y-4 overflow-y-auto">
    <ChatMessage v-for="message in messages" :key="message.id" :message="message" :user="users[message.userId]"
      :animate="isMessageAnimated(message.id)">
      <div v-if="message.id === 'typing-indicator'" class="typing-indicator">
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
      </div>
    </ChatMessage>
  </div>
</template>
<script setup lang="ts">
import { ref, watch, type PropType } from 'vue';
import { gsap } from 'gsap';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
import ChatMessage from './ChatMessage.vue';
import type { Message, User } from './types';
gsap.registerPlugin(ScrollToPlugin);
const props = defineProps({
  messages: {
    type: Array as PropType<Message[]>,
    required: true,
  },
  users: {
    type: Object as PropType<Record<string, User>>,
    required: true
  }
});
const messageListEl = ref<HTMLDivElement | null>(null);
const animatedMessageIds = new Set<string>();
function isMessageAnimated(id: string): boolean {
  if (animatedMessageIds.has(id)) {
    return false;
  }
  animatedMessageIds.add(id);
  return true;
}
watch(() => props.messages.length, (newLength, oldLength) => {
  if (newLength > 0) {
    if (oldLength === undefined || newLength > oldLength) {
      const lastMessage = props.messages[newLength - 1];
      if (lastMessage && lastMessage.id !== 'typing-indicator') {
        if (messageListEl.value) {
          gsap.to(messageListEl.value, {
            duration: 0.5,
            scrollTo: 'max',
            ease: 'power2.out',
            delay: 0.1,
          });
        }
      }
    }
  }
})
</script>
<style scoped>
.message-list {
  scrollbar-width: thin;
  scrollbar-color: #530080ff transparent;
}
.message-list::-webkit-scrollbar {
  width: 6px;
}
.message-list::-webkit-scrollbar-track {
  background: transparent;
}
.message-list::-webkit-scrollbar-thumb {
  background-color: #530080ff;
  border-radius: 6px;
  border: 2px solid transparent;
}
.typing-indicator {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.25rem 0;
}
.typing-indicator .dot {
  width: 0.5rem;
  height: 0.5rem;
  border-radius: 50%;
  background-color: #9ca3af;
  animation: bounce 1.2s infinite;
}
.typing-indicator .dot:nth-child(2) {
  animation-delay: 0.2s;
}
.typing-indicator .dot:nth-child(3) {
  animation-delay: 0.4s;
}
@keyframes bounce {
  0%,
  60%,
  100% {
    transform: translateY(0);
  }
  30% {
    transform: translateY(-5px);
  }
}
</style>
</file>

<file path="components/chat/ChatPanel.vue">
<template>
  <div id="morph-container" ref="morphContainer" @click="openChat">
    <div id="neon-box" ref="neonBox" class="text-white pl-7.5 pt-7 border-white zIndex-1">
      <SpriteAnimator :animation-data="LogoJson" image-url="/images/bottom/logo_shine_trans.png" :width="80"
        :height="80" :frame-count="LogoJson.frames.length" :initial-delay-max="5" :loop-delay="7" />
      <div id="close-chat" @click.stop="closeChat">
        <img id="close-chat-img" :src="closeImgSrc" alt="Close Chat" @mouseover="closeImgSrc = closePressedImgSrc"
          @mouseout="closeImgSrc = closeDefaultImgSrc" @mousedown="closeImgSrc = closePressedImgSrc"
          @mouseup="closeImgSrc = closeDefaultImgSrc" />
      </div>
      <div id="chat-ui" ref="chatUI" class="w-full h-full flex flex-col opacity-0 invisible">
        <MessageList :messages="currentMessages" :users="users" />
        <form id="chat-form" class="p-3 flex items-center space-x-2 border-t border-purple-500/20"
          @submit.prevent="handleSendMessage">
          <input type="text" v-model="newMessageText" placeholder="Type a message..."
            class="flex-grow bg-transparent text-white focus:outline-none" />
          <button type="submit" class="text-purple-400 hover:text-purple-300 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
              stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
            </svg>
          </button>
        </form>
      </div>
    </div>
  </div>
</template>
<style scoped></style>
<script setup lang="ts">
import LogoJson from '@/assets/anim/logo_shine.json'
import { useChatStore } from '@/stores/chat.store';
import { gsap } from 'gsap'
import { Flip } from 'gsap/Flip'
import { onMounted, ref } from 'vue'
import MessageList from './ChatMessageList.vue';
const chatStore = useChatStore()
const isExpanded = ref(false)
interface User {
  name: string
  avatar: string
  online: boolean
}
interface Message {
  id: string
  userId: string
  text: string
  time: string
}
gsap.registerPlugin(Flip)
const morphContainer = ref<HTMLDivElement | null>(null)
const neonBox = ref<HTMLDivElement | null>(null)
const chatUI = ref<HTMLDivElement | null>(null)
const isChatOpen = ref(false)
const currentMessages = ref<Message[]>([])
const newMessageText = ref('')
const shadowColors = ['#7206b5dd', '#530080dd']
let pulseInterval: number | null = null
const closeDefaultImgSrc = 'https://images.cashflowcasino.com/misc/close.png'
const closePressedImgSrc = 'https://images.cashflowcasino.com/misc/close-pressed.png'
const closeImgSrc = ref(closeDefaultImgSrc)
const users: Record<string, User> = {
  'user-you': { name: 'You', avatar: '/images/avatars/avatar-1.webp', online: true },
  'user-alex': { name: 'Alex', avatar: '/images/avatars/avatar-2.webp', online: true },
  'user-sam': { name: 'Sam', avatar: '/images/avatars/avatar-3.webp', online: false },
  'user-jess': { name: 'Jess', avatar: '/images/avatars/avatar-4.webp', online: true }
}
const initialMessages: Omit<Message, 'id'>[] = [
  { userId: 'user-alex', text: "Hey, how's the project going?", time: '10:30 PM' },
  {
    userId: 'user-you',
    text: "It's going well! Just putting the final touches on the animation.",
    time: '10:31 PM'
  },
  {
    userId: 'user-sam',
    text: 'Glad to hear it! The new online status indicators look great.',
    time: '10:32 PM'
  },
  {
    userId: 'user-jess',
    text: 'I agree! The minimal scrollbar is a nice touch too.',
    time: '10:32 PM'
  }
]
const startPulsing = () => {
  if (pulseInterval) return
  pulseInterval = window.setInterval(() => {
    gsap.to(neonBox.value, {
      '--shadow-color': gsap.utils.random(shadowColors),
      duration: 1.5,
      ease: 'power1.inOut'
    })
  }, 1500)
}
const stopPulsing = () => {
  if (pulseInterval) clearInterval(pulseInterval)
  pulseInterval = null
  gsap.to(neonBox.value, { '--shadow-color': shadowColors[0], duration: 0.5 })
}
const openChat = () => {
  if (isExpanded.value) return
  isExpanded.value = true
  chatStore.setChatOpenState(true)
  if (isChatOpen.value || !morphContainer.value) return
  const state = Flip.getState(morphContainer.value)
  morphContainer.value.classList.add('is-expanded')
  Flip.from(state, {
    duration: 0.8,
    ease: 'expo.inOut',
    onComplete: () => {
      gsap.to(chatUI.value, {
        opacity: 1,
        visibility: 'visible',
        duration: 0.5,
        delay: 0.3,
        onComplete: () => {
          initialMessages.forEach((msg, index) => {
            gsap.delayedCall(index * 0.15, () => {
              addMessage(msg.text, msg.userId, msg.time)
            })
          })
        }
      })
      startPulsing()
    }
  })
  isChatOpen.value = true
}
const closeChat = () => {
  if (!isExpanded.value) return
  isExpanded.value = false
  chatStore.setChatOpenState(false)
  if (!isChatOpen.value || !morphContainer.value) return
  const state = Flip.getState(morphContainer.value)
  gsap.to(chatUI.value, {
    opacity: 0,
    visibility: 'hidden',
    duration: 0.3,
    onComplete: () => {
      morphContainer.value?.classList.remove('is-expanded')
      currentMessages.value = []
      Flip.from(state, {
        duration: 0.8,
        ease: 'expo.inOut'
      })
    }
  })
  stopPulsing()
  isChatOpen.value = false
}
const addMessage = (text: string, userId: string, time?: string) => {
  const message: Message = {
    id: crypto.randomUUID(),
    userId,
    text,
    time: time || new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
  }
  currentMessages.value.push(message)
}
const handleSendMessage = () => {
  const text = newMessageText.value.trim()
  if (text) {
    addMessage(text, 'user-you')
    newMessageText.value = ''
    simulateReply()
  }
}
const simulateReply = () => {
  const randomResponderId = Object.keys(users).filter((id) => id !== 'user-you')[Math.floor(Math.random() * 3)]
  setTimeout(() => {
    const typingMessage: Message = {
      id: 'typing-indicator',
      userId: randomResponderId,
      text: '...',
      time: ''
    }
    currentMessages.value.push(typingMessage)
    setTimeout(() => {
      // Remove typing indicator
      currentMessages.value = currentMessages.value.filter((m: Message) => m.id !== 'typing-indicator')
      addMessage("That's an interesting point!", randomResponderId)
    }, 2000)
  }, 800)
}
onMounted(() => {
  gsap.set(neonBox.value, { '--shadow-color': shadowColors[0] })
})
</script>
<style scoped>
#morph-container {
  z-index: 1;
  bottom: 1.5rem;
  right: 0.4rem;
  width: 4rem;
  height: 4rem;
  cursor: pointer;
  will-change: transform;
}
#neon-box {
  z-index: 99;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 9999px;
  box-shadow: 0 0 15px 5px var(--shadow-color);
  background-color: #080b2a;
  border: 2px solid white;
  position: relative;
}
#morph-container.is-expanded {
  top: 1.5rem !important;
  left: 1.5rem !important;
  bottom: 1.5rem !important;
  right: 1.5rem !important;
  width: auto !important;
  height: auto !important;
  cursor: default;
}
#morph-container.is-expanded #neon-box {
  border-radius: 1rem;
  border-width: 0.5px;
}
#close-chat {
  position: absolute;
  top: 0.25rem;
  right: 0.25rem;
  width: 1.75rem;
  height: 1.75rem;
  cursor: pointer;
  opacity: 0;
  visibility: hidden;
  transition:
    opacity 0.3s,
    visibility 0.3s;
  z-index: 999;
}
#close-chat img {
  width: 100%;
  height: 100%;
}
#morph-container.is-expanded #close-chat {
  opacity: 1;
  visibility: visible;
  transition-delay: 0.5s;
}
</style>
</file>

<file path="components/chat/CPanel.vue">
<template>
        <div id="morph-container" ref="morphContainer" @click="openChat">
          <div id="neon-box" ref="neonBox" class="text-white border-white">
            <div id="close-chat" @click.stop="closeChat">
              <img id="close-chat-img" :src="closeImgSrc" alt="Close Chat"
                   @mouseover="closeImgSrc = closePressedImgSrc"
                   @mouseout="closeImgSrc = closeDefaultImgSrc"
                   @mousedown="closeImgSrc = closePressedImgSrc"
                   @mouseup="closeImgSrc = closeDefaultImgSrc"
              />
            </div>
            <div id="chat-ui" ref="chatUI" class="w-full h-full flex flex-col opacity-0 invisible">
              <MessageList :messages="currentMessages" :users="users" />
              <form id="chat-form" class="p-3 flex items-center space-x-2 border-t border-purple-500/20" @submit.prevent="handleSendMessage">
                <input type="text" v-model="newMessageText" placeholder="Type a message..." class="flex-grow bg-transparent text-white focus:outline-none">
                <button type="submit" class="text-purple-400 hover:text-purple-300 transition-colors">
                   <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" /></svg>
                </button>
              </form>
            </div>
          </div>
        </div>
</template>
<style scoped></style>
<script setup lang="ts">
import { ref, onMounted } from "vue";
import { gsap } from "gsap";
import { Flip } from "gsap/Flip";
import MessageList from "./ChatMessageList.vue";
 interface User {
  name: string;
  avatar: string;
  online: boolean;
}
interface Message {
  id: string;
  userId: string;
  text: string;
  time: string;
}
gsap.registerPlugin(Flip);
const morphContainer = ref<HTMLDivElement | null>(null);
const neonBox = ref<HTMLDivElement | null>(null);
const chatUI = ref<HTMLDivElement | null>(null);
const isChatOpen = ref(false);
const currentMessages = ref<Message[]>([]);
const newMessageText = ref("");
const shadowColors = ["#7206b5dd", "#530080dd"];
let pulseInterval: number | null = null;
const closeDefaultImgSrc = "https://images.cashflowcasino.com/misc/close.png";
const closePressedImgSrc = "https://images.cashflowcasino.com/misc/close-pressed.png";
const closeImgSrc = ref(closeDefaultImgSrc);
const users: Record<string, User> = {
  "user-you": { name: "You", avatar: "/images/avatars/avatar-1.png", online: true },
  "user-alex": { name: "Alex", avatar: "/images/avatars/avatar-2.png", online: true },
  "user-sam": { name: "Sam", avatar: "/images/avatars/avatar-3.png", online: false },
  "user-jess": { name: "Jess", avatar: "/images/avatars/avatar-4.png", online: true },
};
const initialMessages: Omit<Message, "id">[] = [
  { userId: "user-alex", text: "Hey, how's the project going?", time: "10:30 PM" },
  {
    userId: "user-you",
    text: "It's going well! Just putting the final touches on the animation.",
    time: "10:31 PM",
  },
  {
    userId: "user-sam",
    text: "Glad to hear it! The new online status indicators look great.",
    time: "10:32 PM",
  },
  {
    userId: "user-jess",
    text: "I agree! The minimal scrollbar is a nice touch too.",
    time: "10:32 PM",
  },
];
const startPulsing = () => {
  if (pulseInterval) return;
  pulseInterval = window.setInterval(() => {
    gsap.to(neonBox.value, {
      "--shadow-color": gsap.utils.random(shadowColors),
      duration: 1.5,
      ease: "power1.inOut",
    });
  }, 1500);
};
const stopPulsing = () => {
  if (pulseInterval) clearInterval(pulseInterval);
  pulseInterval = null;
  gsap.to(neonBox.value, { "--shadow-color": shadowColors[0], duration: 0.5 });
};
const openChat = () => {
  if (isChatOpen.value || !morphContainer.value) return;
  const state = Flip.getState(morphContainer.value);
  morphContainer.value.classList.add("is-expanded");
  Flip.from(state, {
    duration: 0.8,
    ease: "expo.inOut",
    onComplete: () => {
      gsap.to(chatUI.value, {
        opacity: 1,
        visibility: "visible",
        duration: 0.5,
        delay: 0.3,
        onComplete: () => {
          initialMessages.forEach((msg, index) => {
            gsap.delayedCall(index * 0.15, () => {
              addMessage(msg.text, msg.userId, msg.time);
            });
          });
        },
      });
      startPulsing();
    },
  });
  isChatOpen.value = true;
};
const closeChat = () => {
  if (!isChatOpen.value || !morphContainer.value) return;
  const state = Flip.getState(morphContainer.value);
gsap.to(chatUI.value, {
    opacity: 0,
    visibility: "hidden",
    duration: 0.3,
    onComplete: () => {
    morphContainer.value?.classList.remove("is-expanded");
      currentMessages.value = [];
    Flip.from(state, {
        duration: 0.8,
        ease: "expo.inOut",
    });
    },
});
stopPulsing();
isChatOpen.value = false;
};
const addMessage = (text: string, userId: string, time?: string) => {
  const message: Message = {
    id: crypto.randomUUID(),
    userId,
    text,
    time:
      time || new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
  };
  currentMessages.value.push(message);
};
const handleSendMessage = () => {
  const text = newMessageText.value.trim();
  if (text) {
    addMessage(text, "user-you");
    newMessageText.value = "";
    simulateReply();
  }
};
const simulateReply = () => {
  const randomResponderId = Object.keys(users).filter((id) => id !== "user-you")[
    Math.floor(Math.random() * 3)
  ];
  setTimeout(() => {
    const typingMessage: Message = {
      id: "typing-indicator",
      userId: randomResponderId,
      text: "...",
      time: "",
    };
    currentMessages.value.push(typingMessage);
    setTimeout(() => {
      // Remove typing indicator
      currentMessages.value = currentMessages.value.filter(
        (m: Message) => m.id !== "typing-indicator"
      );
      addMessage("That's an interesting point!", randomResponderId);
    }, 2000);
  }, 800);
};
onMounted(() => {
  gsap.set(neonBox.value, { "--shadow-color": shadowColors[0] });
});
</script>
</file>

<file path="components/chat/MessageList.vue">
<script setup lang="ts">
import { ref, watch, type PropType } from 'vue';
import { gsap } from 'gsap';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
import ChatMessage from './ChatMessage.vue';
import type { Message, User } from './types';
gsap.registerPlugin(ScrollToPlugin);
const props = defineProps({
  messages: {
    type: Array as PropType<Message[]>,
    required: true,
  },
  users: {
    type: Object as PropType<Record<string, User>>,
    required: true
  }
});
const messageListEl = ref<HTMLDivElement | null>(null);
const animatedMessageIds = new Set<string>();
function isMessageAnimated(id: string): boolean {
    if(animatedMessageIds.has(id)){
        return false;
    }
    animatedMessageIds.add(id);
    return true;
}
watch(() => props.messages.length, () => {
  gsap.to(messageListEl.value, {
    duration: 0.5,
    scrollTo: 'max',
    ease: 'power2.out',
    delay: 0.1,
  });
});
</script>
<template>
  <div ref="messageListEl" class="message-list flex-grow p-4 space-y-4 overflow-y-auto">
    <ChatMessage
      v-for="message in messages"
      :key="message.id"
      :message="message"
      :user="users[message.userId]"
      :animate="isMessageAnimated(message.id)"
    >
        <div v-if="message.id === 'typing-indicator'" class="typing-indicator">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
    </ChatMessage>
  </div>
</template>
<style scoped>
.message-list {
    scrollbar-width: thin;
    scrollbar-color: #530080ff transparent;
}
.message-list::-webkit-scrollbar {
    width: 6px;
}
.message-list::-webkit-scrollbar-track {
    background: transparent;
}
.message-list::-webkit-scrollbar-thumb {
    background-color: #530080ff;
    border-radius: 6px;
    border: 2px solid transparent;
}
.typing-indicator {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.25rem 0;
}
.typing-indicator .dot {
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    background-color: #9ca3af;
    animation: bounce 1.2s infinite;
}
.typing-indicator .dot:nth-child(2) {
    animation-delay: 0.2s;
}
.typing-indicator .dot:nth-child(3) {
    animation-delay: 0.4s;
}
@keyframes bounce {
    0%, 60%, 100% { transform: translateY(0); }
    30% { transform: translateY(-5px); }
}
</style>
</file>

<file path="components/chat/types.d.ts">
export interface User {
    name: string;
    avatar: string;
    online: boolean;
}
export interface Message {
    id: string;
    userId: string;
    text: string;
    time: string;
}
</file>

<file path="components/chat/types.ts">
export interface User {
  name: string;
  avatar: string;
  online: boolean;
}
export interface Message {
  id: string;
  userId: string;
  text: string;
  time: string;
}
</file>

<file path="components/common/Notification.vue">
<template>
    <TransitionGroup name="notification" tag="div" class="fixed top-4 right-4 z-50 flex flex-col gap-3 w-full max-w-xs">
        <div v-for="notification in notifications" :key="notification.id"
            class="p-4 rounded-lg shadow-lg border-l-4 transition-all duration-300 transform"
            :class="notificationClasses(notification.type)" @click="removeNotification(notification.id)">
            <div class="flex items-start">
                <div class="flex-shrink-0">
                    <component :is="notificationIcon(notification.type)" class="h-5 w-5" />
                </div>
                <div class="ml-3 w-0 flex-1 pt-0.5">
                    <p class="text-sm font-medium">
                        {{ notification.message }}
                    </p>
                </div>
                <div class="ml-4 flex-shrink-0 flex">
                    <button class="inline-flex rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2"
                        :class="closeButtonClasses(notification.type)"
                        @click.stop="removeNotification(notification.id)">
                        <span class="sr-only">Close</span>
                        <XMarkIcon class="h-5 w-5" />
                    </button>
                </div>
            </div>
        </div>
    </TransitionGroup>
</template>
⋮----
{{ notification.message }}
⋮----
<script setup lang="ts">
import { XMarkIcon } from '@heroicons/vue/24/outline'
import { CheckCircleIcon, ExclamationCircleIcon, ExclamationTriangleIcon, InformationCircleIcon } from '@heroicons/vue/24/solid'
import { useNotificationStore } from '@/stores/notification.store'
import { storeToRefs } from 'pinia'
const notificationStore = useNotificationStore()
const { notifications } = storeToRefs(notificationStore)
const { removeNotification } = notificationStore
const notificationIcon = (type: string) => {
    switch (type) {
        case 'success':
            return CheckCircleIcon
        case 'error':
            return ExclamationCircleIcon
        case 'warning':
            return ExclamationTriangleIcon
        default:
            return InformationCircleIcon
    }
}
const notificationClasses = (type: string) => {
    const base = 'bg-white dark:bg-gray-800 border-l-4'
    const typeClasses = {
        success: 'border-green-500',
        error: 'border-red-500',
        warning: 'border-yellow-500',
        info: 'border-blue-500',
    }
    return `${base} ${typeClasses[type as keyof typeof typeClasses] || typeClasses.info}`
}
const closeButtonClasses = (type: string) => {
    const base = 'focus:ring-2 focus:ring-offset-2 rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none'
    const typeClasses = {
        success: 'focus:ring-green-500 hover:text-green-500',
        error: 'focus:ring-red-500 hover:text-red-500',
        warning: 'focus:ring-yellow-500 hover:text-yellow-500',
        info: 'focus:ring-blue-500 hover:text-blue-500',
    }
    return `${base} ${typeClasses[type as keyof typeof typeClasses] || typeClasses.info}`
}
</script>
<style scoped>
.notification-enter-active,
.notification-leave-active {
    transition: all 0.3s ease;
}
.notification-enter-from,
.notification-leave-to {
    opacity: 0;
    transform: translateX(30px);
}
.notification-move {
    transition: transform 0.3s ease;
}
</style>
</file>

<file path="components/icons/IconCommunity.vue">
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor">
    <path
      d="M15 4a1 1 0 1 0 0 2V4zm0 11v-1a1 1 0 0 0-1 1h1zm0 4l-.707.707A1 1 0 0 0 16 19h-1zm-4-4l.707-.707A1 1 0 0 0 11 14v1zm-4.707-1.293a1 1 0 0 0-1.414 1.414l1.414-1.414zm-.707.707l-.707-.707.707.707zM9 11v-1a1 1 0 0 0-.707.293L9 11zm-4 0h1a1 1 0 0 0-1-1v1zm0 4H4a1 1 0 0 0 1.707.707L5 15zm10-9h2V4h-2v2zm2 0a1 1 0 0 1 1 1h2a3 3 0 0 0-3-3v2zm1 1v6h2V7h-2zm0 6a1 1 0 0 1-1 1v2a3 3 0 0 0 3-3h-2zm-1 1h-2v2h2v-2zm-3 1v4h2v-4h-2zm1.707 3.293l-4-4-1.414 1.414 4 4 1.414-1.414zM11 14H7v2h4v-2zm-4 0c-.276 0-.525-.111-.707-.293l-1.414 1.414C5.42 15.663 6.172 16 7 16v-2zm-.707 1.121l3.414-3.414-1.414-1.414-3.414 3.414 1.414 1.414zM9 12h4v-2H9v2zm4 0a3 3 0 0 0 3-3h-2a1 1 0 0 1-1 1v2zm3-3V3h-2v6h2zm0-6a3 3 0 0 0-3-3v2a1 1 0 0 1 1 1h2zm-3-3H3v2h10V0zM3 0a3 3 0 0 0-3 3h2a1 1 0 0 1 1-1V0zM0 3v6h2V3H0zm0 6a3 3 0 0 0 3 3v-2a1 1 0 0 1-1-1H0zm3 3h2v-2H3v2zm1-1v4h2v-4H4zm1.707 4.707l.586-.586-1.414-1.414-.586.586 1.414 1.414z"
    />
  </svg>
</template>
</file>

<file path="components/icons/IconDocumentation.vue">
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="17" fill="currentColor">
    <path
      d="M11 2.253a1 1 0 1 0-2 0h2zm-2 13a1 1 0 1 0 2 0H9zm.447-12.167a1 1 0 1 0 1.107-1.666L9.447 3.086zM1 2.253L.447 1.42A1 1 0 0 0 0 2.253h1zm0 13H0a1 1 0 0 0 1.553.833L1 15.253zm8.447.833a1 1 0 1 0 1.107-1.666l-1.107 1.666zm0-14.666a1 1 0 1 0 1.107 1.666L9.447 1.42zM19 2.253h1a1 1 0 0 0-.447-.833L19 2.253zm0 13l-.553.833A1 1 0 0 0 20 15.253h-1zm-9.553-.833a1 1 0 1 0 1.107 1.666L9.447 14.42zM9 2.253v13h2v-13H9zm1.553-.833C9.203.523 7.42 0 5.5 0v2c1.572 0 2.961.431 3.947 1.086l1.107-1.666zM5.5 0C3.58 0 1.797.523.447 1.42l1.107 1.666C2.539 2.431 3.928 2 5.5 2V0zM0 2.253v13h2v-13H0zm1.553 13.833C2.539 15.431 3.928 15 5.5 15v-2c-1.92 0-3.703.523-5.053 1.42l1.107 1.666zM5.5 15c1.572 0 2.961.431 3.947 1.086l1.107-1.666C9.203 13.523 7.42 13 5.5 13v2zm5.053-11.914C11.539 2.431 12.928 2 14.5 2V0c-1.92 0-3.703.523-5.053 1.42l1.107 1.666zM14.5 2c1.573 0 2.961.431 3.947 1.086l1.107-1.666C18.203.523 16.421 0 14.5 0v2zm3.5.253v13h2v-13h-2zm1.553 12.167C18.203 13.523 16.421 13 14.5 13v2c1.573 0 2.961.431 3.947 1.086l1.107-1.666zM14.5 13c-1.92 0-3.703.523-5.053 1.42l1.107 1.666C11.539 15.431 12.928 15 14.5 15v-2z"
    />
  </svg>
</template>
</file>

<file path="components/icons/IconEcosystem.vue">
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="20" fill="currentColor">
    <path
      d="M11.447 8.894a1 1 0 1 0-.894-1.789l.894 1.789zm-2.894-.789a1 1 0 1 0 .894 1.789l-.894-1.789zm0 1.789a1 1 0 1 0 .894-1.789l-.894 1.789zM7.447 7.106a1 1 0 1 0-.894 1.789l.894-1.789zM10 9a1 1 0 1 0-2 0h2zm-2 2.5a1 1 0 1 0 2 0H8zm9.447-5.606a1 1 0 1 0-.894-1.789l.894 1.789zm-2.894-.789a1 1 0 1 0 .894 1.789l-.894-1.789zm2 .789a1 1 0 1 0 .894-1.789l-.894 1.789zm-1.106-2.789a1 1 0 1 0-.894 1.789l.894-1.789zM18 5a1 1 0 1 0-2 0h2zm-2 2.5a1 1 0 1 0 2 0h-2zm-5.447-4.606a1 1 0 1 0 .894-1.789l-.894 1.789zM9 1l.447-.894a1 1 0 0 0-.894 0L9 1zm-2.447.106a1 1 0 1 0 .894 1.789l-.894-1.789zm-6 3a1 1 0 1 0 .894 1.789L.553 4.106zm2.894.789a1 1 0 1 0-.894-1.789l.894 1.789zm-2-.789a1 1 0 1 0-.894 1.789l.894-1.789zm1.106 2.789a1 1 0 1 0 .894-1.789l-.894 1.789zM2 5a1 1 0 1 0-2 0h2zM0 7.5a1 1 0 1 0 2 0H0zm8.553 12.394a1 1 0 1 0 .894-1.789l-.894 1.789zm-1.106-2.789a1 1 0 1 0-.894 1.789l.894-1.789zm1.106 1a1 1 0 1 0 .894 1.789l-.894-1.789zm2.894.789a1 1 0 1 0-.894-1.789l.894 1.789zM8 19a1 1 0 1 0 2 0H8zm2-2.5a1 1 0 1 0-2 0h2zm-7.447.394a1 1 0 1 0 .894-1.789l-.894 1.789zM1 15H0a1 1 0 0 0 .553.894L1 15zm1-2.5a1 1 0 1 0-2 0h2zm12.553 2.606a1 1 0 1 0 .894 1.789l-.894-1.789zM17 15l.447.894A1 1 0 0 0 18 15h-1zm1-2.5a1 1 0 1 0-2 0h2zm-7.447-5.394l-2 1 .894 1.789 2-1-.894-1.789zm-1.106 1l-2-1-.894 1.789 2 1 .894-1.789zM8 9v2.5h2V9H8zm8.553-4.894l-2 1 .894 1.789 2-1-.894-1.789zm.894 0l-2-1-.894 1.789 2 1 .894-1.789zM16 5v2.5h2V5h-2zm-4.553-3.894l-2-1-.894 1.789 2 1 .894-1.789zm-2.894-1l-2 1 .894 1.789 2-1L8.553.106zM1.447 5.894l2-1-.894-1.789-2 1 .894 1.789zm-.894 0l2 1 .894-1.789-2-1-.894 1.789zM0 5v2.5h2V5H0zm9.447 13.106l-2-1-.894 1.789 2 1 .894-1.789zm0 1.789l2-1-.894-1.789-2 1 .894 1.789zM10 19v-2.5H8V19h2zm-6.553-3.894l-2-1-.894 1.789 2 1 .894-1.789zM2 15v-2.5H0V15h2zm13.447 1.894l2-1-.894-1.789-2 1 .894 1.789zM18 15v-2.5h-2V15h2z"
    />
  </svg>
</template>
</file>

<file path="components/icons/IconSupport.vue">
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor">
    <path
      d="M10 3.22l-.61-.6a5.5 5.5 0 0 0-7.666.105 5.5 5.5 0 0 0-.114 7.665L10 18.78l8.39-8.4a5.5 5.5 0 0 0-.114-7.665 5.5 5.5 0 0 0-7.666-.105l-.61.61z"
    />
  </svg>
</template>
</file>

<file path="components/icons/IconTooling.vue">
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    aria-hidden="true"
    role="img"
    class="iconify iconify--mdi"
    width="24"
    height="24"
    preserveAspectRatio="xMidYMid meet"
    viewBox="0 0 24 24"
  >
    <path
      d="M20 18v-4h-3v1h-2v-1H9v1H7v-1H4v4h16M6.33 8l-1.74 4H7v-1h2v1h6v-1h2v1h2.41l-1.74-4H6.33M9 5v1h6V5H9m12.84 7.61c.1.22.16.48.16.8V18c0 .53-.21 1-.6 1.41c-.4.4-.85.59-1.4.59H4c-.55 0-1-.19-1.4-.59C2.21 19 2 18.53 2 18v-4.59c0-.32.06-.58.16-.8L4.5 7.22C4.84 6.41 5.45 6 6.33 6H7V5c0-.55.18-1 .57-1.41C7.96 3.2 8.44 3 9 3h6c.56 0 1.04.2 1.43.59c.39.41.57.86.57 1.41v1h.67c.88 0 1.49.41 1.83 1.22l2.34 5.39z"
      fill="currentColor"
    ></path>
  </svg>
</template>
</file>

<file path="components/ui/animated-circular-progressbar/AnimatedCircularProgressBar.vue">
<template>
  <div class="progress-circle-base" :class="cn('relative size-40 text-2xl font-semibold', props.class)">
    <svg fill="none" class="size-full" stroke-width="2" viewBox="0 0 100 100">
      <circle v-if="currentPercent <= 90 && currentPercent >= 0" cx="50" cy="50" r="45" :stroke-width="circleStrokeWidth" stroke-dashoffset="0" stroke-linecap="round" stroke-linejoin="round" class="gauge-secondary-stroke opacity-100" />
      <circle cx="50" cy="50" r="45" :stroke-width="circleStrokeWidth" stroke-dashoffset="0" stroke-linecap="round" stroke-linejoin="round" class="gauge-primary-stroke opacity-100" />
    </svg>
    <span v-if="showPercentage" :data-current-value="currentPercent" class="absolute inset-0 m-auto size-fit delay-0 duration-1000 ease-linear animate-in fade-in">
      {{ currentPercent }}
    </span>
  </div>
</template>
⋮----
{{ currentPercent }}
⋮----
<script setup lang="ts">
import { computed } from "vue";
import { cn } from "@/lib/utils";
interface Props {
  max?: number;
  value?: number;
  min?: number;
  gaugePrimaryColor?: string;
  gaugeSecondaryColor?: string;
  class?: string;
  circleStrokeWidth?: number;
  showPercentage?: boolean;
  duration?: number;
}
const props = withDefaults(defineProps<Props>(), {
  max: 100,
  min: 0,
  value: 0,
  gaugePrimaryColor: "rgb(79 70 229)",
  gaugeSecondaryColor: "rgba(0, 0, 0, 0.1)",
  circleStrokeWidth: 10,
  showPercentage: true,
  duration: 1,
});
const circumference = 2 * Math.PI * 45;
const percentPx = circumference / 100;
const currentPercent = computed(() => ((props.value - props.min) / (props.max - props.min)) * 100);
const percentageInPx = computed(() => `${percentPx}px`);
const durationInSeconds = computed(() => `${props.duration}s`);
</script>
<style scoped lang="css">
.progress-circle-base {
  --circle-size: 100px;
  --circumference: v-bind(circumference);
  --percent-to-px: v-bind(percentageInPx);
  --gap-percent: 5;
  --offset-factor: 0;
  --transition-step: 200ms;
  --percent-to-deg: 3.6deg;
  transform: translateZ(0);
}
.gauge-primary-stroke {
  stroke: v-bind(gaugePrimaryColor);
  --stroke-percent: v-bind(currentPercent);
  stroke-dasharray: calc(var(--stroke-percent) * var(--percent-to-px)) var(--circumference);
  transition:
    v-bind(durationInSeconds) ease,
    stroke v-bind(durationInSeconds) ease;
  transition-property: stroke-dasharray, transform;
  transform: rotate(
    calc(-90deg + var(--gap-percent) * var(--offset-factor) * var(--percent-to-deg))
  );
  transform-origin: calc(var(--circle-size) / 2) calc(var(--circle-size) / 2);
}
.gauge-secondary-stroke {
  stroke: v-bind(gaugeSecondaryColor);
  --stroke-percent: 90 - v-bind(currentPercent);
  --offset-factor-secondary: calc(1 - var(--offset-factor));
  stroke-dasharray: calc(var(--stroke-percent) * var(--percent-to-px)) var(--circumference);
  transform: rotate(
      calc(
        1turn - 90deg -
          (var(--gap-percent) * var(--percent-to-deg) * var(--offset-factor-secondary))
      )
    )
    scaleY(-1);
  transition: all v-bind(durationInSeconds) ease;
  transform-origin: calc(var(--circle-size) / 2) calc(var(--circle-size) / 2);
}
</style>
</file>

<file path="components/ui/animated-circular-progressbar/index.ts">

</file>

<file path="components/ui/flickering-grid/FlickeringGrid.vue">
<template>
  <div ref="containerRef" :class="cn('w-full h-full', props.class)">
    <canvas ref="canvasRef" class="pointer-events-none" :width="canvasSize.width" :height="canvasSize.height" />
  </div>
</template>
<script lang="ts" setup>
import { cn } from "@/lib/utils";
import { ref, onMounted, onBeforeUnmount, toRefs, computed } from "vue";
interface FlickeringGridProps {
  starSize?: number;
  gridGap?: number;
  flickerChance?: number;
  color?: string;
  width?: number;
  height?: number;
  class?: string;
  maxOpacity?: number;
}
const props = withDefaults(defineProps<FlickeringGridProps>(), {
  starSize: 12,
  gridGap: 6,
  flickerChance: 0.3,
  color: "#ffea00",
  maxOpacity: 0.3,
});
const { starSize, gridGap, flickerChance, color, maxOpacity, width, height } = toRefs(props);
const containerRef = ref<HTMLDivElement>();
const canvasRef = ref<HTMLCanvasElement>();
const context = ref<CanvasRenderingContext2D>();
const isInView = ref(false);
const canvasSize = ref({ width: 0, height: 0 });
const computedColor = computed(() => {
  if (!context.value) return "rgba(255, 0, 0, 0.3)";
  const hex = color.value.replace(/^#/, "");
  const bigint = Number.parseInt(hex, 16);
  const r = (bigint >> 16) & 255;
  const g = (bigint >> 8) & 255;
  const b = bigint & 255;
  return `rgba(${r}, ${g}, ${b},`;
});
function setupCanvas(
  canvas: HTMLCanvasElement,
  width: number,
  height: number,
): {
  cols: number;
  rows: number;
  opacities: Float32Array;
  dpr: number;
} {
  const dpr = window.devicePixelRatio || 1;
  canvas.width = width * dpr;
  canvas.height = height * dpr;
  canvas.style.width = `${width}px`;
  canvas.style.height = `${height}px`;
  const cols = Math.floor(width / (starSize.value + gridGap.value));
  const rows = Math.floor(height / (starSize.value + gridGap.value));
  const opacities = new Float32Array(cols * rows);
  for (let i = 0; i < opacities.length; i++) {
    opacities[i] = Math.random() * maxOpacity.value;
  }
  return { cols, rows, opacities, dpr };
}
function updateOpacities(opacities: Float32Array, deltaTime: number) {
  for (let i = 0; i < opacities.length; i++) {
    if (Math.random() < flickerChance.value * deltaTime) {
      opacities[i] = Math.random() * maxOpacity.value;
    }
  }
}
function drawStar(
  ctx: CanvasRenderingContext2D,
  cx: number,
  cy: number,
  spikes: number,
  outerRadius: number,
  innerRadius: number,
) {
  let rot = (Math.PI / 2) * 3;
  let x = cx;
  let y = cy;
  const step = Math.PI / spikes;
  ctx.beginPath();
  ctx.moveTo(cx, cy - outerRadius);
  for (let i = 0; i < spikes; i++) {
    x = cx + Math.cos(rot) * outerRadius;
    y = cy + Math.sin(rot) * outerRadius;
    ctx.lineTo(x, y);
    rot += step;
    x = cx + Math.cos(rot) * innerRadius;
    y = cy + Math.sin(rot) * innerRadius;
    ctx.lineTo(x, y);
    rot += step;
  }
  ctx.lineTo(cx, cy - outerRadius);
  ctx.closePath();
}
function drawGrid(
  ctx: CanvasRenderingContext2D,
  width: number,
  height: number,
  cols: number,
  rows: number,
  opacities: Float32Array,
  dpr: number,
) {
  ctx.clearRect(0, 0, width, height);
  ctx.fillStyle = "transparent";
  ctx.fillRect(0, 0, width, height);
  for (let i = 0; i < cols; i++) {
    for (let j = 0; j < rows; j++) {
      const opacity = opacities[i * rows + j];
      ctx.fillStyle = `${computedColor.value}${opacity})`;
      const x = i * (starSize.value + gridGap.value) * dpr;
      const y = j * (starSize.value + gridGap.value) * dpr;
      const starDrawingSize = starSize.value * dpr;
      const cx = x + starDrawingSize / 2;
      const cy = y + starDrawingSize / 2;
      drawStar(ctx, cx, cy, 5, starDrawingSize / 2, starDrawingSize / 4);
      ctx.fill();
    }
  }
}
const gridParams = ref<ReturnType<typeof setupCanvas>>();
function updateCanvasSize() {
  const newWidth = width.value || containerRef.value!.clientWidth;
  const newHeight = height.value || containerRef.value!.clientHeight;
  canvasSize.value = { width: newWidth, height: newHeight };
  gridParams.value = setupCanvas(canvasRef.value!, newWidth, newHeight);
}
let animationFrameId: number | undefined;
let resizeObserver: ResizeObserver | undefined;
let intersectionObserver: IntersectionObserver | undefined;
let lastTime = 0;
function animate(time: number) {
  if (!isInView.value) return;
  const deltaTime = (time - lastTime) / 1000;
  lastTime = time;
  updateOpacities(gridParams.value!.opacities, deltaTime);
  drawGrid(
    context.value!,
    canvasRef.value!.width,
    canvasRef.value!.height,
    gridParams.value!.cols,
    gridParams.value!.rows,
    gridParams.value!.opacities,
    gridParams.value!.dpr,
  );
  animationFrameId = requestAnimationFrame(animate);
}
onMounted(() => {
  if (!canvasRef.value || !containerRef.value) return;
  context.value = canvasRef.value.getContext("2d")!;
  if (!context.value) return;
  updateCanvasSize();
  resizeObserver = new ResizeObserver(() => {
    updateCanvasSize();
  });
  intersectionObserver = new IntersectionObserver(
    ([entry]) => {
      isInView.value = entry.isIntersecting;
      animationFrameId = requestAnimationFrame(animate);
    },
    { threshold: 0 },
  );
  resizeObserver.observe(containerRef.value);
  intersectionObserver.observe(canvasRef.value);
});
onBeforeUnmount(() => {
  if (animationFrameId) {
    cancelAnimationFrame(animationFrameId);
  }
  resizeObserver?.disconnect();
  intersectionObserver?.disconnect();
});
</script>
</file>

<file path="components/ui/flickering-grid/index.d.ts">

</file>

<file path="components/ui/flickering-grid/index.ts">

</file>

<file path="components/ui/SettingsButton.vue">
<script setup lang="ts">
import { useEventManager } from '@/composables/EventManager'
const eventBus = useEventManager()
function openSettings() {
  eventBus.emit('settingsModal', true)
}
</script>
<template>
    <div class="flex flex-col items-center text-white">
        <img style="
          top: 0px;
          right: 8px;
          gap: 0px;
          margin: 0px;
          padding: 0px;
          background-size: cover;
          z-index: 999999;
        " src="/images/layout/settings.avif" @click="openSettings" />
    </div>
</template>
</file>

<file path="components/AdCarousel.vue">
<script setup lang="ts">
import { onMounted } from 'vue'
import { useWindowSize } from '@vueuse/core'
import Autoplay from 'embla-carousel-autoplay'
import emblaCarouselVue from 'embla-carousel-vue'
const [emblaRef, emblaApi] = emblaCarouselVue(
  { loop: false },
  [Autoplay({ delay: 5000 })]
)
const TWEEN_FACTOR_BASE = 0.52
let tweenFactor = 0
let tweenNodes: HTMLElement[] = []
const { height } = useWindowSize()
const numberWithinRange = (number: number, min: number, max: number): number =>
  Math.min(Math.max(number, min), max)
function setTweenNodes(api: any) {
  if (!api) return
  tweenNodes = api.slideNodes().map((slideNode: HTMLElement) => slideNode)
}
function setTweenFactor(api: any) {
  if (!api) return
  tweenFactor = TWEEN_FACTOR_BASE * api.scrollSnapList().length
}
function tweenScale(api: any, eventName?: string) {
  if (!api) return
  const engine = api.internalEngine()
  const scrollProgress = api.scrollProgress()
  const slidesInView: number[] = api.slidesInView()
  const isScrollEvent = eventName === 'scroll'
  api.scrollSnapList().forEach((scrollSnap: number, snapIndex: number) => {
    let diffToTarget = scrollSnap - scrollProgress
    const slidesInSnap: number[] = engine.slideRegistry[snapIndex]
    slidesInSnap.forEach((slideIndex: number) => {
      if (isScrollEvent && !slidesInView.includes(slideIndex)) return
      if (engine.options.loop) {
        engine.slideLooper.loopPoints.forEach((loopItem: any) => {
          const target = loopItem.target()
          if (slideIndex === loopItem.index && target !== 0) {
            const sign = Math.sign(target)
            if (sign === -1) diffToTarget = scrollSnap - (1 + scrollProgress)
            if (sign === 1) diffToTarget = scrollSnap + (1 - scrollProgress)
          }
        })
      }
      const tweenValue = 1 - Math.abs(diffToTarget * tweenFactor)
      const scale = numberWithinRange(tweenValue, 0, 1).toString()
      const tweenNode = tweenNodes[slideIndex]
      if (tweenNode) tweenNode.style.transform = `scale(${scale})`
    })
  })
}
function setupTweenScale(apiRef: { value: any }) {
  if (!apiRef?.value) return
  setTweenNodes(apiRef.value)
  setTweenFactor(apiRef.value)
  tweenScale(apiRef.value)
  apiRef.value
    .on('reInit', setTweenNodes)
    .on('reInit', setTweenFactor)
    .on('reInit', tweenScale)
    .on('scroll', tweenScale)
    .on('slideFocus', tweenScale)
  return () => {
    tweenNodes.forEach((slide) => slide.removeAttribute('style'))
  }
}
onMounted(() => {
  setupTweenScale(emblaApi)
})
</script>
<template>
  <div
    style="width: 100vw; max-width: 600px; height: 28vh"
    class="justify-start items-start flex grow-0"
  >
    <div v-if="height > 700" id="AdCarousel" class="adcarousel max-w-[700px]">
      <div ref="emblaRef" class="embla">
        <div
          class="embla__container justify-center items-center flex h-[100%] m-auto max-w-[500px]"
        >
          <div class="embla__slide">
            <img src="/images/ads/casinoadfreechips.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoClubBonusContestV2PCA2023.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoSales2024PopUprevamped.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoadfreechips.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoClubBonusContestV2PCA2023.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoSales2024PopUprevamped.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoClubBonusContestV2PCA2023.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoSales2024PopUprevamped.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoadfreechips.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoClubBonusContestV2PCA2023.png" style="height: 100%" />
          </div>
          <div class="embla__slide">
            <img src="/images/ads/casinoSales2024PopUprevamped.png" style="height: 100%" />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>
<style scoped>
  .adcarousel {
    position: relative;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 220px;
    overflow: hidden;
  }
  .adcarousel::before {
    content: '';
    position: absolute;
    inset: 0;
    background-image: url('/images/ads/promo-dock.png');
    background-repeat: no-repeat;
    background-position: center bottom;
    background-size: 90% auto;
    pointer-events: none;
    z-index: 0;
  }
  .embla {
    position: relative;
    z-index: 1;
    overflow: hidden;
    height: 100%;
    align-items: start;
    justify-content: center;
    width: 100%;
    margin: auto;
  }
  .embla__container {
    display: flex;
    width: 100%;
    align-items: start;
    justify-content: center;
    position: relative;
    z-index: 1;
  }
  .embla__slide {
    flex: 0 0 100%;
    min-width: 0;
        width: 80%;
    margin: auto;
    padding-bottom: 0px;
    padding-left: 26px;
    padding-right: 26px;
    position: relative;
    z-index: 1;
  }
</style>
</file>

<file path="components/AnimationLayer.vue">
<template>
  <div class="animation-layer">
    <component
      v-for="anim in animations"
      :key="anim.id"
      :is="anim.component"
      v-bind="anim.props"
      :style="anim.style"
      class="animation-sprite"
    />
  </div>
</template>
<script setup lang="ts">
import { useAnimationLayer } from '@/composables/useAnimationLayer'
const { animations } = useAnimationLayer()
</script>
<style scoped>
.animation-layer {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: transparent;
  pointer-events: none;
  z-index: 1000;
  overflow: hidden;
}
.animation-sprite {
  position: absolute;
}
</style>
</file>

<file path="components/AuroraText.vue">
<script setup lang="ts">
  interface AuroraTextProps {
    className?: string
    colors?: string[]
    speed?: number
  }
  const props = withDefaults(defineProps<AuroraTextProps>(), {
    colors: () => ['#FF0080', '#7928CA', '#0070F3', '#38bdf8'],
    speed: 1,
  })
  const gradientStyle = {
    backgroundImage: `linear-gradient(135deg, ${props.colors.join(', ')}, ${props.colors[0]})`,
    WebkitBackgroundClip: 'text',
    WebkitTextFillColor: 'transparent',
    animationDuration: `${10 / props.speed}s`,
    fontFamily: 'onacona',
  }
</script>
<template>
  <span :class="`relative inline-block ${props.className}`">
    <span class="sr-only">
      <slot />
    </span>
    <span
      class="relative animate-aurora bg-[length:200%_auto] bg-clip-text text-transparent"
      :style="gradientStyle"
      aria-hidden="true"
    >
      <slot />
    </span>
  </span>
</template>
<style scoped>
  .animate-aurora {
    animation: aurora 12s ease-in-out infinite alternate;
  }
  @keyframes aurora {
    0% {
      background-position: 0% 50%;
      transform: rotate(-5deg) scale(0.9);
    }
    25% {
      background-position: 50% 100%;
      transform: rotate(5deg) scale(1.1);
    }
    50% {
      background-position: 100% 50%;
      transform: rotate(-3deg) scale(0.95);
    }
    75%: {
      background-position: 50% 0%;
      transform: rotate(3deg) scale(1.05);
    }
    100% {
      background-position: 0% 50%;
      transform: rotate(-5deg) scale(0.9);
    }
  }
</style>
</file>

<file path="components/CloseButton.vue">
<script setup lang="ts">
  import { computed, ref } from 'vue'
  const props = defineProps({
    label: String,
    idleImage: String,
    pressedImage: String,
    leftCap: { type: Number, default: 1 },
    rightCap: { type: Number, default: 1 },
    topCap: { type: Number, default: 1 },
    bottomCap: { type: Number, default: 1 },
  })
  defineEmits(['click'])
  const isPressed = ref(false)
  function pressButton() {
    isPressed.value = true
  }
  const buttonStyle = computed(() => {
    const image = isPressed.value ? props.pressedImage : props.idleImage
    const padding = `${props.topCap}px ${props.rightCap}px ${props.bottomCap}px ${props.leftCap}px`
    return {
      padding,
      backgroundImage: `url(${image})`,
      height: `52px`,
      width: '52px',
      backgroundSize: `calc(100% + ${props.leftCap}px + ${props.rightCap}px) calc(100% + ${props.topCap}px + ${props.bottomCap}px)`,
      border: 'none',
      cursor: 'pointer',
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
    }
  })
</script>
<template>
  <div style="border-width: 0px">
    <button
      class="nine-slice-button"
      :style="buttonStyle"
      style="border-width: 0px"
      @mousedown="isPressed = true"
      @click="pressButton"
    >
      <span class="button-label">{{ label }}</span>
    </button>
  </div>
</template>
⋮----
<span class="button-label">{{ label }}</span>
⋮----
<style scoped>
  .nine-slice-button {
    background-color: transparent;
    font-family: sans-serif;
    font-size: 16px;
    color: #333;
    white-space: nowrap;
  }
  .button-label {
  }
</style>
</file>

<file path="components/Footer.vue">
<template>
  <footer class="bg-transparent  text-white pb-4 text-sm leading-3 tracking-tighter px-2 w-full bottom-0 flex justify-between h-[50px] left-0 items-end
    " :class="isMobile ? 'fixed' : 'absolute'"
    style=" background-image: url('/images/bottom/slice.avif'); background-size: contain;background-position-y: 100%;  background-repeat: repeat-x;">
    <div class=" flex flex-col onacona tracking-[-.1em]  text-[18px] leading-2.5  items-center text-white">
      <SpriteAnimator :animation-data="WheelAnimation" :image-url="wheelImageUrl" :width="78" :height="50"
        :frame-count="WheelAnimation.frames.length" :frame-rate="10" />
      <span class="">Wheel</span>
    </div>
    <div class="flex flex-col onacona tracking-[-.1em]  text-[18px] leading-2.5  items-center ">
      <SpriteAnimator style="transform: translateX(4px) translateY(-2px);" :animation-data="LeaderNewAnimation"
        :image-url="leaderImageUrl" :width="60" :height="60" :frame-count="LeaderNewAnimation.frames.length"
        :initial-delay-max="4" :loop-delay="7" />
      <span class="">Leaders</span>
    </div>
    <div class="flex flex-col onacona tracking-[-.1em]  text-[18px] leading-2.5 items-center text-white mb-4">
      <ChatPanel />
    </div>
    <div class="flex flex-col onacona tracking-[-.1em]  text-[18px] leading-2.5  items-center text-white">
      <SpriteAnimator :animation-data="VaultAnimation" :image-url="vaultImageUrl" :width="60" :height="60"
        :frame-count="VaultAnimation.frames.length" :initial-delay-max="6" :loop-delay="7" />
      <span class="">Vault</span>
    </div>
    <div class="flex flex-col onacona tracking-[-.1em]  text-[12px] leading-2.5 items-center text-white">
      <SpriteAnimator style="transform: scale(1.3) translateY(4px) translateX(-4px); transform-origin: center"
        :animation-data="RewardsAnimation" :image-url="rewardsImageUrl" :width="60" :height="60"
        :frame-count="RewardsAnimation.frames.length" :initial-delay-max="8" :loop-delay="7" />
      <span class="">Rewards</span>
    </div>
  </footer>
</template>
<style scoped></style>
<script setup lang="ts">
import SpriteAnimator from './SpriteAnimator.vue';
import LeaderNewAnimation from '@/assets/anim/leadernew.json';
import RewardsAnimation from '@/assets/anim/rewards.json';
import VaultAnimation from '@/assets/anim/vault.json';
import WheelAnimation from '@/assets/anim/wheel.json';
import leaderImageUrl from '@/assets/anim/leadernew.png';
import rewardsImageUrl from '@/assets/anim/rewards.png';
import vaultImageUrl from '@/assets/anim/vault.png';
import wheelImageUrl from '@/assets/anim/wheel.png';
const { isMobile } = useScreen()
</script>
</file>

<file path="components/FormCheckRadio.vue">
<script setup>
  import { computed } from 'vue'
  const props = defineProps({
    name: {
      type: String,
      required: true,
    },
    type: {
      type: String,
      default: 'checkbox',
      validator: (value) => ['checkbox', 'radio', 'switch'].includes(value),
    },
    label: {
      type: String,
      default: null,
    },
    modelValue: {
      type: [Array, String, Number, Boolean],
      default: null,
    },
    inputValue: {
      type: [String, Number, Boolean],
      required: true,
    },
  })
  const emit = defineEmits(['update:modelValue'])
  const computedValue = computed({
    get: () => props.modelValue,
    set: (value) => {
      emit('update:modelValue', value)
    },
  })
  const inputType = computed(() => (props.type === 'radio' ? 'radio' : 'checkbox'))
</script>
<template>
  <label :class="type">
    <input v-model="computedValue" :type="inputType" :name="name" :value="inputValue" />
    <span class="check" />
    <span class="pl-2">{{ label }}</span>
  </label>
</template>
⋮----
<span class="pl-2">{{ label }}</span>
</file>

<file path="components/FormCheckRadioGroup.vue">
<script setup>
  import { computed } from 'vue'
  const props = defineProps({
    options: {
      type: Object,
      default: () => {},
    },
    name: {
      type: String,
      required: true,
    },
    type: {
      type: String,
      default: 'checkbox',
      validator: (value) => ['checkbox', 'radio', 'switch'].includes(value),
    },
    componentClass: {
      type: String,
      default: null,
    },
    isColumn: Boolean,
    modelValue: {
      type: [Array, String, Number, Boolean],
      default: null,
    },
  })
  const emit = defineEmits(['update:modelValue'])
  const computedValue = computed({
    get: () => props.modelValue,
    set: (value) => {
      emit('update:modelValue', value)
    },
  })
</script>
<template>
  <div class="flex justify-start flex-wrap -mb-3" :class="{ 'flex-col': isColumn }">
    <FormCheckRadio
      v-for="(value, key) in options"
      :key="key"
      v-model="computedValue"
      :type="type"
      :name="name"
      :input-value="key"
      :label="value"
      :class="componentClass"
      class="mr-6 mb-3 last:mr-0"
    />
  </div>
</template>
</file>

<file path="components/GameCarousel.vue">
<script setup lang="ts">
import { useGameStore } from '@/stores/game.store'
import { onMounted, ref, watch } from 'vue'
import StarBurst from './StarBurst.vue';
import type { Game } from '@/sdk/generated'
interface LocalGame extends Omit<Game, 'id'> {
  id: string | number
  temperature: 'hot' | 'cold' | 'none'
  featured?: boolean
  developer: string
  provider?: string
}
const gameStore = useGameStore()
const games = ref<LocalGame[]>([])
watch(() => gameStore.games, (newGames) => {
  games.value = newGames.map((game): LocalGame => ({
    ...game,
    id: game.id,
    temperature: 'none',
    featured: false,
    developer: 'provider' in game ? String(game.provider) : 'unknown',
    title: game.title || game.name || 'Untitled Game',
    category: game.category || 'other',
    tags: Array.isArray(game.tags) ? game.tags : [],
    isActive: game.isActive ?? true
  }))
}, { immediate: true })
const carousel = ref<HTMLElement | null>(null)
const animatingGameId = ref<string | null>(null);
const loadedImages = ref<Set<string>>(new Set())
const imageLoadingStates = ref<Map<string, 'loading' | 'loaded' | 'error'>>(new Map())
const imageDimensions = ref<Map<string, { width: number; height: number; aspectRatio: number }>>(new Map())
const getGameImageUrl = (game: LocalGame): string => {
  const developer = game.provider?.toLowerCase() ||  game.developer?.toLowerCase() || game.providerName?.toLowerCase() ||''
  const gameName = game.name.toLowerCase().replace(/[^a-z0-9]+/g, '-')
  // return `/images/games/${developer}/${gameName}.avif`
  return `https://images.cashflowcasino.com/${developer}/${gameName}.avif`
}
// Get smart background sizing based on image aspect ratio
const getSmartBackgroundSize = (game: LocalGame) => {
  const gameId = String(game.id)
  const dimensions = imageDimensions.value.get(gameId)
  if (!dimensions) return 'auto 100%' // Default fallback
  const { aspectRatio } = dimensions
  // Mobile container aspect ratio: 145.19/239 = 0.608
  const containerAspectRatio = 0.608
  // Special handling for Red Tiger images (rtg.avif)
  const isRedTiger = game.developer.toLowerCase() === 'redtiger' || getGameImageUrl(game).includes('rtg.avif')
  if (isRedTiger) {
    return aspectRatio > containerAspectRatio ? 'auto 100%' : '100% auto'
  }
  return aspectRatio > containerAspectRatio ? 'auto 100%' : '100% auto'
}
const getBackgroundImageStyle = (game: LocalGame) => {
  const gameId = String(game.id)
  const isLoaded = loadedImages.value.has(gameId)
  const loadingState = imageLoadingStates.value.get(gameId)
  return {
    backgroundImage: isLoaded ? `url(${getGameImageUrl(game)})` : 'none',
    backgroundSize: getSmartBackgroundSize(game),
    backgroundPosition: 'center',
    backgroundRepeat: 'no-repeat',
    opacity: isLoaded && loadingState === 'loaded' ? 1 : 0,
    transition: 'opacity 0.3s ease-in-out'
  }
}
const preloadImage = (game: LocalGame): void => {
  const gameId = String(game.id)
  if (loadedImages.value.has(gameId)) {
    return
  }
  const img = new Image()
  const imageUrl = getGameImageUrl(game)
  if (!imageUrl) {
    console.error('No image URL found for game:', game.id)
    return
  }
  imageLoadingStates.value.set(gameId, 'loading')
  img.onload = (): void => {
    loadedImages.value.add(gameId)
    imageLoadingStates.value.set(gameId, 'loaded')
    imageDimensions.value.set(gameId, {
      width: img.naturalWidth,
      height: img.naturalHeight,
      aspectRatio: img.naturalWidth / img.naturalHeight
    })
  }
  img.onerror = (): void => {
    console.error(`Failed to load image: ${imageUrl}`)
    imageLoadingStates.value.set(gameId, 'error')
  }
  img.src = imageUrl
}
const getScrollDistance = () => {
  const screenWidth = window.innerWidth
  if (screenWidth <= 360) {
    return 2 * 140 + 10 + 10
  } else if (screenWidth <= 480) {
    return 2 * 160 + 12 + 12
  } else if (screenWidth <= 768) {
    return 2 * 180 + 12 + 12
  } else {
    return 200
  }
}
const scrollLeft = (distance?: number) => {
  if (carousel.value) {
    const scrollDistance = distance || getScrollDistance()
    carousel.value.scrollBy({
      left: -scrollDistance,
      behavior: 'smooth'
    })
  }
}
const scrollRight = (distance?: number) => {
  if (carousel.value) {
    const scrollDistance = distance || getScrollDistance()
    carousel.value.scrollBy({
      left: scrollDistance,
      behavior: 'smooth'
    })
  }
}
defineExpose({
  scrollLeft,
  scrollRight
})
const loadGame = async (game: LocalGame) => {
  if (animatingGameId.value !== null) return;
  const gameId = String(game.id)
  if (animatingGameId.value === gameId) return
  animatingGameId.value = gameId
  preloadImage(game)
  await new Promise(resolve => setTimeout(resolve, 100))
  const gameUrl = 'url' in game && game.url ? String(game.url) : '#'
  window.open(gameUrl, '_blank')
  setTimeout(() => {
    animatingGameId.value = null
  }, 100)
}
let intersectionObserver: IntersectionObserver | null = null
const setupLazyLoading = () => {
  if (intersectionObserver) {
    intersectionObserver.disconnect()
  }
  intersectionObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const gameId = parseInt(entry.target.getAttribute('data-game-id') || '0')
          const game = games.value.find((g) => String(g.id) === String(gameId))
          if (game && !loadedImages.value.has(String(game.id))) {
            preloadImage(game)
            intersectionObserver?.unobserve(entry.target)
          }
        }
      })
    },
    {
      root: null,
      rootMargin: '100px',
      threshold: 0.1
    }
  )
  setTimeout(() => {
    const gameCards = document.querySelectorAll('.game-card')
    gameCards.forEach((card) => {
      if (intersectionObserver) {
        intersectionObserver.observe(card)
      }
    })
  }, 100)
}
onMounted(() => {
  setupLazyLoading()
  const initialLoadCount = window.innerWidth <= 768 ? 2 : 4
  games.value.slice(0, initialLoadCount).forEach((game) => {
    preloadImage(game)
    if (carousel.value) {
      carousel.value.addEventListener('scroll', handleCarouselScroll)
    }
  })
})
const handleCarouselScroll = () => {
  if (!carousel.value) return
  const scrollLeft = carousel.value.scrollLeft
  const containerWidth = carousel.value.offsetWidth
  const scrollRight = scrollLeft + containerWidth
  games.value.forEach((game, index) => {
    if (!loadedImages.value.has(String(game.id))) {
      const cardWidth = window.innerWidth <= 768 ? 180 : 200
      const gap = window.innerWidth <= 768 ? 15 : 15
      const cardPosition = index * (cardWidth + gap)
      if (cardPosition >= scrollLeft - 400 && cardPosition <= scrollRight + 400) {
        preloadImage(game)
      }
    }
  })
}
const onImageError = (event: Event) => {
  const target = event.target as HTMLImageElement
  target.src = 'https://placehold.co/300x400/64748b/ffffff?text=Image+Error'
  target.style.objectFit = 'contain'
}
const isFeatured = (game: LocalGame): boolean => Boolean(game.featured)
</script>
<template>
  <div
    class="carousel-container animate__animated animate__slideInRight animate__delay-1s bungee align-center relative flex flex-row items-center justify-center">
    <div ref="carousel" class="carousel-scroll-area">
      <div class="carousel-track">
        <div v-for="game in games" :key="game.name" :data-game-id="game.id" class="game-card" :class="{
          'theme-cold': game.temperature === 'cold',
          'theme-hot': game.temperature === 'hot',
          'animate-pulse': animatingGameId === String(game.id),
          'is-fading-out': animatingGameId !== null && animatingGameId !== String(game.id)
        }" @click="loadGame(game)">
          <div class="card-content relative flex flex-col pt-5 max-h-[300px]"
            :class="{ 'feat mt-3 flex-col align-bottom': isFeatured(game) }" :style="{
              backgroundImage: `url(${!isFeatured(game) ? '/images/games/tall-field.avif' : '/images/games/featured.webp'})`
            }" style="background-size: 100% 100%; background-repeat: no-repeat">
            <div :class="isFeatured(game) ? 'card__banner_feat' : 'card__banner'" style="">
              <img v-if="game.temperature === 'cold'"
                src="https:
                class="card__banner-img" />
              <img v-else-if="game.temperature === 'hot'"
                src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/49240/hand-banner-gold.png" alt=""
                class="card__banner-img" />
              <img v-else src="/images/games/hand-banner-black.png" alt="" class="card__banner-img" />
              <div class="card__banner__text onacona pb-1"
                style="line-height: 1.7; letter-spacing: 1.2px; color: white">
                <span :style="game.title.length > 12 ? 'font-size: .8rem; ' : 'font-size: 1rem'">
                  {{ game.title.substring(0, 16) }}
                </span>
              </div>
            </div>
            <div :class="isFeatured(game) ? 'card-image-container-featured feat box' : 'card-image-container'"
              class="absolute top-0 overflow-hidden" style="z-index: 1">
              <div class="game-image-container-with-filler absolute" style="
                  width: 92%;
                  top: 20px;
                  height: 240px;
                  max-height: 260px;
                  padding-top: 20px;
                  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.05) 20%, transparent 30%, transparent 70%, rgba(0, 0, 0, 0.05) 80%, rgba(0, 0, 0, 0.1) 100%);
                  border-radius: 15px;
                  border-top-left-radius: 30px;
                  border-top-right-radius: 30px;
                  overflow: hidden;
                ">
                <div style="
                    width: 100%;
                    height: 100%;
                    background-position: center center;
                    background-repeat: no-repeat;
                    transition:
                      background-image 0.3s ease,
                      background-size 0.3s ease;
                  " :style="getBackgroundImageStyle(game)" :alt="game.title" class="game-image absolute"
                  @error="onImageError" />
              </div>
              <img v-if="game.temperature === 'cold'" src="/images/games/speedRTP_1.gif" height="40px" width="40px"
                style="position: absolute; bottom: 0; left: 0" />
              <img v-if="game.temperature === 'hot'" src="/images/games/speedRTP_5.gif" height="40px" width="40px"
                style="position: absolute; bottom: 0; left: 0" />
              <div class="bottom-banner">
                {{ game.developer }}
              </div>
            </div>
          </div>
          <StarBurst />
        </div>
      </div>
    </div>
  </div>
</template>
⋮----
{{ game.title.substring(0, 16) }}
⋮----
{{ game.developer }}
⋮----
<style scoped>
.carousel-container {
  height: 42vh;
  min-height: 300px;
  max-height: 380px;
  width: 100%;
  max-width: 600px;
  margin: 0 0;
  margin-top: 10px;
  margin-bottom: 10px;
  position: relative;
  box-sizing: border-box;
}
.carousel-scroll-area {
  display: flex;
  overflow-x: auto;
  overflow-y: hidden;
  height: 100%;
  width: 100%;
  scrollbar-width: none;
  scroll-behavior: smooth;
}
.carousel-track {
  display: flex;
  gap: 12px;
  height: 100%;
  box-sizing: border-box;
}
.card-image-container {
  height: 100%;
  flex-grow: 1;
  overflow: hidden;
  position: relative;
  border-radius: inherit;
  top: 0;
  z-index: 1;
}
.card-image-container-featured {
  height: 100%;
  flex-grow: 1;
  overflow: hidden;
  position: relative;
  border-radius: inherit;
  top: 20px;
  z-index: 1;
}
.game-image-container-with-filler {
  z-index: 0;
  display: block;
  margin-left: 8px;
  margin-right: 5px;
  border-color: white;
  border-width: 1.5px;
  border-left-style: solid;
  border-right-style: solid;
  border-bottom-style: solid;
  border-top-style: none;
  transition: transform 0.3s ease;
  position: absolute;
}
.game-image {
  z-index: 0;
  display: block;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  object-fit: cover;
  transition: background-image 0.3s ease;
  position: absolute;
}
.game-card {
  flex-shrink: 0;
  width: 200px;
  min-width: 200px;
  max-width: 200px;
  max-height: 330px;
  height: 100%;
  border-radius: 15px;
  position: relative;
  overflow: hidden;
  cursor: pointer;
  transition: transform 0.5s ease-out, opacity 0.5s ease-out;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);
}
.game-card.is-selected {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(1.2);
  z-index: 1000;
  transition: transform 0.5s ease-in-out, top 0.5s ease-in-out, left 0.5s ease-in-out;
}
.game-card.is-fading-out {
  opacity: 0;
  transform: scale(0.8);
}
.card__banner {
  width: 100%;
  position: absolute;
  top: 5%;
  left: 51%;
  transform: translateX(-51.5%) scaleY(1.1);
  background: url('https://s3-us-west-2.amazonaws.com/s.cdpn.io/49240/hand-banner-gold.png') 0 0 no-repeat;
  background-size: 100% 110%;
  z-index: 4;
}
.card__banner_feat {
  width: 100%;
  position: absolute;
  top: 9%;
  left: 51%;
  transform: translateX(-51.5%);
  background: url('https://s3-us-west-2.amazonaws.com/s.cdpn.io/49240/hand-banner-gold.png') 0 0 no-repeat;
  background-size: 100% auto;
  z-index: 4;
}
.card__banner-img {
  display: block;
  width: 100%;
  height: auto;
}
.card__banner__text {
  width: 90%;
  position: absolute;
  flex-wrap: nowrap;
  top: -2px;
  font-weight: 800;
  left: 50%;
  padding-left: 7px;
  padding-right: 7px;
  transform: translate(-51%, 10%);
  z-index: 5;
  text-align: center;
  font-size: 16px;
  font-weight: 600;
  color: #ffffff;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.7);
}
.card-content {
  z-index: 2;
  width: 100%;
  height: 100%;
  max-height: 350px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  border-radius: inherit;
  top: 0;
}
.bottom-banner {
  position: absolute;
  left: 0;
  width: 100%;
  background-color: transparent;
  color: white;
  text-align: center;
  font-size: 0.9rem;
  font-weight: bold;
  padding: 8px 8px;
  text-transform: uppercase;
  z-index: 3;
  box-sizing: border-box;
  bottom: 0;
  border-bottom-left-radius: inherit;
  border-bottom-right-radius: inherit;
}
</style>
</file>

<file path="components/GameLoader.vue">
<template>
  <div ref="gameContainer" class="game-host-container bg-blue">
  </div>
</template>
<style scoped>
.game-host-container {
  width: 100%;
  height: 800px;
  overflow: hidden;
  z-index: 9990;
}
</style>
<script setup lang="ts">
import { ref, onMounted, onUnmounted, defineProps, defineEmits, defineExpose } from 'vue';
import GameLauncher from '../services/GameLauncher';
interface Props {
  launchOptions: {
    gameConfig?: {
      authToken?: string;
      gameSessionId?: string;
      userId?: string;
      [key: string]: string | number | boolean | undefined;
    };
    [key: string]: unknown;
  };
}
const props = defineProps<Props>();
const emit = defineEmits<{
  (e: 'messageFromGame', data: Record<string, unknown>): void;
}>();
const gameContainer = ref<HTMLElement | null>(null);
let launcher: GameLauncher | null = null;
function handleMessageFromGame(data: Record<string, unknown>) {
  console.log('Message received from iframe:', data);
  if (data.type === 'RTG_LOADER_READY') {
    const gameConfig = props.launchOptions.gameConfig;
    if (launcher && gameConfig) {
      const authPayload = {
        type: 'SET_AUTH_TOKEN',
        token: gameConfig.authToken,
        gameSessionId: gameConfig.gameSessionId,
        userId: gameConfig.userId,
      };
      console.log('Sending SET_AUTH_TOKEN to iframe:', authPayload);
      launcher.sendMessage(authPayload);
    } else {
      console.error('GameHost: Launcher not initialized or gameConfig missing in launchOptions.');
    }
  }
  emit('messageFromGame', data);
}
onMounted(() => {
  if (gameContainer.value) {
    launcher = new GameLauncher(gameContainer.value, {
      onMessage: handleMessageFromGame,
    });
    launcher.launch(props.launchOptions);
  }
});
onUnmounted(() => {
  if (launcher) {
    launcher.destroy();
  }
});
defineExpose({
  sendMessage: (message: Record<string, unknown>) => {
    launcher?.sendMessage(message);
  },
});
</script>
</file>

<file path="components/GlassButton.vue">
<script lang="ts" setup>
import router from '@/router'
const props = defineProps(['to', 'type', 'w', 'text', 'shine', 'color', 'disabled', 'loading'])
function handleClick() {
  if (props.to) {
    router.push(props.to)
  }
}
const buttonStyle = ref()
if (props.w) {
}
</script>
<template>
  <div v-if="!disabled && !loading" :id="type" class="button glass relative flex items-center justify-center text-lg"
    :class="color === 'blue' ? 'blueGlass' : color === 'red' ? 'redGlass' : 'greenGlass'" :style="buttonStyle"
    @click="handleClick">
    <div v-if="shine" class="shine-box" :style="`min-width: ${w}px`" />
    <div class="text-2xl flex baseFont">
      <slot />
    </div>
  </div>
  <div v-else>
    <div v-if="disabled" class="button glass greyGlass relative flex items-center justify-center text-lg">
      <div class="" :style="`min-width: ${w}px`">
        <slot class="primary-text" />
      </div>
    </div>
    <div v-if="loading" class="button glass relative flex items-center justify-center text-lg"
      :class="color === 'blue' ? 'blueGlass' : color === 'red' ? 'redGlass' : 'greenGlass'" :style="buttonStyle">
      <div class="" :style="`min-width: ${w}px`">
      </div>
    </div>
  </div>
</template>
<style scoped>
.primary-text {
  font-family: 'Broznier';
  font-size: 22px;
  font-weight: 400;
  color: white;
  background: -webkit-linear-gradient(#ba4ff8, #c382fc);
}
.honk {
  font-family: 'Broznier';
  font-optical-sizing: auto;
  font-weight: 400;
  font-style: normal;
  font-variation-settings:
    'MORF' 15,
    'SHLN' 50;
}
.fira-code {
  font-family: 'Broznier';
  font-optical-sizing: auto;
  font-weight: 900;
  font-style: normal;
}
.glass {
  box-shadow: 0px 1px 10px -5px #510099;
  position: relative;
  display: inline-block;
  padding: 3px 13px 5px 13px;
  font-weight: 900;
  padding-bottom: 0px;
  background-size: 100% 130%;
  border-bottom-right-radius: 0;
  background-color: white;
  font-size: 16px;
  border-bottom-right-radius: 13px;
  border-bottom-left-radius: 13px;
  border-top-left-radius: 13px;
  border-top-right-radius: 13px;
}
.glass.greenGlass {
  background-color: green;
  background-image: linear-gradient(green, lightgreen);
}
.glass.blueGlass {
  background-color: #1f1f8a;
  background-image: linear-gradient(#1f1f8a, #675df0);
}
.glass.greyGlass {
  background-color: #38383a;
  background-image: linear-gradient(#38383a, #908f9e);
}
.glass.redGlass {
  background-color: #8a1f54;
  background-image: linear-gradient(#f05d71, #8a1f48);
}
.shine-box {
  position: absolute;
  width: 100%;
  height: 97%;
  overflow: hidden;
  border-radius: 22px;
  transform: translate(0px, 0px);
}
.shine-box:before {
  position: absolute;
  left: -800px;
  content: '';
  width: 30%;
  height: 97%;
  background: rgba(255, 255, 255, 0.6);
  transform: skew(-50deg);
  /* transition: 1s;
	 */
  animation: shine 4s ease infinite;
}
@keyframes shine {
  from {
    left: -500px;
  }
  to {
    left: 655px;
  }
}
.glass:active {
  color: white;
  transform: translateY(0.2em);
}
.glass:after {
  border-radius: 6px;
  content: '';
  position: absolute;
  top: 2px;
  left: 4px;
  width: calc(100% - 8px);
  height: 40%;
  background: linear-gradient(rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.2));
}
</style>
</file>

<file path="components/GlobalLoading.vue">
<template>
  <teleport to="body">
    <Transition name="fade">
      <div v-if="isVisible" ref="loadingElement" class="loading-container" data-testid="global-loading"
        :style="{ zIndex: 9999 }">
        <div class="loading-content">
          <img src="/images/logo.png" alt="Loading..." class="w-48 h-auto mb-8 animate-pulse">
        </div>
        <img class="w-16 h-16" src="/images/loading.svg" alt="Loading spinner">
      </div>
    </Transition>
  </teleport>
</template>
<script setup lang="ts">
import { useAppStore } from '@/stores/app.store'
import { storeToRefs } from 'pinia'
import { onBeforeUnmount, ref, watch } from 'vue'
const appStore = useAppStore()
const { globalLoading } = storeToRefs(appStore)
const isVisible = ref(false)
const loadingElement = ref<HTMLElement | null>(null)
const updateLoadingState = (isLoading: boolean) => {
  if (isLoading) {
    document.body.classList.add('loading-active')
    isVisible.value = true
  } else {
    document.body.classList.remove('loading-active')
    void document.body.offsetHeight
    isVisible.value = false
  }
}
updateLoadingState(globalLoading.value)
const unwatch = watch(globalLoading, (newVal) => {
  updateLoadingState(newVal)
})
onBeforeUnmount(() => {
  unwatch()
  document.body.style.overflow = ''
})
// Expose debug methods
</script>
<style>
/* Add this at the top of your style section */
:global(body.loading-active) {
  overflow: hidden !important;
  position: fixed;
  width: 100%;
  height: 100%;
}
/* Update the loading container styles */
.loading-container {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(0, 0, 0, 0.7);
  z-index: 9999;
  pointer-events: auto;
  /* Ensure it's above everything except modals */
  isolation: isolate;
}
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s ease;
}
.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
.loading-icon {
}
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
.loading-container * {
  position: relative;
  z-index: 10000;
}
</style>
</file>

<file path="components/Header.vue">
<script lang="ts" setup>
import { ref, computed } from 'vue'
import { useDepositStore } from '@/stores/deposit.store'
import { useEventManager, type EventMessage } from '@/composables/EventManager'
import { BalanceUpdatePayload } from '@/types/events';
const eventBus = useEventManager()
const countdownActive = ref(false)
const sparkle = ref(false)
const depositStore = useDepositStore()
const { wallet } = storeToRefs(depositStore)
const balanceChange = ref<number | null>(null)
const balanceChangeKey = ref(0)
const balance = computed(() => wallet.value?.balance || 0)
function openSettings() {
  console.log('x')
  eventBus.emit('settingsModal', true)
}
const depositItems = ref()
const target = ref()
const remaining_minutes = ref(0)
const remaining_seconds_display = ref(0)
const formatBalance = (balance: number) => {
  return balance.toFixed(0)
}
const interval = ref()
function countdownTimer(start_date: Date): void {
  const end_date = new Date(start_date.getTime() + 3600000)
  const now = new Date()
  const time_difference = end_date.getTime() - now.getTime()
  const total_seconds = Math.floor(time_difference / 1000)
  const minutes = Math.floor(total_seconds / 60)
  const seconds = total_seconds % 60
  console.log(`Countdown: ${minutes} minutes and ${seconds} seconds`)
  let remaining_seconds = total_seconds
  interval.value = setInterval(async () => {
    remaining_minutes.value = Math.floor(remaining_seconds / 60)
    remaining_seconds_display.value = remaining_seconds % 60
    remaining_seconds -= 1
    if (remaining_seconds < 0) {
      clearInterval(interval.value)
      console.log('Countdown finished!')
      depositItems.value?.splice(0, 3)
      await Promise.resolve()
    }
  }, 1000)
  countdownActive.value = true
}
onMounted(async () => {
  eventBus.on('balance:update', ((payload: BalanceUpdatePayload) => {
    console.log(`TopBarMobile: balance:update event received with change of ${payload.amount}.`);
    balanceChange.value = payload.amount;
    balanceChangeKey.value++;
    setTimeout(() => {
      balanceChange.value = null;
    }, 2000);
  }) as EventMessage<'balance:update'>, 'TopBarMobile');
  depositItems.value = []
  if (depositItems.value !== undefined && depositItems.value.length > 0) {
    depositItems.value.forEach((item: { status: string; createdAt: string | number | Date }) => {
      if (item.status === 'PENDING') {
        countdownTimer(new Date(item.createdAt))
      }
    })
  }
})
</script>
<template>
  <div ref="target" class="tbar flex flex-row justify-stretch animate__animated animate__slideInDown animate__delay-2s">
    <div class="w-100 flex flex-row justify-start">
      <PlayerAvatar style="z-index: 99; width: 55px" current-exp="1000" :sparkle="sparkle" :max-exp="100" />
      <div id="PlayerCredits" class="color-white flex flex-col pb-1 pl-1 text-center">
        <div v-if="countdownActive" class="flex w-full flex-row items-center" style="
            height: 14px;
            font-size: 16px;
            font-weight: 600;
            line-height: 0.5;
            margin-left: 8px;
            margin-top: 4px;
            color: white;
          ">
          <img src="/images/layout/cashappicon.avif" width="14px" style="margin-right: 7px; color: white" />
          ends:
          {{ remaining_minutes > 1 ? `${remaining_minutes}m` : `0m:${remaining_seconds_display}` }}
        </div>
        <div v-else class="flex w-full flex-row" style="height: 20px; font-size: 26px; font-weight: 600" />
        <div class="glow-light flex flex-row items-center justify-center" style="
            z-index: 999;
            text-align: center;
            min-height: 35px;
            min-width: 120px;
            max-width: 120px;
            font-size: 23px;
            padding-top: 1px;
            padding-left: 6px;
            margin-left: 6px;
            font-weight: 600;
            background-size: cover;
            background-image: url('/images/layout/money_backing.png');
          ">
          <div v-if="wallet" class="glow mt--2 flex justify-center leading-[0.5] pt-.5"
            style="line-height: 0.8; text-align: center; letter-spacing: 0px; font-weight: 800">
            {{ formatBalance(balance) }}
          </div>
        </div>
      </div>
    </div>
    <div style="
        height: 50px;
        width: 50px;
        right: 38px;
        position: absolute;
        top: 0px;
        gap: 0px;
        margin: 0px;
        padding: 4px;
        background-size: cover;
        z-index: 999999;
      ">
      <img style="
          top: 0px;
          right: 8px;
          gap: 0px;
          margin: 0px;
          padding: 0px;
          background-size: cover;
          z-index: 999999;
        " src="/images/layout/settings.avif" @click="openSettings" />
    </div>
    <div style="
        height: 50px;
        width: 50px;
        position: absolute;
        top: 0px;
        right: -4px;
        gap: 0px;
        margin: 0px;
        padding: 4px;
        background-size: cover;
        z-index: 999999;
      ">
      <img style="
          top: 0px;
          right: 8px;
          gap: 0px;
          margin: 0px;
          padding: 0px;
          background-size: cover;
          z-index: 999999;
        " src="/images/layout/home.png" />
    </div>
  </div>
</template>
⋮----
{{ remaining_minutes > 1 ? `${remaining_minutes}m` : `0m:${remaining_seconds_display}` }}
⋮----
{{ formatBalance(balance) }}
⋮----
<style scoped>
.tbar {
  background-size: cover;
  z-index: 99;
  position: absolute;
  width: 100%;
  max-height: 62px;
  background-position: center;
  top: 0px;
  left: 0px;
  background-repeat: no-repeat;
  background-image: url('/images/layout/topback.png');
}
.moveout {
  animation: moveout 0.32s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  transform: translate(50, 0, 0);
}
@keyframes moveout {
  100% {
    transform: translate3d(-50px, 0, 0);
  }
}
</style>
</file>

<file path="components/HelloWorld.vue">
<script setup lang="ts">
defineProps<{
  msg: string
}>()
</script>
<template>
  <div class="greetings">
    <h1 class="green">{{ msg }}</h1>
    <h3>
      You’ve successfully created a project with
      <a href="https://vite.dev/" target="_blank" rel="noopener">Vite</a> +
      <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue 3</a>. What's next?
    </h3>
  </div>
</template>
⋮----
<h1 class="green">{{ msg }}</h1>
⋮----
<style scoped>
h1 {
  font-weight: 500;
  font-size: 2.6rem;
  position: relative;
  top: -10px;
}
h3 {
  font-size: 1.2rem;
}
.greetings h1,
.greetings h3 {
  text-align: center;
}
@media (min-width: 1024px) {
  .greetings h1,
  .greetings h3 {
    text-align: left;
  }
}
</style>
</file>

<file path="components/LiveWin.vue">
<template>
  <div v-if="displayWinners.length > 10" class="marquee-container w-full overflow-hidden relative group">
    <ul class="marquee-content flex list-none m-0 p-0 will-change-transform gap-2">
      <LiveWinItem
        v-for="(winner, index) in displayWinners"
        :key="winner.id"
        :winner="winner"
        style="max-width: 280px"
      />
    </ul>
  </div>
</template>
<script setup>
import { computed } from 'vue';
import LiveWinItem from './LiveWinItem.vue';
import { useGameSpinStore } from '@/stores/gamespin.store';
const gameStore = useGameSpinStore();
const sourceWinners = computed(() => gameStore.topWins || []);
let x = 0
const mappedWinners = computed(() =>
sourceWinners.value.map((item) => ({
    id: x++,
    imageUrl: `https://images.cashflowcasino.com/all/${item.gameName.toLowerCase()}.avif`,
    gameName: item.gameName,
    name: item.playerName,
    amount: item.winAmount?.toString() ?? '0',
    location: 'Anytown, USA'
  }))
);
const contentFilledWinners = computed(() => {
  const minItemsToFill = 10;
  const winnersList = mappedWinners.value;
  if (!winnersList.length) return [];
  let newWinnerList = [];
  while (newWinnerList.length < minItemsToFill) {
    newWinnerList.push(...winnersList);
  }
  return newWinnerList;
});
const displayWinners = computed(() => {
    return [...contentFilledWinners.value, ...contentFilledWinners.value];
});
</script>
<style scoped>
.marquee-container {
  -webkit-mask-image: linear-gradient(to right, transparent, black 10%, black 90%, transparent);
  mask-image: linear-gradient(to right, transparent, black 10%, black 90%, transparent);
}
.marquee-content {
      display: inline-flex;
  flex-wrap: nowrap;
  animation: scroll-left 1195s linear infinite;
}
@keyframes scroll-left {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(-50%);
  }
}
</style>
</file>

<file path="components/LiveWinItem.vue">
<template>
  <li
    class="flex-shrink-0 h-[70px] w-[280px] rounded-xl p-1 bg-gradient-to-br from-purple-600 via-pink-500 to-orange-400 shadow-lg transition-all duration-300 ease-in-out hover:-translate-y-1 hover:shadow-[0_0_20px_rgba(236,72,153,0.5)]"
  >
    <div
      class="h-full w-full bg-[#1a1436] rounded-[11px] flex items-center gap-4"
    >
      <div class="relative flex-shrink-0">
        <img
          :src="winner.imageUrl"
          :alt="'Game: ' + winner.gameName"
          class="w-19 h-19 max-h-[68px]  rounded-lg object-cover border-2 border-slate-700"
          onerror="this.onerror=null;this.src='/images/logo_small_animated.webp';"
        />
      </div>
      <div
        class="flex flex-col justify-start text-sm overflow-hidden whitespace-nowrap text-slate-300 leading-1"
      >
        <div
          class="text-base font-bold text-slate-50 leading-1 text-ellipsis"
          style="line-height: 1"
        >
          {{ winner.name }} <span class="font-normal">won</span>
        </div>
        <div
          class="flex items-center gap-1 text-lg font-bold text-yellow-400 mb-1 leading-1"
          style="line-height: 1"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="currentColor"
          >
            <path
              d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z"
            ></path>
            <path
              d="M13 14.262V16h-2v-1.738c-1.396-.484-2.381-1.724-2.527-3.262h2.014c.142.92.831 1.594 1.763 1.594.922 0 1.52-.523 1.52-1.199 0-.693-.465-1.148-1.52-1.666-1.39-.703-2.48-1.554-2.48-2.912 0-1.441 1.116-2.617 2.7-2.859V5h2v1.141c1.282.355 2.136 1.492 2.262 2.859h-2.014c-.109-.79-.654-1.432-1.512-1.432-.828 0-1.432.548-1.432 1.148s.604 1.08 1.432 1.52c1.658.842 2.568 1.693 2.568 3.018.001 1.543-1.141 2.748-2.977 2.977z"
            ></path>
          </svg>
          {{ winner.amount }}
        </div>
        <div class="flex items-center gap-1 text-xs text-slate-400">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="12"
            height="12"
            viewBox="0 0 24 24"
            fill="currentColor"
          >
            <path
              d="M12 2C7.589 2 4 5.589 4 10c0 4.411 8 12 8 12s8-7.589 8-12c0-4.411-3.589-8-8-8zm0 12c-2.206 0-4-1.794-4-4s1.794-4 4-4 4 1.794 4 4-1.794 4-4 4z"
            ></path>
          </svg>
          {{ winner.location }}
        </div>
      </div>
    </div>
  </li>
</template>
⋮----
{{ winner.name }} <span class="font-normal">won</span>
⋮----
{{ winner.amount }}
⋮----
{{ winner.location }}
⋮----
<script setup>
defineProps({
  winner: {
    type: Object,
    required: true,
  },
});
</script>
<style scoped>
</style>
</file>

<file path="components/Loading.vue">
<template>
  <div class="container">
    <div class="loader" style="transform: translateY(-20px) scale(0.4) translateX(20px)">
      <span style="font-size: 42px; font-weight: 700" class="glow">xxloadingxx</span>
      <span style="--i: 1"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 2"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 3"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 4"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 5"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 6"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 7"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 8"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 9"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 10"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 11"><i class="fa-solid fa-star"></i></span>
      <span style="--i: 12"><i class="fa-solid fa-star"></i></span>
    </div>
  </div>
</template>
<script setup lang="ts">
  const showLoading = ref(false)
  onMounted(() => {
    setTimeout(() => {
      showLoading.value = true
    }, 300)
  })
</script>
<style scoped>
  .container {
    z-index: 999;
    margin: 0;
    top: 0px;
    left: 0px;
    z-index: 999999999;
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    background-image: url('/images/common/loading.png');
    background-size: 100% 100%;
    min-height: 300px;
    height: 100%;
    max-width: 580px;
    width: 100%;
    width: 100%;
  }
  .logo {
    z-index: 99099;
    position: absolute;
    width: auto;
    height: 180px;
    display: flex;
    align-items: center;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    justify-content: center;
  }
  .loader {
    z-index: 9909;
    position: absolute;
    width: 200px;
    height: 200px;
    display: flex;
    align-items: center;
    top: 55%;
    left: 25%;
    transform: translate(-50%, -50%);
    justify-content: center;
    animation: animateColor 5.2s linear infinite;
  }
  @keyframes animateColor {
    0% {
      filter: hue-rotate(0deg);
    }
    100% {
      filter: hue-rotate(360deg);
    }
  }
  .loader span {
    position: absolute;
    transform-origin: 150px;
    transform: translateX(-150px) rotate(calc(var(--i) * 30deg));
    filter: drop-shadow(0 0 5px #3cc2ff) drop-shadow(0 0 15px #3cc2ff) drop-shadow(0 0 30px #3cc2ff);
  }
  .loader span i {
    position: relative;
    color: #3cc2ff;
    animation: rotate-stars 2.4s linear infinite;
    animation-delay: calc(var(--i) * -0.2s);
  }
  @keyframes rotate-stars {
    0% {
      transform: rotate(0deg) scale(0);
    }
    50% {
      transform: rotate(180deg) scale(3);
    }
    100% {
      transform: rotate(360deg) scale(0);
    }
  }
  .loader span::before {
    content: '\f005';
    position: absolute;
    font-family: fontAwesome;
    font-size: 0.75em;
    color: #131a1c;
    animation: rotate-particle 2.4s linear infinite;
    animation-delay: calc(var(--i) * -0.2s);
  }
  @keyframes rotate-particle {
    0% {
      scale: 1;
      opacity: 0;
      rotate: 0deg;
    }
    50% {
      scale: 1;
      opacity: 1;
      rotate: 180deg;
    }
    100% {
      scale: 0;
      opacity: 0;
      rotate: 360deg;
      filter: drop-shadow(-150px 0 #3cc2ff) drop-shadow(150px 0 #3cc2ff)
        drop-shadow(0 150px #3cc2ff) drop-shadow(0 -150px #3cc2ff);
    }
  }
</style>
</file>

<file path="components/Logo.vue">
<script setup lang="ts"></script>
<template>
  <div>
    <img class="w-[100%] max-w-[480px] m-auto" src="@/assets/logo.png" />
  </div>
</template>
</file>

<file path="components/OverlayLayer.vue">
<script setup>
  defineProps({
    zIndex: {
      type: String,
      default: 'z-50',
    },
    type: {
      type: String,
      default: 'flex',
    },
    showOverlay: {
      type: Boolean,
      default: true,
    },
  })
  const emit = defineEmits(['overlayClick'])
  function overlayClick(event) {
    emit('overlayClick', event)
  }
</script>
<template>
  <div
    :class="[type, zIndex]"
    class="items-center flex-col justify-center overflow-hidden fixed inset-0"
  >
    <Transition
      enter-active-class="transition duration-150 ease-in"
      enter-from-class="opacity-0"
      enter-to-class="opacity-100"
      leave-active-class="transition duration-150 ease-in"
      leave-from-class="opacity-100"
      leave-to-class="opacity-0"
    >
      <div
        v-if="showOverlay"
        class="overlay absolute inset-0 bg-linear-to-tr opacity-90 dark:from-gray-700 dark:via-gray-900 dark:to-gray-700"
        @click="overlayClick"
      />
    </Transition>
    <Transition
      enter-active-class="transition duration-100 ease-out"
      enter-from-class="transform scale-95 opacity-0"
      enter-to-class="transform scale-100 opacity-100"
      leave-active-class="animate-fade-out"
    >
      <slot />
    </Transition>
  </div>
</template>
</file>

<file path="components/PlayerAvatar.vue">
<script setup lang="ts">
import { ref, computed, watch, onMounted, } from 'vue'
import { storeToRefs } from 'pinia'
import { useAuthStore } from '@/stores/auth.store'
import { useVipStore } from '@/stores/vip.store'
import { useEventManager } from '@/composables/EventManager'
interface Props {
  sparkle?: boolean
}
const props = withDefaults(defineProps<Props>(), {
  sparkle: false,
})
const authStore = useAuthStore()
const vipStore = useVipStore()
const localSparkle = ref(props.sparkle)
const eventBus = useEventManager()
const { currentUser } = storeToRefs(authStore)
const vipInfo = computed(() => vipStore.getVipInfo)
const circleRef = ref<HTMLElement | null>(null)
const xpNeededForNextLevel = ref(0)
const currentXp = ref(0)
function pulseGlowEffect() {
  console.log('Pulsing glow effect')
  if (circleRef.value) {
    circleRef.value.classList.add('glow')
    localSparkle.value = true;
    setTimeout(() => {
      localSparkle.value = false;
    }, 1000)
    setTimeout(() => {
      circleRef.value?.classList.remove('glow')
    }, 2000)
  }
}
watch(() => props.sparkle, (isSparkling) => {
  if (isSparkling) {
    localSparkle.value = true;
    setTimeout(() => {
      localSparkle.value = false;
    }, 3000);
  }
});
watch(
  () => vipStore.getVipInfo,
  (newVipInfo, oldVipInfo) => {
    if (newVipInfo?.betExp !== undefined) {
      const oldXp = oldVipInfo?.betExp || 0
      const newXp = newVipInfo.betExp
      console.log('VIP XP changed:', { oldXp, newXp })
      currentXp.value = newXp
      if (newXp > oldXp) {
        pulseGlowEffect()
      }
    }
  },
  { deep: true }
)
const handleXpGain = () => {
  const result = vipStore.getPercentOfCurrentLevel()
  if (result) {
    xpNeededForNextLevel.value = result[2]
    currentXp.value = result[1]
    pulseGlowEffect()
  }
}
eventBus.on('xp:gain', handleXpGain)
onMounted(async () => {
  try {
    console.log(vipStore.getVipLevels)
    const result = vipStore.getPercentOfCurrentLevel()
    if (result) {
      xpNeededForNextLevel.value = result[2]
      currentXp.value = result[1]
    }
  } catch (error) {
    console.error('Failed to initialize VIP data:', error)
  }
  eventBus.on('xp:gain', () => {
    console.log('PlayerAvatar: xp:gain event received, starting animation.');
    localSparkle.value = true;
    setTimeout(() => {
      localSparkle.value = false;
    }, 3000);
  }, 'PlayerAvatar');
})
</script>
<template>
  <div v-if="currentUser && vipInfo" class="relative w-[60px] h-[70px] ml-[15px] mt-[1px] z-[2]">
    <div class="relative w-[60px] h-[60px] z-[999]">
      <div ref="circleRef"
        class="player-avatar-wrapper  flex items-center justify-center overflow-hidden rounded-full w-full h-full"
        :class="{ glow: sparkle }">
        <div class="absolute inset-[3px] bg-cover bg-center rounded-full z-999 "
          style=" z-index: 9999; background-size: cover "
          :style="`background-image: url('/images/avatars/${currentUser.avatar}')`" />
        <AnimatedCircularProgressBar :gaugePrimaryColor="'red'" :duration="3" :gaugeSecondaryColor="'yellow'"
          :gaugeWidth="10" :max="100" :showPercentage="false" :circle-stroke-width="10" :min="0" :value="currentXp / 2"
          class="absolute inset-[-2px] w-[calc(100%+4px)] h-[calc(100%+4px)] z-[1] -rotate-70" />
      </div>
    </div>
    <div
      class="text-base  w-[80px] absolute left-[-10px] m-auto  bottom-[6px] z-[999]  bg-white opacity-99 rounded border border-[#6f14a3] shadow-[0px_0px_4px_#6f14a3] text-black font-extrabold text-center">
      <div class="leading-2  onacona overflow-hidden text-clip  flex justify-center p-1" style="font-size: 15px"> {{
        currentUser.username
        }}
      </div>
    </div>
    <div class="absolute top-[18px] left-[-16px] w-[36px] h-[36px] z-[9999] bg-cover cursor-pointer"
      style="background-image: url('/images/avatars/level-star.avif')">
      <div class="flex leading-1 items-center justify-center h-full text-lg onacona text-black pr-1 pt-1 "
        style="color: black">
        {{ vipInfo.level }}
      </div>
    </div>
    <div v-if="localSparkle" class="absolute left-[-5px] top-[-4px] w-[60px] h-[30px] z-[999999]">
      <SparklesSprite />
    </div>
  </div>
</template>
⋮----
<div class="leading-2  onacona overflow-hidden text-clip  flex justify-center p-1" style="font-size: 15px"> {{
        currentUser.username
        }}
⋮----
{{ vipInfo.level }}
⋮----
<style scoped>
.glow {
  animation: pulse-glow 2s linear;
}
@keyframes pulse-glow {
  0%,
  100% {
    filter: drop-shadow(0 0 5px #c22998);
  }
  50% {
    filter: drop-shadow(0 0 10px #8b5df4);
  }
}
</style>
</file>

<file path="components/RtgGameLauncher.vue">
<script setup lang="ts">
import { useHead } from '@vueuse/head';
import { onMounted } from 'vue';
const props = defineProps({
  gameId: {
    type: String,
    required: true,
  },
  sessionId:{
    type: String,
    required: true
  }
});
useHead({
  title: '...',
  htmlAttrs: {
    style: 'background: black',
    translate: 'no',
    class: 'notranslate',
  },
  meta: [
     { 'http-equiv': 'Content-Type', content: 'text/html; charset=utf-8' },
  { 'http-equiv': 'X-UA-Compatible', content: 'IE=edge' },
    { name: 'viewport', content: 'width=device-width, user-scalable=no, initial-scale=1' },
    { name: 'apple-mobile-web-app-capable', content: 'yes' },
    { name: 'mobile-web-app-capable', content: 'yes' },
    { name: 'google', content: 'notranslate' },
    { name: 'format-detection', content: 'telephone=no' },
    { name: 'theme-color', content: '#ffffff' },
  ],
  link: [
    { rel: 'apple-touch-icon', sizes: '180x180', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/apple-touch-icon.png` },
    { rel: 'icon', type: 'image/png', sizes: '32x32', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/favicon-32x32.png` },
    { rel: 'icon', type: 'image/png', sizes: '16x16', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/favicon-16x16.png` },
    { rel: 'mask-icon', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/safari-pinned-tab.svg`, color: '#5bbad5' },
    { rel: 'shortcut icon', href: `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/assets/default/page/favicons/favicon.ico` },
  ],
});
const loadScript = (src: string, crossOrigin: boolean = true): Promise<void> => {
  return new Promise((resolve, reject) => {
    const script = document.createElement('script');
    script.src = src;
    script.type = 'text/javascript';
    if (crossOrigin) {
      script.crossOrigin = 'anonymous';
    }
    script.onload = () => resolve();
    script.onerror = (error) => reject(error);
    document.body.appendChild(script);
  });
};
onMounted(async () => {
  window.com = window.com || {};
  window.com.casino = window.com.casino || {};
  const cdnBase = `https://cdn-eu.cloudedge.info/all/games/slots/${props.gameId}/`;
  window.com.casino.cdn = cdnBase;
  window.com.casino.baseCdn = 'https://cdn-eu.cloudedge.info/all/games/';
  window.com.casino.barsPath = 'https://cdn-eu.cloudedge.info/all/games/bars-next/';
  window.com.casino.bridgePath = 'https://cdn-eu.cloudedge.info/all/games/bridge/';
  await loadScript(`${window.com.casino.bridgePath}bridge.min.js?t=${Date.now()}`);
  (function () {
    'use strict';
    const get = (key: string) => new URLSearchParams(window.location.search).get(key);
    const preconfig = {
      bridge: {
        postParams: [],
        feedUrl: 'https://feed-rtg.redtiger.com/',
        provider: 'kronos',
        operator: 'redtiger',
        timestamp: `?t=${Date.now()}`,
        notifications: {
          inRealPlay: true,
          inDemoPlay: false,
          showUnfinishedWins: true,
          showUnfinishedNoWins: false,
        },
        bridgeLaunch: true,
      },
      server: {
        rgsApi: 'http://localhost:9999/rcp/',
        launchParams: {
          gameId: props.gameId,
        },
      },
      game: {
        namespace: 'com.casino.game',
        preconfig: {
          cdn: window.com.casino.cdn,
          delayedBalanceUpdate: false,
          defaultLang: 'en',
          splash: true,
          hideCurrency: get('hideCurrency') === 'true',
          disclaimer: '',
          skin: 'next-name-payouts',
          skinURL: get('skinURL'),
          gameType: 'slot',
          gameAppId: props.gameId,
          responsive: true,
          addedAnticipation: get('addedAnticipation') !== 'false',
        },
      },
      bars: {
        basePath: window.com.casino.barsPath,
        options: {
          historySrc: 'https://cdn-eu.cloudedge.info/all/games/history/',
          hasGamble: true,
        },
      },
    };
    if (window.com.casino.bridge) {
      window.com.casino.bridge.init(preconfig);
    }
  })();
});
</script>
<template>
  <div>
    <img
      class="loading-icon"
      style="position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto"
      src="https://cdn-eu.cloudedge.info/all/assets/loading.svg"
    />
  </div>
</template>
<style scoped>
</style>
</file>

<file path="components/RtgGameLoader.vue">
<template>
  <div class="rtg-game-container w-full h-full">
    <div v-if="isLoading" class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50">
      <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500"></div>
      <p class="ml-4 text-white text-xl">Loading {{ options?.gameName }}...</p>
    </div>
    <div v-if="showInsufficientFunds"
      class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50">
      <div class="h-400 w-full border-t-4 border-b-4 border-blue-500">
      </div>
    </div>
    <iframe v-if="iframeUrl" :src="iframeUrl" ref="gameIframe" frameborder="0" scrolling="no" allowfullscreen
      class="w-full h-full" @load="onIframeLoad" @error="onIframeError" title="Game"></iframe>
    <div v-if="loadError" class="absolute inset-0 flex flex-col items-center justify-center bg-gray-800 text-white p-4">
      <p class="text-xl text-red-500 mb-4">Failed to load game.</p>
      <p class="text-sm text-gray-400 mb-2">{{ loadErrorMessage }}</p>
      <button @click="retryLoadGame" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded">
        Retry
      </button>
    </div>
  </div>
</template>
⋮----
<p class="ml-4 text-white text-xl">Loading {{ options?.gameName }}...</p>
⋮----
<p class="text-sm text-gray-400 mb-2">{{ loadErrorMessage }}</p>
⋮----
<script setup lang="ts">
import { useAuthStore } from '@/stores/auth.store'
import { computed, onMounted, ref, watch, type PropType } from 'vue'
export interface RtgGameLaunchOptions {
  gameName: string
  lang?: string
  currency?: string
  mode?: 'real' | 'demo'
  rgsApiBase?: string
  gameCdnBase?: string
  operator?: string
  provider?: string
  depositUrl?: string
  lobbyUrl?: string
}
const eventBus = useEventManager()
const props = defineProps({
  options: {
    type: Object as PropType<RtgGameLaunchOptions>,
    required: true,
  },
})
const authStore = useAuthStore()
const gameIframe = ref<HTMLIFrameElement | null>(null)
const isLoading = ref<boolean>(true)
const loadError = ref<boolean>(false)
const showInsufficientFunds = ref<boolean>(false)
const loadErrorMessage = ref<string>('')
const iframeUrl = computed(() => {
  if (!props.options || !props.options.gameName) {
    loadError.value = true
    loadErrorMessage.value = 'Game ID is missing in options.'
    return null
  }
  const params = new URLSearchParams()
  params.set('gameName', props.options.gameName)
  params.set('userId', authStore.currentUser?.id || 'GUEST_DEMO_USER')
  params.set('token', authStore.accessToken || 'GUEST_DEMO_TOKEN')
  params.set('mode', props.options.mode || 'real')
  if (props.options.rgsApiBase) params.set('rgsApiBase', props.options.rgsApiBase)
  if (props.options.gameCdnBase) params.set('gameCdnBase', props.options.gameCdnBase)
  if (props.options.operator) params.set('operator', props.options.operator)
  if (props.options.provider) params.set('provider', props.options.provider)
  if (props.options.depositUrl) params.set('depositUrl', props.options.depositUrl)
  if (props.options.lobbyUrl) params.set('lobbyUrl', props.options.lobbyUrl)
  return `/rtg_loader_template.html?${params.toString()}`
})
window.addEventListener(
  'message',
  (event) => {
    const message = event.data
    if (typeof message !== 'object' || !message.type) {
      return
    }
    if (message.type === 'INSUFFICIENT_FUNDS') {
      showInsufficientFunds.value = true
    }
  },
  false
)
const onIframeLoad = async () => {
  if (gameIframe.value?.contentWindow && authStore.accessToken) {
    gameIframe.value.contentWindow.addEventListener('message', (event) => {
      console.log('event listener message >>. ', event)
    })
    gameIframe.value.contentWindow.postMessage(
      { type: 'SET_AUTH_TOKEN', token: authStore.accessToken, userId: authStore.currentUser?.id, },
      '*'
    )
  }
  isLoading.value = false
  loadError.value = false
  console.log(`RTG Game Iframe loaded for: ${props.options.gameName}`)
  eventBus.emit('hideBottomBar', undefined)
}
const onIframeError = (event: Event) => {
  isLoading.value = false
  loadError.value = true
  loadErrorMessage.value = `The game frame failed to load. Please check console for details.`
  console.error('Game Iframe load error:', event)
}
const retryLoadGame = () => {
  loadError.value = false
  isLoading.value = true
  if (gameIframe.value && iframeUrl.value) {
    gameIframe.value.src = `${iframeUrl.value}&retry=${Date.now()}`
  }
}
watch(
  () => props.options,
  (newOptions, oldOptions) => {
    if (newOptions && oldOptions && newOptions.gameName !== oldOptions.gameName) {
      console.log('Game options changed, reloading game:', newOptions.gameName)
      isLoading.value = true
      loadError.value = false
    }
  },
  { deep: true }
)
onMounted(() => {
  if (!iframeUrl.value) {
    isLoading.value = false
  }
})
</script>
<style scoped>
.rtg-game-container {
  position: relative;
}
</style>
</file>

<file path="components/SettingsView.vue">
<script lang="ts" setup>
import { useEventManager } from '@/composables/EventManager'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/auth.store'
const eventBus = useEventManager()
const router = useRouter()
const props = defineProps({
  hasCancel: Boolean,
  modelValue: {
    type: [String, Number, Boolean],
    default: null,
  },
})
const emit = defineEmits(['update:modelValue'])
function logout() {
  const authStore = useAuthStore()
  authStore.logout()
}
const customElementsForm = reactive({
  checkbox: ['lorem'],
  radio: 'one',
  switch: ['one', 'two', 'three'],
  file: null,
})
const value = computed({
  get: () => props.modelValue,
  set: (value) => emit('update:modelValue', value),
})
function gotoAgent() {
  eventBus.emit('settingsModal', false)
  router.replace('/agent')
}
function cancel() {
  eventBus.emit('settingsModal', false)
  router.replace('/')
}
</script>
<template>
  <OverlayLayer v-show="value" @overlay-click="cancel">
    <div v-show="value" class="flex-col relative max-h-modal w-11/12 md:w-3/5 lg:w-2/5 xl:w-4/12 z-50" style="
        background-repeat: no-repeat;
        margin: auto;
        border-image: url('/images/common/cell-2.png') 30 30 30 30 fill / 30px 30px 30px 30px;
        padding: 30px 30px 30px 30px;
      ">
      <div class="absolute right-0 gap-2" style="top: -0px; right: -0px" @click="eventBus.emit('settingsModal', false)">
        <CloseButton width="40" height="40" idle-image="/images/common/close.png"
          pressed-image="/images/common/close-pressed.png" />
      </div>
      <div class="flex justify-end pb-3 w-full px-4 text-white font-bold">version: 1.08</div>
      <div class="flex justify-between w-full glow px-4 gap-2 pb-1">
        Full Screen
        <FormCheckRadioGroup v-model="customElementsForm.switch" name="sample-switch" type="switch"
          :options="{ one: '' }" />
      </div>
      <div class="flex justify-between w-full glow px-4 pb-1">
        Sound Effects
        <FormCheckRadioGroup v-model="customElementsForm.switch" name="sample-switch" type="switch"
          :options="{ two: '' }" />
      </div>
      <div class="flex justify-between w-full glow px-4 pb-1">
        Music
        <FormCheckRadioGroup v-model="customElementsForm.switch" name="sample-switch" type="switch"
          :options="{ three: '' }" />
      </div>
      <div />
      <div class="flex justify-around items-center w-full glow px-4"
        style="margin-top: 30px; margin-bottom: 0px; padding-bottom: 0px">
        <GlassButton color="red" :shine="false" @click="logout"> LOG OUT </GlassButton>
        <GlassButton :shine="false" @click="gotoAgent"> AGENT </GlassButton>
      </div>
    </div>
  </OverlayLayer>
</template>
<style>
@media (min-width: 1024px) {
  .about {
    min-height: 100vh;
    display: flex;
    align-items: center;
  }
}
</style>
</file>

<file path="components/SparklesSprite.vue">
<script setup lang="ts">
  import { Motion } from 'motion-v'
  interface Sparkle {
    id: string
    x: string
    y: string
    color: string
    delay: number
    scale: number
    lifespan: number
  }
  interface Props {
    text?: string
    sparklesCount?: number
    colors?: {
      first: string
      second: string
    }
    class?: string
  }
  const props = withDefaults(defineProps<Props>(), {
    sparklesCount: 10,
    colors: () => ({ first: '#9E7AFF', second: 'white' }),
  })
  const sparkles = ref<Sparkle[]>([])
  function generateStar(): Sparkle {
    const starX = `${Math.random() * 100}%`
    const starY = `${Math.random() * 100}%`
    const color = Math.random() > 0.5 ? props.colors.first : props.colors.second
    const delay = Math.random() * 1
    const scale = Math.random() * 1 + 0.3
    const lifespan = Math.random() * 5 + 1
    const id = `${starX}-${starY}-${Date.now()}`
    return { id, x: starX, y: starY, color, delay, scale, lifespan }
  }
  function initializeStars() {
    sparkles.value = Array.from({ length: props.sparklesCount }, generateStar)
  }
  function updateStars() {
    sparkles.value = sparkles.value.map((star) => {
      if (star.lifespan <= 0) {
        return generateStar()
      } else {
        return { ...star, lifespan: star.lifespan - 0.1 }
      }
    })
  }
  let interval: number
  onMounted(() => {
    initializeStars()
    interval = window.setInterval(updateStars, 100)
  })
  onUnmounted(() => {
    if (interval) {
      clearInterval(interval)
    }
  })
</script>
<template>
  <div class="text-4xl font-bold" :class="props.class">
    <span class="relative inline-block">
      <template v-for="sparkle in sparkles" :key="sparkle.id">
        <Motion
          :initial="{ opacity: 0, scale: 0, rotate: 75 }"
          :animate="{
            opacity: [0, 1, 0],
            scale: [0, sparkle.scale, 0],
            rotate: [75, 120, 150],
          }"
          :transition="{
            duration: 0.6,
            repeat: Infinity,
            delay: sparkle.delay,
          }"
          as="svg"
          class="pointer-events-none absolute z-20"
          :style="{
            left: sparkle.x,
            top: sparkle.y,
            opacity: 0,
          }"
          width="21"
          height="21"
          viewBox="0 0 21 21"
        >
          <path
            d="M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z"
            :fill="sparkle.color"
          />
        </Motion>
      </template>
      &nbsp;&nbsp;&nbsp;&nbsp;
    </span>
  </div>
</template>
⋮----
<template v-for="sparkle in sparkles" :key="sparkle.id">
        <Motion
          :initial="{ opacity: 0, scale: 0, rotate: 75 }"
          :animate="{
            opacity: [0, 1, 0],
            scale: [0, sparkle.scale, 0],
            rotate: [75, 120, 150],
          }"
          :transition="{
            duration: 0.6,
            repeat: Infinity,
            delay: sparkle.delay,
          }"
          as="svg"
          class="pointer-events-none absolute z-20"
          :style="{
            left: sparkle.x,
            top: sparkle.y,
            opacity: 0,
          }"
          width="21"
          height="21"
          viewBox="0 0 21 21"
        >
          <path
            d="M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z"
            :fill="sparkle.color"
          />
        </Motion>
      </template>
</file>

<file path="components/SpriteAnimator.vue">
<template>
  <canvas ref="canvasRef" :width="width" :height="height"></canvas>
</template>
<script setup lang="ts">
import { onMounted, onUnmounted, ref, watch } from 'vue';
const props = defineProps<{
  animationData: {
    frames: {
      frame: { x: number; y: number; w: number; h: number };
      rotated: boolean;
      trimmed?: boolean;
      spriteSourceSize: { x: number; y: number; w: number; h: number };
      sourceSize: { w: number; h: number };
    }[];
  };
  imageUrl: string;
  width: number;
  height: number;
  frameRate?: number;
  initialDelayMax?: number;
  loopDelay?: number;
}>();
const canvasRef = ref<HTMLCanvasElement | null>(null);
const image = new Image();
let frameIndex = 0;
let startTimeoutId: NodeJS.Timeout;
let loopTimeoutId: NodeJS.Timeout;
let lastFrameTime = 0;
let animationFrameId: number;
const frameList = props.animationData.frames as {
  frame: { x: number; y: number; w: number; h: number };
  rotated: boolean;
  trimmed: boolean;
  spriteSourceSize: { x: number; y: number; w: number; h: number };
  sourceSize: { w: number; h: number };
}[];
const drawFrame = (index: number) => {
  const canvas = canvasRef.value;
  if (!canvas || !image.complete || image.naturalHeight === 0) return;
  const ctx = canvas.getContext('2d');
  if (!ctx) return;
  const currentFrame = frameList[index];
  if (!currentFrame) return;
  const { frame, sourceSize, spriteSourceSize } = currentFrame;
  const scale = Math.min(props.width / sourceSize.w, props.height / sourceSize.h);
  const targetWidth = spriteSourceSize.w * scale;
  const targetHeight = spriteSourceSize.h * scale;
  const destX = spriteSourceSize.x * scale;
  const destY = spriteSourceSize.y * scale;
  ctx.clearRect(0, 0, props.width, props.height);
  ctx.save();
  ctx.drawImage(
    image,
    frame.x,
    frame.y,
    frame.w,
    frame.h,
    destX,
    destY,
    targetWidth,
    targetHeight
  );
  ctx.restore();
};
const animate = (timestamp: number) => {
  const frameInterval = 1000 / (props.frameRate || 60);
  if (!lastFrameTime) lastFrameTime = timestamp;
  const deltaTime = timestamp - lastFrameTime;
  if (deltaTime > frameInterval) {
    lastFrameTime = timestamp - (deltaTime % frameInterval);
    drawFrame(frameIndex);
    frameIndex++;
    if (frameIndex >= frameList.length) {
      frameIndex = 0;
      if (props.loopDelay && props.loopDelay > 0) {
        cancelAnimationFrame(animationFrameId);
        loopTimeoutId = setTimeout(() => {
          lastFrameTime = 0;
          animationFrameId = requestAnimationFrame(animate);
        }, props.loopDelay * 1000);
        return;
      }
    }
  }
  animationFrameId = requestAnimationFrame(animate);
};
const startAnimationCycle = () => {
  cancelAnimationFrame(animationFrameId);
  clearTimeout(startTimeoutId);
  clearTimeout(loopTimeoutId);
  const initialDelay = (props.initialDelayMax || 0) * 1000
  startTimeoutId = setTimeout(() => {
    frameIndex = 0;
    lastFrameTime = 0;
    animationFrameId = requestAnimationFrame(animate);
  }, initialDelay);
};
onMounted(() => {
  image.src = props.imageUrl;
  image.onload = () => {
    drawFrame(0);
    startAnimationCycle();
  };
});
onUnmounted(() => {
  cancelAnimationFrame(animationFrameId);
  clearTimeout(startTimeoutId);
  clearTimeout(loopTimeoutId);
});
watch(() => [props.animationData, props.imageUrl], () => {
  image.src = props.imageUrl;
});
</script>
</file>

<file path="components/StarBurst.vue">
<template>
  <div class="star-burst-container">
    <img v-for="star in stars" :key="star.id" :src="star.src" class="star" :style="star.style" alt="Shining star" />
  </div>
</template>
<script setup lang="ts">
import { ref, onMounted } from 'vue';
const starImages = [
  '/images/stars/particle02.png',
  '/images/stars/particle03.png',
  '/images/stars/particle05.png',
  '/images/stars/star0.avif',
  '/images/stars/star1.avif',
  '/images/stars/star2.avif',
  '/images/stars/star3.avif',
];
interface Star {
  id: number;
  src: string;
  style: Record<string, string | number>;
}
const stars = ref<Star[]>([]);
const numStars = 30;
onMounted(() => {
  for (let i = 0; i < numStars; i++) {
    const randomImage = starImages[Math.floor(Math.random() * starImages.length)];
    const angle = Math.random() * 360;
    const distance = 50 + Math.random() * 150;
    const duration = 2 + Math.random() * 5;
    const delay = Math.random() * 1;
    stars.value.push({
      id: i,
      src: randomImage,
      style: {
        '--angle': `${angle}deg`,
        '--distance': `${distance}px`,
        'animation-duration': `${duration}s`,
        'animation-delay': `${delay}s`,
        'z-index': 9999,
      },
    });
  }
});
</script>
<style scoped>
.star-burst-container {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 1px;
  height: 1px;
  z-index: -1;
}
.star {
  position: absolute;
  top: 0;
  left: 0;
  width: 30px;
  height: 30px;
  opacity: 1;
  z-index: 9999;
  animation: spiral-out 5s forwards;
}
@keyframes spiral-out {
  0% {
    transform: translate(-50%, -50%) rotate(0deg) scale(0.1);
    opacity: 0;
  }
  20% {
    transform: translate(calc(cos(var(--angle)) * var(--distance) / 4), calc(sin(var(--angle)) * var(--distance) / 4)) rotate(180deg) scale(1.2);
    opacity: 1;
  }
  100% {
    transform: translate(calc(cos(var(--angle)) * var(--distance)), calc(sin(var(--angle)) * var(--distance))) rotate(720deg) scale(0.5);
    opacity: 0;
  }
}
</style>
</file>

<file path="components/Starfield.vue">
<template>
  <div class="starfield-wrapper bg-black/30 backdrop-blur-sm rounded-lg  border border-blue-500/20">
    <div ref="starContainer" class="star-container w-full h-full rounded-md relative overflow-hidden bg-cover bg-center"
      style="background-image: url('/images/starsbg.png');">
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, onMounted } from 'vue';
interface StarPosition {
  x: number;
  y: number;
  width: number;
  height: number;
}
interface StarInstance {
  element: HTMLImageElement;
  position: StarPosition;
}
const starContainer = ref<HTMLDivElement | null>(null);
const starUrls: string[] = [
  'https://gameui.cashflowcasino.com/images/stars/star0.avif',
  'https://gameui.cashflowcasino.com/images/stars/star1.avif',
  'https://gameui.cashflowcasino.com/images/stars/star2.avif',
  'https://gameui.cashflowcasino.com/images/stars/star3.avif'
];
const numStars: number = 15;
const starSize: number = 50;
const minSpacing: number = 20;
onMounted(() => {
  if (!starContainer.value) {
    console.error('Starfield container not found.');
    return;
  }
  const container: HTMLDivElement = starContainer.value;
  const containerWidth = container.offsetWidth;
  const containerHeight = container.offsetHeight;
  const starInstances: StarInstance[] = [];
  const checkOverlap = (rect1: StarPosition, rect2: StarPosition): boolean => {
    const noOverlap =
      rect1.x > rect2.x + rect2.width + minSpacing ||
      rect1.x + rect1.width + minSpacing < rect2.x ||
      rect1.y > rect2.y + rect2.height + minSpacing ||
      rect1.y + rect1.height + minSpacing < rect2.y;
    return !noOverlap;
  };
  const findAndSetNewPosition = (instance: StarInstance) => {
    const otherInstances = starInstances.filter(inst => inst !== instance);
    let newPosition: StarPosition | null = null;
    let isPositionSafe = false;
    let attempts = 0;
    const maxAttempts = 200;
    while (!isPositionSafe && attempts < maxAttempts) {
      attempts++;
      const candidateX = Math.random() * (containerWidth - starSize);
      const candidateY = Math.random() * (containerHeight - starSize);
      const candidatePos: StarPosition = { x: candidateX, y: candidateY, width: starSize, height: starSize };
      if (!otherInstances.some(other => checkOverlap(candidatePos, other.position))) {
        isPositionSafe = true;
        newPosition = candidatePos;
      }
    }
    if (isPositionSafe && newPosition) {
      instance.position = newPosition;
      instance.element.style.left = `${(newPosition.x / containerWidth) * 100}%`;
      instance.element.style.top = `${(newPosition.y / containerHeight) * 100}%`;
    } else {
      console.warn('Could not find a new non-overlapping position. Hiding star for one cycle.');
      instance.element.style.opacity = '0';
    }
  };
  const animateStarContinuous = (instance: StarInstance, animationName: string) => {
    const runCycle = () => {
      findAndSetNewPosition(instance);
      instance.element.addEventListener('animationend', (event: AnimationEvent) => {
        if (event.animationName === animationName) {
          setTimeout(runCycle, Math.random() * 4000 + 2000);
        }
      }, { once: true });
      instance.element.style.animation = 'none';
      void instance.element.offsetHeight;
      const duration = animationName === 'star-type-a-animation'
        ? Math.random() * 3.5 + 4
        : Math.random() * 2.5 + 3;
      instance.element.style.animation = `${animationName} ${duration}s linear forwards`;
    };
    setTimeout(runCycle, Math.random() * 5000);
  };
  const animateStarTypeB = (instance: StarInstance) => {
    const runAnimationCycle = () => {
      findAndSetNewPosition(instance);
      const star = instance.element;
      star.style.animation = '';
      star.style.transform = 'scale(1) rotate(0deg)';
      star.style.opacity = '0';
      star.style.animation = 'star-type-b-fade-in 0.5s ease-out forwards';
      star.addEventListener('animationend', function onFadeInEnd(event) {
        if (event.animationName !== 'star-type-b-fade-in') return;
        setTimeout(() => {
          star.addEventListener('animationend', function onCycleEnd(event) {
            if (event.animationName !== 'star-type-b-fade-out' && event.animationName !== 'star-type-b-spin-out') return;
            setTimeout(runAnimationCycle, Math.random() * 7000 + 8000);
          }, { once: true });
          if (Math.random() < 0.5) {
            star.style.animation = 'star-type-b-fade-out 0.5s ease-in forwards';
          } else {
            star.style.animation = 'star-type-b-spin-out 1s ease-in-out forwards';
          }
        }, 500);
      }, { once: true });
    };
    setTimeout(runAnimationCycle, Math.random() * 8000);
  };
  let typeACStarCount = 0;
  const maxTypeACStars = 2;
  for (let i = 0; i < numStars; i++) {
    let initialPosition: StarPosition | null = null;
    let isPositionSafe = false;
    let attempts = 0;
    const maxAttempts = 200;
    while (!isPositionSafe && attempts < maxAttempts) {
      attempts++;
      const candidateX = Math.random() * (containerWidth - starSize);
      const candidateY = Math.random() * (containerHeight - starSize);
      const candidatePos: StarPosition = { x: candidateX, y: candidateY, width: starSize, height: starSize };
      if (!starInstances.some(inst => checkOverlap(candidatePos, inst.position))) {
        isPositionSafe = true;
        initialPosition = candidatePos;
      }
    }
    if (isPositionSafe && initialPosition) {
      const starElement = document.createElement('img');
      let starTypeIndex = Math.floor(Math.random() * starUrls.length);
      const isTypeACCandidate = starTypeIndex === 0 || starTypeIndex === 3;
      if (isTypeACCandidate && typeACStarCount >= maxTypeACStars) {
        starTypeIndex = Math.random() < 0.5 ? 1 : 2;
      }
      starElement.src = starUrls[starTypeIndex];
      starElement.classList.add('star-image');
      starElement.style.left = `${(initialPosition.x / containerWidth) * 100}%`;
      starElement.style.top = `${(initialPosition.y / containerHeight) * 100}%`;
      starElement.onerror = () => { starElement.style.display = 'none'; };
      container.appendChild(starElement);
      const instance: StarInstance = {
        element: starElement,
        position: initialPosition,
      };
      starInstances.push(instance);
      if (starTypeIndex === 0 || starTypeIndex === 3) {
        typeACStarCount++;
        if (Math.random() < 0.5) {
          animateStarContinuous(instance, 'star-type-c-animation');
        } else {
          animateStarContinuous(instance, 'star-type-a-animation');
        }
      } else {
        animateStarTypeB(instance);
      }
    } else {
      console.warn(`Could not find an initial non-overlapping position for star ${i + 1}.`);
    }
  }
});
</script>
<style>
.starfield-wrapper {
  width: 100%;
  max-width: 480px;
  height: 100%;
}
.star-image {
  position: absolute;
  width: clamp(25px, 5vw, 50px);
  height: auto;
  transform-origin: center center;
  will-change: transform, opacity;
  opacity: 0;
}
@keyframes star-type-a-animation {
  0% {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }
  60% {
    opacity: 1;
    transform: scale(1.5) rotate(216deg);
  }
  75% {
    opacity: 1;
    transform: scale(1.5) rotate(270deg);
  }
  100% {
    opacity: 0;
    transform: scale(0) rotate(360deg);
  }
}
@keyframes star-type-c-animation {
  0% {
    opacity: 0;
    transform: scale(0.5) rotate(0deg);
  }
  80% {
    opacity: 1;
    transform: scale(2.0) rotate(288deg);
  }
  100% {
    opacity: 0;
    transform: scale(3) rotate(360deg);
  }
}
@keyframes star-type-b-fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes star-type-b-fade-out {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
@keyframes star-type-b-spin-out {
  0% {
    transform: rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: rotate(720deg);
    opacity: 0;
  }
}
</style>
</file>

<file path="composables/EventManager.ts">
import { AnimationEventFromServer, BalanceUpdatePayload, ModelChangeEventFromServer } from '@/types/events'
export interface Events {
  'balance:update': BalanceUpdatePayload
  settingsModal: boolean
  'xp:gain': BalanceUpdatePayload
  'animation:add': AnimationEventFromServer
  'animation:update': AnimationEventFromServer
  'animation:remove': AnimationEventFromServer
  'animation:clear-by-owner': AnimationEventFromServer
  'animation:clear-all': AnimationEventFromServer
  'user:updated': ModelChangeEventFromServer
  'wallet:updated': ModelChangeEventFromServer
  'vip:updated': ModelChangeEventFromServer
  hideBottomBar: void
}
export type EventMessage<T extends keyof Events> = (payload: Events[T]) => void
⋮----
export interface IEventManagerService {
  on: <K extends keyof Events>(
    eventName: K,
    callback: (payload: Events[K]) => void,
    target?: unknown
  ) => void
  emit: <K extends keyof Events>(eventName: K, payload: Events[K]) => void
  off: (eventName: keyof Events, target: unknown) => void
  removeAllEvent: (remove?: keyof Events | object) => void
}
export function useEventManager(): IEventManagerService
⋮----
const on = <K extends keyof Events>(
    eventName: K,
    callback: (payload: Events[K]) => void,
    target?: unknown
) =>
const emit = <K extends keyof Events>(eventName: K, payload: Events[K]) =>
const off = (eventName: keyof Events, target: unknown) =>
const removeAllEvent = (remove?: keyof Events | object | undefined) =>
</file>

<file path="composables/useAnimationLayer.ts">
import { ref, shallowRef, type Component } from 'vue'
import { useEventManager } from './EventManager'
import SpriteAnimator from '@/components/SpriteAnimator.vue'
interface SpriteAnimatorProps {
    animationData: any
    imageUrl: string
    width: number
    height: number
    frameRate?: number
    initialDelayMax?: number
    loopDelay?: number
}
interface AnimationPosition {
    top: string
    left: string
    transform?: string
    zIndex?: number
}
export interface AnimationInstance {
    id: string
    ownerId?: string
    component: Component
    props: SpriteAnimatorProps
    style: AnimationPosition
}
⋮----
const addAnimation = (config: Omit<AnimationInstance, 'component'>) =>
const updateAnimation = (
    id: string,
    partialConfig: Partial<Omit<AnimationInstance, 'id' | 'component'>>
) =>
const removeAnimation = (id: string) =>
const clearByOwner = (ownerId: string) =>
const clearAll = () =>
⋮----
export function useAnimationLayer()
</file>

<file path="composables/useImagePreloader.ts">
import { ref } from 'vue'
export function useImagePreloader(imageUrls: string[])
⋮----
const preloadImages = async () =>
</file>

<file path="composables/useRealtimeUpdates.ts">
import { useAuthStore } from '@/stores/auth.store'
import { useEventManager } from './EventManager'
import { onUnmounted } from 'vue'
import type { User } from '@/sdk/generated'
export function useRealtimeUpdates()
⋮----
const setupEventListeners = (): (() => void) =>
⋮----
const updateUser = (userData: unknown): void =>
const updateWallet = (walletData: unknown): void =>
const updateVipInfo = (vipData: unknown): void =>
</file>

<file path="composables/useScreen.ts">
import { onMounted, onUnmounted, ref } from 'vue'
export function useScreen()
⋮----
const onResize = () =>
</file>

<file path="lib/utils.d.ts">
import { type ClassValue } from 'clsx';
export declare function cn(...inputs: ClassValue[]): string;
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'
export function cn(...inputs: ClassValue[])
</file>

<file path="router/index.ts">
import { useAuthStore } from '@/stores/auth.store'
import { useAppStore } from '@/stores/app.store'
import { createRouter, createWebHistory } from 'vue-router'
import HomeView from '../views/HomeView.vue'
import LoginView from '../views/LoginView.vue'
import RtgGame from '../views/RtgGame.vue'
</file>

<file path="router/interface.ts">

</file>

<file path="sdk/generated/client/client.ts">
import type { AxiosError, RawAxiosRequestHeaders } from "axios";
import axios from "axios";
import type { Client, Config } from "./types";
import {
  buildUrl,
  createConfig,
  mergeConfigs,
  mergeHeaders,
  setAuthParams,
} from "./utils";
export const createClient = (config: Config =
⋮----
const getConfig = (): Config => (
const setConfig = (config: Config): Config =>
const request: Client["request"] = async (options) =>
</file>

<file path="sdk/generated/client/index.ts">

</file>

<file path="sdk/generated/client/types.ts">
import type {
  AxiosError,
  AxiosInstance,
  AxiosRequestHeaders,
  AxiosResponse,
  AxiosStatic,
  CreateAxiosDefaults,
} from "axios";
import type { Auth } from "../core/auth";
import type { Client as CoreClient, Config as CoreConfig } from "../core/types";
export interface Config<T extends ClientOptions = ClientOptions>
  extends Omit<CreateAxiosDefaults, "auth" | "baseURL" | "headers" | "method">,
    CoreConfig {
  axios?: AxiosStatic;
  baseURL?: T["baseURL"];
  headers?:
    | AxiosRequestHeaders
    | Record<
        string,
        | string
        | number
        | boolean
        | (string | number | boolean)[]
        | null
        | undefined
        | unknown
      >;
  throwOnError?: T["throwOnError"];
}
export interface RequestOptions<
  ThrowOnError extends boolean = boolean,
  Url extends string = string,
> extends Config<{
    throwOnError: ThrowOnError;
  }> {
  body?: unknown;
  path?: Record<string, unknown>;
  query?: Record<string, unknown>;
  security?: ReadonlyArray<Auth>;
  url: Url;
}
export type RequestResult<
  TData = unknown,
  TError = unknown,
  ThrowOnError extends boolean = boolean,
> = ThrowOnError extends true
  ? Promise<
      AxiosResponse<
        TData extends Record<string, unknown> ? TData[keyof TData] : TData
      >
    >
  : Promise<
      | (AxiosResponse<
          TData extends Record<string, unknown> ? TData[keyof TData] : TData
        > & { error: undefined })
      | (AxiosError<
          TError extends Record<string, unknown> ? TError[keyof TError] : TError
        > & {
          data: undefined;
          error: TError extends Record<string, unknown>
            ? TError[keyof TError]
            : TError;
        })
    >;
export interface ClientOptions {
  baseURL?: string;
  throwOnError?: boolean;
}
type MethodFn = <
  TData = unknown,
  TError = unknown,
  ThrowOnError extends boolean = false,
>(
  options: Omit<RequestOptions<ThrowOnError>, "method">,
) => RequestResult<TData, TError, ThrowOnError>;
type RequestFn = <
  TData = unknown,
  TError = unknown,
  ThrowOnError extends boolean = false,
>(
  options: Omit<RequestOptions<ThrowOnError>, "method"> &
    Pick<Required<RequestOptions<ThrowOnError>>, "method">,
) => RequestResult<TData, TError, ThrowOnError>;
type BuildUrlFn = <
  TData extends {
    body?: unknown;
    path?: Record<string, unknown>;
    query?: Record<string, unknown>;
    url: string;
  },
>(
  options: Pick<TData, "url"> & Omit<Options<TData>, "axios">,
) => string;
export type Client = CoreClient<RequestFn, Config, MethodFn, BuildUrlFn> & {
  instance: AxiosInstance;
};
export type CreateClientConfig<T extends ClientOptions = ClientOptions> = (
  override?: Config<ClientOptions & T>,
) => Config<Required<ClientOptions> & T>;
export interface TDataShape {
  body?: unknown;
  headers?: unknown;
  path?: unknown;
  query?: unknown;
  url: string;
}
type OmitKeys<T, K> = Pick<T, Exclude<keyof T, K>>;
export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = OmitKeys<RequestOptions<ThrowOnError>, "body" | "path" | "query" | "url"> &
  Omit<TData, "url">;
export type OptionsLegacyParser<
  TData = unknown,
  ThrowOnError extends boolean = boolean,
> = TData extends { body?: any }
  ? TData extends { headers?: any }
    ? OmitKeys<RequestOptions<ThrowOnError>, "body" | "headers" | "url"> & TData
    : OmitKeys<RequestOptions<ThrowOnError>, "body" | "url"> &
        TData &
        Pick<RequestOptions<ThrowOnError>, "headers">
  : TData extends { headers?: any }
    ? OmitKeys<RequestOptions<ThrowOnError>, "headers" | "url"> &
        TData &
        Pick<RequestOptions<ThrowOnError>, "body">
    : OmitKeys<RequestOptions<ThrowOnError>, "url"> & TData;
</file>

<file path="sdk/generated/client/utils.ts">
import { getAuthToken } from "../core/auth";
import type {
  QuerySerializer,
  QuerySerializerOptions,
} from "../core/bodySerializer";
import type { ArraySeparatorStyle } from "../core/pathSerializer";
import {
  serializeArrayParam,
  serializeObjectParam,
  serializePrimitiveParam,
} from "../core/pathSerializer";
import type { Client, ClientOptions, Config, RequestOptions } from "./types";
interface PathSerializer {
  path: Record<string, unknown>;
  url: string;
}
⋮----
const defaultPathSerializer = (
export const createQuerySerializer = <T = unknown>({
  allowReserved,
  array,
  object,
}: QuerySerializerOptions =
⋮----
const querySerializer = (queryParams: T) =>
⋮----
export const setAuthParams = async ({
  security,
  ...options
}: Pick<Required<RequestOptions>, "security"> &
  Pick<RequestOptions, "auth" | "query"> & {
    headers: Record<any, unknown>;
}) =>
export const buildUrl: Client["buildUrl"] = (options) =>
export const getUrl = ({
  path,
  query,
  querySerializer,
  url: _url,
}: {
  path?: Record<string, unknown>;
  query?: Record<string, unknown>;
  querySerializer: QuerySerializer;
  url: string;
}) =>
export const mergeConfigs = (a: Config, b: Config): Config =>
/**
 * Special Axios headers keywords allowing to set headers by request method.
 */
⋮----
export const mergeHeaders = (
  ...headers: Array<Required<Config>["headers"] | undefined>
): Record<any, unknown> =>
export const createConfig = <T extends ClientOptions = ClientOptions>(
  override: Config<Omit<ClientOptions, keyof T> & T> = {},
): Config<Omit<ClientOptions, keyof T> & T> => (
</file>

<file path="sdk/generated/core/auth.ts">
export type AuthToken = string | undefined;
export interface Auth {
  in?: "header" | "query" | "cookie";
  name?: string;
  scheme?: "basic" | "bearer";
  type: "apiKey" | "http";
}
export const getAuthToken = async (
  auth: Auth,
  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,
): Promise<string | undefined> =>
</file>

<file path="sdk/generated/core/bodySerializer.ts">
import type {
  ArrayStyle,
  ObjectStyle,
  SerializerOptions,
} from "./pathSerializer";
export type QuerySerializer = (query: Record<string, unknown>) => string;
export type BodySerializer = (body: any) => any;
export interface QuerySerializerOptions {
  allowReserved?: boolean;
  array?: SerializerOptions<ArrayStyle>;
  object?: SerializerOptions<ObjectStyle>;
}
const serializeFormDataPair = (
  data: FormData,
  key: string,
  value: unknown,
): void =>
const serializeUrlSearchParamsPair = (
  data: URLSearchParams,
  key: string,
  value: unknown,
): void =>
</file>

<file path="sdk/generated/core/params.ts">
type Slot = "body" | "headers" | "path" | "query";
export type Field =
  | {
      in: Exclude<Slot, "body">;
      key: string;
      map?: string;
    }
  | {
      in: Extract<Slot, "body">;
      key?: string;
      map?: string;
    };
export interface Fields {
  allowExtra?: Partial<Record<Slot, boolean>>;
  args?: ReadonlyArray<Field>;
}
export type FieldsConfig = ReadonlyArray<Field | Fields>;
⋮----
type KeyMap = Map<
  string,
  {
    in: Slot;
    map?: string;
  }
>;
const buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap =>
interface Params {
  body: unknown;
  headers: Record<string, unknown>;
  path: Record<string, unknown>;
  query: Record<string, unknown>;
}
const stripEmptySlots = (params: Params) =>
export const buildClientParams = (
  args: ReadonlyArray<unknown>,
  fields: FieldsConfig,
) =>
</file>

<file path="sdk/generated/core/pathSerializer.ts">
interface SerializeOptions<T>
  extends SerializePrimitiveOptions,
    SerializerOptions<T> {}
interface SerializePrimitiveOptions {
  allowReserved?: boolean;
  name: string;
}
export interface SerializerOptions<T> {
  explode: boolean;
  style: T;
}
export type ArrayStyle = "form" | "spaceDelimited" | "pipeDelimited";
export type ArraySeparatorStyle = ArrayStyle | MatrixStyle;
type MatrixStyle = "label" | "matrix" | "simple";
export type ObjectStyle = "form" | "deepObject";
type ObjectSeparatorStyle = ObjectStyle | MatrixStyle;
interface SerializePrimitiveParam extends SerializePrimitiveOptions {
  value: string;
}
export const separatorArrayExplode = (style: ArraySeparatorStyle) =>
export const separatorArrayNoExplode = (style: ArraySeparatorStyle) =>
export const separatorObjectExplode = (style: ObjectSeparatorStyle) =>
export const serializeArrayParam = ({
  allowReserved,
  explode,
  name,
  style,
  value,
}: SerializeOptions<ArraySeparatorStyle> & {
  value: unknown[];
}) =>
export const serializePrimitiveParam = ({
  allowReserved,
  name,
  value,
}: SerializePrimitiveParam) =>
export const serializeObjectParam = ({
  allowReserved,
  explode,
  name,
  style,
  value,
  valueOnly,
}: SerializeOptions<ObjectSeparatorStyle> & {
  value: Record<string, unknown> | Date;
  valueOnly?: boolean;
}) =>
</file>

<file path="sdk/generated/core/types.ts">
import type { Auth, AuthToken } from "./auth";
import type {
  BodySerializer,
  QuerySerializer,
  QuerySerializerOptions,
} from "./bodySerializer";
export interface Client<
  RequestFn = never,
  Config = unknown,
  MethodFn = never,
  BuildUrlFn = never,
> {
  buildUrl: BuildUrlFn;
  connect: MethodFn;
  delete: MethodFn;
  get: MethodFn;
  getConfig: () => Config;
  head: MethodFn;
  options: MethodFn;
  patch: MethodFn;
  post: MethodFn;
  put: MethodFn;
  request: RequestFn;
  setConfig: (config: Config) => Config;
  trace: MethodFn;
}
export interface Config {
  auth?: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken;
  bodySerializer?: BodySerializer | null;
  headers?:
    | RequestInit["headers"]
    | Record<
        string,
        | string
        | number
        | boolean
        | (string | number | boolean)[]
        | null
        | undefined
        | unknown
      >;
  method?:
    | "CONNECT"
    | "DELETE"
    | "GET"
    | "HEAD"
    | "OPTIONS"
    | "PATCH"
    | "POST"
    | "PUT"
    | "TRACE";
  querySerializer?: QuerySerializer | QuerySerializerOptions;
  requestValidator?: (data: unknown) => Promise<unknown>;
  responseTransformer?: (data: unknown) => Promise<unknown>;
  responseValidator?: (data: unknown) => Promise<unknown>;
}
type IsExactlyNeverOrNeverUndefined<T> = [T] extends [never]
  ? true
  : [T] extends [never | undefined]
    ? [undefined] extends [T]
      ? false
      : true
    : false;
export type OmitNever<T extends Record<string, unknown>> = {
  [K in keyof T as IsExactlyNeverOrNeverUndefined<T[K]> extends true
    ? never
    : K]: T[K];
};
</file>

<file path="sdk/generated/client.gen.ts">
import type { ClientOptions } from "./types.gen";
import {
  type Config,
  type ClientOptions as DefaultClientOptions,
  createClient,
  createConfig,
} from "./client";
import { createClientConfig } from "../runtime.client";
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> =
  (
    override?: Config<DefaultClientOptions & T>,
  ) => Config<Required<DefaultClientOptions> & T>;
</file>

<file path="sdk/generated/index.ts">

</file>

<file path="sdk/generated/sdk.gen.ts">
import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "./client";
import type {
  PostApiAuthLoginData,
  PostApiAuthLoginResponses,
  PostApiAuthLoginErrors,
  PostApiAuthSignupData,
  PostApiAuthSignupResponses,
  PostApiAuthSignupErrors,
  PostApiAuthLogoutData,
  PostApiAuthLogoutResponses,
  PostApiAuthLogoutErrors,
  GetApiAuthMeData,
  GetApiAuthMeResponses,
  GetApiAuthMeErrors,
  GetApiData,
  GetApiResponses,
  PostApiUpdatesCheckData,
  PostApiUpdatesCheckResponses,
  PostApiUpdatesUploadData,
  PostApiUpdatesUploadResponses,
  PostApiUpdatesUploadErrors,
  GetApiUpdatesDownloadByFilenameData,
  GetApiUpdatesDownloadByFilenameResponses,
  GetApiUpdatesDownloadByFilenameErrors,
  GetApiUpdatesVersionsByAppIdByPlatformData,
  GetApiUpdatesVersionsByAppIdByPlatformResponses,
  GetApiUpdatesVersionsByAppIdByPlatformErrors,
  GetApiUsersData,
  GetApiUsersResponses,
  PostApiEnterGameData,
  PostApiEnterGameResponses,
  PostApiGamesData,
  PostApiGamesResponses,
  PostApiSetupGameData,
  PostApiSetupGameResponses,
  GetApiSpinpageData,
  GetApiSpinpageResponses,
  PostApiSpinData,
  PostApiSpinResponses,
  GetApiFavoriteGameData,
  GetApiFavoriteGameResponses,
  PostApiEndGameSessionData,
  PostApiEndGameSessionResponses,
  PostApiEndGameSessionErrors,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdResponses,
  DeleteApiUsersByIdErrors,
  GetApiUsersByIdData,
  GetApiUsersByIdResponses,
  GetApiUsersByIdErrors,
  PatchApiUsersByIdData,
  PatchApiUsersByIdResponses,
  PatchApiUsersByIdErrors,
  GetApiUsersByIdCheckData,
  GetApiUsersByIdCheckResponses,
  GetApiUsersByIdCheckErrors,
  PostApiUsersByIdVerifyEmailData,
  PostApiUsersByIdVerifyEmailResponses,
  GetApiUsersByIdInfoData,
  GetApiUsersByIdInfoResponses,
  GetApiUsersByIdInfoErrors,
  GetApiUsersByIdVipinfoData,
  GetApiUsersByIdVipinfoResponses,
  GetApiUserAmountData,
  GetApiUserAmountResponses,
  PostApiUserChangeData,
  PostApiUserChangeResponses,
  PostApiUserEmailData,
  PostApiUserEmailResponses,
  PostApiUserPasswordData,
  PostApiUserPasswordResponses,
  PostApiUserSuspendData,
  PostApiUserSuspendResponses,
  PostApiRedtigerGameSettingsData,
  PostApiRedtigerGameSettingsResponses,
  PostApiRedtigerGameSettingsErrors,
  PostApiRedtigerGameSpinData,
  PostApiRedtigerGameSpinResponses,
  PostApiRedtigerGameSpinErrors,
  GetApiGamesAllData,
  GetApiGamesAllResponses,
  GetApiGamesCategoriesData,
  GetApiGamesCategoriesResponses,
  GetApiGamesSearchData,
  GetApiGamesSearchResponses,
  GetApiUserGamesData,
  GetApiUserGamesResponses,
  PostApiUserGamesFavoriteData,
  PostApiUserGamesFavoriteResponses,
  GetApiUserGamesFavoritesData,
  GetApiUserGamesFavoritesResponses,
  PostApiGamesByIdEnterData,
  PostApiGamesByIdEnterResponses,
  PostApiGamesByIdEnterErrors,
  PostApiGamesLeaveData,
  PostApiGamesLeaveResponses,
  GetApiVipMeData,
  GetApiVipMeResponses,
  GetApiVipMeErrors,
  GetApiVipLevelsData,
  GetApiVipLevelsResponses,
  GetApiVipRanksData,
  GetApiVipRanksResponses,
  GetApiGamespinsTopwinsData,
  GetApiGamespinsTopwinsResponses,
  GetApiGamespinsTopwinsErrors,
  GetGs2cGeV3GameServiceData,
  GetGs2cGeV3GameServiceResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  client?: Client;
  meta?: Record<string, unknown>;
};
export const postApiAuthLogin = <ThrowOnError extends boolean = true>(
  options: Options<PostApiAuthLoginData, ThrowOnError>,
) =>
export const postApiAuthSignup = <ThrowOnError extends boolean = true>(
  options: Options<PostApiAuthSignupData, ThrowOnError>,
) =>
export const postApiAuthLogout = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiAuthLogoutData, ThrowOnError>,
) =>
export const getApiAuthMe = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiAuthMeData, ThrowOnError>,
) =>
export const getApi = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiData, ThrowOnError>,
) =>
export const postApiUpdatesCheck = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUpdatesCheckData, ThrowOnError>,
) =>
export const postApiUpdatesUpload = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiUpdatesUploadData, ThrowOnError>,
) =>
export const getApiUpdatesDownloadByFilename = <
  ThrowOnError extends boolean = true,
>(
  options: Options<GetApiUpdatesDownloadByFilenameData, ThrowOnError>,
) =>
export const getApiUpdatesVersionsByAppIdByPlatform = <
  ThrowOnError extends boolean = true,
>(
  options: Options<GetApiUpdatesVersionsByAppIdByPlatformData, ThrowOnError>,
) =>
export const getApiUsers = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUsersData, ThrowOnError>,
) =>
export const postApiEnterGame = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiEnterGameData, ThrowOnError>,
) =>
export const postApiGames = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiGamesData, ThrowOnError>,
) =>
export const postApiSetupGame = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiSetupGameData, ThrowOnError>,
) =>
export const getApiSpinpage = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiSpinpageData, ThrowOnError>,
) =>
export const postApiSpin = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiSpinData, ThrowOnError>,
) =>
export const getApiFavoriteGame = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiFavoriteGameData, ThrowOnError>,
) =>
export const postApiEndGameSession = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiEndGameSessionData, ThrowOnError>,
) =>
export const deleteApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<DeleteApiUsersByIdData, ThrowOnError>,
) =>
export const getApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdData, ThrowOnError>,
) =>
export const patchApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<PatchApiUsersByIdData, ThrowOnError>,
) =>
export const getApiUsersByIdCheck = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdCheckData, ThrowOnError>,
) =>
export const postApiUsersByIdVerifyEmail = <
  ThrowOnError extends boolean = true,
>(
  options: Options<PostApiUsersByIdVerifyEmailData, ThrowOnError>,
) =>
export const getApiUsersByIdInfo = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdInfoData, ThrowOnError>,
) =>
export const getApiUsersByIdVipinfo = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdVipinfoData, ThrowOnError>,
) =>
export const getApiUserAmount = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUserAmountData, ThrowOnError>,
) =>
export const postApiUserChange = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserChangeData, ThrowOnError>,
) =>
export const postApiUserEmail = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserEmailData, ThrowOnError>,
) =>
export const postApiUserPassword = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserPasswordData, ThrowOnError>,
) =>
export const postApiUserSuspend = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserSuspendData, ThrowOnError>,
) =>
export const postApiRedtigerGameSettings = <
  ThrowOnError extends boolean = true,
>(
  options?: Options<PostApiRedtigerGameSettingsData, ThrowOnError>,
) =>
export const postApiRedtigerGameSpin = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiRedtigerGameSpinData, ThrowOnError>,
) =>
export const getApiGamesAll = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesAllData, ThrowOnError>,
) =>
export const getApiGamesCategories = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesCategoriesData, ThrowOnError>,
) =>
export const getApiGamesSearch = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesSearchData, ThrowOnError>,
) =>
export const getApiUserGames = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUserGamesData, ThrowOnError>,
) =>
export const postApiUserGamesFavorite = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiUserGamesFavoriteData, ThrowOnError>,
) =>
export const getApiUserGamesFavorites = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUserGamesFavoritesData, ThrowOnError>,
) =>
export const postApiGamesByIdEnter = <ThrowOnError extends boolean = true>(
  options: Options<PostApiGamesByIdEnterData, ThrowOnError>,
) =>
export const postApiGamesLeave = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiGamesLeaveData, ThrowOnError>,
) =>
export const getApiVipMe = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipMeData, ThrowOnError>,
) =>
export const getApiVipLevels = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipLevelsData, ThrowOnError>,
) =>
export const getApiVipRanks = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipRanksData, ThrowOnError>,
) =>
export const getApiGamespinsTopwins = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamespinsTopwinsData, ThrowOnError>,
) =>
export const getGs2cGeV3GameService = <ThrowOnError extends boolean = true>(
  options?: Options<GetGs2cGeV3GameServiceData, ThrowOnError>,
) =>
</file>

<file path="sdk/generated/types.gen.ts">
export type User = {
  id: string;
  username: string;
  email: string | null;
  currentGameSessionDataId: string | null;
  currentAuthSessionDataId: string | null;
  avatar_url: string | null;
  role: string;
  isActive: boolean;
  lastLoginAt: string | null;
  totalXpGained: number;
  activeWalletId: string | null;
  vipInfoId: string | null;
  createdAt: string;
  updatedAt: string;
  deletedAt: string | null;
  lastSeen: string | null;
};
export type AuthSession = {
  id: string;
  userId: string;
  status: "ACTIVE" | "COMPLETED" | "EXPIRED" | "ABANDONED" | "TIMEOUT";
  ipAddress: string | null;
  userAgent: string | null;
  deviceId: string | null;
  createdAt: string;
  expiresAt: string | null;
  lastSeen: string;
};
export type GameSession = {
  id: string;
  authSessionId: string;
  userId: string;
  gameId: string | null;
  status: "ACTIVE" | "COMPLETED" | "EXPIRED" | "ABANDONED" | "TIMEOUT";
  totalWagered: number;
  totalWon: number;
  totalXpGained: number;
  rtp: string | null;
  duration: number;
  createdAt: string;
  endAt: string | null;
};
export type Wallet = {
  id: string;
  balance: number;
  paymentMethod: string;
  currency: string;
  isActive: boolean;
  isDefault: boolean;
  address: string | null;
  cashtag: string | null;
  userId: string;
  operatorId: string;
  lastUsedAt: string | null;
  createdAt: string;
  updatedAt: string;
};
export type VipInfo = {
  id: string;
  level: number;
  xp: number;
  totalXp: number;
  userId: string;
  currentRankid: number | null;
  createdAt: string;
  updatedAt: string;
};
export type Game = {
  id: string;
  name: string;
  title: string;
  developer: string;
  description?: string;
  category: string;
  tags: Array<string>;
  thumbnailUrl?: string;
  bannerUrl?: string;
  isActive?: boolean;
};
export type VipRank = {
  id: number;
  name: string;
  minXp: number;
  dailyBonusCoinPct: number;
  hourlyBonusCoinPct: number;
  purchaseBonusCoinPct: number;
  levelUpBonusCoinPct: number;
  hasConcierge: boolean;
  hasVipLoungeAccess: boolean;
  isInvitationOnly: boolean;
};
export type VipDetails = {
  vipInfo: VipInfo;
  vipRank: VipRank;
  xpForNextLevel: number;
};
export type VipLevel = {
  level: number;
  xpForNext: number;
};
export type GameSpin = {
  id: string;
  playerName?: string;
  gamesName?: string;
  spinData?: {
    [key: string]: unknown;
  };
  grossWinAmount: number;
  wagerAmount: number;
  spinNumber: number;
  playerAvatar?: string;
  currencyId?: string;
  sessionId: string;
  userId?: string;
  createdAt: string;
  updatedAt: string;
  occurredAt: string;
  sessionDataId?: string;
};
export type PostApiAuthLoginData = {
  body: {
    username?: string;
    password: string;
    uid?: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/login";
};
export type PostApiAuthLoginErrors = {
  400: {
    message: string;
  };
};
export type PostApiAuthLoginError =
  PostApiAuthLoginErrors[keyof PostApiAuthLoginErrors];
export type PostApiAuthLoginResponses = {
  200: {
    id: string;
    username: string;
    email: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};
export type PostApiAuthLoginResponse =
  PostApiAuthLoginResponses[keyof PostApiAuthLoginResponses];
export type PostApiAuthSignupData = {
  body: {
    username: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/signup";
};
export type PostApiAuthSignupErrors = {
  400: {
    message: string;
  };
};
export type PostApiAuthSignupError =
  PostApiAuthSignupErrors[keyof PostApiAuthSignupErrors];
export type PostApiAuthSignupResponses = {
  201: {
    id: string;
    username: string;
    email: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};
export type PostApiAuthSignupResponse =
  PostApiAuthSignupResponses[keyof PostApiAuthSignupResponses];
export type PostApiAuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/logout";
};
export type PostApiAuthLogoutErrors = {
  401: {
    error: string;
  };
};
export type PostApiAuthLogoutError =
  PostApiAuthLogoutErrors[keyof PostApiAuthLogoutErrors];
export type PostApiAuthLogoutResponses = {
  200: {
    message: string;
  };
};
export type PostApiAuthLogoutResponse =
  PostApiAuthLogoutResponses[keyof PostApiAuthLogoutResponses];
export type GetApiAuthMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/me";
};
export type GetApiAuthMeErrors = {
  401: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};
export type GetApiAuthMeError = GetApiAuthMeErrors[keyof GetApiAuthMeErrors];
export type GetApiAuthMeResponses = {
  200: {
    user: User;
    authSession: AuthSession;
    gameSession?: GameSession;
    wallet: Wallet;
    vipInfo: VipInfo;
  };
};
export type GetApiAuthMeResponse =
  GetApiAuthMeResponses[keyof GetApiAuthMeResponses];
export type GetApiData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/";
};
export type GetApiResponses = {
  200: {
    message: string;
  };
};
export type GetApiResponse = GetApiResponses[keyof GetApiResponses];
export type PostApiUpdatesCheckData = {
  body: {
    currentVersion: string;
    platform: string;
    appId: string;
    updateType: "BINARY" | "OTA";
  };
  path?: never;
  query?: never;
  url: "/api/updates/check";
};
export type PostApiUpdatesCheckResponses = {
  200: {
    hasUpdate: boolean;
    version?: string;
    platform?: string;
    updateType?: "BINARY" | "OTA";
    downloadUrl?: string;
    changelog?: Array<string>;
    mandatory?: boolean;
    releaseDate?: string;
    fileSize?: number;
    checksum?: string;
  };
};
export type PostApiUpdatesCheckResponse =
  PostApiUpdatesCheckResponses[keyof PostApiUpdatesCheckResponses];
export type PostApiUpdatesUploadData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/api/updates/upload";
};
export type PostApiUpdatesUploadErrors = {
  400: {
    error: string;
  };
};
export type PostApiUpdatesUploadError =
  PostApiUpdatesUploadErrors[keyof PostApiUpdatesUploadErrors];
export type PostApiUpdatesUploadResponses = {
  200: {
    success: boolean;
    message: string;
    version?: {
      version: string;
      platform: string;
      updateType: "BINARY" | "OTA";
      downloadUrl: string;
      changelog: Array<string>;
      mandatory: boolean;
      releaseDate: string;
      fileSize: number;
      checksum: string;
    };
  };
};
export type PostApiUpdatesUploadResponse =
  PostApiUpdatesUploadResponses[keyof PostApiUpdatesUploadResponses];
export type GetApiUpdatesDownloadByFilenameData = {
  body?: never;
  path: {
    filename: string;
  };
  query?: never;
  url: "/api/updates/download/{filename}";
};
export type GetApiUpdatesDownloadByFilenameErrors = {
  404: {
    error: string;
  };
};
export type GetApiUpdatesDownloadByFilenameError =
  GetApiUpdatesDownloadByFilenameErrors[keyof GetApiUpdatesDownloadByFilenameErrors];
export type GetApiUpdatesDownloadByFilenameResponses = {
  200: unknown;
};
export type GetApiUpdatesVersionsByAppIdByPlatformData = {
  body?: never;
  path: {
    appId: string;
    platform: string;
  };
  query?: never;
  url: "/api/updates/versions/{appId}/{platform}";
};
export type GetApiUpdatesVersionsByAppIdByPlatformErrors = {
  400: {
    error: string;
  };
};
export type GetApiUpdatesVersionsByAppIdByPlatformError =
  GetApiUpdatesVersionsByAppIdByPlatformErrors[keyof GetApiUpdatesVersionsByAppIdByPlatformErrors];
export type GetApiUpdatesVersionsByAppIdByPlatformResponses = {
  200: {
    appId: string;
    platform: string;
    versions: Array<{
      version: string;
      platform: string;
      updateType: "BINARY" | "OTA";
      downloadUrl: string;
      changelog: Array<string>;
      mandatory: boolean;
      releaseDate: string;
      fileSize: number;
      checksum: string;
    }>;
  };
};
export type GetApiUpdatesVersionsByAppIdByPlatformResponse =
  GetApiUpdatesVersionsByAppIdByPlatformResponses[keyof GetApiUpdatesVersionsByAppIdByPlatformResponses];
export type GetApiUsersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/users";
};
export type GetApiUsersResponses = {
  200: Array<{
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  }>;
};
export type GetApiUsersResponse =
  GetApiUsersResponses[keyof GetApiUsersResponses];
export type PostApiEnterGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/enter/game";
};
export type PostApiEnterGameResponses = {
  200: unknown;
};
export type PostApiGamesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games";
};
export type PostApiGamesResponses = {
  200: unknown;
};
export type PostApiSetupGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/setup/game";
};
export type PostApiSetupGameResponses = {
  200: unknown;
};
export type GetApiSpinpageData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/spinpage";
};
export type GetApiSpinpageResponses = {
  200: unknown;
};
export type PostApiSpinData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/spin";
};
export type PostApiSpinResponses = {
  200: unknown;
};
export type GetApiFavoriteGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/favorite/game";
};
export type GetApiFavoriteGameResponses = {
  200: unknown;
};
export type PostApiEndGameSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/end-game-session";
};
export type PostApiEndGameSessionErrors = {
  401: unknown;
};
export type PostApiEndGameSessionResponses = {
  200: {
    success: boolean;
    message: string;
  };
};
export type PostApiEndGameSessionResponse =
  PostApiEndGameSessionResponses[keyof PostApiEndGameSessionResponses];
export type DeleteApiUsersByIdData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};
export type DeleteApiUsersByIdErrors = {
  404: {
    message: string;
  };
  422: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};
export type DeleteApiUsersByIdError =
  DeleteApiUsersByIdErrors[keyof DeleteApiUsersByIdErrors];
export type DeleteApiUsersByIdResponses = {
  204: void;
};
export type DeleteApiUsersByIdResponse =
  DeleteApiUsersByIdResponses[keyof DeleteApiUsersByIdResponses];
export type GetApiUsersByIdData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};
export type GetApiUsersByIdErrors = {
  404: {
    message: string;
  };
  422: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};
export type GetApiUsersByIdError =
  GetApiUsersByIdErrors[keyof GetApiUsersByIdErrors];
export type GetApiUsersByIdResponses = {
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};
export type GetApiUsersByIdResponse =
  GetApiUsersByIdResponses[keyof GetApiUsersByIdResponses];
export type PatchApiUsersByIdData = {
  body: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};
export type PatchApiUsersByIdErrors = {
  404: {
    message: string;
  };
};
export type PatchApiUsersByIdError =
  PatchApiUsersByIdErrors[keyof PatchApiUsersByIdErrors];
export type PatchApiUsersByIdResponses = {
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};
export type PatchApiUsersByIdResponse =
  PatchApiUsersByIdResponses[keyof PatchApiUsersByIdResponses];
export type GetApiUsersByIdCheckData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/check";
};
export type GetApiUsersByIdCheckErrors = {
  404: {
    message: string;
  };
};
export type GetApiUsersByIdCheckError =
  GetApiUsersByIdCheckErrors[keyof GetApiUsersByIdCheckErrors];
export type GetApiUsersByIdCheckResponses = {
  200: {
    userCheck: boolean;
  };
};
export type GetApiUsersByIdCheckResponse =
  GetApiUsersByIdCheckResponses[keyof GetApiUsersByIdCheckResponses];
export type PostApiUsersByIdVerifyEmailData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/verify-email";
};
export type PostApiUsersByIdVerifyEmailResponses = {
  200: {
    status: string;
    time: number;
  };
};
export type PostApiUsersByIdVerifyEmailResponse =
  PostApiUsersByIdVerifyEmailResponses[keyof PostApiUsersByIdVerifyEmailResponses];
export type GetApiUsersByIdInfoData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/info";
};
export type GetApiUsersByIdInfoErrors = {
  404: {
    message: string;
  };
};
export type GetApiUsersByIdInfoError =
  GetApiUsersByIdInfoErrors[keyof GetApiUsersByIdInfoErrors];
export type GetApiUsersByIdInfoResponses = {
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};
export type GetApiUsersByIdInfoResponse =
  GetApiUsersByIdInfoResponses[keyof GetApiUsersByIdInfoResponses];
export type GetApiUsersByIdVipinfoData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/vipinfo";
};
export type GetApiUsersByIdVipinfoResponses = {
  200: {
    vipLevel: number | null;
  };
};
export type GetApiUsersByIdVipinfoResponse =
  GetApiUsersByIdVipinfoResponses[keyof GetApiUsersByIdVipinfoResponses];
export type GetApiUserAmountData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/amount";
};
export type GetApiUserAmountResponses = {
  200: {
    amount: number;
    currency: {
      fiat: boolean;
      name: string;
      symbol: string;
      type: string;
    };
    withdraw: number;
    rate: number;
  };
};
export type GetApiUserAmountResponse =
  GetApiUserAmountResponses[keyof GetApiUserAmountResponses];
export type PostApiUserChangeData = {
  body: {
    id: string;
    username: string;
    email?: string | null;
    passwordHash?: string | null;
    accessToken?: string | null;
    refreshToken?: string | null;
    accessTokenExpiresAt?: string | null;
    refreshTokenExpiresAt?: string | null;
    currentGameSessionDataId?: string | null;
    currentAuthSessionDataId?: string | null;
    avatar_url?: string | null;
    role?: string;
    isActive?: boolean;
    lastLoginAt?: string | null;
    totalXpGained: number;
    activeWalletId?: string | null;
    vipInfoId?: string | null;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string | null;
    lastSeen?: string | null;
  };
  path?: never;
  query?: never;
  url: "/api/user/change";
};
export type PostApiUserChangeResponses = {
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};
export type PostApiUserChangeResponse =
  PostApiUserChangeResponses[keyof PostApiUserChangeResponses];
export type PostApiUserEmailData = {
  body: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/email";
};
export type PostApiUserEmailResponses = {
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};
export type PostApiUserEmailResponse =
  PostApiUserEmailResponses[keyof PostApiUserEmailResponses];
export type PostApiUserPasswordData = {
  body: {
    now_password: string;
    new_password: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/password";
};
export type PostApiUserPasswordResponses = {
  200: {
    message: string;
  };
};
export type PostApiUserPasswordResponse =
  PostApiUserPasswordResponses[keyof PostApiUserPasswordResponses];
export type PostApiUserSuspendData = {
  body: {
    time: number;
  };
  path?: never;
  query?: never;
  url: "/api/user/suspend";
};
export type PostApiUserSuspendResponses = {
  200: {
    message: string;
  };
};
export type PostApiUserSuspendResponse =
  PostApiUserSuspendResponses[keyof PostApiUserSuspendResponses];
export type PostApiRedtigerGameSettingsData = {
  body?: {
    gamesId: string;
    token?: string | null;
    userId: string;
    currency: string;
    language: string;
    mode: "real" | "demo" | "test";
    custom?: {
      siteId?: string;
      extras?: string;
    };
    userData?: {
      userId?: string | number;
      hash?: string;
      affiliate?: string | number;
      lang?: string | number;
      channel?: string | number;
      userType?: string;
      fingerprint?: string | number;
    };
  };
  path?: never;
  query?: never;
  url: "/api/redtiger/game/settings";
};
export type PostApiRedtigerGameSettingsErrors = {
  500: {
    success: boolean;
    error: {
      code: string;
      message: string;
    };
  };
};
export type PostApiRedtigerGameSettingsError =
  PostApiRedtigerGameSettingsErrors[keyof PostApiRedtigerGameSettingsErrors];
export type PostApiRedtigerGameSettingsResponses = {
  200: {
    success: boolean;
    result?: {
      user: {
        balance: {
          cash: string;
          freeBets?: string;
          bonus?: string;
        };
        canGamble: boolean;
        userId: number | string;
        sessionId: string;
        sessionNetPosition?: string;
        token: string;
        country?: string;
        currency?: {
          code: string;
          symbol: string;
        };
        stakes?: unknown;
        limits?: unknown;
        serverTime: string;
      };
      games?: {
        version?: string;
        gamesType?: string;
      };
      launcher?: {
        version?: string;
      };
      jackpots?: unknown;
    };
    error?: {
      code: string;
      message: string;
      details?: unknown;
    };
  };
};
export type PostApiRedtigerGameSettingsResponse =
  PostApiRedtigerGameSettingsResponses[keyof PostApiRedtigerGameSettingsResponses];
export type PostApiRedtigerGameSpinData = {
  body?: {
    token?: string;
    userId?: string;
    gamesId?: string;
    stake?: number | string;
    currency?: string;
    sessionId?: string;
    playMode?: "real" | "demo" | "test";
    actions?: Array<unknown>;
    custom?: {
      siteId?: string;
      extras?: string;
    };
    bonusId?: unknown;
    extras?: unknown;
    siteId?: string;
    userType?: string;
    lang?: string | number;
    fingerprint?: string | number;
    channel?: string | number;
    affiliate?: string | number;
    userData?: {
      userId?: string | number;
      hash?: string;
      affiliate?: string | number;
      lang?: string | number;
      channel?: string | number;
      userType?: string;
      fingerprint?: string | number;
    };
    roundId?: string | number;
    transactionId?: string | number;
  };
  path?: never;
  query?: never;
  url: "/api/redtiger/game/spin";
};
export type PostApiRedtigerGameSpinErrors = {
  500: {
    success: boolean;
    error: {
      code: string;
      message: string;
    };
  };
};
export type PostApiRedtigerGameSpinError =
  PostApiRedtigerGameSpinErrors[keyof PostApiRedtigerGameSpinErrors];
export type PostApiRedtigerGameSpinResponses = {
  200: {
    transactions: {
      roundId: number | string;
    };
    user: {
      balance: {
        cash: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
        freeBets?: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
        bonus?: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
      };
      userId: number | string;
      sessionId: string;
      sessionNetPosition?: string;
      token: string;
      serverTime: string;
      canGamble?: boolean;
    };
    games: {
      win: {
        instantWin?: string;
        lines?: string;
        total: string;
      };
      stake: string;
      multiplier?: number;
      winLines?: Array<unknown>;
      reelsBuffer?: Array<Array<Array<number>>>;
      xpBreakdown?: {
        baseXp: number;
        bonusXp: number;
        totalXp: number;
      };
    };
    jackpots?: unknown;
    bonusChance?: unknown;
  };
};
export type PostApiRedtigerGameSpinResponse =
  PostApiRedtigerGameSpinResponses[keyof PostApiRedtigerGameSpinResponses];
export type GetApiGamesAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/all";
};
export type GetApiGamesAllResponses = {
  200: Array<Game>;
};
export type GetApiGamesAllResponse =
  GetApiGamesAllResponses[keyof GetApiGamesAllResponses];
export type GetApiGamesCategoriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/categories";
};
export type GetApiGamesCategoriesResponses = {
  200: Array<string>;
};
export type GetApiGamesCategoriesResponse =
  GetApiGamesCategoriesResponses[keyof GetApiGamesCategoriesResponses];
export type GetApiGamesSearchData = {
  body?: never;
  path?: never;
  query?: {
    game_categories_slug?: string;
    page?: string;
    limit?: string;
  };
  url: "/api/games/search";
};
export type GetApiGamesSearchResponses = {
  200: {
    games: Array<{
      id: string;
      name: string;
      title: string;
      developer: string;
      description?: string;
      category: string;
      tags: Array<string>;
      thumbnailUrl?: string;
      bannerUrl?: string;
      isActive?: boolean;
    }>;
    total: number;
  };
};
export type GetApiGamesSearchResponse =
  GetApiGamesSearchResponses[keyof GetApiGamesSearchResponses];
export type GetApiUserGamesData = {
  body?: never;
  path?: never;
  query: {
    game_categories_slug: string;
    page?: string;
    limit?: string;
  };
  url: "/api/user/games";
};
export type GetApiUserGamesResponses = {
  200: {
    games: Array<{
      id: string;
      name: string;
      title: string;
      developer: string;
      description?: string;
      category: string;
      tags: Array<string>;
      thumbnailUrl?: string;
      bannerUrl?: string;
      isActive?: boolean;
    }>;
    total: number;
  };
};
export type GetApiUserGamesResponse =
  GetApiUserGamesResponses[keyof GetApiUserGamesResponses];
export type PostApiUserGamesFavoriteData = {
  body?: {
    add_game?: string;
    del_game?: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/games/favorite";
};
export type PostApiUserGamesFavoriteResponses = {
  200: unknown;
};
export type GetApiUserGamesFavoritesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/games/favorites";
};
export type GetApiUserGamesFavoritesResponses = {
  200: Array<string>;
};
export type GetApiUserGamesFavoritesResponse =
  GetApiUserGamesFavoritesResponses[keyof GetApiUserGamesFavoritesResponses];
export type PostApiGamesByIdEnterData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/games/{id}/enter";
};
export type PostApiGamesByIdEnterErrors = {
  404: {
    message: string;
  };
};
export type PostApiGamesByIdEnterError =
  PostApiGamesByIdEnterErrors[keyof PostApiGamesByIdEnterErrors];
export type PostApiGamesByIdEnterResponses = {
  200: {
    webUrl: string;
    gameConfig: {
      authToken: string;
      gameSessionId: string;
      userId: string;
      gameName: string;
      lang: string;
      currency: string;
      operator: string;
      provider: string;
      depositUrl: string;
      lobbyUrl: string;
      mode: string;
      rgsApiBase: string;
      cdn: string;
      baseCdn: string;
    };
  };
};
export type PostApiGamesByIdEnterResponse =
  PostApiGamesByIdEnterResponses[keyof PostApiGamesByIdEnterResponses];
export type PostApiGamesLeaveData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/leave";
};
export type PostApiGamesLeaveResponses = {
  200: unknown;
};
export type GetApiVipMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/me";
};
export type GetApiVipMeErrors = {
  401: unknown;
  404: unknown;
};
export type GetApiVipMeResponses = {
  200: VipDetails;
};
export type GetApiVipMeResponse =
  GetApiVipMeResponses[keyof GetApiVipMeResponses];
export type GetApiVipLevelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/levels";
};
export type GetApiVipLevelsResponses = {
  200: Array<VipLevel>;
};
export type GetApiVipLevelsResponse =
  GetApiVipLevelsResponses[keyof GetApiVipLevelsResponses];
export type GetApiVipRanksData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/ranks";
};
export type GetApiVipRanksResponses = {
  200: Array<VipRank>;
};
export type GetApiVipRanksResponse =
  GetApiVipRanksResponses[keyof GetApiVipRanksResponses];
export type GetApiGamespinsTopwinsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/gamespins/topwins";
};
export type GetApiGamespinsTopwinsErrors = {
  401: {
    message: string;
  };
};
export type GetApiGamespinsTopwinsError =
  GetApiGamespinsTopwinsErrors[keyof GetApiGamespinsTopwinsErrors];
export type GetApiGamespinsTopwinsResponses = {
  200: Array<GameSpin>;
};
export type GetApiGamespinsTopwinsResponse =
  GetApiGamespinsTopwinsResponses[keyof GetApiGamespinsTopwinsResponses];
export type GetGs2cGeV3GameServiceData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/gs2c/ge/v3/gameService/";
};
export type GetGs2cGeV3GameServiceResponses = {
  200: {
    message: string;
  };
};
export type GetGs2cGeV3GameServiceResponse =
  GetGs2cGeV3GameServiceResponses[keyof GetGs2cGeV3GameServiceResponses];
export type ClientOptions = {
  baseURL: "https://api.cashflowcasino.com" | (string & {});
};
</file>

<file path="sdk/types/api.ts">

</file>

<file path="sdk/types/backend.d.ts">
import type { OpenAPIHono } from '@hono/zod-openapi';
import type { AppBindings } from '../../../backend/src/lib/types';
export type AppType = OpenAPIHono<AppBindings>;
</file>

<file path="sdk/api.ts">
type ApiMethod<T = unknown> = {
    $get: (options?: RequestInit) => Promise<T>
    $post: (
        body?: unknown,
        options?: Omit<RequestInit, 'body' | 'method'>
    ) => Promise<T>
    $put: (
        body?: unknown,
        options?: Omit<RequestInit, 'body' | 'method'>
    ) => Promise<T>
    $delete: (options?: Omit<RequestInit, 'method'>) => Promise<T>
}
type ApiClient = {
    [key: string]: ApiMethod
}
const getAuthToken = (): string | null =>
const createApiHandler = (baseUrl: string) =>
⋮----
const fetchWithAuth = async <T>(
        input: RequestInfo | URL,
        init: RequestInit = {}
): Promise<T> =>
const createMethodHandler = (endpoint: string): ApiMethod => (
⋮----
get(_, prop: string): ApiMethod
</file>

<file path="sdk/auth.ts">
import { useAppStore } from '@/stores/app.store'
import { useAuthStore } from '@/stores/auth.store'
import { useGameStore } from '@/stores/game.store'
import { useGameSpinStore } from '@/stores/gamespin.store'
import { useVipStore } from '@/stores/vip.store'
import { useMutation } from '@tanstack/vue-query'
import { postAuthLogin } from './generated/sdk.gen'
type LoginRequest = {
    username: string
    password: string
}
type LoginResponse = {
    accessToken: string
    user: {
        id: string
        username: string
        email: string | null
    }
}
export function useLogin()
</file>

<file path="sdk/runtime.client.ts">
import type { CreateClientConfig } from './generated/client.gen'
⋮----
export const createClientConfig: CreateClientConfig = (config: any) => (
</file>

<file path="sdk/types.ts">

</file>

<file path="services/GameLauncher.ts">
interface LaunchOptions {
    launch_url?: string
    target_element?: string
    launch_options?: {
        game_launcher_url?: string
        [key: string]: string | number | boolean | undefined
    }
    [key: string]: unknown
}
interface GameLauncherConstructorOptions {
    onMessage?: (data: Record<string, unknown>) => void
    [key: string]: unknown
}
class GameLauncher
⋮----
private launchOptions: LaunchOptions | null = null // Store launch options
/**
     * Creates an instance of GameLauncher.
     * @param target The DOM element or its ID where the iframe will be injected.
     * @param options Configuration options including message callbacks and custom iframe attributes.
     */
constructor(
        target: HTMLElement | string,
        options: GameLauncherConstructorOptions = {}
)
private injectLoaderStyles(): void
private showLoadingIndicator(): void
private hideLoadingIndicator(): void
private createIframe(): HTMLIFrameElement
private buildUrl(options: LaunchOptions): URL
public sendMessage(message: Record<string, unknown>): void
private setupMessageListener(): void
public destroy(): void
public run(
        launchOptions: LaunchOptions | string,
        onSuccess?: () => void,
onError: (error: Error) => void = (error) =>
⋮----
this.showLoadingIndicator() // Show loader at the start of the launch process
</file>

<file path="services/websocket.service.ts">
import { useAuthStore } from '@/stores/auth.store'
import { useEventManager } from '@/composables/EventManager'
import type { WebSocketMessage } from '@/types/websocket'
class WebSocketService
⋮----
public async initConnection(): Promise<void>
public initGameConnection(gameId: string): void
private setupSocketHandlers(
        socket: WebSocket,
        type: 'main' | 'game'
): void
private handleIncomingMessage(data: unknown): void
private handleReconnect(type: 'main' | 'game'): void
private buildWebSocketUrl(path: string): string
public closeConnections(): void
public isConnected(): boolean
</file>

<file path="stores/app.store.ts">
import { defineStore } from 'pinia'
⋮----
function showLoading()
function hideLoading()
</file>

<file path="stores/auth.store.ts">
import router from '@/router'
import {
    getApiAuthMe,
    postApiAuthLogin,
    type User,
} from '@/sdk/generated'
import { client } from '@/sdk/generated/client.gen'
import { webSocketService } from '@/services/websocket.service'
import { pinia } from '@/stores'
import { defineStore } from 'pinia'
import { computed, ref } from 'vue'
import { useAppStore } from './app.store'
import { useDepositStore } from './deposit.store'
import { useGameStore } from './game.store'
import { useGameSpinStore } from './gamespin.store'
import { useNotificationStore } from './notification.store'
import { useVipStore } from './vip.store'
interface AuthTokens {
    accessToken: string
    refreshToken?: string | null
}
⋮----
const setTokens = async (tokens: AuthTokens) =>
const clearAuth = async () =>
const signUp = async (credentials: {
        username: string
        password: string
}) =>
const login = async (credentials: {
        username: string
        password: string
}) =>
const getSession = async () =>
⋮----
const toggleSignUpMode = () =>
const logout = () =>
const initWebSocket = (): void =>
const closeWebSocket = (): void =>
const refreshAccessToken = async (): Promise<string | null> =>
const init = async (): Promise<void> =>
⋮----
export function useAuthStoreOutside()
</file>

<file path="stores/chat.store.ts">
import { defineStore } from 'pinia'
import { ref, reactive } from 'vue'
interface ChatMessages {
    data: any[] | null
    loading: boolean
}
⋮----
function setChatOpenState(isOpen: boolean)
function setLastMessage()
function setScroll(value: boolean)
function setRoom(newRoom: string)
function setOnline(data: {
        en: number
        tr: number
        de: number
        es: number
        beg: number
        whale: number
})
function setMessages(data: any[])
function addMessage(message: any)
function removeMessage(messageId: string)
function removeOverdueMessages()
function clearMessages()
function setLoading(value: boolean)
function socketInit(data: any)
function socketOnline(data: any)
function socketMessage(data: any)
function socketRemove(data: any)
function socketClear()
</file>

<file path="stores/deposit.store.ts">
import { defineStore } from 'pinia'
import { ref } from 'vue'
import { Operator, Wallet } from '@/sdk/generated'
⋮----
function setDepositInfo(data:
function clearDepositInfo()
</file>

<file path="stores/exception.ts">
export const handleException = (code: number): string =>
</file>

<file path="stores/game.store.ts">
import { defineStore } from 'pinia'
import { ref } from 'vue'
import { useMutation, useQueryClient } from '@tanstack/vue-query'
import { useDebounceFn } from '@vueuse/core'
import {
    getApiGamesAll,
    getApiGamesCategories,
    postApiGamesLeave,
    postApiUserGamesFavorite,
    postApiGamesByIdEnter,
    type PostApiGamesByIdEnterData,
    type Game,
    type PostApiGamesByIdEnterResponse,
} from '@/sdk/generated'
import { useAppStore } from './app.store'
import { useAuthStore } from './auth.store'
⋮----
async function fetchAllGames()
async function fetchAllGameCategories()
⋮----
const leaveGame = async () =>
const toggleFavorite = (gameId: string)
</file>

<file path="stores/gamespin.store.ts">
import { defineStore } from 'pinia'
import { ref } from 'vue'
import { GameSpin, getApiGamespinsTopwins } from '@/sdk/generated'
⋮----
//     // --- Actions ---
//     /**
//      * Fetches all game spins for the currently authenticated user.
//      */
//     async function dispatchGetUserSpins(): Promise<void> {
//         isLoading.value = true
//         errMessage.value = ''
//         try {
//             const { data, error } = await getGamesAll()
//             if (error || !data) throw new Error('Failed to get user spins')
async function fetchTopWins(): Promise<void>
</file>

<file path="stores/index.ts">
import { createPinia } from 'pinia'
import type { Plugin } from 'vue'
⋮----
export const plugin: Plugin = (app) =>
</file>

<file path="stores/notification.store.ts">
import { defineStore } from 'pinia'
import { ref } from 'vue'
type NotificationType = 'success' | 'error' | 'info' | 'warning'
interface Notification {
    id: string
    message: string
    type: NotificationType
    timeout?: number
    createdAt: number
}
⋮----
const addNotification = (notification:
const removeNotification = (id: string) =>
const clearAllNotifications = () =>
const success = (message: string, timeout?: number)
const error = (message: string, timeout?: number)
const info = (message: string, timeout?: number)
const warning = (message: string, timeout?: number)
</file>

<file path="stores/vip.store.ts">
import { computed, ref } from 'vue'
import { defineStore } from 'pinia'
import {
    getApiVipLevels,
    getApiVipMe,
    type VipInfo as ApiVipInfo,
    type VipLevel as ApiVipLevel,
} from '@/sdk/generated'
type VipInfo = ApiVipInfo & { betExp?: number }
type VipLevel = ApiVipLevel & { betExp?: number }
⋮----
const updateXp = (newTotalXp: number, xpGained: number) =>
⋮----
const setVipInfo = (info: VipInfo) =>
async function fetchAllVipLevels()
async function fetchVipInfo()
function getPercentOfCurrentLevel()
</file>

<file path="types/events.ts">
import { User, Operator, Wallet, VipInfo } from '@/sdk/generated'
export interface BalanceUpdatePayload {
  amount: number
}
export type ModelChangeEventFromServer = {
  type: string
  action: string
  data: Record<string, number>[] | Partial<User> | Partial<Operator> | Partial<Wallet> | Partial<VipInfo>
}
export type AnimationEventFromServer = {
  type: string
  action: string
  data: Record<string, number>[]
}
</file>

<file path="types/websocket.d.ts">
export type WebSocketMessage<T = unknown> = {
  type: string
  payload: T
  timestamp: number
}
export type UserUpdateMessage = WebSocketMessage<{
  id: string
  username: string
  email?: string | null
}>
export type WalletUpdateMessage = WebSocketMessage<{
  balance: number
  currency: string
}>
export type VipUpdateMessage = WebSocketMessage<{
  level: number
  points: number
}>
export type GameUpdateMessage = WebSocketMessage<{
  gameId: string
}>
export type WebSocketMessages =
  | UserUpdateMessage
  | WalletUpdateMessage
  | VipUpdateMessage
  | GameUpdateMessage
⋮----
interface WebSocket {
    onopen: ((this: WebSocket, ev: Event) => unknown) | null
    onclose: ((this: WebSocket, ev: CloseEvent) => unknown) | null
    onmessage: ((this: WebSocket, ev: MessageEvent) => unknown) | null
    onerror: ((this: WebSocket, ev: Event) => unknown) | null
    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void
    close(code?: number, reason?: string): void
    readonly readyState: number
    readonly url: string
  }
⋮----
send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void
close(code?: number, reason?: string): void
</file>

<file path="types/websocket.ts">
import type { User, Wallet, VipInfo } from '@/sdk/generated'
export type WebSocketMessage =
  | {
      type: 'user:update'
      payload: Partial<User>
    }
  | {
      type: 'wallet:update'
      payload: Partial<Wallet>
    }
  | {
      type: 'vip:update'
      payload: Partial<VipInfo>
    }
  | {
      type: 'xp:gain'
      payload: {amount: number}
    }
| {
      type: 'balance:gain'
      payload: {amount: number}
    }
</file>

<file path="views/AboutView.vue">
<template>
  <div class="about">
    <h1>This is an about page</h1>
  </div>
</template>
<style>
@media (min-width: 1024px) {
  .about {
    min-height: 100vh;
    display: flex;
    align-items: center;
  }
}
</style>
</file>

<file path="views/HomeView.vue">
<script setup lang="ts">
import { useAuthStore } from '@/stores/auth.store';
import { useGameStore } from '@/stores/game.store';
import { computed, onMounted, ref, watch } from 'vue';
import { useEventManager } from '@/composables/EventManager'
const eventBus = useEventManager()
const gameStore = useGameStore();
const gameSpinStore = useGameSpinStore();
const authStore = useAuthStore();
const settingsModal = ref(false);
const currentUser = computed(() => authStore.currentUser);
const gameActive = ref(false)
watch(
  () => gameStore.games,
  (games) => {
    if (games.length > 0) {
      setTimeout(async () => {
      }, 1000)
    }
  },
  { immediate: true }
);
const handleSettingsModal = (value: unknown) => {
  if (typeof value === 'boolean') {
    settingsModal.value = value
  }
}
eventBus.on('settingsModal', (value: unknown) => {
  settingsModal.value = value as boolean
})
onUnmounted(() => {
  eventBus.off('settingsModal', handleSettingsModal)
})
onMounted(async () => {
  if (gameStore.games.length === 0) {
    await gameStore.fetchAllGames();
    await gameSpinStore.fetchTopWins();
  }
});
</script>
<template>
  <main class="overflow-hidden">
    <Starfield class="star-overlay" />
    <div style="min-height: 80px"></div>
    <LiveWin />
    <GameCarousel />
    <AdCarousel />
    <RtgGameLauncher v-if="currentUser && gameActive" :gameId="'atlantis'" :sessionId="currentUser.id" />
    <SettingsView v-if="currentUser && settingsModal" />
  </main>
</template>
<style scoped>
.background-container {
  position: relative;
  width: 100%;
  height: 100%;
}
.background-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.star-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  pointer-events: none;
}
</style>
</file>

<file path="views/LoginView.vue">
<script setup lang="ts">
import LoginForm from '@/components/auth/LoginForm.vue'
import RegisterForm from '@/components/auth/RegisterForm.vue'
import Logo from '@/components/Logo.vue'
import { useAppStore } from '@/stores/app.store'
import { useAuthStore } from '@/stores/auth.store'
import { storeToRefs } from 'pinia'
import { onMounted } from 'vue'
const authStore = useAuthStore()
const appStore = useAppStore()
const {
  isSignUpMode,
  isLoading: isAuthLoading,
  isAuthenticated,
} = storeToRefs(authStore)
onMounted(() => {
  appStore.hideLoading()
  if (authStore.isSignUpMode === true) {
    authStore.toggleSignUpMode()
  }
  if (isAuthenticated.value) {
    console.debug('[login-view] already authenticated on mount, redirecting to /')
    import('@/router').then((m) => {
      m.default.push('/')
    })
  }
})
</script>
<template>
  <div class="min-h-screen bg-gray-900 flex items-center justify-center px-4 relative">
    <div v-if="!isAuthLoading && !isAuthenticated">
      <div class="login-view-container overflow-hidden">
        <Logo class="logo-main"></Logo>
        <div class="flex mt-4 justify-center items-center min-h-[20px] w-80 glow text-sm zIndex-1">
          <div :style="`color: ${!isSignUpMode ? 'white' : 'green'};`">Login</div>
          <input type="checkbox" id="switch" style="transform: scale(0.5)" @click="authStore.toggleSignUpMode" /><label
            style="transform: scale(0.5)" for="switch">Toggle</label>
          <div :style="`color: ${isSignUpMode ? 'white' : 'green'};`">Signup</div>
        </div>
        <RegisterForm v-if="isSignUpMode" class="zIndex-1" />
        <LoginForm v-else class="zIndex-1" />
      </div>
    </div>
    <div v-else class="text-white text-center">
      Loading authentication...
    </div>
  </div>
</template>
</file>

<file path="views/RtgGame.vue">
<template>
    <div v-if="!error && gameLaunchOptions" class="w-screen h-screen">
        <GameLoader :launch-options="gameLaunchOptions" />
    </div>
    <div v-else-if="error" class="text-white">
        <p>Failed to load game.</p>
    </div>
    <div v-else class="text-white">
        <p>Loading game...</p>
    </div>
</template>
<script setup lang="ts">
import GameLoader from '@/components/GameLoader.vue'
import { useGameStore } from '@/stores/game.store'
import { useRouteQuery } from '@vueuse/router'
import { onMounted, ref, computed } from 'vue'
interface GameLaunchOptions {
    launch_url: string;
    launch_options: {
        game_launcher_url: string;
        [key: string]: unknown;
    };
}
const gameName = useRouteQuery('gameName')
const gameStore = useGameStore()
const error = ref(!gameName.value)
const gameLaunchOptions = ref<GameLaunchOptions | null>(null)
const game = computed(() =>
    gameStore.games.find((g) => g.name === gameName.value)
)
onMounted(async () => {
    if (gameStore.games.length === 0) {
        await gameStore.fetchAllGames()
    }
    if (game.value) {
        try {
            const response = await gameStore.enterGame(game.value.id)
            if (response) {
                gameLaunchOptions.value = {
                    launch_url: response.webUrl,
                    launch_options: {
                        game_launcher_url: response.webUrl,
                        ...response.gameConfig,
                    },
                }
            }
        } catch (e) {
            console.error('Failed to enter game', e)
            error.value = true
        }
    } else {
        console.error(`Game with name ${gameName.value} not found.`)
        error.value = true
    }
})
</script>
</file>

<file path="App.vue">
<script setup lang="ts">
import { computed, onMounted } from 'vue'
import GlobalLoading from '@/components/GlobalLoading.vue'
import Header from '@/components/Header.vue'
import Footer from '@/components/Footer.vue'
import Notification from '@/components/common/Notification.vue'
import AnimationLayer from '@/components/AnimationLayer.vue'
import router from './router'
import { useAuthStore } from '@/stores/auth.store'
const authStore = useAuthStore()
const isLogin = computed(() => router.currentRoute.value.path === '/login')
const isAuthenticated = computed(() => !!authStore.isAuthenticated)
const showLoader = computed(() => !isLogin.value)
const showChrome = computed(() => {
  const user = authStore.currentUser
  const notInGame = !user || user.currentGameSessionDataId == null
  return isAuthenticated.value && notInGame && !isLogin.value
})
onMounted(() => {
  if (isLogin.value) {
    document.body.classList.remove('loading-active')
  }
})
</script>
<template>
  <component :is="AnimationLayer" v-if="AnimationLayer" />
  <component :is="GlobalLoading" v-if="showLoader" />
  <component :is="Header" v-if="showChrome" />
  <router-view />
  <component :is="Footer" v-if="showChrome" />
  <component :is="Notification" v-if="Notification" />
</template>
</file>

<file path="auto-imports.d.ts">
import { UnwrapRef } from 'vue'
⋮----
interface GlobalComponents {}
interface ComponentCustomProperties {
    readonly EffectScope: UnwrapRef<typeof import('vue')['EffectScope']>
    readonly acceptHMRUpdate: UnwrapRef<typeof import('pinia')['acceptHMRUpdate']>
    readonly computed: UnwrapRef<typeof import('vue')['computed']>
    readonly createApp: UnwrapRef<typeof import('vue')['createApp']>
    readonly createPinia: UnwrapRef<typeof import('pinia')['createPinia']>
    readonly customRef: UnwrapRef<typeof import('vue')['customRef']>
    readonly defineAsyncComponent: UnwrapRef<typeof import('vue')['defineAsyncComponent']>
    readonly defineComponent: UnwrapRef<typeof import('vue')['defineComponent']>
    readonly defineStore: UnwrapRef<typeof import('pinia')['defineStore']>
    readonly effectScope: UnwrapRef<typeof import('vue')['effectScope']>
    readonly getActivePinia: UnwrapRef<typeof import('pinia')['getActivePinia']>
    readonly getCurrentInstance: UnwrapRef<typeof import('vue')['getCurrentInstance']>
    readonly getCurrentScope: UnwrapRef<typeof import('vue')['getCurrentScope']>
    readonly h: UnwrapRef<typeof import('vue')['h']>
    readonly handleException: UnwrapRef<typeof import('./stores/exception')['handleException']>
    readonly inject: UnwrapRef<typeof import('vue')['inject']>
    readonly isProxy: UnwrapRef<typeof import('vue')['isProxy']>
    readonly isReactive: UnwrapRef<typeof import('vue')['isReactive']>
    readonly isReadonly: UnwrapRef<typeof import('vue')['isReadonly']>
    readonly isRef: UnwrapRef<typeof import('vue')['isRef']>
    readonly mapActions: UnwrapRef<typeof import('pinia')['mapActions']>
    readonly mapGetters: UnwrapRef<typeof import('pinia')['mapGetters']>
    readonly mapState: UnwrapRef<typeof import('pinia')['mapState']>
    readonly mapStores: UnwrapRef<typeof import('pinia')['mapStores']>
    readonly mapWritableState: UnwrapRef<typeof import('pinia')['mapWritableState']>
    readonly markRaw: UnwrapRef<typeof import('vue')['markRaw']>
    readonly nextTick: UnwrapRef<typeof import('vue')['nextTick']>
    readonly onActivated: UnwrapRef<typeof import('vue')['onActivated']>
    readonly onBeforeMount: UnwrapRef<typeof import('vue')['onBeforeMount']>
    readonly onBeforeRouteLeave: UnwrapRef<typeof import('vue-router')['onBeforeRouteLeave']>
    readonly onBeforeRouteUpdate: UnwrapRef<typeof import('vue-router')['onBeforeRouteUpdate']>
    readonly onBeforeUnmount: UnwrapRef<typeof import('vue')['onBeforeUnmount']>
    readonly onBeforeUpdate: UnwrapRef<typeof import('vue')['onBeforeUpdate']>
    readonly onDeactivated: UnwrapRef<typeof import('vue')['onDeactivated']>
    readonly onErrorCaptured: UnwrapRef<typeof import('vue')['onErrorCaptured']>
    readonly onMounted: UnwrapRef<typeof import('vue')['onMounted']>
    readonly onRenderTracked: UnwrapRef<typeof import('vue')['onRenderTracked']>
    readonly onRenderTriggered: UnwrapRef<typeof import('vue')['onRenderTriggered']>
    readonly onScopeDispose: UnwrapRef<typeof import('vue')['onScopeDispose']>
    readonly onServerPrefetch: UnwrapRef<typeof import('vue')['onServerPrefetch']>
    readonly onUnmounted: UnwrapRef<typeof import('vue')['onUnmounted']>
    readonly onUpdated: UnwrapRef<typeof import('vue')['onUpdated']>
    readonly onWatcherCleanup: UnwrapRef<typeof import('vue')['onWatcherCleanup']>
    readonly pinia: UnwrapRef<typeof import('./stores/index')['pinia']>
    readonly plugin: UnwrapRef<typeof import('./stores/index')['plugin']>
    readonly provide: UnwrapRef<typeof import('vue')['provide']>
    readonly reactive: UnwrapRef<typeof import('vue')['reactive']>
    readonly readonly: UnwrapRef<typeof import('vue')['readonly']>
    readonly ref: UnwrapRef<typeof import('vue')['ref']>
    readonly resolveComponent: UnwrapRef<typeof import('vue')['resolveComponent']>
    readonly setActivePinia: UnwrapRef<typeof import('pinia')['setActivePinia']>
    readonly setMapStoreSuffix: UnwrapRef<typeof import('pinia')['setMapStoreSuffix']>
    readonly shallowReactive: UnwrapRef<typeof import('vue')['shallowReactive']>
    readonly shallowReadonly: UnwrapRef<typeof import('vue')['shallowReadonly']>
    readonly shallowRef: UnwrapRef<typeof import('vue')['shallowRef']>
    readonly storeToRefs: UnwrapRef<typeof import('pinia')['storeToRefs']>
    readonly toRaw: UnwrapRef<typeof import('vue')['toRaw']>
    readonly toRef: UnwrapRef<typeof import('vue')['toRef']>
    readonly toRefs: UnwrapRef<typeof import('vue')['toRefs']>
    readonly toValue: UnwrapRef<typeof import('vue')['toValue']>
    readonly triggerRef: UnwrapRef<typeof import('vue')['triggerRef']>
    readonly unref: UnwrapRef<typeof import('vue')['unref']>
    readonly useAnimationLayer: UnwrapRef<typeof import('./composables/useAnimationLayer')['useAnimationLayer']>
    readonly useAppStore: UnwrapRef<typeof import('./stores/app.store')['useAppStore']>
    readonly useAttrs: UnwrapRef<typeof import('vue')['useAttrs']>
    readonly useAuthStore: UnwrapRef<typeof import('./stores/auth.store')['useAuthStore']>
    readonly useAuthStoreOutside: UnwrapRef<typeof import('./stores/auth.store')['useAuthStoreOutside']>
    readonly useChatStore: UnwrapRef<typeof import('./stores/chat.store')['useChatStore']>
    readonly useCssModule: UnwrapRef<typeof import('vue')['useCssModule']>
    readonly useCssVars: UnwrapRef<typeof import('vue')['useCssVars']>
    readonly useDepositStore: UnwrapRef<typeof import('./stores/deposit.store')['useDepositStore']>
    readonly useEventManager: UnwrapRef<typeof import('./composables/EventManager')['useEventManager']>
    readonly useGameSpinStore: UnwrapRef<typeof import('./stores/gamespin.store')['useGameSpinStore']>
    readonly useGameStore: UnwrapRef<typeof import('./stores/game.store')['useGameStore']>
    readonly useId: UnwrapRef<typeof import('vue')['useId']>
    readonly useImagePreloader: UnwrapRef<typeof import('./composables/useImagePreloader')['useImagePreloader']>
    readonly useLink: UnwrapRef<typeof import('vue-router')['useLink']>
    readonly useModel: UnwrapRef<typeof import('vue')['useModel']>
    readonly useNotificationStore: UnwrapRef<typeof import('./stores/notification.store')['useNotificationStore']>
    readonly useRealtimeUpdates: UnwrapRef<typeof import('./composables/useRealtimeUpdates')['useRealtimeUpdates']>
    readonly useRoute: UnwrapRef<typeof import('vue-router')['useRoute']>
    readonly useRouter: UnwrapRef<typeof import('vue-router')['useRouter']>
    readonly useScreen: UnwrapRef<typeof import('./composables/useScreen')['useScreen']>
    readonly useSlots: UnwrapRef<typeof import('vue')['useSlots']>
    readonly useTemplateRef: UnwrapRef<typeof import('vue')['useTemplateRef']>
    readonly useVipStore: UnwrapRef<typeof import('./stores/vip.store')['useVipStore']>
    readonly watch: UnwrapRef<typeof import('vue')['watch']>
    readonly watchEffect: UnwrapRef<typeof import('vue')['watchEffect']>
    readonly watchPostEffect: UnwrapRef<typeof import('vue')['watchPostEffect']>
    readonly watchSyncEffect: UnwrapRef<typeof import('vue')['watchSyncEffect']>
  }
</file>

<file path="components.d.ts">
export interface GlobalComponents {
    AdCarousel: typeof import('./components/AdCarousel.vue')['default']
    AnimatedCircularProgressBar: typeof import('./components/ui/animated-circular-progressbar/AnimatedCircularProgressBar.vue')['default']
    AnimationLayer: typeof import('./components/AnimationLayer.vue')['default']
    AuroraText: typeof import('./components/AuroraText.vue')['default']
    AuthPanel: typeof import('./components/auth/AuthPanel.vue')['default']
    ChatMessage: typeof import('./components/chat/ChatMessage.vue')['default']
    ChatMessageList: typeof import('./components/chat/ChatMessageList.vue')['default']
    ChatPanel: typeof import('./components/chat/ChatPanel.vue')['default']
    CloseButton: typeof import('./components/CloseButton.vue')['default']
    copy: typeof import('./components/SettingsView copy.vue')['default']
    CPanel: typeof import('./components/chat/CPanel.vue')['default']
    FlickeringGrid: typeof import('./components/ui/flickering-grid/FlickeringGrid.vue')['default']
    Footer: typeof import('./components/Footer.vue')['default']
    FormCheckRadio: typeof import('./components/FormCheckRadio.vue')['default']
    FormCheckRadioGroup: typeof import('./components/FormCheckRadioGroup.vue')['default']
    GameCard: typeof import('./components/GameCard.vue')['default']
    GameCarousel: typeof import('./components/GameCarousel.vue')['default']
    GameLoader: typeof import('./components/GameLoader.vue')['default']
    GlassButton: typeof import('./components/GlassButton.vue')['default']
    GlobalLoading: typeof import('./components/GlobalLoading.vue')['default']
    Header: typeof import('./components/Header.vue')['default']
    HelloWorld: typeof import('./components/HelloWorld.vue')['default']
    IconCommunity: typeof import('./components/icons/IconCommunity.vue')['default']
    IconDocumentation: typeof import('./components/icons/IconDocumentation.vue')['default']
    IconEcosystem: typeof import('./components/icons/IconEcosystem.vue')['default']
    IconSupport: typeof import('./components/icons/IconSupport.vue')['default']
    IconTooling: typeof import('./components/icons/IconTooling.vue')['default']
    LiveWin: typeof import('./components/LiveWin.vue')['default']
    LiveWinItem: typeof import('./components/LiveWinItem.vue')['default']
    Loading: typeof import('./components/Loading.vue')['default']
    LoginForm: typeof import('./components/auth/LoginForm.vue')['default']
    Logo: typeof import('./components/Logo.vue')['default']
    MessageList: typeof import('./components/chat/MessageList.vue')['default']
    MyPanel: typeof import('./components/auth/AuthPanel.vue')['default']
    Notification: typeof import('./components/common/Notification.vue')['default']
    OverlayLayer: typeof import('./components/OverlayLayer.vue')['default']
    PlayerAvatar: typeof import('./components/PlayerAvatar.vue')['default']
    RegisterForm: typeof import('./components/auth/RegisterForm.vue')['default']
    RouterLink: typeof import('vue-router')['RouterLink']
    RouterView: typeof import('vue-router')['RouterView']
    RtgGameLauncher: typeof import('./components/RtgGameLauncher.vue')['default']
    RtgGameLoader: typeof import('./components/RtgGameLoader.vue')['default']
    SettingsButton: typeof import('./components/ui/SettingsButton.vue')['default']
    SettingsView: typeof import('./components/SettingsView.vue')['default']
    SparklesSprite: typeof import('./components/SparklesSprite.vue')['default']
    SpriteAnimator: typeof import('./components/SpriteAnimator.vue')['default']
    StarBurst: typeof import('./components/StarBurst.vue')['default']
    Starfield: typeof import('./components/Starfield.vue')['default']
    TheWelcome: typeof import('./components/TheWelcome.vue')['default']
    WelcomeItem: typeof import('./components/WelcomeItem.vue')['default']
  }
</file>

<file path="declarations.d.ts">
interface Window {
  com: {
    casino: {
      cdn?: string;
      baseCdn?: string;
      barsPath?: string;
      bridgePath?: string;
      bridge?: {
        init: (config: Record<string, unknown>) => void;
      };
    };
  };
}
</file>

<file path="image-preload-list.ts">

</file>

<file path="main.ts">
import { createApp } from 'vue'
import App from './App.vue'
const start = async () =>
</file>

<file path="shims-vue.d.ts">
import type { DefineComponent } from 'vue'
</file>

<file path="vite-env.d.ts">
interface ImportMetaEnv {
  readonly VITE_API_BASE_URL: string
}
interface ImportMeta {
  readonly env: ImportMetaEnv
}
</file>

</files>
