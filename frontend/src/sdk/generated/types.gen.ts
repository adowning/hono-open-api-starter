// This file is auto-generated by @hey-api/openapi-ts

export type User = {
  id: string;
  username: string;
  email: string | null;
  currentGameSessionDataId: string | null;
  currentAuthSessionDataId: string | null;
  avatar: string | null;
  role: string;
  isActive: boolean;
  lastLoginAt: string | null;
  totalXpGained: number;
  activeWalletId: string | null;
  vipInfoId: string | null;
  createdAt: string;
  updatedAt: string;
  deletedAt: string | null;
};

export type AuthSession = {
  id: string;
  userId: string;
  status: "ACTIVE" | "COMPLETED" | "EXPIRED";
  ipAddress: string | null;
  userAgent: string | null;
  deviceId: string | null;
  createdAt: string;
  expiresAt: string | null;
  lastSeen: string;
};

export type GameSession = {
  id: string;
  authSessionId: string;
  userId: string;
  gameId: string | null;
  status: "ACTIVE" | "COMPLETED" | "EXPIRED";
  totalWagered: number;
  totalWon: number;
  totalXpGained: number;
  rtp: string | null;
  duration: number;
  createdAt: string;
  endedAt: string | null;
};

export type Wallet = {
  id: string;
  balance: number;
  paymentMethod: string;
  currency: string;
  isActive: boolean;
  isDefault: boolean;
  address: string | null;
  cashtag: string | null;
  userId: string;
  operatorId: string;
  lastUsedAt: string | null;
  createdAt: string;
  updatedAt: string;
};

export type VipInfo = {
  id: string;
  level: number;
  xp: number;
  totalXp: number;
  userId: string;
  currentRankid: number | null;
  createdAt: string;
  updatedAt: string;
};

export type Operator = {
  id: string;
  name: string;
  operatorSecret: string;
  operatorAccess: string;
  callbackUrl: string;
  isActive: boolean;
  allowedIps: Array<string>;
  description: string | null;
  balance: number;
  netRevenue: number;
  acceptedPayments: Array<string>;
  ownerId: string | null;
  lastUsedAt: string | null;
  createdAt: string;
  updatedAt: string;
};

export type VipRank = {
  id: number;
  name: string;
  minXp: number;
  dailyBonusCoinPct: number;
  hourlyBonusCoinPct: number;
  purchaseBonusCoinPct: number;
  levelUpBonusCoinPct: number;
  hasConcierge: boolean;
  hasVipLoungeAccess: boolean;
  isInvitationOnly: boolean;
};

export type VipDetails = {
  vipInfo: VipInfo;
  vipRank: VipRank;
  xpForNextLevel: number;
};

export type VipLevel = {
  level: number;
  xpForNext: number;
};

export type Game = {
  id: string;
  name: string;
  title: string;
  developer: string;
  description?: string;
  category: string;
  tags: Array<string>;
  thumbnailUrl?: string;
  bannerUrl?: string;
  isActive?: boolean;
};

export type GameSpin = {
  id: string;
  playerName?: string;
  gameName?: string;
  spinData?: {
    [key: string]: unknown;
  };
  grossWinAmount: number;
  wagerAmount: number;
  spinNumber: number;
  playerAvatar?: string;
  currencyId?: string;
  sessionId: string;
  userId?: string;
  createdAt: string;
  updatedAt: string;
  occurredAt: string;
  sessionDataId?: string;
};

export type PostAuthLoginData = {
  /**
   * The user to login
   */
  body: {
    username: string;
    password: string;
    uid?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/login";
};

export type PostAuthLoginResponses = {
  /**
   * The login token and user object
   */
  200: {
    accessToken: string;
    refreshToken: string;
    user: {
      id: string;
      username: string;
      email: string | null;
      currentGameSessionDataId: string | null;
      currentAuthSessionDataId: string | null;
      avatar: string | null;
      role: string;
      isActive: boolean;
      lastLoginAt: string | null;
      totalXpGained: number;
      activeWalletId: string | null;
      vipInfoId: string | null;
      createdAt: string;
      updatedAt: string;
      deletedAt: string | null;
    };
  };
};

export type PostAuthLoginResponse =
  PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PostAuthSignupData = {
  /**
   * The user to signup
   */
  body: {
    username: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/auth/signup";
};

export type PostAuthSignupResponses = {
  /**
   * The signup token and user object
   */
  200: {
    accessToken: string;
    refreshToken: string;
    user: {
      id: string;
      username: string;
      email: string | null;
      currentGameSessionDataId: string | null;
      currentAuthSessionDataId: string | null;
      avatar: string | null;
      role: string;
      isActive: boolean;
      lastLoginAt: string | null;
      totalXpGained: number;
      activeWalletId: string | null;
      vipInfoId: string | null;
      createdAt: string;
      updatedAt: string;
      deletedAt: string | null;
    };
  };
};

export type PostAuthSignupResponse =
  PostAuthSignupResponses[keyof PostAuthSignupResponses];

export type PostAuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/logout";
};

export type PostAuthLogoutResponses = {
  /**
   * Logout successful
   */
  200: {
    message: string;
  };
};

export type PostAuthLogoutResponse =
  PostAuthLogoutResponses[keyof PostAuthLogoutResponses];

export type GetAuthMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/me";
};

export type GetAuthMeResponses = {
  /**
   * The current user session
   */
  200: {
    user: User;
    authSession: AuthSession;
    gameSession?: GameSession;
    wallet: Wallet;
    vipInfo: VipInfo;
    operator: Operator;
  };
};

export type GetAuthMeResponse = GetAuthMeResponses[keyof GetAuthMeResponses];

export type GetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/";
};

export type GetResponses = {
  /**
   * Cashino API Index
   */
  200: {
    message: string;
  };
};

export type GetResponse = GetResponses[keyof GetResponses];

export type PostUpdatesCheckData = {
  /**
   * The user to create
   */
  body: {
    currentVersion: string;
    platform: string;
    appId: string;
    updateType: "BINARY" | "OTA";
  };
  path?: never;
  query?: never;
  url: "/updates/check";
};

export type PostUpdatesCheckResponses = {
  /**
   * The updated user
   */
  200: {
    hasUpdate: boolean;
    version?: string;
    platform?: string;
    updateType?: "BINARY" | "OTA";
    downloadUrl?: string;
    changelog?: Array<string>;
    mandatory?: boolean;
    releaseDate?: string;
    fileSize?: number;
    checksum?: string;
  };
};

export type PostUpdatesCheckResponse =
  PostUpdatesCheckResponses[keyof PostUpdatesCheckResponses];

export type PostUpdatesUploadData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/updates/upload";
};

export type PostUpdatesUploadErrors = {
  /**
   * Bad Request
   */
  400: {
    error: string;
  };
};

export type PostUpdatesUploadError =
  PostUpdatesUploadErrors[keyof PostUpdatesUploadErrors];

export type PostUpdatesUploadResponses = {
  /**
   * Upload success response
   */
  200: {
    success: boolean;
    message: string;
    version?: {
      version: string;
      platform: string;
      updateType: "BINARY" | "OTA";
      downloadUrl: string;
      changelog: Array<string>;
      mandatory: boolean;
      releaseDate: string;
      fileSize: number;
      checksum: string;
    };
  };
};

export type PostUpdatesUploadResponse =
  PostUpdatesUploadResponses[keyof PostUpdatesUploadResponses];

export type GetUpdatesDownloadByFilenameData = {
  body?: never;
  path: {
    filename: string;
  };
  query?: never;
  url: "/updates/download/{filename}";
};

export type GetUpdatesDownloadByFilenameErrors = {
  /**
   * Not Found
   */
  404: {
    error: string;
  };
};

export type GetUpdatesDownloadByFilenameError =
  GetUpdatesDownloadByFilenameErrors[keyof GetUpdatesDownloadByFilenameErrors];

export type GetUpdatesDownloadByFilenameResponses = {
  /**
   * Application file (APK or ZIP)
   */
  200: unknown;
};

export type GetUpdatesVersionsByAppIdByPlatformData = {
  body?: never;
  path: {
    appId: string;
    platform: string;
  };
  query?: never;
  url: "/updates/versions/{appId}/{platform}";
};

export type GetUpdatesVersionsByAppIdByPlatformErrors = {
  /**
   * Bad Request
   */
  400: {
    error: string;
  };
};

export type GetUpdatesVersionsByAppIdByPlatformError =
  GetUpdatesVersionsByAppIdByPlatformErrors[keyof GetUpdatesVersionsByAppIdByPlatformErrors];

export type GetUpdatesVersionsByAppIdByPlatformResponses = {
  /**
   * List of versions
   */
  200: {
    appId: string;
    platform: string;
    versions: Array<{
      version: string;
      platform: string;
      updateType: "BINARY" | "OTA";
      downloadUrl: string;
      changelog: Array<string>;
      mandatory: boolean;
      releaseDate: string;
      fileSize: number;
      checksum: string;
    }>;
  };
};

export type GetUpdatesVersionsByAppIdByPlatformResponse =
  GetUpdatesVersionsByAppIdByPlatformResponses[keyof GetUpdatesVersionsByAppIdByPlatformResponses];

export type GetUsersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/users";
};

export type GetUsersResponses = {
  /**
   * The list of users
   */
  200: Array<{
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
  }>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type PostEnterGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/enter/game";
};

export type PostEnterGameResponses = {
  /**
   * Enter game
   */
  200: unknown;
};

export type PostGamesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/games";
};

export type PostGamesResponses = {
  /**
   * User game
   */
  200: unknown;
};

export type PostSetupGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/setup/game";
};

export type PostSetupGameResponses = {
  /**
   * Favorite game
   */
  200: unknown;
};

export type GetSpinpageData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/spinpage";
};

export type GetSpinpageResponses = {
  /**
   * Spin page
   */
  200: unknown;
};

export type PostSpinData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/spin";
};

export type PostSpinResponses = {
  /**
   * Spin
   */
  200: unknown;
};

export type GetFavoriteGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/favorite/game";
};

export type GetFavoriteGameResponses = {
  /**
   * Favorite game list
   */
  200: unknown;
};

export type PostEndGameSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/end-game-session";
};

export type PostEndGameSessionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PostEndGameSessionResponses = {
  /**
   * Session ended response
   */
  200: {
    success: boolean;
    message: string;
  };
};

export type PostEndGameSessionResponse =
  PostEndGameSessionResponses[keyof PostEndGameSessionResponses];

export type DeleteUsersByIdData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/users/{id}";
};

export type DeleteUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
  /**
   * Invalid id error
   */
  422: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};

export type DeleteUsersByIdError =
  DeleteUsersByIdErrors[keyof DeleteUsersByIdErrors];

export type DeleteUsersByIdResponses = {
  /**
   * User deleted
   */
  204: void;
};

export type DeleteUsersByIdResponse =
  DeleteUsersByIdResponses[keyof DeleteUsersByIdResponses];

export type GetUsersByIdData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/users/{id}";
};

export type GetUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
  /**
   * Invalid id error
   */
  422: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};

export type GetUsersByIdError = GetUsersByIdErrors[keyof GetUsersByIdErrors];

export type GetUsersByIdResponses = {
  /**
   * The requested user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
  };
};

export type GetUsersByIdResponse =
  GetUsersByIdResponses[keyof GetUsersByIdResponses];

export type PatchUsersByIdData = {
  /**
   * The user updates
   */
  body: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
  };
  path: {
    id: number | null;
  };
  query?: never;
  url: "/users/{id}";
};

export type PatchUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type PatchUsersByIdError =
  PatchUsersByIdErrors[keyof PatchUsersByIdErrors];

export type PatchUsersByIdResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
  };
};

export type PatchUsersByIdResponse =
  PatchUsersByIdResponses[keyof PatchUsersByIdResponses];

export type GetUsersByIdCheckData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/users/{id}/check";
};

export type GetUsersByIdCheckErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type GetUsersByIdCheckError =
  GetUsersByIdCheckErrors[keyof GetUsersByIdCheckErrors];

export type GetUsersByIdCheckResponses = {
  /**
   * User status
   */
  200: {
    userCheck: boolean;
  };
};

export type GetUsersByIdCheckResponse =
  GetUsersByIdCheckResponses[keyof GetUsersByIdCheckResponses];

export type PostUsersByIdVerifyEmailData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/users/{id}/verify-email";
};

export type PostUsersByIdVerifyEmailResponses = {
  /**
   * Verification sent
   */
  200: {
    status: string;
    time: number;
  };
};

export type PostUsersByIdVerifyEmailResponse =
  PostUsersByIdVerifyEmailResponses[keyof PostUsersByIdVerifyEmailResponses];

export type GetUsersByIdInfoData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/users/{id}/info";
};

export type GetUsersByIdInfoErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type GetUsersByIdInfoError =
  GetUsersByIdInfoErrors[keyof GetUsersByIdInfoErrors];

export type GetUsersByIdInfoResponses = {
  /**
   * User info
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
  };
};

export type GetUsersByIdInfoResponse =
  GetUsersByIdInfoResponses[keyof GetUsersByIdInfoResponses];

export type GetUsersByIdVipinfoData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/users/{id}/vipinfo";
};

export type GetUsersByIdVipinfoResponses = {
  /**
   * VIP info
   */
  200: {
    vipLevel: number | null;
  };
};

export type GetUsersByIdVipinfoResponse =
  GetUsersByIdVipinfoResponses[keyof GetUsersByIdVipinfoResponses];

export type GetUserAmountData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user/amount";
};

export type GetUserAmountResponses = {
  /**
   * Get user amount
   */
  200: {
    amount: number;
    currency: {
      fiat: boolean;
      name: string;
      symbol: string;
      type: string;
    };
    withdraw: number;
    rate: number;
  };
};

export type GetUserAmountResponse =
  GetUserAmountResponses[keyof GetUserAmountResponses];

export type PostUserChangeData = {
  /**
   * The user info to update
   */
  body: {
    id?: string;
    username: string;
    email?: string | null;
    passwordHash?: string | null;
    accessToken?: string | null;
    refreshToken?: string | null;
    accessTokenExpiresAt?: string | null;
    refreshTokenExpiresAt?: string | null;
    currentGameSessionDataId?: string | null;
    currentAuthSessionDataId?: string | null;
    avatar?: string | null;
    role?: string;
    isActive?: boolean;
    lastLoginAt?: string | null;
    totalXpGained: number;
    activeWalletId?: string | null;
    vipInfoId?: string | null;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string | null;
  };
  path?: never;
  query?: never;
  url: "/user/change";
};

export type PostUserChangeResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
  };
};

export type PostUserChangeResponse =
  PostUserChangeResponses[keyof PostUserChangeResponses];

export type PostUserEmailData = {
  /**
   * The email to update
   */
  body: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/user/email";
};

export type PostUserEmailResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
  };
};

export type PostUserEmailResponse =
  PostUserEmailResponses[keyof PostUserEmailResponses];

export type PostUserPasswordData = {
  /**
   * The password to update
   */
  body: {
    now_password: string;
    new_password: string;
  };
  path?: never;
  query?: never;
  url: "/user/password";
};

export type PostUserPasswordResponses = {
  /**
   * Password updated
   */
  200: {
    message: string;
  };
};

export type PostUserPasswordResponse =
  PostUserPasswordResponses[keyof PostUserPasswordResponses];

export type PostUserSuspendData = {
  /**
   * The suspension time
   */
  body: {
    time: number;
  };
  path?: never;
  query?: never;
  url: "/user/suspend";
};

export type PostUserSuspendResponses = {
  /**
   * User suspended
   */
  200: {
    message: string;
  };
};

export type PostUserSuspendResponse =
  PostUserSuspendResponses[keyof PostUserSuspendResponses];

export type PostRedtigerGameSettingsData = {
  body?: {
    gameId: string;
    token?: string | null;
    userId: string;
    currency: string;
    language: string;
    mode: "real" | "demo" | "test";
    custom?: {
      siteId?: string;
      extras?: string;
    };
    userData?: {
      userId?: string | number;
      hash?: string;
      affiliate?: string | number;
      lang?: string | number;
      channel?: string | number;
      userType?: string;
      fingerprint?: string | number;
    };
  };
  path?: never;
  query?: never;
  url: "/redtiger/game/settings";
};

export type PostRedtigerGameSettingsErrors = {
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    error: {
      code: string;
      message: string;
    };
  };
};

export type PostRedtigerGameSettingsError =
  PostRedtigerGameSettingsErrors[keyof PostRedtigerGameSettingsErrors];

export type PostRedtigerGameSettingsResponses = {
  /**
   * Redtiger game settings
   */
  200: {
    success: boolean;
    result?: {
      user: {
        balance: {
          cash: string;
          freeBets?: string;
          bonus?: string;
        };
        canGamble: boolean;
        userId: number | string;
        sessionId: string;
        sessionNetPosition?: string;
        token: string;
        country?: string;
        currency?: {
          code: string;
          symbol: string;
        };
        stakes?: unknown;
        limits?: unknown;
        serverTime: string;
      };
      game?: {
        version?: string;
        gameType?: string;
      };
      launcher?: {
        version?: string;
      };
      jackpots?: unknown;
    };
    error?: {
      code: string;
      message: string;
      details?: unknown;
    };
  };
};

export type PostRedtigerGameSettingsResponse =
  PostRedtigerGameSettingsResponses[keyof PostRedtigerGameSettingsResponses];

export type PostRedtigerGameSpinData = {
  body?: unknown;
  path?: {
    token?: string;
    userId?: string;
    gameId?: string;
    stake?: number | string;
    currency?: string;
    sessionId?: string;
    playMode?: "real" | "demo" | "test";
    actions?: Array<unknown>;
    custom?: {
      siteId?: string;
      extras?: string;
    };
    bonusId?: unknown;
    extras?: unknown;
    siteId?: string;
    userType?: string;
    lang?: string | number;
    fingerprint?: string | number;
    channel?: string | number;
    affiliate?: string | number;
    userData?: {
      userId?: string | number;
      hash?: string;
      affiliate?: string | number;
      lang?: string | number;
      channel?: string | number;
      userType?: string;
      fingerprint?: string | number;
    };
    roundId?: string | number;
    transactionId?: string | number;
  };
  query?: never;
  url: "/redtiger/game/spin";
};

export type PostRedtigerGameSpinErrors = {
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    error: {
      code: string;
      message: string;
    };
  };
};

export type PostRedtigerGameSpinError =
  PostRedtigerGameSpinErrors[keyof PostRedtigerGameSpinErrors];

export type PostRedtigerGameSpinResponses = {
  /**
   * Redtiger spin result
   */
  200: {
    transactions: {
      roundId: number | string;
    };
    user: {
      balance: {
        cash: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
        freeBets?: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
        bonus?: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
      };
      userId: number | string;
      sessionId: string;
      sessionNetPosition?: string;
      token: string;
      serverTime: string;
      canGamble?: boolean;
    };
    game: {
      win: {
        instantWin?: string;
        lines?: string;
        total: string;
      };
      stake: string;
      multiplier?: number;
      winLines?: Array<unknown>;
      reelsBuffer?: Array<Array<Array<number>>>;
    };
    jackpots?: unknown;
    bonusChance?: unknown;
  };
};

export type PostRedtigerGameSpinResponse =
  PostRedtigerGameSpinResponses[keyof PostRedtigerGameSpinResponses];

export type PostBalanceData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/balance";
};

export type PostBalanceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Wallet Info not found
   */
  404: unknown;
};

export type PostBalanceResponses = {
  /**
   * Returns the user wallet balance.
   */
  200: {
    id: string;
    balance: number;
    paymentMethod: string;
    currency: string;
    isActive: boolean;
    isDefault: boolean;
    address: string | null;
    cashtag: string | null;
    userId: string;
    operatorId: string;
    lastUsedAt: string | null;
    createdAt: string;
    updatedAt: string;
  };
};

export type PostBalanceResponse =
  PostBalanceResponses[keyof PostBalanceResponses];

export type GetVipMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/vip/me";
};

export type GetVipMeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * VIP Info not found
   */
  404: unknown;
};

export type GetVipMeResponses = {
  /**
   * Returns the users VIP information, rank, and progress.
   */
  200: VipDetails;
};

export type GetVipMeResponse = GetVipMeResponses[keyof GetVipMeResponses];

export type GetVipLevelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/vip/levels";
};

export type GetVipLevelsResponses = {
  /**
   * Returns the VIP level configuration table.
   */
  200: Array<VipLevel>;
};

export type GetVipLevelsResponse =
  GetVipLevelsResponses[keyof GetVipLevelsResponses];

export type GetVipRanksData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/vip/ranks";
};

export type GetVipRanksResponses = {
  /**
   * Returns the VIP rank configuration table.
   */
  200: Array<VipRank>;
};

export type GetVipRanksResponse =
  GetVipRanksResponses[keyof GetVipRanksResponses];

export type GetOperatorsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/operators";
};

export type GetOperatorsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type GetOperatorsResponses = {
  /**
   * Returns a list of operators.
   */
  200: Array<{
    id: string;
    name: string;
    callbackUrl: string;
    isActive: boolean;
    allowedIps: Array<string>;
    description: string | null;
    balance: number;
    netRevenue: number;
    acceptedPayments: Array<string>;
    ownerId: string | null;
    lastUsedAt: string | null;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetOperatorsResponse =
  GetOperatorsResponses[keyof GetOperatorsResponses];

export type GetOperatorsProductsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/operators/products";
};

export type GetOperatorsProductsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type GetOperatorsProductsResponses = {
  /**
   * Returns a list of products.
   */
  200: Array<{
    id: string;
    title: string;
    productType: string;
    bonusTotalInCents: number;
    isActive: boolean | null;
    priceInCents: number;
    amountToReceiveInCents: number;
    bestValue: number;
    discountInCents: number;
    bonusSpins: number;
    isPromo: boolean | null;
    totalDiscountInCents: number;
    operatorId: string | null;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetOperatorsProductsResponse =
  GetOperatorsProductsResponses[keyof GetOperatorsProductsResponses];

export type GetGamesAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/games/all";
};

export type GetGamesAllResponses = {
  /**
   * A list of all games
   */
  200: Array<Game>;
};

export type GetGamesAllResponse =
  GetGamesAllResponses[keyof GetGamesAllResponses];

export type GetGamesCategoriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/games/categories";
};

export type GetGamesCategoriesResponses = {
  /**
   * A list of game categories
   */
  200: Array<string>;
};

export type GetGamesCategoriesResponse =
  GetGamesCategoriesResponses[keyof GetGamesCategoriesResponses];

export type GetGamesSearchData = {
  body?: never;
  path?: never;
  query?: {
    game_categories_slug?: string;
    page?: string;
    limit?: string;
  };
  url: "/games/search";
};

export type GetGamesSearchResponses = {
  /**
   * A list of games matching the search criteria
   */
  200: {
    games: Array<{
      id: string;
      name: string;
      title: string;
      developer: string;
      description?: string;
      category: string;
      tags: Array<string>;
      thumbnailUrl?: string;
      bannerUrl?: string;
      isActive?: boolean;
    }>;
    total: number;
  };
};

export type GetGamesSearchResponse =
  GetGamesSearchResponses[keyof GetGamesSearchResponses];

export type GetUserGamesData = {
  body?: never;
  path?: never;
  query: {
    game_categories_slug: string;
    page?: string;
    limit?: string;
  };
  url: "/user/games";
};

export type GetUserGamesResponses = {
  /**
   * A list of games for the current user (e.g., favorites or history)
   */
  200: {
    games: Array<{
      id: string;
      name: string;
      title: string;
      developer: string;
      description?: string;
      category: string;
      tags: Array<string>;
      thumbnailUrl?: string;
      bannerUrl?: string;
      isActive?: boolean;
    }>;
    total: number;
  };
};

export type GetUserGamesResponse =
  GetUserGamesResponses[keyof GetUserGamesResponses];

export type PostUserGamesFavoriteData = {
  body?: {
    add_game?: string;
    del_game?: string;
  };
  path?: never;
  query?: never;
  url: "/user/games/favorite";
};

export type PostUserGamesFavoriteResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type GetUserGamesFavoritesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user/games/favorites";
};

export type GetUserGamesFavoritesResponses = {
  /**
   * A list of the user favorite game IDs
   */
  200: Array<string>;
};

export type GetUserGamesFavoritesResponse =
  GetUserGamesFavoritesResponses[keyof GetUserGamesFavoritesResponses];

export type PostGamesByIdEnterData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/games/{id}/enter";
};

export type PostGamesByIdEnterErrors = {
  /**
   * Not Found
   */
  404: {
    message: string;
  };
};

export type PostGamesByIdEnterError =
  PostGamesByIdEnterErrors[keyof PostGamesByIdEnterErrors];

export type PostGamesByIdEnterResponses = {
  /**
   * Game session details
   */
  200: {
    webUrl: string;
    gameConfig: {
      authToken: string;
      gameSessionId: string;
      userId: string;
      gameName: string;
      lang: string;
      currency: string;
      operator: string;
      provider: string;
      depositUrl: string;
      lobbyUrl: string;
      mode: string;
      rgsApiBase: string;
      cdn: string;
      baseCdn: string;
    };
  };
};

export type PostGamesByIdEnterResponse =
  PostGamesByIdEnterResponses[keyof PostGamesByIdEnterResponses];

export type PostGamesLeaveData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/games/leave";
};

export type PostGamesLeaveResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type GetGamespinsTopwinsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/gamespins/topwins";
};

export type GetGamespinsTopwinsErrors = {
  /**
   * Unauthorized
   */
  401: {
    message: string;
  };
};

export type GetGamespinsTopwinsError =
  GetGamespinsTopwinsErrors[keyof GetGamespinsTopwinsErrors];

export type GetGamespinsTopwinsResponses = {
  /**
   * A list of top winning game spins
   */
  200: Array<GameSpin>;
};

export type GetGamespinsTopwinsResponse =
  GetGamespinsTopwinsResponses[keyof GetGamespinsTopwinsResponses];

export type ClientOptions = {
  baseURL: "http://localhost:9999" | (string & {});
};
