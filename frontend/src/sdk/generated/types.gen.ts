// This file is auto-generated by @hey-api/openapi-ts

export type User = {
  id: string;
  username: string;
  email: string | null;
  currentGameSessionDataId: string | null;
  currentAuthSessionDataId: string | null;
  avatar_url: string | null;
  role: string;
  isActive: boolean;
  lastLoginAt: string | null;
  totalXpGained: number;
  activeWalletId: string | null;
  vipInfoId: string | null;
  createdAt: string;
  updatedAt: string;
  deletedAt: string | null;
  lastSeen: string | null;
};

export type AuthSession = {
  id: string;
  userId: string;
  status: "ACTIVE" | "COMPLETED" | "EXPIRED" | "ABANDONED" | "TIMEOUT";
  ipAddress: string | null;
  userAgent: string | null;
  deviceId: string | null;
  createdAt: string;
  expiresAt: string | null;
  lastSeen: string;
};

export type GameSession = {
  id: string;
  authSessionId: string;
  userId: string;
  gameId: string | null;
  status: "ACTIVE" | "COMPLETED" | "EXPIRED" | "ABANDONED" | "TIMEOUT";
  totalWagered: number;
  totalWon: number;
  totalXpGained: number;
  rtp: string | null;
  duration: number;
  createdAt: string;
  endAt: string | null;
};

export type Wallet = {
  id: string;
  balance: number;
  paymentMethod: string;
  currency: string;
  isActive: boolean;
  isDefault: boolean;
  address: string | null;
  cashtag: string | null;
  userId: string;
  operatorId: string;
  lastUsedAt: string | null;
  createdAt: string;
  updatedAt: string;
};

export type VipInfo = {
  id: string;
  level: number;
  xp: number;
  totalXp: number;
  userId: string;
  currentRankid: number | null;
  createdAt: string;
  updatedAt: string;
};

export type Game = {
  id: string;
  name: string;
  title: string;
  developer: string;
  description?: string;
  category: string;
  tags: Array<string>;
  thumbnailUrl?: string;
  bannerUrl?: string;
  isActive?: boolean;
};

export type VipRank = {
  id: number;
  name: string;
  minXp: number;
  dailyBonusCoinPct: number;
  hourlyBonusCoinPct: number;
  purchaseBonusCoinPct: number;
  levelUpBonusCoinPct: number;
  hasConcierge: boolean;
  hasVipLoungeAccess: boolean;
  isInvitationOnly: boolean;
};

export type VipDetails = {
  vipInfo: VipInfo;
  vipRank: VipRank;
  xpForNextLevel: number;
};

export type VipLevel = {
  level: number;
  xpForNext: number;
};

export type GameSpin = {
  id: string;
  playerName?: string;
  gamesName?: string;
  spinData?: {
    [key: string]: unknown;
  };
  grossWinAmount: number;
  wagerAmount: number;
  spinNumber: number;
  playerAvatar?: string;
  currencyId?: string;
  sessionId: string;
  userId?: string;
  createdAt: string;
  updatedAt: string;
  occurredAt: string;
  sessionDataId?: string;
};

export type PostApiAuthLoginData = {
  /**
   * User credentials for login
   */
  body: {
    username?: string;
    password: string;
    uid?: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/login";
};

export type PostApiAuthLoginErrors = {
  /**
   * Bad Request
   */
  400: {
    message: string;
  };
};

export type PostApiAuthLoginError =
  PostApiAuthLoginErrors[keyof PostApiAuthLoginErrors];

export type PostApiAuthLoginResponses = {
  /**
   * The user object and sets an access token cookie.
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PostApiAuthLoginResponse =
  PostApiAuthLoginResponses[keyof PostApiAuthLoginResponses];

export type PostApiAuthSignupData = {
  /**
   * User credentials for signup
   */
  body: {
    username: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/signup";
};

export type PostApiAuthSignupErrors = {
  /**
   * Bad Request
   */
  400: {
    message: string;
  };
};

export type PostApiAuthSignupError =
  PostApiAuthSignupErrors[keyof PostApiAuthSignupErrors];

export type PostApiAuthSignupResponses = {
  /**
   * The created user object and sets an access token cookie.
   */
  201: {
    id: string;
    username: string;
    email: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PostApiAuthSignupResponse =
  PostApiAuthSignupResponses[keyof PostApiAuthSignupResponses];

export type PostApiAuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/logout";
};

export type PostApiAuthLogoutErrors = {
  /**
   * Unauthorized
   */
  401: {
    error: string;
  };
};

export type PostApiAuthLogoutError =
  PostApiAuthLogoutErrors[keyof PostApiAuthLogoutErrors];

export type PostApiAuthLogoutResponses = {
  /**
   * Logout successful
   */
  200: {
    message: string;
  };
};

export type PostApiAuthLogoutResponse =
  PostApiAuthLogoutResponses[keyof PostApiAuthLogoutResponses];

export type GetApiAuthMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/me";
};

export type GetApiAuthMeErrors = {
  /**
   * Invalid id error
   */
  401: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};

export type GetApiAuthMeError = GetApiAuthMeErrors[keyof GetApiAuthMeErrors];

export type GetApiAuthMeResponses = {
  /**
   * The current user session
   */
  200: {
    user: User;
    authSession: AuthSession;
    gameSession?: GameSession;
    wallet: Wallet;
    vipInfo: VipInfo;
  };
};

export type GetApiAuthMeResponse =
  GetApiAuthMeResponses[keyof GetApiAuthMeResponses];

export type GetApiData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/";
};

export type GetApiResponses = {
  /**
   * Cashino API Index
   */
  200: {
    message: string;
  };
};

export type GetApiResponse = GetApiResponses[keyof GetApiResponses];

export type PostApiUpdatesCheckData = {
  /**
   * The user to create
   */
  body: {
    currentVersion: string;
    platform: string;
    appId: string;
    updateType: "BINARY" | "OTA";
  };
  path?: never;
  query?: never;
  url: "/api/updates/check";
};

export type PostApiUpdatesCheckResponses = {
  /**
   * The updated user
   */
  200: {
    hasUpdate: boolean;
    version?: string;
    platform?: string;
    updateType?: "BINARY" | "OTA";
    downloadUrl?: string;
    changelog?: Array<string>;
    mandatory?: boolean;
    releaseDate?: string;
    fileSize?: number;
    checksum?: string;
  };
};

export type PostApiUpdatesCheckResponse =
  PostApiUpdatesCheckResponses[keyof PostApiUpdatesCheckResponses];

export type PostApiUpdatesUploadData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/api/updates/upload";
};

export type PostApiUpdatesUploadErrors = {
  /**
   * Bad Request
   */
  400: {
    error: string;
  };
};

export type PostApiUpdatesUploadError =
  PostApiUpdatesUploadErrors[keyof PostApiUpdatesUploadErrors];

export type PostApiUpdatesUploadResponses = {
  /**
   * Upload success response
   */
  200: {
    success: boolean;
    message: string;
    version?: {
      version: string;
      platform: string;
      updateType: "BINARY" | "OTA";
      downloadUrl: string;
      changelog: Array<string>;
      mandatory: boolean;
      releaseDate: string;
      fileSize: number;
      checksum: string;
    };
  };
};

export type PostApiUpdatesUploadResponse =
  PostApiUpdatesUploadResponses[keyof PostApiUpdatesUploadResponses];

export type GetApiUpdatesDownloadByFilenameData = {
  body?: never;
  path: {
    filename: string;
  };
  query?: never;
  url: "/api/updates/download/{filename}";
};

export type GetApiUpdatesDownloadByFilenameErrors = {
  /**
   * Not Found
   */
  404: {
    error: string;
  };
};

export type GetApiUpdatesDownloadByFilenameError =
  GetApiUpdatesDownloadByFilenameErrors[keyof GetApiUpdatesDownloadByFilenameErrors];

export type GetApiUpdatesDownloadByFilenameResponses = {
  /**
   * Application file (APK or ZIP)
   */
  200: unknown;
};

export type GetApiUpdatesVersionsByAppIdByPlatformData = {
  body?: never;
  path: {
    appId: string;
    platform: string;
  };
  query?: never;
  url: "/api/updates/versions/{appId}/{platform}";
};

export type GetApiUpdatesVersionsByAppIdByPlatformErrors = {
  /**
   * Bad Request
   */
  400: {
    error: string;
  };
};

export type GetApiUpdatesVersionsByAppIdByPlatformError =
  GetApiUpdatesVersionsByAppIdByPlatformErrors[keyof GetApiUpdatesVersionsByAppIdByPlatformErrors];

export type GetApiUpdatesVersionsByAppIdByPlatformResponses = {
  /**
   * List of versions
   */
  200: {
    appId: string;
    platform: string;
    versions: Array<{
      version: string;
      platform: string;
      updateType: "BINARY" | "OTA";
      downloadUrl: string;
      changelog: Array<string>;
      mandatory: boolean;
      releaseDate: string;
      fileSize: number;
      checksum: string;
    }>;
  };
};

export type GetApiUpdatesVersionsByAppIdByPlatformResponse =
  GetApiUpdatesVersionsByAppIdByPlatformResponses[keyof GetApiUpdatesVersionsByAppIdByPlatformResponses];

export type GetApiUsersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/users";
};

export type GetApiUsersResponses = {
  /**
   * The list of users
   */
  200: Array<{
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  }>;
};

export type GetApiUsersResponse =
  GetApiUsersResponses[keyof GetApiUsersResponses];

export type PostApiEnterGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/enter/game";
};

export type PostApiEnterGameResponses = {
  /**
   * Enter game
   */
  200: unknown;
};

export type PostApiGamesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games";
};

export type PostApiGamesResponses = {
  /**
   * User game
   */
  200: unknown;
};

export type PostApiSetupGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/setup/game";
};

export type PostApiSetupGameResponses = {
  /**
   * Favorite game
   */
  200: unknown;
};

export type GetApiSpinpageData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/spinpage";
};

export type GetApiSpinpageResponses = {
  /**
   * Spin page
   */
  200: unknown;
};

export type PostApiSpinData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/spin";
};

export type PostApiSpinResponses = {
  /**
   * Spin
   */
  200: unknown;
};

export type GetApiFavoriteGameData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/favorite/game";
};

export type GetApiFavoriteGameResponses = {
  /**
   * Favorite game list
   */
  200: unknown;
};

export type PostApiEndGameSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/end-game-session";
};

export type PostApiEndGameSessionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PostApiEndGameSessionResponses = {
  /**
   * Session ended response
   */
  200: {
    success: boolean;
    message: string;
  };
};

export type PostApiEndGameSessionResponse =
  PostApiEndGameSessionResponses[keyof PostApiEndGameSessionResponses];

export type DeleteApiUsersByIdData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};

export type DeleteApiUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
  /**
   * Invalid id error
   */
  422: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};

export type DeleteApiUsersByIdError =
  DeleteApiUsersByIdErrors[keyof DeleteApiUsersByIdErrors];

export type DeleteApiUsersByIdResponses = {
  /**
   * User deleted
   */
  204: void;
};

export type DeleteApiUsersByIdResponse =
  DeleteApiUsersByIdResponses[keyof DeleteApiUsersByIdResponses];

export type GetApiUsersByIdData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};

export type GetApiUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
  /**
   * Invalid id error
   */
  422: {
    success: boolean;
    error: {
      issues: Array<{
        code: string;
        path: Array<string | number>;
        message?: string;
      }>;
      name: string;
    };
  };
};

export type GetApiUsersByIdError =
  GetApiUsersByIdErrors[keyof GetApiUsersByIdErrors];

export type GetApiUsersByIdResponses = {
  /**
   * The requested user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type GetApiUsersByIdResponse =
  GetApiUsersByIdResponses[keyof GetApiUsersByIdResponses];

export type PatchApiUsersByIdData = {
  /**
   * The user updates
   */
  body: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}";
};

export type PatchApiUsersByIdErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type PatchApiUsersByIdError =
  PatchApiUsersByIdErrors[keyof PatchApiUsersByIdErrors];

export type PatchApiUsersByIdResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PatchApiUsersByIdResponse =
  PatchApiUsersByIdResponses[keyof PatchApiUsersByIdResponses];

export type GetApiUsersByIdCheckData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/check";
};

export type GetApiUsersByIdCheckErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type GetApiUsersByIdCheckError =
  GetApiUsersByIdCheckErrors[keyof GetApiUsersByIdCheckErrors];

export type GetApiUsersByIdCheckResponses = {
  /**
   * User status
   */
  200: {
    userCheck: boolean;
  };
};

export type GetApiUsersByIdCheckResponse =
  GetApiUsersByIdCheckResponses[keyof GetApiUsersByIdCheckResponses];

export type PostApiUsersByIdVerifyEmailData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/verify-email";
};

export type PostApiUsersByIdVerifyEmailResponses = {
  /**
   * Verification sent
   */
  200: {
    status: string;
    time: number;
  };
};

export type PostApiUsersByIdVerifyEmailResponse =
  PostApiUsersByIdVerifyEmailResponses[keyof PostApiUsersByIdVerifyEmailResponses];

export type GetApiUsersByIdInfoData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/info";
};

export type GetApiUsersByIdInfoErrors = {
  /**
   * User not found
   */
  404: {
    message: string;
  };
};

export type GetApiUsersByIdInfoError =
  GetApiUsersByIdInfoErrors[keyof GetApiUsersByIdInfoErrors];

export type GetApiUsersByIdInfoResponses = {
  /**
   * User info
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type GetApiUsersByIdInfoResponse =
  GetApiUsersByIdInfoResponses[keyof GetApiUsersByIdInfoResponses];

export type GetApiUsersByIdVipinfoData = {
  body?: never;
  path: {
    id: number | null;
  };
  query?: never;
  url: "/api/users/{id}/vipinfo";
};

export type GetApiUsersByIdVipinfoResponses = {
  /**
   * VIP info
   */
  200: {
    vipLevel: number | null;
  };
};

export type GetApiUsersByIdVipinfoResponse =
  GetApiUsersByIdVipinfoResponses[keyof GetApiUsersByIdVipinfoResponses];

export type GetApiUserAmountData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/amount";
};

export type GetApiUserAmountResponses = {
  /**
   * Get user amount
   */
  200: {
    amount: number;
    currency: {
      fiat: boolean;
      name: string;
      symbol: string;
      type: string;
    };
    withdraw: number;
    rate: number;
  };
};

export type GetApiUserAmountResponse =
  GetApiUserAmountResponses[keyof GetApiUserAmountResponses];

export type PostApiUserChangeData = {
  /**
   * The user info to update
   */
  body: {
    id: string;
    username: string;
    email?: string | null;
    passwordHash?: string | null;
    accessToken?: string | null;
    refreshToken?: string | null;
    accessTokenExpiresAt?: string | null;
    refreshTokenExpiresAt?: string | null;
    currentGameSessionDataId?: string | null;
    currentAuthSessionDataId?: string | null;
    avatar_url?: string | null;
    role?: string;
    isActive?: boolean;
    lastLoginAt?: string | null;
    totalXpGained: number;
    activeWalletId?: string | null;
    vipInfoId?: string | null;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string | null;
    lastSeen?: string | null;
  };
  path?: never;
  query?: never;
  url: "/api/user/change";
};

export type PostApiUserChangeResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PostApiUserChangeResponse =
  PostApiUserChangeResponses[keyof PostApiUserChangeResponses];

export type PostApiUserEmailData = {
  /**
   * The email to update
   */
  body: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/email";
};

export type PostApiUserEmailResponses = {
  /**
   * The updated user
   */
  200: {
    id: string;
    username: string;
    email: string | null;
    passwordHash: string | null;
    accessToken: string | null;
    refreshToken: string | null;
    accessTokenExpiresAt: string | null;
    refreshTokenExpiresAt: string | null;
    currentGameSessionDataId: string | null;
    currentAuthSessionDataId: string | null;
    avatar_url: string | null;
    role: string;
    isActive: boolean;
    lastLoginAt: string | null;
    totalXpGained: number;
    activeWalletId: string | null;
    vipInfoId: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSeen: string | null;
  };
};

export type PostApiUserEmailResponse =
  PostApiUserEmailResponses[keyof PostApiUserEmailResponses];

export type PostApiUserPasswordData = {
  /**
   * The password to update
   */
  body: {
    now_password: string;
    new_password: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/password";
};

export type PostApiUserPasswordResponses = {
  /**
   * Password updated
   */
  200: {
    message: string;
  };
};

export type PostApiUserPasswordResponse =
  PostApiUserPasswordResponses[keyof PostApiUserPasswordResponses];

export type PostApiUserSuspendData = {
  /**
   * The suspension time
   */
  body: {
    time: number;
  };
  path?: never;
  query?: never;
  url: "/api/user/suspend";
};

export type PostApiUserSuspendResponses = {
  /**
   * User suspended
   */
  200: {
    message: string;
  };
};

export type PostApiUserSuspendResponse =
  PostApiUserSuspendResponses[keyof PostApiUserSuspendResponses];

export type PostApiRedtigerGameSettingsData = {
  body?: {
    gamesId: string;
    token?: string | null;
    userId: string;
    currency: string;
    language: string;
    mode: "real" | "demo" | "test";
    custom?: {
      siteId?: string;
      extras?: string;
    };
    userData?: {
      userId?: string | number;
      hash?: string;
      affiliate?: string | number;
      lang?: string | number;
      channel?: string | number;
      userType?: string;
      fingerprint?: string | number;
    };
  };
  path?: never;
  query?: never;
  url: "/api/redtiger/game/settings";
};

export type PostApiRedtigerGameSettingsErrors = {
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    error: {
      code: string;
      message: string;
    };
  };
};

export type PostApiRedtigerGameSettingsError =
  PostApiRedtigerGameSettingsErrors[keyof PostApiRedtigerGameSettingsErrors];

export type PostApiRedtigerGameSettingsResponses = {
  /**
   * Redtiger game settings
   */
  200: {
    success: boolean;
    result?: {
      user: {
        balance: {
          cash: string;
          freeBets?: string;
          bonus?: string;
        };
        canGamble: boolean;
        userId: number | string;
        sessionId: string;
        sessionNetPosition?: string;
        token: string;
        country?: string;
        currency?: {
          code: string;
          symbol: string;
        };
        stakes?: unknown;
        limits?: unknown;
        serverTime: string;
      };
      games?: {
        version?: string;
        gamesType?: string;
      };
      launcher?: {
        version?: string;
      };
      jackpots?: unknown;
    };
    error?: {
      code: string;
      message: string;
      details?: unknown;
    };
  };
};

export type PostApiRedtigerGameSettingsResponse =
  PostApiRedtigerGameSettingsResponses[keyof PostApiRedtigerGameSettingsResponses];

export type PostApiRedtigerGameSpinData = {
  body?: {
    token?: string;
    userId?: string;
    gamesId?: string;
    stake?: number | string;
    currency?: string;
    sessionId?: string;
    playMode?: "real" | "demo" | "test";
    actions?: Array<unknown>;
    custom?: {
      siteId?: string;
      extras?: string;
    };
    bonusId?: unknown;
    extras?: unknown;
    siteId?: string;
    userType?: string;
    lang?: string | number;
    fingerprint?: string | number;
    channel?: string | number;
    affiliate?: string | number;
    userData?: {
      userId?: string | number;
      hash?: string;
      affiliate?: string | number;
      lang?: string | number;
      channel?: string | number;
      userType?: string;
      fingerprint?: string | number;
    };
    roundId?: string | number;
    transactionId?: string | number;
  };
  path?: never;
  query?: never;
  url: "/api/redtiger/game/spin";
};

export type PostApiRedtigerGameSpinErrors = {
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    error: {
      code: string;
      message: string;
    };
  };
};

export type PostApiRedtigerGameSpinError =
  PostApiRedtigerGameSpinErrors[keyof PostApiRedtigerGameSpinErrors];

export type PostApiRedtigerGameSpinResponses = {
  /**
   * Redtiger spin result
   */
  200: {
    transactions: {
      roundId: number | string;
    };
    user: {
      balance: {
        cash: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
        freeBets?: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
        bonus?: {
          atStart?: string;
          afterBet?: string;
          atEnd: string;
        };
      };
      userId: number | string;
      sessionId: string;
      sessionNetPosition?: string;
      token: string;
      serverTime: string;
      canGamble?: boolean;
    };
    games: {
      win: {
        instantWin?: string;
        lines?: string;
        total: string;
      };
      stake: string;
      multiplier?: number;
      winLines?: Array<unknown>;
      reelsBuffer?: Array<Array<Array<number>>>;
      xpBreakdown?: {
        baseXp: number;
        bonusXp: number;
        totalXp: number;
      };
    };
    jackpots?: unknown;
    bonusChance?: unknown;
  };
};

export type PostApiRedtigerGameSpinResponse =
  PostApiRedtigerGameSpinResponses[keyof PostApiRedtigerGameSpinResponses];

export type GetApiGamesAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/all";
};

export type GetApiGamesAllResponses = {
  /**
   * A list of all games
   */
  200: Array<Game>;
};

export type GetApiGamesAllResponse =
  GetApiGamesAllResponses[keyof GetApiGamesAllResponses];

export type GetApiGamesCategoriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/categories";
};

export type GetApiGamesCategoriesResponses = {
  /**
   * A list of game categories
   */
  200: Array<string>;
};

export type GetApiGamesCategoriesResponse =
  GetApiGamesCategoriesResponses[keyof GetApiGamesCategoriesResponses];

export type GetApiGamesSearchData = {
  body?: never;
  path?: never;
  query?: {
    game_categories_slug?: string;
    page?: string;
    limit?: string;
  };
  url: "/api/games/search";
};

export type GetApiGamesSearchResponses = {
  /**
   * A list of games matching the search criteria
   */
  200: {
    games: Array<{
      id: string;
      name: string;
      title: string;
      developer: string;
      description?: string;
      category: string;
      tags: Array<string>;
      thumbnailUrl?: string;
      bannerUrl?: string;
      isActive?: boolean;
    }>;
    total: number;
  };
};

export type GetApiGamesSearchResponse =
  GetApiGamesSearchResponses[keyof GetApiGamesSearchResponses];

export type GetApiUserGamesData = {
  body?: never;
  path?: never;
  query: {
    game_categories_slug: string;
    page?: string;
    limit?: string;
  };
  url: "/api/user/games";
};

export type GetApiUserGamesResponses = {
  /**
   * A list of games for the current user (e.g., favorites or history)
   */
  200: {
    games: Array<{
      id: string;
      name: string;
      title: string;
      developer: string;
      description?: string;
      category: string;
      tags: Array<string>;
      thumbnailUrl?: string;
      bannerUrl?: string;
      isActive?: boolean;
    }>;
    total: number;
  };
};

export type GetApiUserGamesResponse =
  GetApiUserGamesResponses[keyof GetApiUserGamesResponses];

export type PostApiUserGamesFavoriteData = {
  body?: {
    add_game?: string;
    del_game?: string;
  };
  path?: never;
  query?: never;
  url: "/api/user/games/favorite";
};

export type PostApiUserGamesFavoriteResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type GetApiUserGamesFavoritesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/games/favorites";
};

export type GetApiUserGamesFavoritesResponses = {
  /**
   * A list of the user favorite game IDs
   */
  200: Array<string>;
};

export type GetApiUserGamesFavoritesResponse =
  GetApiUserGamesFavoritesResponses[keyof GetApiUserGamesFavoritesResponses];

export type PostApiGamesByIdEnterData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/games/{id}/enter";
};

export type PostApiGamesByIdEnterErrors = {
  /**
   * Not Found
   */
  404: {
    message: string;
  };
};

export type PostApiGamesByIdEnterError =
  PostApiGamesByIdEnterErrors[keyof PostApiGamesByIdEnterErrors];

export type PostApiGamesByIdEnterResponses = {
  /**
   * Game session details
   */
  200: {
    webUrl: string;
    gameConfig: {
      authToken: string;
      gameSessionId: string;
      userId: string;
      gameName: string;
      lang: string;
      currency: string;
      operator: string;
      provider: string;
      depositUrl: string;
      lobbyUrl: string;
      mode: string;
      rgsApiBase: string;
      cdn: string;
      baseCdn: string;
    };
  };
};

export type PostApiGamesByIdEnterResponse =
  PostApiGamesByIdEnterResponses[keyof PostApiGamesByIdEnterResponses];

export type PostApiGamesLeaveData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/games/leave";
};

export type PostApiGamesLeaveResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type GetApiVipMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/me";
};

export type GetApiVipMeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * VIP Info not found
   */
  404: unknown;
};

export type GetApiVipMeResponses = {
  /**
   * Returns the users VIP information, rank, and progress.
   */
  200: VipDetails;
};

export type GetApiVipMeResponse =
  GetApiVipMeResponses[keyof GetApiVipMeResponses];

export type GetApiVipLevelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/levels";
};

export type GetApiVipLevelsResponses = {
  /**
   * Returns the VIP level configuration table.
   */
  200: Array<VipLevel>;
};

export type GetApiVipLevelsResponse =
  GetApiVipLevelsResponses[keyof GetApiVipLevelsResponses];

export type GetApiVipRanksData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vip/ranks";
};

export type GetApiVipRanksResponses = {
  /**
   * Returns the VIP rank configuration table.
   */
  200: Array<VipRank>;
};

export type GetApiVipRanksResponse =
  GetApiVipRanksResponses[keyof GetApiVipRanksResponses];

export type GetApiGamespinsTopwinsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/gamespins/topwins";
};

export type GetApiGamespinsTopwinsErrors = {
  /**
   * Unauthorized
   */
  401: {
    message: string;
  };
};

export type GetApiGamespinsTopwinsError =
  GetApiGamespinsTopwinsErrors[keyof GetApiGamespinsTopwinsErrors];

export type GetApiGamespinsTopwinsResponses = {
  /**
   * A list of top winning game spins
   */
  200: Array<GameSpin>;
};

export type GetApiGamespinsTopwinsResponse =
  GetApiGamespinsTopwinsResponses[keyof GetApiGamespinsTopwinsResponses];

export type GetGs2cGeV3GameServiceData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/gs2c/ge/v3/gameService/";
};

export type GetGs2cGeV3GameServiceResponses = {
  /**
   * Cashino API Index
   */
  200: {
    message: string;
  };
};

export type GetGs2cGeV3GameServiceResponse =
  GetGs2cGeV3GameServiceResponses[keyof GetGs2cGeV3GameServiceResponses];

export type ClientOptions = {
  baseURL: "https://api.cashflowcasino.com" | (string & {});
};
