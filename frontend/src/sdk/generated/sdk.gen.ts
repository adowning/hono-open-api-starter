// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "./client";
import type {
  PostAuthLoginData,
  PostAuthLoginResponses,
  PostAuthSignupData,
  PostAuthSignupResponses,
  PostAuthLogoutData,
  PostAuthLogoutResponses,
  GetAuthMeData,
  GetAuthMeResponses,
  GetData,
  GetResponses,
  PostUpdatesCheckData,
  PostUpdatesCheckResponses,
  PostUpdatesUploadData,
  PostUpdatesUploadResponses,
  PostUpdatesUploadErrors,
  GetUpdatesDownloadByFilenameData,
  GetUpdatesDownloadByFilenameResponses,
  GetUpdatesDownloadByFilenameErrors,
  GetUpdatesVersionsByAppIdByPlatformData,
  GetUpdatesVersionsByAppIdByPlatformResponses,
  GetUpdatesVersionsByAppIdByPlatformErrors,
  GetUsersData,
  GetUsersResponses,
  PostEnterGameData,
  PostEnterGameResponses,
  PostGamesData,
  PostGamesResponses,
  PostSetupGameData,
  PostSetupGameResponses,
  GetSpinpageData,
  GetSpinpageResponses,
  PostSpinData,
  PostSpinResponses,
  GetFavoriteGameData,
  GetFavoriteGameResponses,
  PostEndGameSessionData,
  PostEndGameSessionResponses,
  PostEndGameSessionErrors,
  DeleteUsersByIdData,
  DeleteUsersByIdResponses,
  DeleteUsersByIdErrors,
  GetUsersByIdData,
  GetUsersByIdResponses,
  GetUsersByIdErrors,
  PatchUsersByIdData,
  PatchUsersByIdResponses,
  PatchUsersByIdErrors,
  GetUsersByIdCheckData,
  GetUsersByIdCheckResponses,
  GetUsersByIdCheckErrors,
  PostUsersByIdVerifyEmailData,
  PostUsersByIdVerifyEmailResponses,
  GetUsersByIdInfoData,
  GetUsersByIdInfoResponses,
  GetUsersByIdInfoErrors,
  GetUsersByIdVipinfoData,
  GetUsersByIdVipinfoResponses,
  GetUserAmountData,
  GetUserAmountResponses,
  PostUserChangeData,
  PostUserChangeResponses,
  PostUserEmailData,
  PostUserEmailResponses,
  PostUserPasswordData,
  PostUserPasswordResponses,
  PostUserSuspendData,
  PostUserSuspendResponses,
  PostRedtigerGameSettingsData,
  PostRedtigerGameSettingsResponses,
  PostRedtigerGameSettingsErrors,
  PostRedtigerGameSpinData,
  PostRedtigerGameSpinResponses,
  PostRedtigerGameSpinErrors,
  PostBalanceData,
  PostBalanceResponses,
  PostBalanceErrors,
  GetVipMeData,
  GetVipMeResponses,
  GetVipMeErrors,
  GetVipLevelsData,
  GetVipLevelsResponses,
  GetVipRanksData,
  GetVipRanksResponses,
  GetOperatorsData,
  GetOperatorsResponses,
  GetOperatorsErrors,
  GetOperatorsProductsData,
  GetOperatorsProductsResponses,
  GetOperatorsProductsErrors,
  GetGamesAllData,
  GetGamesAllResponses,
  GetGamesCategoriesData,
  GetGamesCategoriesResponses,
  GetMeData,
  GetMeResponses,
  GetGamesSearchData,
  GetGamesSearchResponses,
  GetUserGamesData,
  GetUserGamesResponses,
  PostUserGamesFavoriteData,
  PostUserGamesFavoriteResponses,
  GetUserGamesFavoritesData,
  GetUserGamesFavoritesResponses,
  PostGamesByIdEnterData,
  PostGamesByIdEnterResponses,
  PostGamesByIdEnterErrors,
  PostGamesLeaveData,
  PostGamesLeaveResponses,
  GetGamespinsTopwinsData,
  GetGamespinsTopwinsResponses,
  GetGamespinsTopwinsErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postAuthLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthLoginResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postAuthSignup = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthSignupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthSignupResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Logout current user
 */
export const postAuthLogout = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthLogoutResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/logout",
    ...options,
  });
};

/**
 * Get current user session
 */
export const getAuthMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthMeResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/me",
    ...options,
  });
};

export const get = <ThrowOnError extends boolean = false>(
  options?: Options<GetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/",
    ...options,
  });
};

export const postUpdatesCheck = <ThrowOnError extends boolean = false>(
  options: Options<PostUpdatesCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUpdatesCheckResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/updates/check",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Upload a new application version (APK or OTA bundle)
 */
export const postUpdatesUpload = <ThrowOnError extends boolean = false>(
  options?: Options<PostUpdatesUploadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostUpdatesUploadResponses,
    PostUpdatesUploadErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: "json",
    url: "/updates/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Download an update file (for local development only)
 */
export const getUpdatesDownloadByFilename = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUpdatesDownloadByFilenameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUpdatesDownloadByFilenameResponses,
    GetUpdatesDownloadByFilenameErrors,
    ThrowOnError
  >({
    url: "/updates/download/{filename}",
    ...options,
  });
};

/**
 * List all available versions for an app and platform
 */
export const getUpdatesVersionsByAppIdByPlatform = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUpdatesVersionsByAppIdByPlatformData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUpdatesVersionsByAppIdByPlatformResponses,
    GetUpdatesVersionsByAppIdByPlatformErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/updates/versions/{appId}/{platform}",
    ...options,
  });
};

export const getUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUsersResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/users",
    ...options,
  });
};

export const postEnterGame = <ThrowOnError extends boolean = false>(
  options?: Options<PostEnterGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostEnterGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/enter/game",
    ...options,
  });
};

export const postGames = <ThrowOnError extends boolean = false>(
  options?: Options<PostGamesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostGamesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/games",
    ...options,
  });
};

export const postSetupGame = <ThrowOnError extends boolean = false>(
  options?: Options<PostSetupGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostSetupGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/setup/game",
    ...options,
  });
};

export const getSpinpage = <ThrowOnError extends boolean = false>(
  options?: Options<GetSpinpageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSpinpageResponses,
    unknown,
    ThrowOnError
  >({
    url: "/spinpage",
    ...options,
  });
};

export const postSpin = <ThrowOnError extends boolean = false>(
  options?: Options<PostSpinData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostSpinResponses,
    unknown,
    ThrowOnError
  >({
    url: "/spin",
    ...options,
  });
};

export const getFavoriteGame = <ThrowOnError extends boolean = false>(
  options?: Options<GetFavoriteGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetFavoriteGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/favorite/game",
    ...options,
  });
};

/**
 * End the current game session
 */
export const postEndGameSession = <ThrowOnError extends boolean = false>(
  options?: Options<PostEndGameSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostEndGameSessionResponses,
    PostEndGameSessionErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/end-game-session",
    ...options,
  });
};

export const deleteUsersById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUsersByIdResponses,
    DeleteUsersByIdErrors,
    ThrowOnError
  >({
    url: "/users/{id}",
    ...options,
  });
};

export const getUsersById = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersByIdResponses,
    GetUsersByIdErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/users/{id}",
    ...options,
  });
};

export const patchUsersById = <ThrowOnError extends boolean = false>(
  options: Options<PatchUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUsersByIdResponses,
    PatchUsersByIdErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/users/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check if a user exists
 */
export const getUsersByIdCheck = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByIdCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersByIdCheckResponses,
    GetUsersByIdCheckErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/users/{id}/check",
    ...options,
  });
};

/**
 * Send email verification
 */
export const postUsersByIdVerifyEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostUsersByIdVerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUsersByIdVerifyEmailResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/users/{id}/verify-email",
    ...options,
  });
};

/**
 * Get user info
 */
export const getUsersByIdInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByIdInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersByIdInfoResponses,
    GetUsersByIdInfoErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/users/{id}/info",
    ...options,
  });
};

/**
 * Get user VIP info
 */
export const getUsersByIdVipinfo = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByIdVipinfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersByIdVipinfoResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/users/{id}/vipinfo",
    ...options,
  });
};

export const getUserAmount = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserAmountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserAmountResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/user/amount",
    ...options,
  });
};

export const postUserChange = <ThrowOnError extends boolean = false>(
  options: Options<PostUserChangeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUserChangeResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/user/change",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postUserEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostUserEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUserEmailResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/user/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postUserPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostUserPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUserPasswordResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/user/password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postUserSuspend = <ThrowOnError extends boolean = false>(
  options: Options<PostUserSuspendData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUserSuspendResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/user/suspend",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get redtiger settings for a game
 */
export const postRedtigerGameSettings = <ThrowOnError extends boolean = false>(
  options?: Options<PostRedtigerGameSettingsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostRedtigerGameSettingsResponses,
    PostRedtigerGameSettingsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/redtiger/game/settings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Perform a spin in a redtiger game
 */
export const postRedtigerGameSpin = <ThrowOnError extends boolean = false>(
  options?: Options<PostRedtigerGameSpinData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostRedtigerGameSpinResponses,
    PostRedtigerGameSpinErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/redtiger/game/spin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update current user balance
 */
export const postBalance = <ThrowOnError extends boolean = false>(
  options?: Options<PostBalanceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostBalanceResponses,
    PostBalanceErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/balance",
    ...options,
  });
};

/**
 * Get the authenticated user VIP details
 */
export const getVipMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetVipMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetVipMeResponses,
    GetVipMeErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/vip/me",
    ...options,
  });
};

/**
 * Get the configuration for all VIP levels
 */
export const getVipLevels = <ThrowOnError extends boolean = false>(
  options?: Options<GetVipLevelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetVipLevelsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/vip/levels",
    ...options,
  });
};

/**
 * Get the configuration for all VIP ranks
 */
export const getVipRanks = <ThrowOnError extends boolean = false>(
  options?: Options<GetVipRanksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetVipRanksResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/vip/ranks",
    ...options,
  });
};

/**
 * Get all operators
 */
export const getOperators = <ThrowOnError extends boolean = false>(
  options?: Options<GetOperatorsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOperatorsResponses,
    GetOperatorsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/operators",
    ...options,
  });
};

/**
 * Get all products for the current users operator
 */
export const getOperatorsProducts = <ThrowOnError extends boolean = false>(
  options?: Options<GetOperatorsProductsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOperatorsProductsResponses,
    GetOperatorsProductsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/operators/products",
    ...options,
  });
};

export const getGamesAll = <ThrowOnError extends boolean = false>(
  options?: Options<GetGamesAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGamesAllResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/games/all",
    ...options,
  });
};

export const getGamesCategories = <ThrowOnError extends boolean = false>(
  options?: Options<GetGamesCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGamesCategoriesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/games/categories",
    ...options,
  });
};

/**
 * Get current user session
 */
export const getMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMeResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/me",
    ...options,
  });
};

export const getGamesSearch = <ThrowOnError extends boolean = false>(
  options?: Options<GetGamesSearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGamesSearchResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/games/search",
    ...options,
  });
};

export const getUserGames = <ThrowOnError extends boolean = false>(
  options: Options<GetUserGamesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserGamesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/user/games",
    ...options,
  });
};

export const postUserGamesFavorite = <ThrowOnError extends boolean = false>(
  options?: Options<PostUserGamesFavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostUserGamesFavoriteResponses,
    unknown,
    ThrowOnError
  >({
    url: "/user/games/favorite",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getUserGamesFavorites = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserGamesFavoritesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserGamesFavoritesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/user/games/favorites",
    ...options,
  });
};

export const postGamesByIdEnter = <ThrowOnError extends boolean = false>(
  options: Options<PostGamesByIdEnterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostGamesByIdEnterResponses,
    PostGamesByIdEnterErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/games/{id}/enter",
    ...options,
  });
};

export const postGamesLeave = <ThrowOnError extends boolean = false>(
  options?: Options<PostGamesLeaveData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostGamesLeaveResponses,
    unknown,
    ThrowOnError
  >({
    url: "/games/leave",
    ...options,
  });
};

export const getGamespinsTopwins = <ThrowOnError extends boolean = false>(
  options?: Options<GetGamespinsTopwinsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGamespinsTopwinsResponses,
    GetGamespinsTopwinsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/gamespins/topwins",
    ...options,
  });
};
