// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "./client";
import type {
  PostApiAuthLoginData,
  PostApiAuthLoginResponses,
  PostApiAuthLoginErrors,
  PostApiAuthSignupData,
  PostApiAuthSignupResponses,
  PostApiAuthSignupErrors,
  PostApiAuthLogoutData,
  PostApiAuthLogoutResponses,
  PostApiAuthLogoutErrors,
  GetApiAuthMeData,
  GetApiAuthMeResponses,
  GetApiAuthMeErrors,
  GetApiData,
  GetApiResponses,
  PostApiUpdatesCheckData,
  PostApiUpdatesCheckResponses,
  PostApiUpdatesUploadData,
  PostApiUpdatesUploadResponses,
  PostApiUpdatesUploadErrors,
  GetApiUpdatesDownloadByFilenameData,
  GetApiUpdatesDownloadByFilenameResponses,
  GetApiUpdatesDownloadByFilenameErrors,
  GetApiUpdatesVersionsByAppIdByPlatformData,
  GetApiUpdatesVersionsByAppIdByPlatformResponses,
  GetApiUpdatesVersionsByAppIdByPlatformErrors,
  GetApiUsersData,
  GetApiUsersResponses,
  PostApiEnterGameData,
  PostApiEnterGameResponses,
  PostApiGamesData,
  PostApiGamesResponses,
  PostApiSetupGameData,
  PostApiSetupGameResponses,
  GetApiSpinpageData,
  GetApiSpinpageResponses,
  PostApiSpinData,
  PostApiSpinResponses,
  GetApiFavoriteGameData,
  GetApiFavoriteGameResponses,
  PostApiEndGameSessionData,
  PostApiEndGameSessionResponses,
  PostApiEndGameSessionErrors,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdResponses,
  DeleteApiUsersByIdErrors,
  GetApiUsersByIdData,
  GetApiUsersByIdResponses,
  GetApiUsersByIdErrors,
  PatchApiUsersByIdData,
  PatchApiUsersByIdResponses,
  PatchApiUsersByIdErrors,
  GetApiUsersByIdCheckData,
  GetApiUsersByIdCheckResponses,
  GetApiUsersByIdCheckErrors,
  PostApiUsersByIdVerifyEmailData,
  PostApiUsersByIdVerifyEmailResponses,
  GetApiUsersByIdInfoData,
  GetApiUsersByIdInfoResponses,
  GetApiUsersByIdInfoErrors,
  GetApiUsersByIdVipinfoData,
  GetApiUsersByIdVipinfoResponses,
  GetApiUserAmountData,
  GetApiUserAmountResponses,
  PostApiUserChangeData,
  PostApiUserChangeResponses,
  PostApiUserEmailData,
  PostApiUserEmailResponses,
  PostApiUserPasswordData,
  PostApiUserPasswordResponses,
  PostApiUserSuspendData,
  PostApiUserSuspendResponses,
  PostApiRedtigerGameSettingsData,
  PostApiRedtigerGameSettingsResponses,
  PostApiRedtigerGameSettingsErrors,
  PostApiRedtigerGameSpinData,
  PostApiRedtigerGameSpinResponses,
  PostApiRedtigerGameSpinErrors,
  GetApiGamesAllData,
  GetApiGamesAllResponses,
  GetApiGamesCategoriesData,
  GetApiGamesCategoriesResponses,
  GetApiGamesSearchData,
  GetApiGamesSearchResponses,
  GetApiUserGamesData,
  GetApiUserGamesResponses,
  PostApiUserGamesFavoriteData,
  PostApiUserGamesFavoriteResponses,
  GetApiUserGamesFavoritesData,
  GetApiUserGamesFavoritesResponses,
  PostApiGamesByIdEnterData,
  PostApiGamesByIdEnterResponses,
  PostApiGamesByIdEnterErrors,
  PostApiGamesLeaveData,
  PostApiGamesLeaveResponses,
  GetApiVipMeData,
  GetApiVipMeResponses,
  GetApiVipMeErrors,
  GetApiVipLevelsData,
  GetApiVipLevelsResponses,
  GetApiVipRanksData,
  GetApiVipRanksResponses,
  GetApiGamespinsTopwinsData,
  GetApiGamespinsTopwinsResponses,
  GetApiGamespinsTopwinsErrors,
  GetGs2cGeV3GameServiceData,
  GetGs2cGeV3GameServiceResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiAuthLogin = <ThrowOnError extends boolean = true>(
  options: Options<PostApiAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthLoginResponses,
    PostApiAuthLoginErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiAuthSignup = <ThrowOnError extends boolean = true>(
  options: Options<PostApiAuthSignupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthSignupResponses,
    PostApiAuthSignupErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/auth/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Logout current user
 */
export const postApiAuthLogout = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiAuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiAuthLogoutResponses,
    PostApiAuthLogoutErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/auth/logout",
    ...options,
  });
};

/**
 * Get current user session
 */
export const getApiAuthMe = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiAuthMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthMeResponses,
    GetApiAuthMeErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/auth/me",
    ...options,
  });
};

export const getApi = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/",
    ...options,
  });
};

export const postApiUpdatesCheck = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUpdatesCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUpdatesCheckResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/updates/check",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Upload a new application version (APK or OTA bundle)
 */
export const postApiUpdatesUpload = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiUpdatesUploadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiUpdatesUploadResponses,
    PostApiUpdatesUploadErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: "json",
    url: "/api/updates/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Download an update file (for local development only)
 */
export const getApiUpdatesDownloadByFilename = <
  ThrowOnError extends boolean = true,
>(
  options: Options<GetApiUpdatesDownloadByFilenameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUpdatesDownloadByFilenameResponses,
    GetApiUpdatesDownloadByFilenameErrors,
    ThrowOnError
  >({
    url: "/api/updates/download/{filename}",
    ...options,
  });
};

/**
 * List all available versions for an app and platform
 */
export const getApiUpdatesVersionsByAppIdByPlatform = <
  ThrowOnError extends boolean = true,
>(
  options: Options<GetApiUpdatesVersionsByAppIdByPlatformData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUpdatesVersionsByAppIdByPlatformResponses,
    GetApiUpdatesVersionsByAppIdByPlatformErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/updates/versions/{appId}/{platform}",
    ...options,
  });
};

export const getApiUsers = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUsersResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users",
    ...options,
  });
};

export const postApiEnterGame = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiEnterGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiEnterGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/enter/game",
    ...options,
  });
};

export const postApiGames = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiGamesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiGamesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/games",
    ...options,
  });
};

export const postApiSetupGame = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiSetupGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiSetupGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/setup/game",
    ...options,
  });
};

export const getApiSpinpage = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiSpinpageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiSpinpageResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/spinpage",
    ...options,
  });
};

export const postApiSpin = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiSpinData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiSpinResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/spin",
    ...options,
  });
};

export const getApiFavoriteGame = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiFavoriteGameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiFavoriteGameResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/favorite/game",
    ...options,
  });
};

/**
 * End the current game session
 */
export const postApiEndGameSession = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiEndGameSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiEndGameSessionResponses,
    PostApiEndGameSessionErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/end-game-session",
    ...options,
  });
};

export const deleteApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<DeleteApiUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiUsersByIdResponses,
    DeleteApiUsersByIdErrors,
    ThrowOnError
  >({
    url: "/api/users/{id}",
    ...options,
  });
};

export const getApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdResponses,
    GetApiUsersByIdErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}",
    ...options,
  });
};

export const patchApiUsersById = <ThrowOnError extends boolean = true>(
  options: Options<PatchApiUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiUsersByIdResponses,
    PatchApiUsersByIdErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check if a user exists
 */
export const getApiUsersByIdCheck = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdCheckResponses,
    GetApiUsersByIdCheckErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}/check",
    ...options,
  });
};

/**
 * Send email verification
 */
export const postApiUsersByIdVerifyEmail = <
  ThrowOnError extends boolean = true,
>(
  options: Options<PostApiUsersByIdVerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUsersByIdVerifyEmailResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}/verify-email",
    ...options,
  });
};

/**
 * Get user info
 */
export const getApiUsersByIdInfo = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdInfoResponses,
    GetApiUsersByIdInfoErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}/info",
    ...options,
  });
};

/**
 * Get user VIP info
 */
export const getApiUsersByIdVipinfo = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUsersByIdVipinfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdVipinfoResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/users/{id}/vipinfo",
    ...options,
  });
};

export const getApiUserAmount = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUserAmountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserAmountResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/amount",
    ...options,
  });
};

export const postApiUserChange = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserChangeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserChangeResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/change",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiUserEmail = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserEmailResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiUserPassword = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserPasswordResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiUserSuspend = <ThrowOnError extends boolean = true>(
  options: Options<PostApiUserSuspendData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserSuspendResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/suspend",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get redtiger settings for a game
 */
export const postApiRedtigerGameSettings = <
  ThrowOnError extends boolean = true,
>(
  options?: Options<PostApiRedtigerGameSettingsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiRedtigerGameSettingsResponses,
    PostApiRedtigerGameSettingsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/redtiger/game/settings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Perform a spin in a redtiger game
 */
export const postApiRedtigerGameSpin = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiRedtigerGameSpinData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiRedtigerGameSpinResponses,
    PostApiRedtigerGameSpinErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/redtiger/game/spin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiGamesAll = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiGamesAllResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/games/all",
    ...options,
  });
};

export const getApiGamesCategories = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiGamesCategoriesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/games/categories",
    ...options,
  });
};

export const getApiGamesSearch = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamesSearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiGamesSearchResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/games/search",
    ...options,
  });
};

export const getApiUserGames = <ThrowOnError extends boolean = true>(
  options: Options<GetApiUserGamesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUserGamesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/games",
    ...options,
  });
};

export const postApiUserGamesFavorite = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiUserGamesFavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiUserGamesFavoriteResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/user/games/favorite",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiUserGamesFavorites = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUserGamesFavoritesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserGamesFavoritesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/user/games/favorites",
    ...options,
  });
};

export const postApiGamesByIdEnter = <ThrowOnError extends boolean = true>(
  options: Options<PostApiGamesByIdEnterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiGamesByIdEnterResponses,
    PostApiGamesByIdEnterErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/games/{id}/enter",
    ...options,
  });
};

export const postApiGamesLeave = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiGamesLeaveData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiGamesLeaveResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/games/leave",
    ...options,
  });
};

/**
 * Get the authenticated user VIP details
 */
export const getApiVipMe = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiVipMeResponses,
    GetApiVipMeErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/vip/me",
    ...options,
  });
};

/**
 * Get the configuration for all VIP levels
 */
export const getApiVipLevels = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipLevelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiVipLevelsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/vip/levels",
    ...options,
  });
};

/**
 * Get the configuration for all VIP ranks
 */
export const getApiVipRanks = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiVipRanksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiVipRanksResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/vip/ranks",
    ...options,
  });
};

export const getApiGamespinsTopwins = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiGamespinsTopwinsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiGamespinsTopwinsResponses,
    GetApiGamespinsTopwinsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/gamespins/topwins",
    ...options,
  });
};

export const getGs2cGeV3GameService = <ThrowOnError extends boolean = true>(
  options?: Options<GetGs2cGeV3GameServiceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGs2cGeV3GameServiceResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/gs2c/ge/v3/gameService/",
    ...options,
  });
};
